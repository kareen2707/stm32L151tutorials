
se868k3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800e078  0800e078  0001e078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d0  0800e4d0  00020248  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4d0  0800e4d0  00020248  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4d0  0800e4d0  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d0  0800e4d0  0001e4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4d4  0800e4d4  0001e4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800e4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d4c  20000248  0800e720  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001f94  0800e720  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234d0  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004de3  00000000  00000000  00043741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  00048528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  00049f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df99  00000000  00000000  0004b680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018a85  00000000  00000000  00069619  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a988a  00000000  00000000  0008209e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007478  00000000  00000000  0012b9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000248 	.word	0x20000248
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e060 	.word	0x0800e060

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000024c 	.word	0x2000024c
 800017c:	0800e060 	.word	0x0800e060

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002e2:	f1a4 0401 	sub.w	r4, r4, #1
 80002e6:	d1e9      	bne.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__gesf2>:
 8000bac:	f04f 3cff 	mov.w	ip, #4294967295
 8000bb0:	e006      	b.n	8000bc0 <__cmpsf2+0x4>
 8000bb2:	bf00      	nop

08000bb4 <__lesf2>:
 8000bb4:	f04f 0c01 	mov.w	ip, #1
 8000bb8:	e002      	b.n	8000bc0 <__cmpsf2+0x4>
 8000bba:	bf00      	nop

08000bbc <__cmpsf2>:
 8000bbc:	f04f 0c01 	mov.w	ip, #1
 8000bc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	bf18      	it	ne
 8000bd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd6:	d011      	beq.n	8000bfc <__cmpsf2+0x40>
 8000bd8:	b001      	add	sp, #4
 8000bda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bde:	bf18      	it	ne
 8000be0:	ea90 0f01 	teqne	r0, r1
 8000be4:	bf58      	it	pl
 8000be6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bea:	bf88      	it	hi
 8000bec:	17c8      	asrhi	r0, r1, #31
 8000bee:	bf38      	it	cc
 8000bf0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bf4:	bf18      	it	ne
 8000bf6:	f040 0001 	orrne.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	d102      	bne.n	8000c08 <__cmpsf2+0x4c>
 8000c02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c06:	d105      	bne.n	8000c14 <__cmpsf2+0x58>
 8000c08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c0c:	d1e4      	bne.n	8000bd8 <__cmpsf2+0x1c>
 8000c0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c12:	d0e1      	beq.n	8000bd8 <__cmpsf2+0x1c>
 8000c14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_cfrcmple>:
 8000c1c:	4684      	mov	ip, r0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	4661      	mov	r1, ip
 8000c22:	e7ff      	b.n	8000c24 <__aeabi_cfcmpeq>

08000c24 <__aeabi_cfcmpeq>:
 8000c24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c26:	f7ff ffc9 	bl	8000bbc <__cmpsf2>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	bf48      	it	mi
 8000c2e:	f110 0f00 	cmnmi.w	r0, #0
 8000c32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c34 <__aeabi_fcmpeq>:
 8000c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c38:	f7ff fff4 	bl	8000c24 <__aeabi_cfcmpeq>
 8000c3c:	bf0c      	ite	eq
 8000c3e:	2001      	moveq	r0, #1
 8000c40:	2000      	movne	r0, #0
 8000c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c46:	bf00      	nop

08000c48 <__aeabi_fcmplt>:
 8000c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c4c:	f7ff ffea 	bl	8000c24 <__aeabi_cfcmpeq>
 8000c50:	bf34      	ite	cc
 8000c52:	2001      	movcc	r0, #1
 8000c54:	2000      	movcs	r0, #0
 8000c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fcmple>:
 8000c5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c60:	f7ff ffe0 	bl	8000c24 <__aeabi_cfcmpeq>
 8000c64:	bf94      	ite	ls
 8000c66:	2001      	movls	r0, #1
 8000c68:	2000      	movhi	r0, #0
 8000c6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6e:	bf00      	nop

08000c70 <__aeabi_fcmpge>:
 8000c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c74:	f7ff ffd2 	bl	8000c1c <__aeabi_cfrcmple>
 8000c78:	bf94      	ite	ls
 8000c7a:	2001      	movls	r0, #1
 8000c7c:	2000      	movhi	r0, #0
 8000c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c82:	bf00      	nop

08000c84 <__aeabi_fcmpgt>:
 8000c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c88:	f7ff ffc8 	bl	8000c1c <__aeabi_cfrcmple>
 8000c8c:	bf34      	ite	cc
 8000c8e:	2001      	movcc	r0, #1
 8000c90:	2000      	movcs	r0, #0
 8000c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c96:	bf00      	nop

08000c98 <__aeabi_fcmpun>:
 8000c98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca4:	d102      	bne.n	8000cac <__aeabi_fcmpun+0x14>
 8000ca6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fcmpun+0x26>
 8000cac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cb0:	d102      	bne.n	8000cb8 <__aeabi_fcmpun+0x20>
 8000cb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cb6:	d102      	bne.n	8000cbe <__aeabi_fcmpun+0x26>
 8000cb8:	f04f 0000 	mov.w	r0, #0
 8000cbc:	4770      	bx	lr
 8000cbe:	f04f 0001 	mov.w	r0, #1
 8000cc2:	4770      	bx	lr

08000cc4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_DMA_Init+0x60>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <MX_DMA_Init+0x60>)
 8000cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_DMA_Init+0x60>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_DMA_Init+0x60>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <MX_DMA_Init+0x60>)
 8000ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_DMA_Init+0x60>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f001 f80b 	bl	8001d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d04:	200f      	movs	r0, #15
 8000d06:	f001 f824 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	2035      	movs	r0, #53	; 0x35
 8000d10:	f001 f803 	bl	8001d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000d14:	2035      	movs	r0, #53	; 0x35
 8000d16:	f001 f81c 	bl	8001d52 <HAL_NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	4801      	ldr	r0, [pc, #4]	; (8000d40 <vApplicationStackOverflowHook+0x18>)
 8000d3a:	f001 fc45 	bl	80025c8 <HAL_GPIO_WritePin>
	while(1){
 8000d3e:	e7fe      	b.n	8000d3e <vApplicationStackOverflowHook+0x16>
 8000d40:	40020400 	.word	0x40020400

08000d44 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <vApplicationMallocFailedHook+0x14>)
 8000d50:	f001 fc3a 	bl	80025c8 <HAL_GPIO_WritePin>
		while(1){
 8000d54:	e7fe      	b.n	8000d54 <vApplicationMallocFailedHook+0x10>
 8000d56:	bf00      	nop
 8000d58:	40020400 	.word	0x40020400

08000d5c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vApplicationGetIdleTaskMemory+0x28>)
 8000d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000268 	.word	0x20000268
 8000d88:	200002bc 	.word	0x200002bc

08000d8c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <vApplicationGetTimerTaskMemory+0x30>)
 8000da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200003bc 	.word	0x200003bc
 8000dbc:	20000410 	.word	0x20000410

08000dc0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b09e      	sub	sp, #120	; 0x78
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	MX_FATFS_Init();
 8000dc6:	f005 f979 	bl	80060bc <MX_FATFS_Init>

	UTC_Info *test_utc = (UTC_Info *) pvPortMalloc(sizeof(UTC_Info));
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f00a fff2 	bl	800bdb4 <pvPortMalloc>
 8000dd0:	6778      	str	r0, [r7, #116]	; 0x74
	Coords *test_cords = (Coords *) pvPortMalloc(sizeof(Coords));
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	f00a ffee 	bl	800bdb4 <pvPortMalloc>
 8000dd8:	6738      	str	r0, [r7, #112]	; 0x70
	GPRMC_Infos *test_gprmc = (GPRMC_Infos *) pvPortMalloc(sizeof(GPRMC_Infos));
 8000dda:	2010      	movs	r0, #16
 8000ddc:	f00a ffea 	bl	800bdb4 <pvPortMalloc>
 8000de0:	66f8      	str	r0, [r7, #108]	; 0x6c
	//uint8_t utc_date = 0;
	//char *gnrmc_status = (char *) pvPortMalloc(2);

	test_utc->utc = 0;
 8000de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
	test_utc->hh = 0;
 8000de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
	test_utc->mm = 0;
 8000dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
	test_utc->ss = 0;
 8000df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]

	test_cords->lat = 0;
 8000dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
	test_cords->lon = 0;
 8000e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
	test_cords->ew = 0;
 8000e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	731a      	strb	r2, [r3, #12]
	test_cords->ns = 0;
 8000e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e12:	2200      	movs	r2, #0
 8000e14:	711a      	strb	r2, [r3, #4]

	test_gprmc->utc = test_utc;
 8000e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e1a:	601a      	str	r2, [r3, #0]
	test_gprmc->status = 'V';
 8000e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e1e:	2256      	movs	r2, #86	; 0x56
 8000e20:	711a      	strb	r2, [r3, #4]
	test_gprmc->xyz = test_cords;
 8000e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e26:	609a      	str	r2, [r3, #8]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_FREERTOS_Init+0x118>)
 8000e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerOnce, NULL);
 8000e30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f007 ffe1 	bl	8008e00 <osTimerCreate>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_FREERTOS_Init+0x11c>)
 8000e42:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 3, uint32_t);
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_FREERTOS_Init+0x120>)
 8000e46:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  //osMessageQDef(myQueue01, sizeof(struct GPRMC_Infos), GPRMC_Infos);
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 f8d1 	bl	8008ffe <osMessageCreate>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_FREERTOS_Init+0x124>)
 8000e60:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 64);
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_FREERTOS_Init+0x128>)
 8000e64:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e68:	461d      	mov	r5, r3
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f007 ff5f 	bl	8008d40 <osThreadCreate>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_FREERTOS_Init+0x12c>)
 8000e86:	601a      	str	r2, [r3, #0]

  /* definition and creation of consumerTask */
  osThreadDef(consumerTask, microSD, osPriorityNormal, 0, 200);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_FREERTOS_Init+0x130>)
 8000e8a:	f107 041c 	add.w	r4, r7, #28
 8000e8e:	461d      	mov	r5, r3
 8000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  consumerTaskHandle = osThreadCreate(osThread(consumerTask), NULL);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 ff4c 	bl	8008d40 <osThreadCreate>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_FREERTOS_Init+0x134>)
 8000eac:	601a      	str	r2, [r3, #0]

  /* definition and creation of producer1 */
  osThreadDef(producer1, gnss, osPriorityNormal, 0, 300);
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_FREERTOS_Init+0x138>)
 8000eb0:	463c      	mov	r4, r7
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  producer1Handle = osThreadCreate(osThread(producer1), (void *) test_gprmc);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 ff3b 	bl	8008d40 <osThreadCreate>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_FREERTOS_Init+0x13c>)
 8000ece:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ed0:	bf00      	nop
 8000ed2:	3778      	adds	r7, #120	; 0x78
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed8:	08000ff5 	.word	0x08000ff5
 8000edc:	20001930 	.word	0x20001930
 8000ee0:	0800e078 	.word	0x0800e078
 8000ee4:	20001938 	.word	0x20001938
 8000ee8:	0800e094 	.word	0x0800e094
 8000eec:	20001924 	.word	0x20001924
 8000ef0:	0800e0c0 	.word	0x0800e0c0
 8000ef4:	20001928 	.word	0x20001928
 8000ef8:	0800e0e8 	.word	0x0800e0e8
 8000efc:	20001934 	.word	0x20001934

08000f00 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  //MX_FATFS_Init();
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f007 ff65 	bl	8008dd8 <osDelay>
 8000f0e:	e7fb      	b.n	8000f08 <StartDefaultTask+0x8>

08000f10 <microSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_microSD */
void microSD(void const * argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	osEvent rx;
	GPRMC_Infos *rx_gprmc;
	uint8_t byteswritten;
	char utc_data[10];

	if(f_mount(&SDFatFS, (TCHAR const*) SDPath, 1) == FR_OK){ // 1. Register a work area
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4921      	ldr	r1, [pc, #132]	; (8000fa0 <microSD+0x90>)
 8000f1c:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <microSD+0x94>)
 8000f1e:	f007 f9c9 	bl	80082b4 <f_mount>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10a      	bne.n	8000f3e <microSD+0x2e>
			if(f_open(&SDFile, "lines.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK){ // 2. Creating a new file to write it later
 8000f28:	220a      	movs	r2, #10
 8000f2a:	491f      	ldr	r1, [pc, #124]	; (8000fa8 <microSD+0x98>)
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <microSD+0x9c>)
 8000f2e:	f007 fa25 	bl	800837c <f_open>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <microSD+0x2e>
				fileCreated = 1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <microSD+0xa0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
		}

  /* Infinite loop */
  for(;;)
  {
	  byteswritten = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
	  if(fileCreated){
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <microSD+0xa0>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d026      	beq.n	8000f98 <microSD+0x88>
		  rx = osMessageGet(myQueue01Handle, 10);
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <microSD+0xa4>)
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	220a      	movs	r2, #10
 8000f54:	4618      	mov	r0, r3
 8000f56:	f008 f8bb 	bl	80090d0 <osMessageGet>
		  rx_gprmc = (GPRMC_Infos *)rx.value.p;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
		  //utc_data[0] = rx_gprmc->utc->utc;
		  itoa(rx_gprmc->utc->utc, utc_data, 10);
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f107 010c 	add.w	r1, r7, #12
 8000f68:	220a      	movs	r2, #10
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00b f944 	bl	800c1f8 <itoa>
		  //utc_data[2] = (uint8_t) rx_gprmc->utc->ss;
		  //if(f_write(&SDFile, rx_gprmc->utc->utc, sizeof(rx_gprmc->utc->utc), (void *)&byteswritten)){
		  //if(f_write(&SDFile, (const void *)str1, strlen(str1), (void *)&byteswritten)){
			  //f_close(&SDFile);
		  //}
		  f_write(&SDFile, utc_data, sizeof(utc_data), (void *) &byteswritten);
 8000f70:	f107 0317 	add.w	r3, r7, #23
 8000f74:	f107 010c 	add.w	r1, r7, #12
 8000f78:	220a      	movs	r2, #10
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <microSD+0x9c>)
 8000f7c:	f007 fbc3 	bl	8008706 <f_write>
		  f_write(&SDFile, "\r\n", strlen("\r\n"), (void *)&byteswritten);
 8000f80:	f107 0317 	add.w	r3, r7, #23
 8000f84:	2202      	movs	r2, #2
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <microSD+0xa8>)
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <microSD+0x9c>)
 8000f8a:	f007 fbbc 	bl	8008706 <f_write>
		  byteswritten = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
		  f_sync(&SDFile);
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <microSD+0x9c>)
 8000f94:	f007 fd5b 	bl	8008a4e <f_sync>
	  }

    osDelay(200);
 8000f98:	20c8      	movs	r0, #200	; 0xc8
 8000f9a:	f007 ff1d 	bl	8008dd8 <osDelay>
	  byteswritten = 0;
 8000f9e:	e7ce      	b.n	8000f3e <microSD+0x2e>
 8000fa0:	2000192c 	.word	0x2000192c
 8000fa4:	20001b6c 	.word	0x20001b6c
 8000fa8:	0800e104 	.word	0x0800e104
 8000fac:	2000193c 	.word	0x2000193c
 8000fb0:	20000264 	.word	0x20000264
 8000fb4:	20001938 	.word	0x20001938
 8000fb8:	0800e110 	.word	0x0800e110

08000fbc <gnss>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gnss */
void gnss(void const * argument)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gnss */
	GPRMC_Infos * gnrmc_data = (GPRMC_Infos *) argument;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

    if(!parse_gprmc(gnrmc_data, nmea_test)){
 8000fc8:	4908      	ldr	r1, [pc, #32]	; (8000fec <gnss+0x30>)
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f81c 	bl	8001008 <parse_gprmc>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <gnss+0x28>
    	osMessagePut(myQueue01Handle, (uint32_t)gnrmc_data, 10);
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <gnss+0x34>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68f9      	ldr	r1, [r7, #12]
 8000fdc:	220a      	movs	r2, #10
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 f836 	bl	8009050 <osMessagePut>
    }
    osDelay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f007 fef7 	bl	8008dd8 <osDelay>
    if(!parse_gprmc(gnrmc_data, nmea_test)){
 8000fea:	e7ed      	b.n	8000fc8 <gnss+0xc>
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20001938 	.word	0x20001938

08000ff4 <Callback01>:
  /* USER CODE END gnss */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  
  /* USER CODE END Callback01 */
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <parse_gprmc>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int32_t parse_gprmc (GPRMC_Infos *gprmc_data, uint8_t *NMEA){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b0ed      	sub	sp, #436	; 0x1b4
 800100c:	af00      	add	r7, sp, #0
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	6018      	str	r0, [r3, #0]
 8001012:	463b      	mov	r3, r7
 8001014:	6019      	str	r1, [r3, #0]
//int32_t parse_gprmc (uint8_t *buffer, uint8_t *NMEA){
//int32_t parse_gprmc (uint8_t *NMEA){

	  uint8_t app[MAX_MSG_LEN][MAX_MSG_LEN];
	  uint8_t valid_msg = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

	  //ParseStatus_Typedef status = PARSE_FAIL;
	  int32_t status = 1; // fail
 800101c:	2301      	movs	r3, #1
 800101e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	  if(NMEA == NULL)
 8001022:	463b      	mov	r3, r7
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <parse_gprmc+0x28>
	    return status;
 800102a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800102e:	e12c      	b.n	800128a <parse_gprmc+0x282>

	  /* clear the app[][] buffer */
	  for (uint8_t i=0; i<MAX_MSG_LEN; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 8001036:	e012      	b.n	800105e <parse_gprmc+0x56>
	    memset(app[i], 0, MAX_MSG_LEN);
 8001038:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 800103c:	f107 0108 	add.w	r1, r7, #8
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	2214      	movs	r2, #20
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00b f8df 	bl	800c212 <memset>
	  for (uint8_t i=0; i<MAX_MSG_LEN; i++) {
 8001054:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8001058:	3301      	adds	r3, #1
 800105a:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 800105e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8001062:	2b13      	cmp	r3, #19
 8001064:	d9e8      	bls.n	8001038 <parse_gprmc+0x30>
	  }

	  for (unsigned i = 0, j = 0, k = 0; NMEA[i] != '\n' && i < strlen((char *)NMEA) - 1; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001078:	e061      	b.n	800113e <parse_gprmc+0x136>
	  {
	    if ((NMEA[i] == ',') || (NMEA[i] == '*')) {
 800107a:	463b      	mov	r3, r7
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b2c      	cmp	r3, #44	; 0x2c
 8001088:	d007      	beq.n	800109a <parse_gprmc+0x92>
 800108a:	463b      	mov	r3, r7
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b2a      	cmp	r3, #42	; 0x2a
 8001098:	d135      	bne.n	8001106 <parse_gprmc+0xfe>
	      app[j][k] = '\0';
 800109a:	f107 0108 	add.w	r1, r7, #8
 800109e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	18ca      	adds	r2, r1, r3
 80010ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80010b0:	4413      	add	r3, r2
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

	      if (strcmp((char *)app[0], "$GNRMC") == 0)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4976      	ldr	r1, [pc, #472]	; (8001294 <parse_gprmc+0x28c>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f85f 	bl	8000180 <strcmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10b      	bne.n	80010e0 <parse_gprmc+0xd8>
	      {
	        j++;
 80010c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	        k = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	        valid_msg = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	        continue;
 80010de:	e029      	b.n	8001134 <parse_gprmc+0x12c>
	      }
	      else {
	        while (NMEA[i++] != '\n');
 80010e0:	bf00      	nop
 80010e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 80010ec:	463a      	mov	r2, r7
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d1f4      	bne.n	80010e2 <parse_gprmc+0xda>
	        j = k = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80010fe:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001102:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	      }
	    }
	    app[j][k++] = NMEA[i];
 8001106:	463b      	mov	r3, r7
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800110e:	4413      	add	r3, r2
 8001110:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001114:	1c51      	adds	r1, r2, #1
 8001116:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800111a:	781c      	ldrb	r4, [r3, #0]
 800111c:	f107 0008 	add.w	r0, r7, #8
 8001120:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8001124:	460b      	mov	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4403      	add	r3, r0
 800112e:	4413      	add	r3, r2
 8001130:	4622      	mov	r2, r4
 8001132:	701a      	strb	r2, [r3, #0]
	  for (unsigned i = 0, j = 0, k = 0; NMEA[i] != '\n' && i < strlen((char *)NMEA) - 1; i++)
 8001134:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001138:	3301      	adds	r3, #1
 800113a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800113e:	463b      	mov	r3, r7
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d009      	beq.n	8001162 <parse_gprmc+0x15a>
 800114e:	463b      	mov	r3, r7
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f7ff f81f 	bl	8000194 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	3b01      	subs	r3, #1
 800115a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800115e:	429a      	cmp	r2, r3
 8001160:	d38b      	bcc.n	800107a <parse_gprmc+0x72>
	  }

	  if (valid_msg == 1) {
 8001162:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001166:	2b01      	cmp	r3, #1
 8001168:	f040 808d 	bne.w	8001286 <parse_gprmc+0x27e>

		  gprmc_data->utc->utc = atoi((const char *) app[1]);
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	3314      	adds	r3, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f00a fff6 	bl	800c16a <atoi>
 800117e:	4603      	mov	r3, r0
 8001180:	6023      	str	r3, [r4, #0]
		  gprmc_data->utc->hh =  atoi((const char *) app[1])/10000;
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	3314      	adds	r3, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f00a ffee 	bl	800c16a <atoi>
 800118e:	4603      	mov	r3, r0
 8001190:	1d3a      	adds	r2, r7, #4
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	4940      	ldr	r1, [pc, #256]	; (8001298 <parse_gprmc+0x290>)
 8001198:	fb81 0103 	smull	r0, r1, r1, r3
 800119c:	1309      	asrs	r1, r1, #12
 800119e:	17db      	asrs	r3, r3, #31
 80011a0:	1acb      	subs	r3, r1, r3
 80011a2:	6053      	str	r3, [r2, #4]
		  gprmc_data->utc->mm =  (gprmc_data->utc->utc - (gprmc_data->utc->hh * 10000))/100;
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4939      	ldr	r1, [pc, #228]	; (800129c <parse_gprmc+0x294>)
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	1d3a      	adds	r2, r7, #4
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4937      	ldr	r1, [pc, #220]	; (80012a0 <parse_gprmc+0x298>)
 80011c4:	fb81 0103 	smull	r0, r1, r1, r3
 80011c8:	1149      	asrs	r1, r1, #5
 80011ca:	17db      	asrs	r3, r3, #31
 80011cc:	1acb      	subs	r3, r1, r3
 80011ce:	6093      	str	r3, [r2, #8]
		  gprmc_data->utc->ss = gprmc_data->utc->utc - ((gprmc_data->utc->hh * 10000) + (gprmc_data->utc->mm*100));
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80011e4:	fb02 f203 	mul.w	r2, r2, r3
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	fb00 f303 	mul.w	r3, r0, r3
 80011f6:	441a      	add	r2, r3
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1a8a      	subs	r2, r1, r2
 8001200:	60da      	str	r2, [r3, #12]
		  gprmc_data->status = app[2][0];
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	711a      	strb	r2, [r3, #4]
		  gprmc_data->xyz->lat = atoff((const char *) app[3]);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689c      	ldr	r4, [r3, #8]
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	333c      	adds	r3, #60	; 0x3c
 800121c:	4618      	mov	r0, r3
 800121e:	f00a ffa1 	bl	800c164 <atoff>
 8001222:	4603      	mov	r3, r0
 8001224:	6023      	str	r3, [r4, #0]
		  gprmc_data->xyz->ns = app[4][0];
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8001234:	711a      	strb	r2, [r3, #4]
		  gprmc_data->xyz->lon = atoff((const char *)app[5]);
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689c      	ldr	r4, [r3, #8]
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	3364      	adds	r3, #100	; 0x64
 8001242:	4618      	mov	r0, r3
 8001244:	f00a ff8e 	bl	800c164 <atoff>
 8001248:	4603      	mov	r3, r0
 800124a:	60a3      	str	r3, [r4, #8]
		  gprmc_data->xyz->ns = app[6][0];
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800125a:	711a      	strb	r2, [r3, #4]
		  gprmc_data->date = atoi((const char *) app[9]);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	33b4      	adds	r3, #180	; 0xb4
 8001262:	4618      	mov	r0, r3
 8001264:	f00a ff81 	bl	800c16a <atoi>
 8001268:	4602      	mov	r2, r0
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60da      	str	r2, [r3, #12]
		  valid_msg = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		  status = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <parse_gprmc+0x29c>)
 8001282:	f001 f9b9 	bl	80025f8 <HAL_GPIO_TogglePin>
	  }

	  return status;
 8001286:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
}
 800128a:	4618      	mov	r0, r3
 800128c:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	0800e114 	.word	0x0800e114
 8001298:	68db8bad 	.word	0x68db8bad
 800129c:	ffffd8f0 	.word	0xffffd8f0
 80012a0:	51eb851f 	.word	0x51eb851f
 80012a4:	40020400 	.word	0x40020400

080012a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a27      	ldr	r2, [pc, #156]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a21      	ldr	r2, [pc, #132]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <MX_GPIO_Init+0xd0>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_GPIO_Init+0xd0>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <MX_GPIO_Init+0xd0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_GPIO_Init+0xd0>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_FORCE_ON_GPIO_Port, GNSS_FORCE_ON_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2108      	movs	r1, #8
 8001322:	4816      	ldr	r0, [pc, #88]	; (800137c <MX_GPIO_Init+0xd4>)
 8001324:	f001 f950 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_GPIO_Init+0xd8>)
 8001330:	f001 f94a 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GNSS_FORCE_ON_Pin;
 8001334:	2308      	movs	r3, #8
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GNSS_FORCE_ON_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <MX_GPIO_Init+0xd4>)
 800134c:	f000 ffae 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001350:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_GPIO_Init+0xd8>)
 800136a:	f000 ff9f 	bl	80022ac <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40020800 	.word	0x40020800
 8001380:	40020400 	.word	0x40020400

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 fbbb 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f810 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f7ff ff8a 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f7ff fc96 	bl	8000cc4 <MX_DMA_Init>
  MX_RTC_Init();
 8001398:	f000 f884 	bl	80014a4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800139c:	f000 f8f2 	bl	8001584 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80013a0:	f000 faf0 	bl	8001984 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80013a4:	f7ff fd0c 	bl	8000dc0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013a8:	f007 fca7 	bl	8008cfa <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <main+0x28>
	...

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	; 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2234      	movs	r2, #52	; 0x34
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a ff27 	bl	800c212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xc4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <SystemClock_Config+0xc4>)
 80013e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ea:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013ec:	230a      	movs	r3, #10
 80013ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f4:	2310      	movs	r3, #16
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001400:	2300      	movs	r3, #0
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001404:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800140a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f909 	bl	800262c <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001420:	f000 f839 	bl	8001496 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2303      	movs	r3, #3
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fc24 	bl	8002c8c <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800144a:	f000 f824 	bl	8001496 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800144e:	2301      	movs	r3, #1
 8001450:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fe64 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001466:	f000 f816 	bl	8001496 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40007000 	.word	0x40007000

08001478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d101      	bne.n	800148e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800148a:	f000 fb53 	bl	8001b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
	...

080014a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_RTC_Init+0xac>)
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <MX_RTC_Init+0xb0>)
 80014c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <MX_RTC_Init+0xac>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_RTC_Init+0xac>)
 80014ca:	227f      	movs	r2, #127	; 0x7f
 80014cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_RTC_Init+0xac>)
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_RTC_Init+0xac>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_RTC_Init+0xac>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_RTC_Init+0xac>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <MX_RTC_Init+0xac>)
 80014e8:	f001 fee6 	bl	80032b8 <HAL_RTC_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80014f2:	f7ff ffd0 	bl	8001496 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x11;
 80014f6:	2311      	movs	r3, #17
 80014f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80014fe:	2300      	movs	r3, #0
 8001500:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2201      	movs	r2, #1
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <MX_RTC_Init+0xac>)
 8001512:	f001 ff4c 	bl	80033ae <HAL_RTC_SetTime>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff ffbb 	bl	8001496 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001520:	2302      	movs	r3, #2
 8001522:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8001524:	2303      	movs	r3, #3
 8001526:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x11;
 8001528:	2311      	movs	r3, #17
 800152a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800152c:	2320      	movs	r3, #32
 800152e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_RTC_Init+0xac>)
 8001538:	f002 f84a 	bl	80035d0 <HAL_RTC_SetDate>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001542:	f7ff ffa8 	bl	8001496 <Error_Handler>
  }

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20001da0 	.word	0x20001da0
 8001554:	40002800 	.word	0x40002800

08001558 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_RTC_MspInit+0x24>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d102      	bne.n	8001570 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RTC_MspInit+0x28>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40002800 	.word	0x40002800
 8001580:	424706d8 	.word	0x424706d8

08001584 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sd_mmc;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 800158a:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <MX_SDIO_SD_Init+0x3c>)
 800158c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <MX_SDIO_SD_Init+0x38>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]

}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20001e04 	.word	0x20001e04
 80015c0:	40012c00 	.word	0x40012c00

080015c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <HAL_SD_MspInit+0x124>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d17b      	bne.n	80016de <HAL_SD_MspInit+0x11a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_SD_MspInit+0x128>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_SD_MspInit+0x128>)
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_SD_MspInit+0x128>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_SD_MspInit+0x128>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_SD_MspInit+0x128>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_SD_MspInit+0x128>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_SD_MspInit+0x128>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a34      	ldr	r2, [pc, #208]	; (80016ec <HAL_SD_MspInit+0x128>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_SD_MspInit+0x128>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800162e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001632:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001640:	230c      	movs	r3, #12
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4829      	ldr	r0, [pc, #164]	; (80016f0 <HAL_SD_MspInit+0x12c>)
 800164c:	f000 fe2e 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001650:	2304      	movs	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001660:	230c      	movs	r3, #12
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4822      	ldr	r0, [pc, #136]	; (80016f4 <HAL_SD_MspInit+0x130>)
 800166c:	f000 fe1e 	bl	80022ac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SD_MMC Init */
    hdma_sd_mmc.Instance = DMA2_Channel4;
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_SD_MspInit+0x134>)
 8001672:	4a22      	ldr	r2, [pc, #136]	; (80016fc <HAL_SD_MspInit+0x138>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_sd_mmc.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_SD_MspInit+0x134>)
 8001678:	2210      	movs	r2, #16
 800167a:	605a      	str	r2, [r3, #4]
    hdma_sd_mmc.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_SD_MspInit+0x134>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
    hdma_sd_mmc.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_SD_MspInit+0x134>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]
    hdma_sd_mmc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_SD_MspInit+0x134>)
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	611a      	str	r2, [r3, #16]
    hdma_sd_mmc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_SD_MspInit+0x134>)
 8001692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001696:	615a      	str	r2, [r3, #20]
    hdma_sd_mmc.Init.Mode = DMA_NORMAL;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_SD_MspInit+0x134>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
    hdma_sd_mmc.Init.Priority = DMA_PRIORITY_HIGH;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sd_mmc) != HAL_OK)
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016a8:	f000 fb62 	bl	8001d70 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_SD_MspInit+0xf2>
    {
      Error_Handler();
 80016b2:	f7ff fef0 	bl	8001496 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sd_mmc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sd_mmc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_SD_MspInit+0x134>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2105      	movs	r1, #5
 80016d2:	202d      	movs	r0, #45	; 0x2d
 80016d4:	f000 fb21 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016d8:	202d      	movs	r0, #45	; 0x2d
 80016da:	f000 fb3a 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	20001dc0 	.word	0x20001dc0
 80016fc:	40026444 	.word	0x40026444

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_MspInit+0x64>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <HAL_MspInit+0x64>)
 800170c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001710:	6253      	str	r3, [r2, #36]	; 0x24
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_MspInit+0x64>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_MspInit+0x64>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_MspInit+0x64>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_MspInit+0x64>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_MspInit+0x64>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_MspInit+0x64>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6253      	str	r3, [r2, #36]	; 0x24
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_MspInit+0x64>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	210f      	movs	r1, #15
 8001752:	f06f 0001 	mvn.w	r0, #1
 8001756:	f000 fae0 	bl	8001d1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	201c      	movs	r0, #28
 800177e:	f000 facc 	bl	8001d1a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8001782:	201c      	movs	r0, #28
 8001784:	f000 fae5 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_InitTick+0xa0>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_InitTick+0xa0>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6253      	str	r3, [r2, #36]	; 0x24
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_InitTick+0xa0>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fc2c 	bl	8003008 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b0:	f001 fc02 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80017b4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_InitTick+0xa4>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0xa8>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_InitTick+0xa8>)
 80017ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_InitTick+0xa8>)
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_InitTick+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_InitTick+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <HAL_InitTick+0xa8>)
 80017e8:	f003 fb6e 	bl	8004ec8 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <HAL_InitTick+0xa8>)
 80017f4:	f003 fb9c 	bl	8004f30 <HAL_TIM_Base_Start_IT>
 80017f8:	4603      	mov	r3, r0
 80017fa:	e000      	b.n	80017fe <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3730      	adds	r7, #48	; 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	431bde83 	.word	0x431bde83
 8001810:	20001e88 	.word	0x20001e88

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <HardFault_Handler+0x4>

08001826 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <BusFault_Handler+0x4>

08001832 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <UsageFault_Handler+0x4>

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Channel5_IRQHandler+0x10>)
 800184a:	f000 fc51 	bl	80020f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20001ec4 	.word	0x20001ec4

08001858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM2_IRQHandler+0x10>)
 800185e:	f003 fb8a 	bl	8004f76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20001e88 	.word	0x20001e88

0800186c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <SDIO_IRQHandler+0x10>)
 8001872:	f002 fa9d 	bl	8003db0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20001e04 	.word	0x20001e04

08001880 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
		if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	2b81      	cmp	r3, #129	; 0x81
 800188a:	d003      	beq.n	8001894 <DMA2_Channel4_IRQHandler+0x14>
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	2b82      	cmp	r3, #130	; 0x82
 8001892:	d105      	bne.n	80018a0 <DMA2_Channel4_IRQHandler+0x20>
			 HAL_DMA_IRQHandler(hsd.hdmarx);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fc29 	bl	80020f0 <HAL_DMA_IRQHandler>
	  /* USER CODE END DMA2_Channel4_IRQn 0 */
	  //HAL_DMA_IRQHandler(&hdma_sd_mmc);
	  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

	  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800189e:	e00c      	b.n	80018ba <DMA2_Channel4_IRQHandler+0x3a>
		else if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) || (hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK))){
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	2b90      	cmp	r3, #144	; 0x90
 80018a6:	d003      	beq.n	80018b0 <DMA2_Channel4_IRQHandler+0x30>
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	2ba0      	cmp	r3, #160	; 0xa0
 80018ae:	d104      	bne.n	80018ba <DMA2_Channel4_IRQHandler+0x3a>
			 HAL_DMA_IRQHandler(hsd.hdmatx);
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <DMA2_Channel4_IRQHandler+0x40>)
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fc1b 	bl	80020f0 <HAL_DMA_IRQHandler>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20001e04 	.word	0x20001e04

080018c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x50>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x16>
		heap_end = &end;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <_sbrk+0x50>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <_sbrk+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <_sbrk+0x50>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_sbrk+0x50>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	466a      	mov	r2, sp
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d907      	bls.n	80018fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ee:	f00a fc41 	bl	800c174 <__errno>
 80018f2:	4602      	mov	r2, r0
 80018f4:	230c      	movs	r3, #12
 80018f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	e006      	b.n	800190c <_sbrk+0x48>
	}

	heap_end += incr;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <_sbrk+0x50>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <_sbrk+0x50>)
 8001908:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000810 	.word	0x20000810
 8001918:	20001f98 	.word	0x20001f98

0800191c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <SystemInit+0x5c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SystemInit+0x5c>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x5c>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4911      	ldr	r1, [pc, #68]	; (8001978 <SystemInit+0x5c>)
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <SystemInit+0x60>)
 8001934:	4013      	ands	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <SystemInit+0x5c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <SystemInit+0x5c>)
 800193e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001942:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001946:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SystemInit+0x5c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SystemInit+0x5c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <SystemInit+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <SystemInit+0x5c>)
 800195a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800195e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SystemInit+0x5c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x64>)
 8001968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196c:	609a      	str	r2, [r3, #8]
#endif
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	88ffc00c 	.word	0x88ffc00c
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_USART1_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019bc:	f003 fc4c 	bl	8005258 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f7ff fd66 	bl	8001496 <Error_Handler>
  }

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20001f08 	.word	0x20001f08
 80019d4:	40013800 	.word	0x40013800

080019d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <HAL_UART_MspInit+0xcc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d14f      	bne.n	8001a9a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a24      	ldr	r2, [pc, #144]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_UART_MspInit+0xd0>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4819      	ldr	r0, [pc, #100]	; (8001aac <HAL_UART_MspInit+0xd4>)
 8001a48:	f000 fc30 	bl	80022ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0xdc>)
 8001a50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a72:	2220      	movs	r2, #32
 8001a74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a80:	f000 f976 	bl	8001d70 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001a8a:	f7ff fd04 	bl	8001496 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_UART_MspInit+0xd8>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	20001ec4 	.word	0x20001ec4
 8001ab4:	40026058 	.word	0x40026058

08001ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ab8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001aba:	e003      	b.n	8001ac4 <LoopCopyDataInit>

08001abc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001abe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ac0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ac2:	3104      	adds	r1, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ac4:	480a      	ldr	r0, [pc, #40]	; (8001af0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ac8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001acc:	d3f6      	bcc.n	8001abc <CopyDataInit>
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ad0:	e002      	b.n	8001ad8 <LoopFillZerobss>

08001ad2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ad4:	f842 3b04 	str.w	r3, [r2], #4

08001ad8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ada:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001adc:	d3f9      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ade:	f7ff ff1d 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f00a fb4d 	bl	800c180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae6:	f7ff fc4d 	bl	8001384 <main>
  bx lr
 8001aea:	4770      	bx	lr
  ldr r3, =_sidata
 8001aec:	0800e4d8 	.word	0x0800e4d8
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001af4:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 8001af8:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 8001afc:	20001f94 	.word	0x20001f94

08001b00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_IRQHandler>

08001b02 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f8f9 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fe28 	bl	8001768 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e001      	b.n	8001b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b24:	f7ff fdec 	bl	8001700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_IncTick+0x1c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_IncTick+0x1c>)
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20001f48 	.word	0x20001f48
 8001b54:	2000006c 	.word	0x2000006c

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_GetTick+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20001f48 	.word	0x20001f48

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d004      	beq.n	8001b90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_Delay+0x40>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b90:	bf00      	nop
 8001b92:	f7ff ffe1 	bl	8001b58 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d8f7      	bhi.n	8001b92 <HAL_Delay+0x26>
  {
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000006c 	.word	0x2000006c

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff4f 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff64 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ffb2 	bl	8001ca0 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff81 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff57 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e059      	b.n	8001e36 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_DMA_Init+0xd0>)
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d80f      	bhi.n	8001dae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_DMA_Init+0xd4>)
 8001d96:	4413      	add	r3, r2
 8001d98:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <HAL_DMA_Init+0xd8>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	009a      	lsls	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Init+0xdc>)
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dac:	e00e      	b.n	8001dcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_DMA_Init+0xe0>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_DMA_Init+0xd8>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_DMA_Init+0xe4>)
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40026407 	.word	0x40026407
 8001e44:	bffd9ff8 	.word	0xbffd9ff8
 8001e48:	cccccccd 	.word	0xcccccccd
 8001e4c:	40026000 	.word	0x40026000
 8001e50:	bffd9bf8 	.word	0xbffd9bf8
 8001e54:	40026400 	.word	0x40026400

08001e58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e052      	b.n	8001f10 <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_DMA_DeInit+0xc4>)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d80f      	bhi.n	8001ea6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_DMA_DeInit+0xc8>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_DMA_DeInit+0xcc>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <HAL_DMA_DeInit+0xd0>)
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea4:	e00e      	b.n	8001ec4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_DMA_DeInit+0xd4>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_DMA_DeInit+0xcc>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_DMA_DeInit+0xd8>)
 8001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 021c 	and.w	r2, r3, #28
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40026407 	.word	0x40026407
 8001f20:	bffd9ff8 	.word	0xbffd9ff8
 8001f24:	cccccccd 	.word	0xcccccccd
 8001f28:	40026000 	.word	0x40026000
 8001f2c:	bffd9bf8 	.word	0xbffd9bf8
 8001f30:	40026400 	.word	0x40026400

08001f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Start_IT+0x20>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e04b      	b.n	8001fec <HAL_DMA_Start_IT+0xb8>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d13a      	bne.n	8001fde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f95e 	bl	800224e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 020e 	orr.w	r2, r2, #14
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00f      	b.n	8001fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 020a 	orr.w	r2, r2, #10
 8001fca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e005      	b.n	8001fea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2204      	movs	r2, #4
 8002010:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e022      	b.n	8002064 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 020e 	bic.w	r2, r2, #14
 800202c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 021c 	and.w	r2, r3, #28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d005      	beq.n	8002092 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	e029      	b.n	80020e6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020e 	bic.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 021c 	and.w	r2, r3, #28
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
    }
  }
  return status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 031c 	and.w	r3, r3, #28
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d026      	beq.n	800216a <HAL_DMA_IRQHandler+0x7a>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d021      	beq.n	800216a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 021c 	and.w	r2, r3, #28
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2104      	movs	r1, #4
 8002152:	fa01 f202 	lsl.w	r2, r1, r2
 8002156:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d071      	beq.n	8002244 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002168:	e06c      	b.n	8002244 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 031c 	and.w	r3, r3, #28
 8002172:	2202      	movs	r2, #2
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02e      	beq.n	80021dc <HAL_DMA_IRQHandler+0xec>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d029      	beq.n	80021dc <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10b      	bne.n	80021ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 020a 	bic.w	r2, r2, #10
 80021a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 021c 	and.w	r2, r3, #28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2102      	movs	r1, #2
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d038      	beq.n	8002244 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021da:	e033      	b.n	8002244 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f003 031c 	and.w	r3, r3, #28
 80021e4:	2208      	movs	r2, #8
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02a      	beq.n	8002246 <HAL_DMA_IRQHandler+0x156>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d025      	beq.n	8002246 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 020e 	bic.w	r2, r2, #14
 8002208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 021c 	and.w	r2, r3, #28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002244:	bf00      	nop
 8002246:	bf00      	nop
}
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 021c 	and.w	r2, r3, #28
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d108      	bne.n	8002292 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002290:	e007      	b.n	80022a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	60da      	str	r2, [r3, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022c2:	e160      	b.n	8002586 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8152 	beq.w	8002580 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x40>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	6939      	ldr	r1, [r7, #16]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d00b      	beq.n	8002388 <HAL_GPIO_Init+0xdc>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237c:	2b11      	cmp	r3, #17
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b12      	cmp	r3, #18
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80ac 	beq.w	8002580 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_GPIO_Init+0x2f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_GPIO_Init+0x2f4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_GPIO_Init+0x2f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_GPIO_Init+0x2f8>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_GPIO_Init+0x2fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d025      	beq.n	80024b8 <HAL_GPIO_Init+0x20c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x300>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d01f      	beq.n	80024b4 <HAL_GPIO_Init+0x208>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_GPIO_Init+0x304>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d019      	beq.n	80024b0 <HAL_GPIO_Init+0x204>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x308>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x200>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1fc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_GPIO_Init+0x310>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1f8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <HAL_GPIO_Init+0x314>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1f4>
 800249c:	2306      	movs	r3, #6
 800249e:	e00c      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a0:	2307      	movs	r3, #7
 80024a2:	e00a      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e008      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x20e>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ca:	4936      	ldr	r1, [pc, #216]	; (80025a4 <HAL_GPIO_Init+0x2f8>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_GPIO_Init+0x318>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024fc:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_GPIO_Init+0x318>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_GPIO_Init+0x318>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x318>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f ae97 	bne.w	80022c4 <HAL_GPIO_Init+0x18>
  } 
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021400 	.word	0x40021400
 80025c0:	40021800 	.word	0x40021800
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002618:	e002      	b.n	8002620 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e31d      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002648:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d07b      	beq.n	8002756 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d006      	beq.n	8002672 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d06a      	beq.n	8002754 <HAL_RCC_OscConfig+0x128>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d166      	bne.n	8002754 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e2f7      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e02d      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x96>
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xb8>
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a70      	ldr	r2, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fa28 	bl	8001b58 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fa24 	bl	8001b58 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2ad      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fa14 	bl	8001b58 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fa10 	bl	8001b58 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e299      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002746:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05a      	beq.n	8002818 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_OscConfig+0x176>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x160>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e276      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	493d      	ldr	r1, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a0:	e03a      	b.n	8002818 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d020      	beq.n	80027ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCC_OscConfig+0x268>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff f9d2 	bl	8001b58 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff f9ce 	bl	8001b58 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e257      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	492a      	ldr	r1, [pc, #168]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_OscConfig+0x268>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7ff f9b1 	bl	8001b58 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fa:	f7ff f9ad 	bl	8001b58 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e236      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80b8 	beq.w	8002996 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d170      	bne.n	800290e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x218>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e21a      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002850:	429a      	cmp	r2, r3
 8002852:	d921      	bls.n	8002898 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fc05 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e208      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4906      	ldr	r1, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4901      	ldr	r1, [pc, #4]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
 800288e:	e020      	b.n	80028d2 <HAL_RCC_OscConfig+0x2a6>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002898:	4ba4      	ldr	r3, [pc, #656]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	49a1      	ldr	r1, [pc, #644]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028aa:	4ba0      	ldr	r3, [pc, #640]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	499c      	ldr	r1, [pc, #624]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fbd0 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1d3      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	0b5b      	lsrs	r3, r3, #13
 80028d8:	3301      	adds	r3, #1
 80028da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028e2:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0912      	lsrs	r2, r2, #4
 80028e8:	f002 020f 	and.w	r2, r2, #15
 80028ec:	4990      	ldr	r1, [pc, #576]	; (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028ee:	5c8a      	ldrb	r2, [r1, r2]
 80028f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028f2:	4a90      	ldr	r2, [pc, #576]	; (8002b34 <HAL_RCC_OscConfig+0x508>)
 80028f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028f6:	4b90      	ldr	r3, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x50c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe ff34 	bl	8001768 <HAL_InitTick>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d045      	beq.n	8002996 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	e1b5      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d029      	beq.n	800296a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <HAL_RCC_OscConfig+0x510>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff f91c 	bl	8001b58 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7ff f918 	bl	8001b58 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1a1      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002936:	4b7d      	ldr	r3, [pc, #500]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4977      	ldr	r1, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4972      	ldr	r1, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x510>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff f8f2 	bl	8001b58 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7ff f8ee 	bl	8001b58 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e177      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800298a:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d030      	beq.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x514>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7ff f8d2 	bl	8001b58 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff f8ce 	bl	8001b58 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e157      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x38c>
 80029d6:	e015      	b.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_OscConfig+0x514>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff f8bb 	bl	8001b58 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7ff f8b7 	bl	8001b58 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e140      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80b5 	beq.w	8002b7c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6253      	str	r3, [r2, #36]	; 0x24
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7ff f87f 	bl	8001b58 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7ff f87b 	bl	8001b58 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e104      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x466>
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a90:	e02d      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x488>
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab2:	e01c      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7ff f82f 	bl	8001b58 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7ff f82b 	bl	8001b58 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0b2      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCC_OscConfig+0x4d2>
 8002b20:	e023      	b.n	8002b6a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff f819 	bl	8001b58 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b28:	e019      	b.n	8002b5e <HAL_RCC_OscConfig+0x532>
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	0800e198 	.word	0x0800e198
 8002b34:	20000064 	.word	0x20000064
 8002b38:	20000068 	.word	0x20000068
 8002b3c:	42470020 	.word	0x42470020
 8002b40:	42470680 	.word	0x42470680
 8002b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff f806 	bl	8001b58 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e08d      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d079      	beq.n	8002c78 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d056      	beq.n	8002c38 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d13b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe ffde 	bl	8001b58 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe ffda 	bl	8001b58 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e063      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4319      	orrs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	492b      	ldr	r1, [pc, #172]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe ffb9 	bl	8001b58 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe ffb5 	bl	8001b58 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e03e      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x5be>
 8002c08:	e036      	b.n	8002c78 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe ffa2 	bl	8001b58 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe ff9e 	bl	8001b58 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e027      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5ec>
 8002c36:	e01f      	b.n	8002c78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e01a      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470060 	.word	0x42470060

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e11a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d919      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x34>
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a89      	ldr	r2, [pc, #548]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b87      	ldr	r3, [pc, #540]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 0201 	bic.w	r2, r3, #1
 8002cc8:	4985      	ldr	r1, [pc, #532]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0f9      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	497a      	ldr	r1, [pc, #488]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 808e 	beq.w	8002e2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0d7      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0cb      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0bf      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0b7      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	495c      	ldr	r1, [pc, #368]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe feee 	bl	8001b58 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe fee6 	bl	8001b58 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e09b      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
 8002daa:	e03e      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fe fecf 	bl	8001b58 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e084      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
 8002dd8:	e027      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11d      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe feb8 	bl	8001b58 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e06d      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x158>
 8002e06:	e010      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fea6 	bl	8001b58 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e05b      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e1e:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d219      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1be>
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	4923      	ldr	r1, [pc, #140]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e034      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4917      	ldr	r1, [pc, #92]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490f      	ldr	r1, [pc, #60]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f823 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x25c>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc4c 	bl	8001768 <HAL_InitTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	0800e198 	.word	0x0800e198
 8002eec:	20000064 	.word	0x20000064
 8002ef0:	20000068 	.word	0x20000068

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d006      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x24>
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d007      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x2a>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d12c      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	e037      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f1a:	613b      	str	r3, [r7, #16]
      break;
 8002f1c:	e034      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	0c9b      	lsrs	r3, r3, #18
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f28:	5cd3      	ldrb	r3, [r2, r3]
 8002f2a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0d9b      	lsrs	r3, r3, #22
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	3301      	adds	r3, #1
 8002f36:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f48:	fb02 f203 	mul.w	r2, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e007      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f5a:	fb02 f203 	mul.w	r2, r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	613b      	str	r3, [r7, #16]
      break;
 8002f6a:	e00d      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0b5b      	lsrs	r3, r3, #13
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	613b      	str	r3, [r7, #16]
      break;
 8002f86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f88:	693b      	ldr	r3, [r7, #16]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	016e3600 	.word	0x016e3600
 8002fa0:	0800e18c 	.word	0x0800e18c

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000064 	.word	0x20000064

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff2 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	0800e1a8 	.word	0x0800e1a8

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4601      	mov	r1, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4a03      	ldr	r2, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	0800e1a8 	.word	0x0800e1a8

08003008 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	220f      	movs	r2, #15
 8003016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_GetClockConfig+0x58>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_GetClockConfig+0x58>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetClockConfig+0x58>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_GetClockConfig+0x58>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetClockConfig+0x5c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40023800 	.word	0x40023800
 8003064:	40023c00 	.word	0x40023c00

08003068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d12c      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e016      	b.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6253      	str	r3, [r2, #36]	; 0x24
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030cc:	d105      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030d4:	d101      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80030d6:	2301      	movs	r3, #1
 80030d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 0201 	bic.w	r2, r3, #1
 80030f4:	490b      	ldr	r1, [pc, #44]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80b2 	beq.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b5a      	ldr	r3, [pc, #360]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6253      	str	r3, [r2, #36]	; 0x24
 800315a:	4b54      	ldr	r3, [pc, #336]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d118      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4d      	ldr	r2, [pc, #308]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe fce9 	bl	8001b58 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e008      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318a:	f7fe fce5 	bl	8001b58 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	; 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e083      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80031b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d00f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031cc:	d108      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031da:	d101      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e061      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80031e0:	4b32      	ldr	r3, [pc, #200]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d034      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x132>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d02d      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d027      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003212:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fc92 	bl	8001b58 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003236:	e00a      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fc8e 	bl	8001b58 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e02a      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003266:	d10a      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003278:	490c      	ldr	r1, [pc, #48]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800328c:	4313      	orrs	r3, r2
 800328e:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	424706dc 	.word	0x424706dc

080032b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06d      	b.n	80033a6 <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7f5b      	ldrb	r3, [r3, #29]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f93c 	bl	8001558 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	22ca      	movs	r2, #202	; 0xca
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2253      	movs	r2, #83	; 0x53
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa82 	bl	8003800 <RTC_EnterInitMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2204      	movs	r2, #4
 800330e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e048      	b.n	80033a6 <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003326:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	041a      	lsls	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003372:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ae:	b590      	push	{r4, r7, lr}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	7f1b      	ldrb	r3, [r3, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_RTC_SetTime+0x18>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0a3      	b.n	800350e <HAL_RTC_SetTime+0x160>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2202      	movs	r2, #2
 80033d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d126      	bne.n	8003426 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa2f 	bl	8003854 <RTC_ByteToBcd2>
 80033f6:	4603      	mov	r3, r0
 80033f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa28 	bl	8003854 <RTC_ByteToBcd2>
 8003404:	4603      	mov	r3, r0
 8003406:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003408:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	789b      	ldrb	r3, [r3, #2]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa20 	bl	8003854 <RTC_ByteToBcd2>
 8003414:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003416:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	78db      	ldrb	r3, [r3, #3]
 800341e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e018      	b.n	8003458 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2200      	movs	r2, #0
 8003438:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003446:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800344c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	78db      	ldrb	r3, [r3, #3]
 8003452:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	22ca      	movs	r2, #202	; 0xca
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2253      	movs	r2, #83	; 0x53
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f9c9 	bl	8003800 <RTC_EnterInitMode>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2204      	movs	r2, #4
 8003480:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e040      	b.n	800350e <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003496:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800349a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f966 	bl	80037a6 <HAL_RTC_WaitForSynchro>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2204      	movs	r2, #4
 80034ec:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e00a      	b.n	800350e <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}

08003516 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	b29a      	uxth	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003546:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800354a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11a      	bne.n	80035c6 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f97c 	bl	8003892 <RTC_Bcd2ToByte>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f973 	bl	8003892 <RTC_Bcd2ToByte>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f96a 	bl	8003892 <RTC_Bcd2ToByte>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	7f1b      	ldrb	r3, [r3, #28]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_RTC_SetDate+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e08d      	b.n	8003704 <HAL_RTC_SetDate+0x134>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2202      	movs	r2, #2
 80035f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <HAL_RTC_SetDate+0x48>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	f023 0310 	bic.w	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	330a      	adds	r3, #10
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11c      	bne.n	8003658 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	78db      	ldrb	r3, [r3, #3]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f916 	bl	8003854 <RTC_ByteToBcd2>
 8003628:	4603      	mov	r3, r0
 800362a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f90f 	bl	8003854 <RTC_ByteToBcd2>
 8003636:	4603      	mov	r3, r0
 8003638:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800363a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	789b      	ldrb	r3, [r3, #2]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f907 	bl	8003854 <RTC_ByteToBcd2>
 8003646:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003648:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e00e      	b.n	8003676 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	78db      	ldrb	r3, [r3, #3]
 800365c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003664:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800366a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	22ca      	movs	r2, #202	; 0xca
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2253      	movs	r2, #83	; 0x53
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8ba 	bl	8003800 <RTC_EnterInitMode>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2204      	movs	r2, #4
 800369e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e02c      	b.n	8003704 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c8:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f86b 	bl	80037a6 <HAL_RTC_WaitForSynchro>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2204      	movs	r2, #4
 80036e2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00a      	b.n	8003704 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003702:	2300      	movs	r3, #0
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd90      	pop	{r4, r7, pc}

0800370c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003726:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	0b5b      	lsrs	r3, r3, #13
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11a      	bne.n	800379c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	78db      	ldrb	r3, [r3, #3]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f891 	bl	8003892 <RTC_Bcd2ToByte>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f888 	bl	8003892 <RTC_Bcd2ToByte>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f87f 	bl	8003892 <RTC_Bcd2ToByte>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11c      	bne.n	80037f6 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037cc:	f7fe f9c4 	bl	8001b58 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037d2:	e009      	b.n	80037e8 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80037d4:	f7fe f9c0 	bl	8001b58 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e2:	d901      	bls.n	80037e8 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e007      	b.n	80037f8 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ee      	beq.n	80037d4 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d119      	bne.n	800384a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f04f 32ff 	mov.w	r2, #4294967295
 800381e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003820:	f7fe f99a 	bl	8001b58 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003826:	e009      	b.n	800383c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003828:	f7fe f996 	bl	8001b58 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003836:	d901      	bls.n	800383c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e007      	b.n	800384c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003866:	e005      	b.n	8003874 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	3b0a      	subs	r3, #10
 8003872:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	2b09      	cmp	r3, #9
 8003878:	d8f6      	bhi.n	8003868 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	b2da      	uxtb	r2, r3
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	4313      	orrs	r3, r2
 8003886:	b2db      	uxtb	r3, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	4603      	mov	r3, r0
 800389a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	b2db      	uxtb	r3, r3
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd fe69 	bl	80015c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f814 	bl	8003928 <HAL_SD_InitCard>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e00a      	b.n	8003920 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af04      	add	r7, sp, #16
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003944:	2376      	movs	r3, #118	; 0x76
 8003946:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681d      	ldr	r5, [r3, #0]
 800394c:	466c      	mov	r4, sp
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003960:	4628      	mov	r0, r5
 8003962:	f001 fe4f 	bl	8005604 <SDIO_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e03a      	b.n	80039ee <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_SD_InitCard+0xd0>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fe84 	bl	8005690 <SDIO_PowerState_ON>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800398e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e029      	b.n	80039ee <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_SD_InitCard+0xd0>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 ffd5 	bl	8004950 <SD_PowerON>
 80039a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e013      	b.n	80039ee <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fef4 	bl	80047b4 <SD_InitCard>
 80039cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3728      	adds	r7, #40	; 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdb0      	pop	{r4, r5, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	422580a0 	.word	0x422580a0

080039fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0c9      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 80c2 	bne.w	8003bb6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d907      	bls.n	8003a56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0b0      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3380      	adds	r3, #128	; 0x80
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	025b      	lsls	r3, r3, #9
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	f7fe fa45 	bl	8001f34 <HAL_DMA_Start_IT>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e06b      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d002      	beq.n	8003af4 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	025b      	lsls	r3, r3, #9
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fe55 	bl	80057ac <SDMMC_CmdBlockLength>
 8003b02:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e046      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	025b      	lsls	r3, r3, #9
 8003b34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b36:	2390      	movs	r3, #144	; 0x90
 8003b38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f107 0210 	add.w	r2, r7, #16
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 fe00 	bl	8005756 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d90a      	bls.n	8003b72 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2282      	movs	r2, #130	; 0x82
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fe63 	bl	8005834 <SDMMC_CmdReadMultiBlock>
 8003b6e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b70:	e009      	b.n	8003b86 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2281      	movs	r2, #129	; 0x81
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fe36 	bl	80057f0 <SDMMC_CmdReadSingleBlock>
 8003b84:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e002      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3730      	adds	r7, #48	; 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	080045d1 	.word	0x080045d1
 8003bc4:	08004641 	.word	0x08004641
 8003bc8:	004005ff 	.word	0x004005ff
 8003bcc:	4225858c 	.word	0x4225858c

08003bd0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0ce      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f040 80c7 	bne.w	8003d94 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	441a      	add	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d907      	bls.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0b5      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	4a53      	ldr	r2, [pc, #332]	; (8003da0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2200      	movs	r2, #0
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d002      	beq.n	8003c74 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	025b      	lsls	r3, r3, #9
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fd95 	bl	80057ac <SDMMC_CmdBlockLength>
 8003c82:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a46      	ldr	r2, [pc, #280]	; (8003da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e075      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d90a      	bls.n	8003cc6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	22a0      	movs	r2, #160	; 0xa0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fdfd 	bl	80058bc <SDMMC_CmdWriteMultiBlock>
 8003cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cc4:	e009      	b.n	8003cda <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2290      	movs	r2, #144	; 0x90
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 fdd0 	bl	8005878 <SDMMC_CmdWriteSingleBlock>
 8003cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e047      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3380      	adds	r3, #128	; 0x80
 8003d18:	461a      	mov	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	025b      	lsls	r3, r3, #9
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	f7fe f908 	bl	8001f34 <HAL_DMA_Start_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01c      	beq.n	8003d64 <HAL_SD_WriteBlocks_DMA+0x194>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e018      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d70:	2390      	movs	r3, #144	; 0x90
 8003d72:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f107 0210 	add.w	r2, r7, #16
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 fce3 	bl	8005756 <SDIO_ConfigData>

      return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	080045a9 	.word	0x080045a9
 8003da4:	08004641 	.word	0x08004641
 8003da8:	004005ff 	.word	0x004005ff
 8003dac:	4225858c 	.word	0x4225858c

08003db0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_SD_IRQHandler+0x2e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 ffd0 	bl	8004d7c <SD_Read_IT>
 8003ddc:	e165      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 808f 	beq.w	8003f0c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003e06:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003e0a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d039      	beq.n	8003e9a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_SD_IRQHandler+0x8a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fd5e 	bl	8005900 <SDMMC_CmdStopTransfer>
 8003e44:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f92f 	bl	80040bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <HAL_SD_IRQHandler+0xda>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f002 fa16 	bl	80062bc <HAL_SD_RxCpltCallback>
 8003e90:	e10b      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f002 fa08 	bl	80062a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e98:	e107      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8102 	beq.w	80040aa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fd23 	bl	8005900 <SDMMC_CmdStopTransfer>
 8003eba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8f4 	bl	80040bc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 80e5 	bne.w	80040aa <HAL_SD_IRQHandler+0x2fa>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 80df 	bne.w	80040aa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0208 	bic.w	r2, r2, #8
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f002 f9cf 	bl	80062a8 <HAL_SD_TxCpltCallback>
}
 8003f0a:	e0ce      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_SD_IRQHandler+0x17c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 ff7a 	bl	8004e1e <SD_Write_IT>
 8003f2a:	e0be      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f32:	f240 233a 	movw	r3, #570	; 0x23a
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80b6 	beq.w	80040aa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	f043 0202 	orr.w	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f043 0208 	orr.w	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f240 723a 	movw	r2, #1850	; 0x73a
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003fd8:	f023 0302 	bic.w	r3, r3, #2
 8003fdc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fc8c 	bl	8005900 <SDMMC_CmdStopTransfer>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f855 	bl	80040bc <HAL_SD_ErrorCallback>
}
 8004012:	e04a      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d045      	beq.n	80040aa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <HAL_SD_IRQHandler+0x282>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <HAL_SD_IRQHandler+0x304>)
 8004038:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f815 	bl	800206e <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02f      	beq.n	80040aa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb42 	bl	80046d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004054:	e029      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_SD_IRQHandler+0x2ba>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <HAL_SD_IRQHandler+0x308>)
 8004070:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fff9 	bl	800206e <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb5d 	bl	8004746 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800408c:	e00d      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f002 f8f6 	bl	8006294 <HAL_SD_AbortCallback>
}
 80040a8:	e7ff      	b.n	80040aa <HAL_SD_IRQHandler+0x2fa>
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	080046d9 	.word	0x080046d9
 80040b8:	08004747 	.word	0x08004747

080040bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040de:	0f9b      	lsrs	r3, r3, #30
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	b2da      	uxtb	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2da      	uxtb	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004130:	0d1b      	lsrs	r3, r3, #20
 8004132:	b29a      	uxth	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414e:	0bdb      	lsrs	r3, r3, #15
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004160:	0b9b      	lsrs	r3, r3, #14
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	0b1b      	lsrs	r3, r3, #12
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	2b00      	cmp	r3, #0
 800419e:	d163      	bne.n	8004268 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a4:	009a      	lsls	r2, r3, #2
 80041a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80041b0:	0f92      	lsrs	r2, r2, #30
 80041b2:	431a      	orrs	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	0edb      	lsrs	r3, r3, #27
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ce:	0e1b      	lsrs	r3, r3, #24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e0:	0d5b      	lsrs	r3, r3, #21
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	0c9b      	lsrs	r3, r3, #18
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004204:	0bdb      	lsrs	r3, r3, #15
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	b2da      	uxtb	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7e1b      	ldrb	r3, [r3, #24]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	3302      	adds	r3, #2
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004232:	fb02 f203 	mul.w	r2, r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	7a1b      	ldrb	r3, [r3, #8]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004254:	0a52      	lsrs	r2, r2, #9
 8004256:	fb02 f203 	mul.w	r2, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004264:	661a      	str	r2, [r3, #96]	; 0x60
 8004266:	e031      	b.n	80042cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	2b01      	cmp	r3, #1
 800426e:	d11d      	bne.n	80042ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	3301      	adds	r3, #1
 800428c:	029a      	lsls	r2, r3, #10
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60
 80042aa:	e00f      	b.n	80042cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_SD_GetCardCSD+0x344>)
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e09d      	b.n	8004408 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d0:	0b9b      	lsrs	r3, r3, #14
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e2:	09db      	lsrs	r3, r3, #7
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	0fdb      	lsrs	r3, r3, #31
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	0f5b      	lsrs	r3, r3, #29
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	b2da      	uxtb	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	0d9b      	lsrs	r3, r3, #22
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	0d5b      	lsrs	r3, r3, #21
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	0bdb      	lsrs	r3, r3, #15
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	0b9b      	lsrs	r3, r3, #14
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	0b1b      	lsrs	r3, r3, #12
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	004005ff 	.word	0x004005ff

08004418 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
	...

08004470 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af04      	add	r7, sp, #16
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2203      	movs	r2, #3
 800447e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	2b03      	cmp	r3, #3
 8004488:	d02e      	beq.n	80044e8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d106      	bne.n	80044a0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
 800449e:	e029      	b.n	80044f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d10a      	bne.n	80044be <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb07 	bl	8004abc <SD_WideBus_Enable>
 80044ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
 80044bc:	e01a      	b.n	80044f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb44 	bl	8004b52 <SD_WideBus_Disable>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
 80044d8:	e00c      	b.n	80044f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
 80044e6:	e005      	b.n	80044f4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e024      	b.n	800455a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681d      	ldr	r5, [r3, #0]
 8004536:	466c      	mov	r4, sp
 8004538:	f107 0318 	add.w	r3, r7, #24
 800453c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800454a:	4628      	mov	r0, r5
 800454c:	f001 f85a 	bl	8005604 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bdb0      	pop	{r4, r5, r7, pc}
 8004562:	bf00      	nop
 8004564:	004005ff 	.word	0x004005ff

08004568 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa76 	bl	8004a6c <SD_SendStatus>
 8004580:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0a5b      	lsrs	r3, r3, #9
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800459e:	693b      	ldr	r3, [r7, #16]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	2b82      	cmp	r3, #130	; 0x82
 80045e4:	d111      	bne.n	800460a <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f988 	bl	8005900 <SDMMC_CmdStopTransfer>
 80045f0:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fd59 	bl	80040bc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004622:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f001 fe42 	bl	80062bc <HAL_SD_RxCpltCallback>
#endif
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

    RxErrorCode = hsd->hdmarx->ErrorCode;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d002      	beq.n	800466a <SD_DMAError+0x2a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d12d      	bne.n	80046c6 <SD_DMAError+0x86>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <SD_DMAError+0x94>)
 8004670:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004680:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff6a 	bl	8004568 <HAL_SD_GetCardState>
 8004694:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b06      	cmp	r3, #6
 800469a:	d002      	beq.n	80046a2 <SD_DMAError+0x62>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d10a      	bne.n	80046b8 <SD_DMAError+0x78>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f92a 	bl	8005900 <SDMMC_CmdStopTransfer>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	431a      	orrs	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80046c6:	6978      	ldr	r0, [r7, #20]
 80046c8:	f7ff fcf8 	bl	80040bc <HAL_SD_ErrorCallback>
#endif
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	004005ff 	.word	0x004005ff

080046d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ff39 	bl	8004568 <HAL_SD_GetCardState>
 80046f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d002      	beq.n	8004712 <SD_DMATxAbort+0x3a>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b05      	cmp	r3, #5
 8004710:	d10a      	bne.n	8004728 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f001 f8f2 	bl	8005900 <SDMMC_CmdStopTransfer>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	431a      	orrs	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f001 fdaf 	bl	8006294 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004736:	e002      	b.n	800473e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff fcbf 	bl	80040bc <HAL_SD_ErrorCallback>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f240 523a 	movw	r2, #1338	; 0x53a
 800475c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff ff02 	bl	8004568 <HAL_SD_GetCardState>
 8004764:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d002      	beq.n	8004780 <SD_DMARxAbort+0x3a>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d10a      	bne.n	8004796 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f001 f8bb 	bl	8005900 <SDMMC_CmdStopTransfer>
 800478a:	4602      	mov	r2, r0
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f001 fd78 	bl	8006294 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047a4:	e002      	b.n	80047ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff fc88 	bl	80040bc <HAL_SD_ErrorCallback>
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047b4:	b5b0      	push	{r4, r5, r7, lr}
 80047b6:	b094      	sub	sp, #80	; 0x50
 80047b8:	af04      	add	r7, sp, #16
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80047bc:	2301      	movs	r3, #1
 80047be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 ff72 	bl	80056ae <SDIO_GetPowerState>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047d4:	e0b7      	b.n	8004946 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d02f      	beq.n	800483e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f996 	bl	8005b14 <SDMMC_CmdSendCID>
 80047e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	e0a8      	b.n	8004946 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 ff99 	bl	8005732 <SDIO_GetResponse>
 8004800:	4602      	mov	r2, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2104      	movs	r1, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f000 ff90 	bl	8005732 <SDIO_GetResponse>
 8004812:	4602      	mov	r2, r0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2108      	movs	r1, #8
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff87 	bl	8005732 <SDIO_GetResponse>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	210c      	movs	r1, #12
 8004830:	4618      	mov	r0, r3
 8004832:	f000 ff7e 	bl	8005732 <SDIO_GetResponse>
 8004836:	4602      	mov	r2, r0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	2b03      	cmp	r3, #3
 8004844:	d00d      	beq.n	8004862 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f107 020e 	add.w	r2, r7, #14
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f99c 	bl	8005b8e <SDMMC_CmdSetRelAdd>
 8004856:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SD_InitCard+0xae>
    {
      return errorstate;
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	e071      	b.n	8004946 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	2b03      	cmp	r3, #3
 8004868:	d036      	beq.n	80048d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f001 f966 	bl	8005b50 <SDMMC_CmdSendCSD>
 8004884:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <SD_InitCard+0xdc>
    {
      return errorstate;
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	e05a      	b.n	8004946 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f000 ff4b 	bl	8005732 <SDIO_GetResponse>
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2104      	movs	r1, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ff42 	bl	8005732 <SDIO_GetResponse>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2108      	movs	r1, #8
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 ff39 	bl	8005732 <SDIO_GetResponse>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	210c      	movs	r1, #12
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 ff30 	bl	8005732 <SDIO_GetResponse>
 80048d2:	4602      	mov	r2, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2104      	movs	r1, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 ff27 	bl	8005732 <SDIO_GetResponse>
 80048e4:	4603      	mov	r3, r0
 80048e6:	0d1a      	lsrs	r2, r3, #20
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048ec:	f107 0310 	add.w	r3, r7, #16
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fbec 	bl	80040d0 <HAL_SD_GetCardCSD>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004902:	e020      	b.n	8004946 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	f04f 0400 	mov.w	r4, #0
 8004912:	461a      	mov	r2, r3
 8004914:	4623      	mov	r3, r4
 8004916:	4608      	mov	r0, r1
 8004918:	f001 f814 	bl	8005944 <SDMMC_CmdSelDesel>
 800491c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800491e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <SD_InitCard+0x174>
  {
    return errorstate;
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	e00e      	b.n	8004946 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681d      	ldr	r5, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	466c      	mov	r4, sp
 8004930:	f103 0210 	add.w	r2, r3, #16
 8004934:	ca07      	ldmia	r2, {r0, r1, r2}
 8004936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800493a:	3304      	adds	r3, #4
 800493c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800493e:	4628      	mov	r0, r5
 8004940:	f000 fe60 	bl	8005604 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3740      	adds	r7, #64	; 0x40
 800494a:	46bd      	mov	sp, r7
 800494c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004950 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f001 f80e 	bl	800598a <SDMMC_CmdGoIdleState>
 800496e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	e072      	b.n	8004a60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f001 f821 	bl	80059c6 <SDMMC_CmdOperCond>
 8004984:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fff7 	bl	800598a <SDMMC_CmdGoIdleState>
 800499c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	e05b      	b.n	8004a60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d137      	bne.n	8004a26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 f821 	bl	8005a04 <SDMMC_CmdAppCommand>
 80049c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d02d      	beq.n	8004a26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049ce:	e047      	b.n	8004a60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f814 	bl	8005a04 <SDMMC_CmdAppCommand>
 80049dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e03b      	b.n	8004a60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	491e      	ldr	r1, [pc, #120]	; (8004a68 <SD_PowerON+0x118>)
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 f82a 	bl	8005a48 <SDMMC_CmdAppOperCommand>
 80049f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a00:	e02e      	b.n	8004a60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fe92 	bl	8005732 <SDIO_GetResponse>
 8004a0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	0fdb      	lsrs	r3, r3, #31
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <SD_PowerON+0xcc>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <SD_PowerON+0xce>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]

    count++;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d802      	bhi.n	8004a36 <SD_PowerON+0xe6>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0cc      	beq.n	80049d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d902      	bls.n	8004a46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a44:	e00c      	b.n	8004a60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
 8004a56:	e002      	b.n	8004a5e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	c1100000 	.word	0xc1100000

08004a6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a80:	e018      	b.n	8004ab4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f001 f89e 	bl	8005bd0 <SDMMC_CmdSendStatus>
 8004a94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	e009      	b.n	8004ab4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fe43 	bl	8005732 <SDIO_GetResponse>
 8004aac:	4602      	mov	r2, r0
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fe2d 	bl	8005732 <SDIO_GetResponse>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ae2:	d102      	bne.n	8004aea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae8:	e02f      	b.n	8004b4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f879 	bl	8004be8 <SD_FindSCR>
 8004af6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e023      	b.n	8004b4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01c      	beq.n	8004b46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 ff73 	bl	8005a04 <SDMMC_CmdAppCommand>
 8004b1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e00f      	b.n	8004b4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ffac 	bl	8005a8e <SDMMC_CmdBusWidth>
 8004b36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	e003      	b.n	8004b4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e001      	b.n	8004b4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fde2 	bl	8005732 <SDIO_GetResponse>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b78:	d102      	bne.n	8004b80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b7e:	e02f      	b.n	8004be0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f82e 	bl	8004be8 <SD_FindSCR>
 8004b8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	e023      	b.n	8004be0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 ff28 	bl	8005a04 <SDMMC_CmdAppCommand>
 8004bb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e00f      	b.n	8004be0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 ff61 	bl	8005a8e <SDMMC_CmdBusWidth>
 8004bcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	e003      	b.n	8004be0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e001      	b.n	8004be0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b08f      	sub	sp, #60	; 0x3c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7fc ffb1 	bl	8001b58 <HAL_GetTick>
 8004bf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2108      	movs	r1, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fdcc 	bl	80057ac <SDMMC_CmdBlockLength>
 8004c14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	e0a9      	b.n	8004d74 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f000 fee9 	bl	8005a04 <SDMMC_CmdAppCommand>
 8004c32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	e09a      	b.n	8004d74 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c44:	2308      	movs	r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c48:	2330      	movs	r3, #48	; 0x30
 8004c4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f107 0210 	add.w	r2, r7, #16
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd77 	bl	8005756 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 ff30 	bl	8005ad2 <SDMMC_CmdSendSCR>
 8004c72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	e07a      	b.n	8004d74 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00e      	beq.n	8004caa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	f107 0208 	add.w	r2, r7, #8
 8004c98:	18d4      	adds	r4, r2, r3
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	f000 fcdc 	bl	8005658 <SDIO_ReadFIFO>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	6023      	str	r3, [r4, #0]
      index++;
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004caa:	f7fc ff55 	bl	8001b58 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d102      	bne.n	8004cc0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004cba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cbe:	e059      	b.n	8004d74 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc6:	f240 432a 	movw	r3, #1066	; 0x42a
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0d6      	beq.n	8004c7e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	e044      	b.n	8004d74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d00:	2302      	movs	r3, #2
 8004d02:	e037      	b.n	8004d74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2220      	movs	r2, #32
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	e02a      	b.n	8004d74 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	601a      	str	r2, [r3, #0]
    scr++;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	061a      	lsls	r2, r3, #24
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0e1b      	lsrs	r3, r3, #24
 8004d6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	373c      	adds	r7, #60	; 0x3c
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}

08004d7c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d03f      	beq.n	8004e16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e033      	b.n	8004e04 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fc59 	bl	8005658 <SDIO_ReadFIFO>
 8004da6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	0e1b      	lsrs	r3, r3, #24
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	3301      	adds	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	d9c8      	bls.n	8004d9c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d043      	beq.n	8004ec0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e037      	b.n	8004eae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	041a      	lsls	r2, r3, #16
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	061a      	lsls	r2, r3, #24
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f107 0208 	add.w	r2, r7, #8
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fbe4 	bl	8005670 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b07      	cmp	r3, #7
 8004eb2:	d9c4      	bls.n	8004e3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e01d      	b.n	8004f16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f815 	bl	8004f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 f936 	bl	8005178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d007      	beq.n	8004f6a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d122      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d11b      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0202 	mvn.w	r2, #2
 8004fa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8c1 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8004fbe:	e005      	b.n	8004fcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8b4 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8c3 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d122      	bne.n	8005026 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d11b      	bne.n	8005026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f06f 0204 	mvn.w	r2, #4
 8004ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f897 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8005012:	e005      	b.n	8005020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f88a 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f899 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d122      	bne.n	800507a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b08      	cmp	r3, #8
 8005040:	d11b      	bne.n	800507a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0208 	mvn.w	r2, #8
 800504a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f86d 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8005066:	e005      	b.n	8005074 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f860 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f86f 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b10      	cmp	r3, #16
 8005086:	d122      	bne.n	80050ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b10      	cmp	r3, #16
 8005094:	d11b      	bne.n	80050ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0210 	mvn.w	r2, #16
 800509e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2208      	movs	r2, #8
 80050a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f843 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 80050ba:	e005      	b.n	80050c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f836 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f845 	bl	8005152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0201 	mvn.w	r2, #1
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc f9bf 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d107      	bne.n	8005126 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f81f 	bl	8005164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
	...

08005178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518e:	d00f      	beq.n	80051b0 <TIM_Base_SetConfig+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <TIM_Base_SetConfig+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00b      	beq.n	80051b0 <TIM_Base_SetConfig+0x38>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_Base_SetConfig+0xcc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_Base_SetConfig+0x38>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0xd0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0x38>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a28      	ldr	r2, [pc, #160]	; (800524c <TIM_Base_SetConfig+0xd4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d108      	bne.n	80051c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d017      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <TIM_Base_SetConfig+0xc8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <TIM_Base_SetConfig+0xcc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <TIM_Base_SetConfig+0xd0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_Base_SetConfig+0xd4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_Base_SetConfig+0xd8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0x82>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a17      	ldr	r2, [pc, #92]	; (8005254 <TIM_Base_SetConfig+0xdc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d108      	bne.n	800520c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	40010800 	.word	0x40010800
 8005250:	40010c00 	.word	0x40010c00
 8005254:	40011000 	.word	0x40011000

08005258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e03f      	b.n	80052ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc fbaa 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	; 0x24
 8005288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f829 	bl	80052f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005334:	f023 030c 	bic.w	r3, r3, #12
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	430b      	orrs	r3, r1
 8005340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	f040 80a5 	bne.w	80054ae <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4aa4      	ldr	r2, [pc, #656]	; (80055fc <UART_SetConfig+0x308>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d14f      	bne.n	800540e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800536e:	f7fd fe37 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8005372:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009a      	lsls	r2, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	4a9d      	ldr	r2, [pc, #628]	; (8005600 <UART_SetConfig+0x30c>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	0119      	lsls	r1, r3, #4
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80053aa:	4b95      	ldr	r3, [pc, #596]	; (8005600 <UART_SetConfig+0x30c>)
 80053ac:	fba3 0302 	umull	r0, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2064      	movs	r0, #100	; 0x64
 80053b4:	fb00 f303 	mul.w	r3, r0, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3332      	adds	r3, #50	; 0x32
 80053be:	4a90      	ldr	r2, [pc, #576]	; (8005600 <UART_SetConfig+0x30c>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053cc:	4419      	add	r1, r3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009a      	lsls	r2, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e4:	4b86      	ldr	r3, [pc, #536]	; (8005600 <UART_SetConfig+0x30c>)
 80053e6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2064      	movs	r0, #100	; 0x64
 80053ee:	fb00 f303 	mul.w	r3, r0, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	3332      	adds	r3, #50	; 0x32
 80053f8:	4a81      	ldr	r2, [pc, #516]	; (8005600 <UART_SetConfig+0x30c>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 0207 	and.w	r2, r3, #7
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	440a      	add	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800540c:	e0f1      	b.n	80055f2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fd fdd3 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005412:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009a      	lsls	r2, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	4a75      	ldr	r2, [pc, #468]	; (8005600 <UART_SetConfig+0x30c>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	0119      	lsls	r1, r3, #4
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009a      	lsls	r2, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	fbb2 f2f3 	udiv	r2, r2, r3
 800544a:	4b6d      	ldr	r3, [pc, #436]	; (8005600 <UART_SetConfig+0x30c>)
 800544c:	fba3 0302 	umull	r0, r3, r3, r2
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	2064      	movs	r0, #100	; 0x64
 8005454:	fb00 f303 	mul.w	r3, r0, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	3332      	adds	r3, #50	; 0x32
 800545e:	4a68      	ldr	r2, [pc, #416]	; (8005600 <UART_SetConfig+0x30c>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800546c:	4419      	add	r1, r3
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009a      	lsls	r2, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fbb2 f2f3 	udiv	r2, r2, r3
 8005484:	4b5e      	ldr	r3, [pc, #376]	; (8005600 <UART_SetConfig+0x30c>)
 8005486:	fba3 0302 	umull	r0, r3, r3, r2
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2064      	movs	r0, #100	; 0x64
 800548e:	fb00 f303 	mul.w	r3, r0, r3
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	3332      	adds	r3, #50	; 0x32
 8005498:	4a59      	ldr	r2, [pc, #356]	; (8005600 <UART_SetConfig+0x30c>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f003 0207 	and.w	r2, r3, #7
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	440a      	add	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	e0a1      	b.n	80055f2 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a52      	ldr	r2, [pc, #328]	; (80055fc <UART_SetConfig+0x308>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d14e      	bne.n	8005556 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fd fd92 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80054bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <UART_SetConfig+0x30c>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	0119      	lsls	r1, r3, #4
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f4:	4b42      	ldr	r3, [pc, #264]	; (8005600 <UART_SetConfig+0x30c>)
 80054f6:	fba3 0302 	umull	r0, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2064      	movs	r0, #100	; 0x64
 80054fe:	fb00 f303 	mul.w	r3, r0, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a3d      	ldr	r2, [pc, #244]	; (8005600 <UART_SetConfig+0x30c>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005514:	4419      	add	r1, r3
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009a      	lsls	r2, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	fbb2 f2f3 	udiv	r2, r2, r3
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <UART_SetConfig+0x30c>)
 800552e:	fba3 0302 	umull	r0, r3, r3, r2
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2064      	movs	r0, #100	; 0x64
 8005536:	fb00 f303 	mul.w	r3, r0, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	3332      	adds	r3, #50	; 0x32
 8005540:	4a2f      	ldr	r2, [pc, #188]	; (8005600 <UART_SetConfig+0x30c>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	f003 020f 	and.w	r2, r3, #15
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	440a      	add	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	e04d      	b.n	80055f2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005556:	f7fd fd2f 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800555a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009a      	lsls	r2, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	4a23      	ldr	r2, [pc, #140]	; (8005600 <UART_SetConfig+0x30c>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	0119      	lsls	r1, r3, #4
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009a      	lsls	r2, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <UART_SetConfig+0x30c>)
 8005594:	fba3 0302 	umull	r0, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	2064      	movs	r0, #100	; 0x64
 800559c:	fb00 f303 	mul.w	r3, r0, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	3332      	adds	r3, #50	; 0x32
 80055a6:	4a16      	ldr	r2, [pc, #88]	; (8005600 <UART_SetConfig+0x30c>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b2:	4419      	add	r1, r3
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009a      	lsls	r2, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <UART_SetConfig+0x30c>)
 80055cc:	fba3 0302 	umull	r0, r3, r3, r2
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	2064      	movs	r0, #100	; 0x64
 80055d4:	fb00 f303 	mul.w	r3, r0, r3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	3332      	adds	r3, #50	; 0x32
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <UART_SetConfig+0x30c>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	440a      	add	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40013800 	.word	0x40013800
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 001c 	add.w	r0, r7, #28
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800561a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800561c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800561e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005622:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005626:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800562a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800562e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800563e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	b004      	add	sp, #16
 8005656:	4770      	bx	lr

08005658 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2203      	movs	r2, #3
 800569c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800569e:	2002      	movs	r0, #2
 80056a0:	f7fc fa64 	bl	8001b6c <HAL_Delay>
  
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0303 	and.w	r3, r3, #3
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80056e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80056ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80056f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	b2db      	uxtb	r3, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3314      	adds	r3, #20
 8005740:	461a      	mov	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	4413      	add	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
}  
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800577c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005782:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005788:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0

}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80057ba:	2310      	movs	r3, #16
 80057bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057cc:	f107 0308 	add.w	r3, r7, #8
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff ff78 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	2110      	movs	r1, #16
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa40 	bl	8005c64 <SDMMC_GetCmdResp1>
 80057e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80057fe:	2311      	movs	r3, #17
 8005800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005810:	f107 0308 	add.w	r3, r7, #8
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ff56 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	2111      	movs	r1, #17
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa1e 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582a:	69fb      	ldr	r3, [r7, #28]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005842:	2312      	movs	r3, #18
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff34 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	2112      	movs	r1, #18
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9fc 	bl	8005c64 <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005886:	2318      	movs	r3, #24
 8005888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800588a:	2340      	movs	r3, #64	; 0x40
 800588c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff ff12 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80058a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a8:	2118      	movs	r1, #24
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9da 	bl	8005c64 <SDMMC_GetCmdResp1>
 80058b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058b2:	69fb      	ldr	r3, [r7, #28]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80058ca:	2319      	movs	r3, #25
 80058cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058ce:	2340      	movs	r3, #64	; 0x40
 80058d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fef0 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	2119      	movs	r1, #25
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b8 	bl	8005c64 <SDMMC_GetCmdResp1>
 80058f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058f6:	69fb      	ldr	r3, [r7, #28]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800590c:	230c      	movs	r3, #12
 800590e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005910:	2340      	movs	r3, #64	; 0x40
 8005912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800591c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fecf 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800592a:	4a05      	ldr	r2, [pc, #20]	; (8005940 <SDMMC_CmdStopTransfer+0x40>)
 800592c:	210c      	movs	r1, #12
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f998 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005936:	69fb      	ldr	r3, [r7, #28]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	05f5e100 	.word	0x05f5e100

08005944 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005954:	2307      	movs	r3, #7
 8005956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005958:	2340      	movs	r3, #64	; 0x40
 800595a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005964:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	4619      	mov	r1, r3
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff feab 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	2107      	movs	r1, #7
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f973 	bl	8005c64 <SDMMC_GetCmdResp1>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005982:	4618      	mov	r0, r3
 8005984:	3728      	adds	r7, #40	; 0x28
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b088      	sub	sp, #32
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a8:	f107 0308 	add.w	r3, r7, #8
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fe8a 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f92d 	bl	8005c14 <SDMMC_GetCmdError>
 80059ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059bc:	69fb      	ldr	r3, [r7, #28]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b088      	sub	sp, #32
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80059ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80059d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80059d4:	2308      	movs	r3, #8
 80059d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff fe6b 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb16 	bl	8006024 <SDMMC_GetCmdResp7>
 80059f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059fa:	69fb      	ldr	r3, [r7, #28]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005a12:	2337      	movs	r3, #55	; 0x37
 8005a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a24:	f107 0308 	add.w	r3, r7, #8
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fe4c 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	2137      	movs	r1, #55	; 0x37
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f914 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005a5e:	2329      	movs	r3, #41	; 0x29
 8005a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a70:	f107 0308 	add.w	r3, r7, #8
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fe26 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa23 	bl	8005ec8 <SDMMC_GetCmdResp3>
 8005a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a84:	69fb      	ldr	r3, [r7, #28]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fe07 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	2106      	movs	r1, #6
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8cf 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b088      	sub	sp, #32
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005ade:	2333      	movs	r3, #51	; 0x33
 8005ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005af0:	f107 0308 	add.w	r3, r7, #8
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fde6 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	2133      	movs	r1, #51	; 0x33
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8ae 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005b20:	2302      	movs	r3, #2
 8005b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005b24:	23c0      	movs	r3, #192	; 0xc0
 8005b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fdc5 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f97c 	bl	8005e3c <SDMMC_GetCmdResp2>
 8005b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b46:	69fb      	ldr	r3, [r7, #28]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005b5e:	2309      	movs	r3, #9
 8005b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005b62:	23c0      	movs	r3, #192	; 0xc0
 8005b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b70:	f107 0308 	add.w	r3, r7, #8
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fda6 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f95d 	bl	8005e3c <SDMMC_GetCmdResp2>
 8005b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b84:	69fb      	ldr	r3, [r7, #28]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b088      	sub	sp, #32
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fd87 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	2103      	movs	r1, #3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9bc 	bl	8005f3c <SDMMC_GetCmdResp6>
 8005bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005bde:	230d      	movs	r3, #13
 8005be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005be2:	2340      	movs	r3, #64	; 0x40
 8005be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fd66 	bl	80056c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c00:	210d      	movs	r1, #13
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f82e 	bl	8005c64 <SDMMC_GetCmdResp1>
 8005c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005c14:	b490      	push	{r4, r7}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <SDMMC_GetCmdError+0x48>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <SDMMC_GetCmdError+0x4c>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0a5b      	lsrs	r3, r3, #9
 8005c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c30:	4623      	mov	r3, r4
 8005c32:	1e5c      	subs	r4, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c3c:	e009      	b.n	8005c52 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f2      	beq.n	8005c30 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	22c5      	movs	r2, #197	; 0xc5
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc90      	pop	{r4, r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	20000064 	.word	0x20000064
 8005c60:	10624dd3 	.word	0x10624dd3

08005c64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c72:	4b6f      	ldr	r3, [pc, #444]	; (8005e30 <SDMMC_GetCmdResp1+0x1cc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a6f      	ldr	r2, [pc, #444]	; (8005e34 <SDMMC_GetCmdResp1+0x1d0>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	0a5b      	lsrs	r3, r3, #9
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c84:	4623      	mov	r3, r4
 8005c86:	1e5c      	subs	r4, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c90:	e0c9      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c96:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <SDMMC_GetCmdResp1+0x20>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1eb      	bne.n	8005c84 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	e0b1      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0a6      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	22c5      	movs	r2, #197	; 0xc5
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fd1b 	bl	800571a <SDIO_GetCommandResponse>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d001      	beq.n	8005cf2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e099      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fd1c 	bl	8005732 <SDIO_GetResponse>
 8005cfa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <SDMMC_GetCmdResp1+0x1d4>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e08d      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da02      	bge.n	8005d16 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d14:	e087      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	e080      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	e079      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d40:	e071      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d50:	e069      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d60:	e061      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d70:	e059      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d80:	e051      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d90:	e049      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005da0:	e041      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db0:	e039      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dc0:	e031      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005dcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005dd0:	e029      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005de0:	e021      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005df0:	e019      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e00:	e011      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e10:	e009      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005e1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e20:	e001      	b.n	8005e26 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd90      	pop	{r4, r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000064 	.word	0x20000064
 8005e34:	10624dd3 	.word	0x10624dd3
 8005e38:	fdffe008 	.word	0xfdffe008

08005e3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005e3c:	b490      	push	{r4, r7}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <SDMMC_GetCmdResp2+0x84>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <SDMMC_GetCmdResp2+0x88>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	0a5b      	lsrs	r3, r3, #9
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e58:	4623      	mov	r3, r4
 8005e5a:	1e5c      	subs	r4, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e64:	e026      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <SDMMC_GetCmdResp2+0x1c>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1eb      	bne.n	8005e58 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e92:	2304      	movs	r3, #4
 8005e94:	e00e      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e003      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	22c5      	movs	r2, #197	; 0xc5
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc90      	pop	{r4, r7}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000064 	.word	0x20000064
 8005ec4:	10624dd3 	.word	0x10624dd3

08005ec8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005ec8:	b490      	push	{r4, r7}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ed0:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <SDMMC_GetCmdResp3+0x6c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <SDMMC_GetCmdResp3+0x70>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a5b      	lsrs	r3, r3, #9
 8005edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	1e5c      	subs	r4, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ef0:	e01b      	b.n	8005f2a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <SDMMC_GetCmdResp3+0x1c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1eb      	bne.n	8005ee4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e003      	b.n	8005f2a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	22c5      	movs	r2, #197	; 0xc5
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc90      	pop	{r4, r7}
 8005f32:	4770      	bx	lr
 8005f34:	20000064 	.word	0x20000064
 8005f38:	10624dd3 	.word	0x10624dd3

08005f3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	460b      	mov	r3, r1
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <SDMMC_GetCmdResp6+0xe0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a34      	ldr	r2, [pc, #208]	; (8006020 <SDMMC_GetCmdResp6+0xe4>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	0a5b      	lsrs	r3, r3, #9
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f5e:	4623      	mov	r3, r4
 8005f60:	1e5c      	subs	r4, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f6a:	e052      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <SDMMC_GetCmdResp6+0x22>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1eb      	bne.n	8005f5e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2204      	movs	r2, #4
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f98:	2304      	movs	r3, #4
 8005f9a:	e03a      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e02f      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fbb1 	bl	800571a <SDIO_GetCommandResponse>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d001      	beq.n	8005fc6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e025      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	22c5      	movs	r2, #197	; 0xc5
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005fcc:	2100      	movs	r1, #0
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fbaf 	bl	8005732 <SDIO_GetResponse>
 8005fd4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e011      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ffc:	e009      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800600c:	e001      	b.n	8006012 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800600e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	20000064 	.word	0x20000064
 8006020:	10624dd3 	.word	0x10624dd3

08006024 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006024:	b490      	push	{r4, r7}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <SDMMC_GetCmdResp7+0x90>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <SDMMC_GetCmdResp7+0x94>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	0a5b      	lsrs	r3, r3, #9
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006040:	4623      	mov	r3, r4
 8006042:	1e5c      	subs	r4, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800604c:	e02c      	b.n	80060a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <SDMMC_GetCmdResp7+0x1c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1eb      	bne.n	8006040 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2204      	movs	r2, #4
 8006078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800607a:	2304      	movs	r3, #4
 800607c:	e014      	b.n	80060a8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006090:	2301      	movs	r3, #1
 8006092:	e009      	b.n	80060a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2240      	movs	r2, #64	; 0x40
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060a6:	2300      	movs	r3, #0
  
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc90      	pop	{r4, r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000064 	.word	0x20000064
 80060b8:	10624dd3 	.word	0x10624dd3

080060bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
RTC_HandleTypeDef hrtc;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <MX_FATFS_Init+0x18>)
 80060c2:	4805      	ldr	r0, [pc, #20]	; (80060d8 <MX_FATFS_Init+0x1c>)
 80060c4:	f002 fd96 	bl	8008bf4 <FATFS_LinkDriver>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <MX_FATFS_Init+0x20>)
 80060ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80060d0:	bf00      	nop
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	2000192c 	.word	0x2000192c
 80060d8:	0800e1b0 	.word	0x0800e1b0
 80060dc:	20001f4c 	.word	0x20001f4c

080060e0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	RTC_TimeTypeDef sTime = {0};
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80060f4:	2300      	movs	r3, #0
 80060f6:	603b      	str	r3, [r7, #0]
	/* Get local time */
	if(HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) return 0;
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	2200      	movs	r2, #0
 80060fc:	4619      	mov	r1, r3
 80060fe:	4814      	ldr	r0, [pc, #80]	; (8006150 <get_fattime+0x70>)
 8006100:	f7fd fa09 	bl	8003516 <HAL_RTC_GetTime>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <get_fattime+0x2e>
 800610a:	2300      	movs	r3, #0
 800610c:	e01c      	b.n	8006148 <get_fattime+0x68>
	if(HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) return 0;
 800610e:	463b      	mov	r3, r7
 8006110:	2200      	movs	r2, #0
 8006112:	4619      	mov	r1, r3
 8006114:	480e      	ldr	r0, [pc, #56]	; (8006150 <get_fattime+0x70>)
 8006116:	f7fd faf9 	bl	800370c <HAL_RTC_GetDate>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <get_fattime+0x44>
 8006120:	2300      	movs	r3, #0
 8006122:	e011      	b.n	8006148 <get_fattime+0x68>
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)sDate.Year << 25)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	065a      	lsls	r2, r3, #25
				| ((DWORD)sDate.Month << 21)
 8006128:	787b      	ldrb	r3, [r7, #1]
 800612a:	055b      	lsls	r3, r3, #21
 800612c:	431a      	orrs	r2, r3
				| ((DWORD)sDate.Date << 16)
 800612e:	78bb      	ldrb	r3, [r7, #2]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	431a      	orrs	r2, r3
				| ((DWORD)sTime.Hours << 11)
 8006134:	793b      	ldrb	r3, [r7, #4]
 8006136:	02db      	lsls	r3, r3, #11
 8006138:	431a      	orrs	r2, r3
				| ((DWORD)sTime.Minutes << 5)
 800613a:	797b      	ldrb	r3, [r7, #5]
 800613c:	015b      	lsls	r3, r3, #5
 800613e:	4313      	orrs	r3, r2
				| ((DWORD)sTime.Seconds >> 1);
 8006140:	79ba      	ldrb	r2, [r7, #6]
 8006142:	0852      	lsrs	r2, r2, #1
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	4313      	orrs	r3, r2
  /* USER CODE END get_fattime */  
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20001da0 	.word	0x20001da0

08006154 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800615e:	f000 f8bd 	bl	80062dc <BSP_SD_IsDetected>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d001      	beq.n	800616c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e011      	b.n	8006190 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800616c:	480a      	ldr	r0, [pc, #40]	; (8006198 <BSP_SD_Init+0x44>)
 800616e:	f7fd fbab 	bl	80038c8 <HAL_SD_Init>
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d108      	bne.n	800618e <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 800617c:	2100      	movs	r1, #0
 800617e:	4806      	ldr	r0, [pc, #24]	; (8006198 <BSP_SD_Init+0x44>)
 8006180:	f7fe f976 	bl	8004470 <HAL_SD_ConfigWideBusOperation>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800618e:	79fb      	ldrb	r3, [r7, #7]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20001e04 	.word	0x20001e04

0800619c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read  
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  hsd.hdmatx = NULL;
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigRx(&hsd);
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80061b4:	f000 f89e 	bl	80062f4 <SD_DMAConfigRx>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d107      	bne.n	80061d2 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    state = HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	4807      	ldr	r0, [pc, #28]	; (80061e8 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80061ca:	f7fd fc17 	bl	80039fc <HAL_SD_ReadBlocks_DMA>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <BSP_SD_ReadBlocks_DMA+0x42>
  }    
  else
  {
    return MSD_ERROR;
 80061dc:	2301      	movs	r3, #1
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20001e04 	.word	0x20001e04

080061ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written  
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  hsd.hdmarx = NULL;
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <BSP_SD_WriteBlocks_DMA+0x4c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigTx(&hsd);
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8006204:	f000 f8be 	bl	8006384 <SD_DMAConfigTx>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <BSP_SD_WriteBlocks_DMA+0x36>
  { 
    /* Write block(s) in DMA transfer mode */
    state = HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	4807      	ldr	r0, [pc, #28]	; (8006238 <BSP_SD_WriteBlocks_DMA+0x4c>)
 800621a:	f7fd fcd9 	bl	8003bd0 <HAL_SD_WriteBlocks_DMA>
 800621e:	4603      	mov	r3, r0
 8006220:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 800622c:	2301      	movs	r3, #1
  } 
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20001e04 	.word	0x20001e04

0800623c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <BSP_SD_GetCardState+0x38>)
 8006244:	f7fe f990 	bl	8004568 <HAL_SD_GetCardState>
 8006248:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d101      	bne.n	8006254 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8006250:	2300      	movs	r3, #0
 8006252:	e00b      	b.n	800626c <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d005      	beq.n	8006266 <BSP_SD_GetCardState+0x2a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d002      	beq.n	8006266 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b07      	cmp	r3, #7
 8006264:	d101      	bne.n	800626a <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20001e04 	.word	0x20001e04

08006278 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4803      	ldr	r0, [pc, #12]	; (8006290 <BSP_SD_GetCardInfo+0x18>)
 8006284:	f7fe f8c8 	bl	8004418 <HAL_SD_GetCardInfo>
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20001e04 	.word	0x20001e04

08006294 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800629c:	f000 f818 	bl	80062d0 <BSP_SD_AbortCallback>
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80062b0:	f000 fab2 	bl	8006818 <BSP_SD_WriteCpltCallback>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80062c4:	f000 fab6 	bl	8006834 <BSP_SD_ReadCpltCallback>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0

}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80062e2:	2301      	movs	r3, #1
 80062e4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	b2db      	uxtb	r3, r3
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <SD_DMAConfigRx>:

/* USER CODE BEGIN DMAConfigCode */
HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* function body to be changed by the user (if needed) */
	static DMA_HandleTypeDef hdma_rx;
	HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]

	HAL_DMA_DeInit(hsd->hdmatx);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	4618      	mov	r0, r3
 8006306:	f7fb fda7 	bl	8001e58 <HAL_DMA_DeInit>

	/* Configure the DMA Rx parameters */
	hdma_rx.Instance = DMA2_Channel4;
 800630a:	4b1c      	ldr	r3, [pc, #112]	; (800637c <SD_DMAConfigRx+0x88>)
 800630c:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <SD_DMAConfigRx+0x8c>)
 800630e:	601a      	str	r2, [r3, #0]
	hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <SD_DMAConfigRx+0x88>)
 8006312:	2200      	movs	r2, #0
 8006314:	605a      	str	r2, [r3, #4]
	hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <SD_DMAConfigRx+0x88>)
 8006318:	2200      	movs	r2, #0
 800631a:	609a      	str	r2, [r3, #8]
		hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 800631c:	4b17      	ldr	r3, [pc, #92]	; (800637c <SD_DMAConfigRx+0x88>)
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	60da      	str	r2, [r3, #12]
		hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <SD_DMAConfigRx+0x88>)
 8006324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006328:	611a      	str	r2, [r3, #16]
		hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800632a:	4b14      	ldr	r3, [pc, #80]	; (800637c <SD_DMAConfigRx+0x88>)
 800632c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006330:	615a      	str	r2, [r3, #20]
		hdma_rx.Init.Mode = DMA_NORMAL;
 8006332:	4b12      	ldr	r3, [pc, #72]	; (800637c <SD_DMAConfigRx+0x88>)
 8006334:	2200      	movs	r2, #0
 8006336:	619a      	str	r2, [r3, #24]
		hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <SD_DMAConfigRx+0x88>)
 800633a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800633e:	61da      	str	r2, [r3, #28]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsd,hdmarx,hdma_rx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a0e      	ldr	r2, [pc, #56]	; (800637c <SD_DMAConfigRx+0x88>)
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
 8006346:	4a0d      	ldr	r2, [pc, #52]	; (800637c <SD_DMAConfigRx+0x88>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6253      	str	r3, [r2, #36]	; 0x24

		/* Stop any ongoing transfer and reset the state*/
		  HAL_DMA_Abort(&hdma_rx);
 800634c:	480b      	ldr	r0, [pc, #44]	; (800637c <SD_DMAConfigRx+0x88>)
 800634e:	f7fb fe51 	bl	8001ff4 <HAL_DMA_Abort>

		/* Deinitialize the Channel for new transfer */
		  HAL_DMA_DeInit(&hdma_rx);
 8006352:	480a      	ldr	r0, [pc, #40]	; (800637c <SD_DMAConfigRx+0x88>)
 8006354:	f7fb fd80 	bl	8001e58 <HAL_DMA_DeInit>

		/* Configure the DMA Channel */
		  status = HAL_DMA_Init(&hdma_rx);
 8006358:	4808      	ldr	r0, [pc, #32]	; (800637c <SD_DMAConfigRx+0x88>)
 800635a:	f7fb fd09 	bl	8001d70 <HAL_DMA_Init>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]

		/* NVIC configuration for DMA transfer complete interrupt */
		  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8006362:	2200      	movs	r2, #0
 8006364:	2105      	movs	r1, #5
 8006366:	2035      	movs	r0, #53	; 0x35
 8006368:	f7fb fcd7 	bl	8001d1a <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800636c:	2035      	movs	r0, #53	; 0x35
 800636e:	f7fb fcf0 	bl	8001d52 <HAL_NVIC_EnableIRQ>

		  return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
} 
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000814 	.word	0x20000814
 8006380:	40026444 	.word	0x40026444

08006384 <SD_DMAConfigTx>:

HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* function body to be changed by the user (if needed) */
	static DMA_HandleTypeDef hdma_tx;
	  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]

	  /* Configure the DMA Tx parameters */
	  	hdma_tx.Instance = DMA2_Channel4;
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <SD_DMAConfigTx+0x80>)
 8006392:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <SD_DMAConfigTx+0x84>)
 8006394:	601a      	str	r2, [r3, #0]
	  	hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006396:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <SD_DMAConfigTx+0x80>)
 8006398:	2210      	movs	r2, #16
 800639a:	605a      	str	r2, [r3, #4]
	  	hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800639c:	4b19      	ldr	r3, [pc, #100]	; (8006404 <SD_DMAConfigTx+0x80>)
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
	  	hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063a2:	4b18      	ldr	r3, [pc, #96]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	60da      	str	r2, [r3, #12]
	  	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063a8:	4b16      	ldr	r3, [pc, #88]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ae:	611a      	str	r2, [r3, #16]
	  	hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b6:	615a      	str	r2, [r3, #20]
	  	hdma_tx.Init.Mode = DMA_NORMAL;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	619a      	str	r2, [r3, #24]
	  	hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80063c4:	61da      	str	r2, [r3, #28]

	  	/* Associate the DMA handle */
	  	__HAL_LINKDMA(hsd,hdmatx,hdma_tx);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a0e      	ldr	r2, [pc, #56]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6253      	str	r3, [r2, #36]	; 0x24

	  	/* Stop any ongoing transfer and reset the state*/
	  	  HAL_DMA_Abort(&hdma_tx);
 80063d2:	480c      	ldr	r0, [pc, #48]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063d4:	f7fb fe0e 	bl	8001ff4 <HAL_DMA_Abort>

	  	/* Deinitialize the Channel for new transfer */
	  	  HAL_DMA_DeInit(&hdma_tx);
 80063d8:	480a      	ldr	r0, [pc, #40]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063da:	f7fb fd3d 	bl	8001e58 <HAL_DMA_DeInit>

	  	/* Configure the DMA Channel */
	  	  status = HAL_DMA_Init(&hdma_tx);
 80063de:	4809      	ldr	r0, [pc, #36]	; (8006404 <SD_DMAConfigTx+0x80>)
 80063e0:	f7fb fcc6 	bl	8001d70 <HAL_DMA_Init>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]

	  	 /* NVIC configuration for DMA transfer complete interrupt */
	  	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80063e8:	2200      	movs	r2, #0
 80063ea:	2105      	movs	r1, #5
 80063ec:	2035      	movs	r0, #53	; 0x35
 80063ee:	f7fb fc94 	bl	8001d1a <HAL_NVIC_SetPriority>
	  	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80063f2:	2035      	movs	r0, #53	; 0x35
 80063f4:	f7fb fcad 	bl	8001d52 <HAL_NVIC_EnableIRQ>

	  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000858 	.word	0x20000858
 8006408:	40026444 	.word	0x40026444

0800640c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8006414:	f002 fc84 	bl	8008d20 <osKernelSysTick>
 8006418:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800641a:	e006      	b.n	800642a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800641c:	f7ff ff0e 	bl	800623c <BSP_SD_GetCardState>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006426:	2300      	movs	r3, #0
 8006428:	e009      	b.n	800643e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800642a:	f002 fc79 	bl	8008d20 <osKernelSysTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d8f0      	bhi.n	800641c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <SD_CheckStatus+0x38>)
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006458:	f7ff fef0 	bl	800623c <BSP_SD_GetCardState>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d107      	bne.n	8006472 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <SD_CheckStatus+0x38>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b04      	ldr	r3, [pc, #16]	; (8006480 <SD_CheckStatus+0x38>)
 8006470:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <SD_CheckStatus+0x38>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b2db      	uxtb	r3, r3
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20000070 	.word	0x20000070

08006484 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <SD_initialize+0x74>)
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8006494:	f002 fc38 	bl	8008d08 <osKernelRunning>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d024      	beq.n	80064e8 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800649e:	f7ff fe59 	bl	8006154 <BSP_SD_Init>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d107      	bne.n	80064b8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ffcc 	bl	8006448 <SD_CheckStatus>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <SD_initialize+0x74>)
 80064b6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <SD_initialize+0x74>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d012      	beq.n	80064e8 <SD_initialize+0x64>
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <SD_initialize+0x78>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10e      	bne.n	80064e8 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <SD_initialize+0x7c>)
 80064cc:	f107 0408 	add.w	r4, r7, #8
 80064d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f002 fd8e 	bl	8008ffe <osMessageCreate>
 80064e2:	4602      	mov	r2, r0
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <SD_initialize+0x78>)
 80064e6:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <SD_initialize+0x74>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd90      	pop	{r4, r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000070 	.word	0x20000070
 80064fc:	20000a9c 	.word	0x20000a9c
 8006500:	0800e11c 	.word	0x0800e11c

08006504 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff99 	bl	8006448 <SD_CheckStatus>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08e      	sub	sp, #56	; 0x38
 8006524:	af00      	add	r7, sp, #0
 8006526:	61b9      	str	r1, [r7, #24]
 8006528:	617a      	str	r2, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	4603      	mov	r3, r0
 800652e:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006536:	f247 5030 	movw	r0, #30000	; 0x7530
 800653a:	f7ff ff67 	bl	800640c <SD_CheckStatusWithTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	da02      	bge.n	800654a <SD_read+0x2a>
  {
    return res;
 8006544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006548:	e06c      	b.n	8006624 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11e      	bne.n	8006592 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	6979      	ldr	r1, [r7, #20]
 8006558:	69b8      	ldr	r0, [r7, #24]
 800655a:	f7ff fe1f 	bl	800619c <BSP_SD_ReadBlocks_DMA>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8006564:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006568:	2b00      	cmp	r3, #0
 800656a:	d159      	bne.n	8006620 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800656c:	4b2f      	ldr	r3, [pc, #188]	; (800662c <SD_read+0x10c>)
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	f107 0320 	add.w	r3, r7, #32
 8006574:	f247 5230 	movw	r2, #30000	; 0x7530
 8006578:	4618      	mov	r0, r3
 800657a:	f002 fda9 	bl	80090d0 <osMessageGet>
      if (event.status == osEventMessage) {
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b10      	cmp	r3, #16
 8006582:	d14d      	bne.n	8006620 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	2b01      	cmp	r3, #1
 8006588:	d14a      	bne.n	8006620 <SD_read+0x100>
          res = RES_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006590:	e046      	b.n	8006620 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8006592:	2300      	movs	r3, #0
 8006594:	633b      	str	r3, [r7, #48]	; 0x30
 8006596:	e032      	b.n	80065fe <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	617a      	str	r2, [r7, #20]
 800659e:	2201      	movs	r2, #1
 80065a0:	4619      	mov	r1, r3
 80065a2:	4823      	ldr	r0, [pc, #140]	; (8006630 <SD_read+0x110>)
 80065a4:	f7ff fdfa 	bl	800619c <BSP_SD_ReadBlocks_DMA>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 80065ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d128      	bne.n	8006608 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80065b6:	4b1d      	ldr	r3, [pc, #116]	; (800662c <SD_read+0x10c>)
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	463b      	mov	r3, r7
 80065bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 fd85 	bl	80090d0 <osMessageGet>
 80065c6:	f107 0320 	add.w	r3, r7, #32
 80065ca:	463a      	mov	r2, r7
 80065cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80065ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d10f      	bne.n	80065f8 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10c      	bne.n	80065f8 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4a13      	ldr	r2, [pc, #76]	; (8006630 <SD_read+0x110>)
 80065e2:	4618      	mov	r0, r3
 80065e4:	4611      	mov	r1, r2
 80065e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ea:	461a      	mov	r2, r3
 80065ec:	f005 fe06 	bl	800c1fc <memcpy>
            buff += BLOCKSIZE;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80065f6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	3301      	adds	r3, #1
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d8c8      	bhi.n	8006598 <SD_read+0x78>
 8006606:	e000      	b.n	800660a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8006608:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d106      	bne.n	8006620 <SD_read+0x100>
 8006612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <SD_read+0x100>
      res = RES_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8006620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8006624:	4618      	mov	r0, r3
 8006626:	3738      	adds	r7, #56	; 0x38
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000a9c 	.word	0x20000a9c
 8006630:	2000089c 	.word	0x2000089c

08006634 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b090      	sub	sp, #64	; 0x40
 8006638:	af00      	add	r7, sp, #0
 800663a:	61b9      	str	r1, [r7, #24]
 800663c:	617a      	str	r2, [r7, #20]
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	4603      	mov	r3, r0
 8006642:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800664a:	f247 5030 	movw	r0, #30000	; 0x7530
 800664e:	f7ff fedd 	bl	800640c <SD_CheckStatusWithTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	da02      	bge.n	800665e <SD_write+0x2a>
  {
    return res;
 8006658:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800665c:	e07c      	b.n	8006758 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d12e      	bne.n	80066c6 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	69b8      	ldr	r0, [r7, #24]
 800666e:	f7ff fdbd 	bl	80061ec <BSP_SD_WriteBlocks_DMA>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d16d      	bne.n	8006754 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006678:	4b39      	ldr	r3, [pc, #228]	; (8006760 <SD_write+0x12c>)
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006680:	f247 5230 	movw	r2, #30000	; 0x7530
 8006684:	4618      	mov	r0, r3
 8006686:	f002 fd23 	bl	80090d0 <osMessageGet>

      if (event.status == osEventMessage)
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	2b10      	cmp	r3, #16
 800668e:	d161      	bne.n	8006754 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b02      	cmp	r3, #2
 8006694:	d15e      	bne.n	8006754 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8006696:	f002 fb43 	bl	8008d20 <osKernelSysTick>
 800669a:	4603      	mov	r3, r0
 800669c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80066a0:	3330      	adds	r3, #48	; 0x30
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80066a4:	e008      	b.n	80066b8 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066a6:	f7ff fdc9 	bl	800623c <BSP_SD_GetCardState>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <SD_write+0x84>
            {
              res = RES_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80066b6:	e04d      	b.n	8006754 <SD_write+0x120>
          while(timer > osKernelSysTick())
 80066b8:	f002 fb32 	bl	8008d20 <osKernelSysTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d8f0      	bhi.n	80066a6 <SD_write+0x72>
 80066c4:	e046      	b.n	8006754 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 80066c6:	2300      	movs	r3, #0
 80066c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ca:	e032      	b.n	8006732 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	617a      	str	r2, [r7, #20]
 80066d2:	2201      	movs	r2, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	4823      	ldr	r0, [pc, #140]	; (8006764 <SD_write+0x130>)
 80066d8:	f7ff fd88 	bl	80061ec <BSP_SD_WriteBlocks_DMA>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 80066e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d128      	bne.n	800673c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <SD_write+0x12c>)
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	463b      	mov	r3, r7
 80066f0:	f247 5230 	movw	r2, #30000	; 0x7530
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 fceb 	bl	80090d0 <osMessageGet>
 80066fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fe:	463a      	mov	r2, r7
 8006700:	ca07      	ldmia	r2, {r0, r1, r2}
 8006702:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2b10      	cmp	r3, #16
 800670a:	d10f      	bne.n	800672c <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	2b02      	cmp	r3, #2
 8006710:	d10c      	bne.n	800672c <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <SD_write+0x130>)
 8006716:	4618      	mov	r0, r3
 8006718:	4611      	mov	r1, r2
 800671a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671e:	461a      	mov	r2, r3
 8006720:	f005 fd6c 	bl	800c1fc <memcpy>
            buff += BLOCKSIZE;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800672a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	3301      	adds	r3, #1
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d8c8      	bhi.n	80066cc <SD_write+0x98>
 800673a:	e000      	b.n	800673e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800673c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d106      	bne.n	8006754 <SD_write+0x120>
 8006746:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <SD_write+0x120>
      res = RES_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8006754:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8006758:	4618      	mov	r0, r3
 800675a:	3740      	adds	r7, #64	; 0x40
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000a9c 	.word	0x20000a9c
 8006764:	2000089c 	.word	0x2000089c

08006768 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	; 0x30
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	603a      	str	r2, [r7, #0]
 8006772:	71fb      	strb	r3, [r7, #7]
 8006774:	460b      	mov	r3, r1
 8006776:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800677e:	4b25      	ldr	r3, [pc, #148]	; (8006814 <SD_ioctl+0xac>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <SD_ioctl+0x28>
 800678c:	2303      	movs	r3, #3
 800678e:	e03c      	b.n	800680a <SD_ioctl+0xa2>

  switch (cmd)
 8006790:	79bb      	ldrb	r3, [r7, #6]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d834      	bhi.n	8006800 <SD_ioctl+0x98>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <SD_ioctl+0x34>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067b5 	.word	0x080067b5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067e7 	.word	0x080067e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067b2:	e028      	b.n	8006806 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fd5d 	bl	8006278 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067ca:	e01c      	b.n	8006806 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067cc:	f107 030c 	add.w	r3, r7, #12
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fd51 	bl	8006278 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	b29a      	uxth	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067e4:	e00f      	b.n	8006806 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fd44 	bl	8006278 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	0a5a      	lsrs	r2, r3, #9
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067fe:	e002      	b.n	8006806 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006800:	2304      	movs	r3, #4
 8006802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800680a:	4618      	mov	r0, r3
 800680c:	3730      	adds	r7, #48	; 0x30
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000070 	.word	0x20000070

08006818 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <BSP_SD_WriteCpltCallback+0x18>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	2102      	movs	r1, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f002 fc12 	bl	8009050 <osMessagePut>
}
 800682c:	bf00      	nop
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000a9c 	.word	0x20000a9c

08006834 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <BSP_SD_ReadCpltCallback+0x18>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f002 fc04 	bl	8009050 <osMessagePut>
}
 8006848:	bf00      	nop
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000a9c 	.word	0x20000a9c

08006850 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	4a08      	ldr	r2, [pc, #32]	; (8006880 <disk_status+0x30>)
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	79fa      	ldrb	r2, [r7, #7]
 8006868:	4905      	ldr	r1, [pc, #20]	; (8006880 <disk_status+0x30>)
 800686a:	440a      	add	r2, r1
 800686c:	7a12      	ldrb	r2, [r2, #8]
 800686e:	4610      	mov	r0, r2
 8006870:	4798      	blx	r3
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20000ac8 	.word	0x20000ac8

08006884 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	4a0d      	ldr	r2, [pc, #52]	; (80068cc <disk_initialize+0x48>)
 8006896:	5cd3      	ldrb	r3, [r2, r3]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d111      	bne.n	80068c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	4a0b      	ldr	r2, [pc, #44]	; (80068cc <disk_initialize+0x48>)
 80068a0:	2101      	movs	r1, #1
 80068a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <disk_initialize+0x48>)
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	79fa      	ldrb	r2, [r7, #7]
 80068b2:	4906      	ldr	r1, [pc, #24]	; (80068cc <disk_initialize+0x48>)
 80068b4:	440a      	add	r2, r1
 80068b6:	7a12      	ldrb	r2, [r2, #8]
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000ac8 	.word	0x20000ac8

080068d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <disk_read+0x3c>)
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	689c      	ldr	r4, [r3, #8]
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	4a07      	ldr	r2, [pc, #28]	; (800690c <disk_read+0x3c>)
 80068f0:	4413      	add	r3, r2
 80068f2:	7a18      	ldrb	r0, [r3, #8]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	47a0      	blx	r4
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	20000ac8 	.word	0x20000ac8

08006910 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	4a0a      	ldr	r2, [pc, #40]	; (800694c <disk_write+0x3c>)
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68dc      	ldr	r4, [r3, #12]
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <disk_write+0x3c>)
 8006930:	4413      	add	r3, r2
 8006932:	7a18      	ldrb	r0, [r3, #8]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	47a0      	blx	r4
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	20000ac8 	.word	0x20000ac8

08006950 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	603a      	str	r2, [r7, #0]
 800695a:	71fb      	strb	r3, [r7, #7]
 800695c:	460b      	mov	r3, r1
 800695e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	4a09      	ldr	r2, [pc, #36]	; (8006988 <disk_ioctl+0x38>)
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	79fa      	ldrb	r2, [r7, #7]
 800696e:	4906      	ldr	r1, [pc, #24]	; (8006988 <disk_ioctl+0x38>)
 8006970:	440a      	add	r2, r1
 8006972:	7a10      	ldrb	r0, [r2, #8]
 8006974:	79b9      	ldrb	r1, [r7, #6]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4798      	blx	r3
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
  return res;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20000ac8 	.word	0x20000ac8

0800698c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3301      	adds	r3, #1
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	b21a      	sxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	b21b      	sxth	r3, r3
 80069ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80069ae:	89fb      	ldrh	r3, [r7, #14]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3303      	adds	r3, #3
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	3202      	adds	r2, #2
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	3201      	adds	r2, #1
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
	return rv;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	887a      	ldrh	r2, [r7, #2]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	887a      	ldrh	r2, [r7, #2]
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	0a1b      	lsrs	r3, r3, #8
 8006a70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	1c53      	adds	r3, r2, #1
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	6179      	str	r1, [r7, #20]
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f1      	bne.n	8006aa2 <mem_cpy+0x1a>
	}
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	617a      	str	r2, [r7, #20]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1f3      	bne.n	8006ad8 <mem_set+0x10>
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006afa:	b480      	push	{r7}
 8006afc:	b089      	sub	sp, #36	; 0x24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	61fa      	str	r2, [r7, #28]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	61ba      	str	r2, [r7, #24]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	1acb      	subs	r3, r1, r3
 8006b26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <mem_cmp+0x40>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0eb      	beq.n	8006b12 <mem_cmp+0x18>

	return r;
 8006b3a:	697b      	ldr	r3, [r7, #20]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3724      	adds	r7, #36	; 0x24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b50:	e002      	b.n	8006b58 <chk_chr+0x12>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3301      	adds	r3, #1
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <chk_chr+0x26>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d1f2      	bne.n	8006b52 <chk_chr+0xc>
	return *str;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <lock_fs+0x22>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f002 f86c 	bl	8008c6a <ff_req_grant>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <lock_fs+0x22>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <lock_fs+0x24>
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00d      	beq.n	8006bd4 <unlock_fs+0x2e>
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	d00a      	beq.n	8006bd4 <unlock_fs+0x2e>
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	2b0b      	cmp	r3, #11
 8006bc2:	d007      	beq.n	8006bd4 <unlock_fs+0x2e>
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d004      	beq.n	8006bd4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f002 f860 	bl	8008c94 <ff_rel_grant>
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e029      	b.n	8006c44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <chk_lock+0xb0>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4413      	add	r3, r2
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01d      	beq.n	8006c3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bfe:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <chk_lock+0xb0>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d116      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c10:	4a1e      	ldr	r2, [pc, #120]	; (8006c8c <chk_lock+0xb0>)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d10c      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c24:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <chk_lock+0xb0>)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d102      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c38:	e007      	b.n	8006c4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d9d2      	bls.n	8006bf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d109      	bne.n	8006c64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d102      	bne.n	8006c5c <chk_lock+0x80>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d101      	bne.n	8006c60 <chk_lock+0x84>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e010      	b.n	8006c82 <chk_lock+0xa6>
 8006c60:	2312      	movs	r3, #18
 8006c62:	e00e      	b.n	8006c82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <chk_lock+0xa0>
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <chk_lock+0xb0>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	330c      	adds	r3, #12
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d101      	bne.n	8006c80 <chk_lock+0xa4>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	e000      	b.n	8006c82 <chk_lock+0xa6>
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr
 8006c8c:	20000aa8 	.word	0x20000aa8

08006c90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c96:	2300      	movs	r3, #0
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	e002      	b.n	8006ca2 <enq_lock+0x12>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d806      	bhi.n	8006cb6 <enq_lock+0x26>
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <enq_lock+0x3c>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	4413      	add	r3, r2
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f2      	bne.n	8006c9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	20000aa8 	.word	0x20000aa8

08006cd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	e01f      	b.n	8006d20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ce0:	4a41      	ldr	r2, [pc, #260]	; (8006de8 <inc_lock+0x118>)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4413      	add	r3, r2
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d113      	bne.n	8006d1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006cf2:	4a3d      	ldr	r2, [pc, #244]	; (8006de8 <inc_lock+0x118>)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d109      	bne.n	8006d1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d06:	4a38      	ldr	r2, [pc, #224]	; (8006de8 <inc_lock+0x118>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3308      	adds	r3, #8
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d006      	beq.n	8006d28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d9dc      	bls.n	8006ce0 <inc_lock+0x10>
 8006d26:	e000      	b.n	8006d2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006d28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d132      	bne.n	8006d96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e002      	b.n	8006d3c <inc_lock+0x6c>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d806      	bhi.n	8006d50 <inc_lock+0x80>
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <inc_lock+0x118>)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	4413      	add	r3, r2
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f2      	bne.n	8006d36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d101      	bne.n	8006d5a <inc_lock+0x8a>
 8006d56:	2300      	movs	r3, #0
 8006d58:	e040      	b.n	8006ddc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4922      	ldr	r1, [pc, #136]	; (8006de8 <inc_lock+0x118>)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	440b      	add	r3, r1
 8006d66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	491e      	ldr	r1, [pc, #120]	; (8006de8 <inc_lock+0x118>)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	440b      	add	r3, r1
 8006d74:	3304      	adds	r3, #4
 8006d76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	491a      	ldr	r1, [pc, #104]	; (8006de8 <inc_lock+0x118>)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	440b      	add	r3, r1
 8006d84:	3308      	adds	r3, #8
 8006d86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d88:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <inc_lock+0x118>)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	4413      	add	r3, r2
 8006d90:	330c      	adds	r3, #12
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <inc_lock+0xe0>
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <inc_lock+0x118>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	4413      	add	r3, r2
 8006da4:	330c      	adds	r3, #12
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <inc_lock+0xe0>
 8006dac:	2300      	movs	r3, #0
 8006dae:	e015      	b.n	8006ddc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <inc_lock+0xf8>
 8006db6:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <inc_lock+0x118>)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4413      	add	r3, r2
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	e001      	b.n	8006dcc <inc_lock+0xfc>
 8006dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dcc:	4906      	ldr	r1, [pc, #24]	; (8006de8 <inc_lock+0x118>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	440b      	add	r3, r1
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000aa8 	.word	0x20000aa8

08006dec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e010      	b.n	8006e1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006dfa:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <clear_lock+0x40>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	4413      	add	r3, r2
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d105      	bne.n	8006e16 <clear_lock+0x2a>
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <clear_lock+0x40>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	4413      	add	r3, r2
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d9eb      	bls.n	8006dfa <clear_lock+0xe>
	}
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	20000aa8 	.word	0x20000aa8

08006e30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d034      	beq.n	8006eae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7858      	ldrb	r0, [r3, #1]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e54:	2301      	movs	r3, #1
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	f7ff fd5a 	bl	8006910 <disk_write>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	e022      	b.n	8006eae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	1ad2      	subs	r2, r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d217      	bcs.n	8006eae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	789b      	ldrb	r3, [r3, #2]
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	e010      	b.n	8006ea8 <sync_window+0x78>
					wsect += fs->fsize;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7858      	ldrb	r0, [r3, #1]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	f7ff fd37 	bl	8006910 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d8eb      	bhi.n	8006e86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d01b      	beq.n	8006f08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ffad 	bl	8006e30 <sync_window>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7858      	ldrb	r0, [r3, #1]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006eea:	2301      	movs	r3, #1
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	f7ff fcef 	bl	80068d0 <disk_read>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ff87 	bl	8006e30 <sync_window>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d158      	bne.n	8006fde <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d148      	bne.n	8006fc6 <sync_fs+0xb2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	791b      	ldrb	r3, [r3, #4]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d144      	bne.n	8006fc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3334      	adds	r3, #52	; 0x34
 8006f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fdbe 	bl	8006ac8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3334      	adds	r3, #52	; 0x34
 8006f50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fd50 	bl	80069fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3334      	adds	r3, #52	; 0x34
 8006f62:	4921      	ldr	r1, [pc, #132]	; (8006fe8 <sync_fs+0xd4>)
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fd64 	bl	8006a32 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3334      	adds	r3, #52	; 0x34
 8006f6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006f72:	491e      	ldr	r1, [pc, #120]	; (8006fec <sync_fs+0xd8>)
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff fd5c 	bl	8006a32 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3334      	adds	r3, #52	; 0x34
 8006f7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7ff fd52 	bl	8006a32 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3334      	adds	r3, #52	; 0x34
 8006f92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7ff fd48 	bl	8006a32 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7858      	ldrb	r0, [r3, #1]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f7ff fca8 	bl	8006910 <disk_write>
			fs->fsi_flag = 0;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fcbe 	bl	8006950 <disk_ioctl>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <sync_fs+0xca>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	41615252 	.word	0x41615252
 8006fec:	61417272 	.word	0x61417272

08006ff0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	3b02      	subs	r3, #2
 8006ffe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	3b02      	subs	r3, #2
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d301      	bcc.n	8007010 <clust2sect+0x20>
 800700c:	2300      	movs	r3, #0
 800700e:	e008      	b.n	8007022 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	895b      	ldrh	r3, [r3, #10]
 8007014:	461a      	mov	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	fb03 f202 	mul.w	r2, r3, r2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4413      	add	r3, r2
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d904      	bls.n	800704c <get_fat+0x20>
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <get_fat+0x26>
		val = 1;	/* Internal error */
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e08c      	b.n	800716c <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d045      	beq.n	80070ec <get_fat+0xc0>
 8007060:	2b03      	cmp	r3, #3
 8007062:	d05d      	beq.n	8007120 <get_fat+0xf4>
 8007064:	2b01      	cmp	r3, #1
 8007066:	d177      	bne.n	8007158 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	0a5b      	lsrs	r3, r3, #9
 800707e:	4413      	add	r3, r2
 8007080:	4619      	mov	r1, r3
 8007082:	6938      	ldr	r0, [r7, #16]
 8007084:	f7ff ff18 	bl	8006eb8 <move_window>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d167      	bne.n	800715e <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	60fa      	str	r2, [r7, #12]
 8007094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0a5b      	lsrs	r3, r3, #9
 80070aa:	4413      	add	r3, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	6938      	ldr	r0, [r7, #16]
 80070b0:	f7ff ff02 	bl	8006eb8 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d153      	bne.n	8007162 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4413      	add	r3, r2
 80070c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <get_fat+0xb6>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	e002      	b.n	80070e8 <get_fat+0xbc>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e8:	617b      	str	r3, [r7, #20]
			break;
 80070ea:	e03f      	b.n	800716c <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	4413      	add	r3, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	6938      	ldr	r0, [r7, #16]
 80070fa:	f7ff fedd 	bl	8006eb8 <move_window>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d130      	bne.n	8007166 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007112:	4413      	add	r3, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fc39 	bl	800698c <ld_word>
 800711a:	4603      	mov	r3, r0
 800711c:	617b      	str	r3, [r7, #20]
			break;
 800711e:	e025      	b.n	800716c <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	09db      	lsrs	r3, r3, #7
 8007128:	4413      	add	r3, r2
 800712a:	4619      	mov	r1, r3
 800712c:	6938      	ldr	r0, [r7, #16]
 800712e:	f7ff fec3 	bl	8006eb8 <move_window>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d118      	bne.n	800716a <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007146:	4413      	add	r3, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fc36 	bl	80069ba <ld_dword>
 800714e:	4603      	mov	r3, r0
 8007150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007154:	617b      	str	r3, [r7, #20]
			break;
 8007156:	e009      	b.n	800716c <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e006      	b.n	800716c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800715e:	bf00      	nop
 8007160:	e004      	b.n	800716c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007162:	bf00      	nop
 8007164:	e002      	b.n	800716c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800716a:	bf00      	nop
		}
	}

	return val;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007176:	b590      	push	{r4, r7, lr}
 8007178:	b089      	sub	sp, #36	; 0x24
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007182:	2302      	movs	r3, #2
 8007184:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b01      	cmp	r3, #1
 800718a:	f240 80d6 	bls.w	800733a <put_fat+0x1c4>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	f080 80d0 	bcs.w	800733a <put_fat+0x1c4>
		switch (fs->fs_type) {
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d073      	beq.n	800728a <put_fat+0x114>
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f000 8091 	beq.w	80072ca <put_fat+0x154>
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	f040 80c6 	bne.w	800733a <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	4413      	add	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	4413      	add	r3, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fe75 	bl	8006eb8 <move_window>
 80071ce:	4603      	mov	r3, r0
 80071d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80a9 	bne.w	800732c <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	1c59      	adds	r1, r3, #1
 80071e4:	61b9      	str	r1, [r7, #24]
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	4413      	add	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00d      	beq.n	8007214 <put_fat+0x9e>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b25b      	sxtb	r3, r3
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	b25a      	sxtb	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	b25b      	sxtb	r3, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	b25b      	sxtb	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e001      	b.n	8007218 <put_fat+0xa2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	0a5b      	lsrs	r3, r3, #9
 800722a:	4413      	add	r3, r2
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fe42 	bl	8006eb8 <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007238:	7ffb      	ldrb	r3, [r7, #31]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d178      	bne.n	8007330 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	4413      	add	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <put_fat+0xea>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	091b      	lsrs	r3, r3, #4
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e00e      	b.n	800727e <put_fat+0x108>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f023 030f 	bic.w	r3, r3, #15
 800726a:	b25a      	sxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b25b      	sxtb	r3, r3
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	b25b      	sxtb	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b25b      	sxtb	r3, r3
 800727c:	b2db      	uxtb	r3, r3
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	70da      	strb	r2, [r3, #3]
			break;
 8007288:	e057      	b.n	800733a <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	4413      	add	r3, r2
 8007294:	4619      	mov	r1, r3
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fe0e 	bl	8006eb8 <move_window>
 800729c:	4603      	mov	r3, r0
 800729e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072a0:	7ffb      	ldrb	r3, [r7, #31]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d146      	bne.n	8007334 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072b4:	4413      	add	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	b292      	uxth	r2, r2
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fb9e 	bl	80069fe <st_word>
			fs->wflag = 1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	70da      	strb	r2, [r3, #3]
			break;
 80072c8:	e037      	b.n	800733a <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	4413      	add	r3, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff fdee 	bl	8006eb8 <move_window>
 80072dc:	4603      	mov	r3, r0
 80072de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d128      	bne.n	8007338 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80072fa:	4413      	add	r3, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fb5c 	bl	80069ba <ld_dword>
 8007302:	4603      	mov	r3, r0
 8007304:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007308:	4323      	orrs	r3, r4
 800730a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800731a:	4413      	add	r3, r2
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fb87 	bl	8006a32 <st_dword>
			fs->wflag = 1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	70da      	strb	r2, [r3, #3]
			break;
 800732a:	e006      	b.n	800733a <put_fat+0x1c4>
			if (res != FR_OK) break;
 800732c:	bf00      	nop
 800732e:	e004      	b.n	800733a <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007330:	bf00      	nop
 8007332:	e002      	b.n	800733a <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007338:	bf00      	nop
		}
	}
	return res;
 800733a:	7ffb      	ldrb	r3, [r7, #31]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3724      	adds	r7, #36	; 0x24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd90      	pop	{r4, r7, pc}

08007344 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d904      	bls.n	800736a <remove_chain+0x26>
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d301      	bcc.n	800736e <remove_chain+0x2a>
 800736a:	2302      	movs	r3, #2
 800736c:	e04b      	b.n	8007406 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	69b8      	ldr	r0, [r7, #24]
 800737c:	f7ff fefb 	bl	8007176 <put_fat>
 8007380:	4603      	mov	r3, r0
 8007382:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007384:	7ffb      	ldrb	r3, [r7, #31]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <remove_chain+0x4a>
 800738a:	7ffb      	ldrb	r3, [r7, #31]
 800738c:	e03b      	b.n	8007406 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fe4b 	bl	800702c <get_fat>
 8007396:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d031      	beq.n	8007402 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <remove_chain+0x64>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e02e      	b.n	8007406 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d101      	bne.n	80073b4 <remove_chain+0x70>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e028      	b.n	8007406 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80073b4:	2200      	movs	r2, #0
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	69b8      	ldr	r0, [r7, #24]
 80073ba:	f7ff fedc 	bl	8007176 <put_fat>
 80073be:	4603      	mov	r3, r0
 80073c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <remove_chain+0x88>
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	e01c      	b.n	8007406 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	695a      	ldr	r2, [r3, #20]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	3b02      	subs	r3, #2
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d20b      	bcs.n	80073f2 <remove_chain+0xae>
			fs->free_clst++;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3c6      	bcc.n	800738e <remove_chain+0x4a>
 8007400:	e000      	b.n	8007404 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007402:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <create_chain+0x2c>
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	429a      	cmp	r2, r3
 8007438:	d31b      	bcc.n	8007472 <create_chain+0x64>
 800743a:	2301      	movs	r3, #1
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e018      	b.n	8007472 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fdf2 	bl	800702c <get_fat>
 8007448:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d801      	bhi.n	8007454 <create_chain+0x46>
 8007450:	2301      	movs	r3, #1
 8007452:	e070      	b.n	8007536 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d101      	bne.n	8007460 <create_chain+0x52>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	e06a      	b.n	8007536 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	429a      	cmp	r2, r3
 8007468:	d201      	bcs.n	800746e <create_chain+0x60>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	e063      	b.n	8007536 <create_chain+0x128>
		scl = clst;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3301      	adds	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	429a      	cmp	r2, r3
 8007484:	d307      	bcc.n	8007496 <create_chain+0x88>
				ncl = 2;
 8007486:	2302      	movs	r3, #2
 8007488:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d901      	bls.n	8007496 <create_chain+0x88>
 8007492:	2300      	movs	r3, #0
 8007494:	e04f      	b.n	8007536 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007496:	69f9      	ldr	r1, [r7, #28]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fdc7 	bl	800702c <get_fat>
 800749e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d003      	beq.n	80074b4 <create_chain+0xa6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d101      	bne.n	80074b8 <create_chain+0xaa>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	e03e      	b.n	8007536 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d1da      	bne.n	8007476 <create_chain+0x68>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e038      	b.n	8007536 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80074c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	6938      	ldr	r0, [r7, #16]
 80074ce:	f7ff fe52 	bl	8007176 <put_fat>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <create_chain+0xe2>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6938      	ldr	r0, [r7, #16]
 80074e8:	f7ff fe45 	bl	8007176 <put_fat>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d116      	bne.n	8007524 <create_chain+0x116>
		fs->last_clst = ncl;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	3b02      	subs	r3, #2
 8007506:	429a      	cmp	r2, r3
 8007508:	d804      	bhi.n	8007514 <create_chain+0x106>
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	e007      	b.n	8007534 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d102      	bne.n	8007530 <create_chain+0x122>
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	e000      	b.n	8007532 <create_chain+0x124>
 8007530:	2301      	movs	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007534:	69fb      	ldr	r3, [r7, #28]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800753e:	b480      	push	{r7}
 8007540:	b087      	sub	sp, #28
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	3304      	adds	r3, #4
 8007554:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	8952      	ldrh	r2, [r2, #10]
 800755e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007562:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	613a      	str	r2, [r7, #16]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <clmt_clust+0x3a>
 8007574:	2300      	movs	r3, #0
 8007576:	e010      	b.n	800759a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	d307      	bcc.n	8007590 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3304      	adds	r3, #4
 800758c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800758e:	e7e9      	b.n	8007564 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007590:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	4413      	add	r3, r2
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ba:	d204      	bcs.n	80075c6 <dir_sdi+0x22>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80075c6:	2302      	movs	r3, #2
 80075c8:	e063      	b.n	8007692 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <dir_sdi+0x46>
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d902      	bls.n	80075ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10c      	bne.n	800760a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	8912      	ldrh	r2, [r2, #8]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d301      	bcc.n	8007600 <dir_sdi+0x5c>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e048      	b.n	8007692 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	61da      	str	r2, [r3, #28]
 8007608:	e029      	b.n	800765e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	895b      	ldrh	r3, [r3, #10]
 800760e:	025b      	lsls	r3, r3, #9
 8007610:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007612:	e019      	b.n	8007648 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6979      	ldr	r1, [r7, #20]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fd07 	bl	800702c <get_fat>
 800761e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d101      	bne.n	800762c <dir_sdi+0x88>
 8007628:	2301      	movs	r3, #1
 800762a:	e032      	b.n	8007692 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d904      	bls.n	800763c <dir_sdi+0x98>
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d301      	bcc.n	8007640 <dir_sdi+0x9c>
 800763c:	2302      	movs	r3, #2
 800763e:	e028      	b.n	8007692 <dir_sdi+0xee>
			ofs -= csz;
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	429a      	cmp	r2, r3
 800764e:	d2e1      	bcs.n	8007614 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	6938      	ldr	r0, [r7, #16]
 8007654:	f7ff fccc 	bl	8006ff0 <clust2sect>
 8007658:	4602      	mov	r2, r0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <dir_sdi+0xcc>
 800766c:	2302      	movs	r3, #2
 800766e:	e010      	b.n	8007692 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	0a5b      	lsrs	r3, r3, #9
 8007678:	441a      	add	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	441a      	add	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	3320      	adds	r3, #32
 80076b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <dir_next+0x28>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c0:	d301      	bcc.n	80076c6 <dir_next+0x2c>
 80076c2:	2304      	movs	r3, #4
 80076c4:	e0aa      	b.n	800781c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8098 	bne.w	8007802 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	8912      	ldrh	r2, [r2, #8]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f0c0 8088 	bcc.w	8007802 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	61da      	str	r2, [r3, #28]
 80076f8:	2304      	movs	r3, #4
 80076fa:	e08f      	b.n	800781c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	0a5b      	lsrs	r3, r3, #9
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	8952      	ldrh	r2, [r2, #10]
 8007704:	3a01      	subs	r2, #1
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d17a      	bne.n	8007802 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7ff fc89 	bl	800702c <get_fat>
 800771a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d801      	bhi.n	8007726 <dir_next+0x8c>
 8007722:	2302      	movs	r3, #2
 8007724:	e07a      	b.n	800781c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d101      	bne.n	8007732 <dir_next+0x98>
 800772e:	2301      	movs	r3, #1
 8007730:	e074      	b.n	800781c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	d358      	bcc.n	80077ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d104      	bne.n	800774c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	61da      	str	r2, [r3, #28]
 8007748:	2304      	movs	r3, #4
 800774a:	e067      	b.n	800781c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7ff fe5a 	bl	800740e <create_chain>
 800775a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <dir_next+0xcc>
 8007762:	2307      	movs	r3, #7
 8007764:	e05a      	b.n	800781c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <dir_next+0xd6>
 800776c:	2302      	movs	r3, #2
 800776e:	e055      	b.n	800781c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d101      	bne.n	800777c <dir_next+0xe2>
 8007778:	2301      	movs	r3, #1
 800777a:	e04f      	b.n	800781c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fb57 	bl	8006e30 <sync_window>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <dir_next+0xf2>
 8007788:	2301      	movs	r3, #1
 800778a:	e047      	b.n	800781c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3334      	adds	r3, #52	; 0x34
 8007790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff f996 	bl	8006ac8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	6979      	ldr	r1, [r7, #20]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fc24 	bl	8006ff0 <clust2sect>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
 80077ae:	e012      	b.n	80077d6 <dir_next+0x13c>
						fs->wflag = 1;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fb3a 	bl	8006e30 <sync_window>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <dir_next+0x12c>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e02a      	b.n	800781c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3301      	adds	r3, #1
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	895b      	ldrh	r3, [r3, #10]
 80077da:	461a      	mov	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4293      	cmp	r3, r2
 80077e0:	d3e6      	bcc.n	80077b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fbfa 	bl	8006ff0 <clust2sect>
 80077fc:	4602      	mov	r2, r0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007814:	441a      	add	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff feb4 	bl	80075a4 <dir_sdi>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d12b      	bne.n	800789e <dir_alloc+0x7a>
		n = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fb31 	bl	8006eb8 <move_window>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d11d      	bne.n	800789c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2be5      	cmp	r3, #229	; 0xe5
 8007868:	d004      	beq.n	8007874 <dir_alloc+0x50>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3301      	adds	r3, #1
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d102      	bne.n	8007888 <dir_alloc+0x64>
 8007882:	e00c      	b.n	800789e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007888:	2101      	movs	r1, #1
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff ff05 	bl	800769a <dir_next>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0d7      	beq.n	800784a <dir_alloc+0x26>
 800789a:	e000      	b.n	800789e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800789c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d101      	bne.n	80078a8 <dir_alloc+0x84>
 80078a4:	2307      	movs	r3, #7
 80078a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	331a      	adds	r3, #26
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff f863 	bl	800698c <ld_word>
 80078c6:	4603      	mov	r3, r0
 80078c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d109      	bne.n	80078e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	3314      	adds	r3, #20
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff f858 	bl	800698c <ld_word>
 80078dc:	4603      	mov	r3, r0
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078e6:	68fb      	ldr	r3, [r7, #12]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	331a      	adds	r3, #26
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	b292      	uxth	r2, r2
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff f879 	bl	80069fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d109      	bne.n	8007928 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f103 0214 	add.w	r2, r3, #20
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	b29b      	uxth	r3, r3
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7ff f86b 	bl	80069fe <st_word>
	}
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fe2f 	bl	80075a4 <dir_sdi>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <dir_find+0x24>
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	e03e      	b.n	80079d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4619      	mov	r1, r3
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f7ff faac 	bl	8006eb8 <move_window>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d12f      	bne.n	80079ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <dir_find+0x4e>
 8007978:	2304      	movs	r3, #4
 800797a:	75fb      	strb	r3, [r7, #23]
 800797c:	e028      	b.n	80079d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	330b      	adds	r3, #11
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800798a:	b2da      	uxtb	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	330b      	adds	r3, #11
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <dir_find+0x86>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a18      	ldr	r0, [r3, #32]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	220b      	movs	r2, #11
 80079aa:	4619      	mov	r1, r3
 80079ac:	f7ff f8a5 	bl	8006afa <mem_cmp>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fe6e 	bl	800769a <dir_next>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0c5      	beq.n	8007954 <dir_find+0x24>
 80079c8:	e002      	b.n	80079d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079ce:	bf00      	nop

	return res;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80079e8:	2101      	movs	r1, #1
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff1a 	bl	8007824 <dir_alloc>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11c      	bne.n	8007a34 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	4619      	mov	r1, r3
 8007a00:	68b8      	ldr	r0, [r7, #8]
 8007a02:	f7ff fa59 	bl	8006eb8 <move_window>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d111      	bne.n	8007a34 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	2220      	movs	r2, #32
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff f855 	bl	8006ac8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a18      	ldr	r0, [r3, #32]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3324      	adds	r3, #36	; 0x24
 8007a26:	220b      	movs	r2, #11
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7ff f82d 	bl	8006a88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2201      	movs	r2, #1
 8007a32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3324      	adds	r3, #36	; 0x24
 8007a54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a56:	220b      	movs	r2, #11
 8007a58:	2120      	movs	r1, #32
 8007a5a:	68b8      	ldr	r0, [r7, #8]
 8007a5c:	f7ff f834 	bl	8006ac8 <mem_set>
	si = i = 0; ni = 8;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	2308      	movs	r3, #8
 8007a6a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	617a      	str	r2, [r7, #20]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a7a:	7ffb      	ldrb	r3, [r7, #31]
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d94e      	bls.n	8007b1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	2b2f      	cmp	r3, #47	; 0x2f
 8007a84:	d006      	beq.n	8007a94 <create_name+0x54>
 8007a86:	7ffb      	ldrb	r3, [r7, #31]
 8007a88:	2b5c      	cmp	r3, #92	; 0x5c
 8007a8a:	d110      	bne.n	8007aae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a8c:	e002      	b.n	8007a94 <create_name+0x54>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	3301      	adds	r3, #1
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8007a9e:	d0f6      	beq.n	8007a8e <create_name+0x4e>
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8007aaa:	d0f0      	beq.n	8007a8e <create_name+0x4e>
			break;
 8007aac:	e038      	b.n	8007b20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007aae:	7ffb      	ldrb	r3, [r7, #31]
 8007ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab2:	d003      	beq.n	8007abc <create_name+0x7c>
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d30c      	bcc.n	8007ad6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b0b      	cmp	r3, #11
 8007ac0:	d002      	beq.n	8007ac8 <create_name+0x88>
 8007ac2:	7ffb      	ldrb	r3, [r7, #31]
 8007ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac6:	d001      	beq.n	8007acc <create_name+0x8c>
 8007ac8:	2306      	movs	r3, #6
 8007aca:	e044      	b.n	8007b56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007acc:	2308      	movs	r3, #8
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	230b      	movs	r3, #11
 8007ad2:	61bb      	str	r3, [r7, #24]
			continue;
 8007ad4:	e022      	b.n	8007b1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da04      	bge.n	8007ae8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ade:	7ffb      	ldrb	r3, [r7, #31]
 8007ae0:	3b80      	subs	r3, #128	; 0x80
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <create_name+0x120>)
 8007ae4:	5cd3      	ldrb	r3, [r2, r3]
 8007ae6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ae8:	7ffb      	ldrb	r3, [r7, #31]
 8007aea:	4619      	mov	r1, r3
 8007aec:	481d      	ldr	r0, [pc, #116]	; (8007b64 <create_name+0x124>)
 8007aee:	f7ff f82a 	bl	8006b46 <chk_chr>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <create_name+0xbc>
 8007af8:	2306      	movs	r3, #6
 8007afa:	e02c      	b.n	8007b56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007afc:	7ffb      	ldrb	r3, [r7, #31]
 8007afe:	2b60      	cmp	r3, #96	; 0x60
 8007b00:	d905      	bls.n	8007b0e <create_name+0xce>
 8007b02:	7ffb      	ldrb	r3, [r7, #31]
 8007b04:	2b7a      	cmp	r3, #122	; 0x7a
 8007b06:	d802      	bhi.n	8007b0e <create_name+0xce>
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	3b20      	subs	r3, #32
 8007b0c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	613a      	str	r2, [r7, #16]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	7ffa      	ldrb	r2, [r7, #31]
 8007b1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007b1c:	e7a6      	b.n	8007a6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007b1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	441a      	add	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <create_name+0xf4>
 8007b30:	2306      	movs	r3, #6
 8007b32:	e010      	b.n	8007b56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2be5      	cmp	r3, #229	; 0xe5
 8007b3a:	d102      	bne.n	8007b42 <create_name+0x102>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2205      	movs	r2, #5
 8007b40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b42:	7ffb      	ldrb	r3, [r7, #31]
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d801      	bhi.n	8007b4c <create_name+0x10c>
 8007b48:	2204      	movs	r2, #4
 8007b4a:	e000      	b.n	8007b4e <create_name+0x10e>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330b      	adds	r3, #11
 8007b52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	0800e1c4 	.word	0x0800e1c4
 8007b64:	0800e12c 	.word	0x0800e12c

08007b68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b7c:	e002      	b.n	8007b84 <follow_path+0x1c>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b2f      	cmp	r3, #47	; 0x2f
 8007b8a:	d0f8      	beq.n	8007b7e <follow_path+0x16>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b5c      	cmp	r3, #92	; 0x5c
 8007b92:	d0f4      	beq.n	8007b7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b1f      	cmp	r3, #31
 8007ba0:	d80a      	bhi.n	8007bb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2280      	movs	r2, #128	; 0x80
 8007ba6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fcf9 	bl	80075a4 <dir_sdi>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e043      	b.n	8007c40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bb8:	463b      	mov	r3, r7
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff3f 	bl	8007a40 <create_name>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d134      	bne.n	8007c36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff feaf 	bl	8007930 <dir_find>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d127      	bne.n	8007c3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d122      	bne.n	8007c3a <follow_path+0xd2>
 8007bf4:	2305      	movs	r3, #5
 8007bf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007bf8:	e01f      	b.n	8007c3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11c      	bne.n	8007c3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	799b      	ldrb	r3, [r3, #6]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c10:	2305      	movs	r3, #5
 8007c12:	75fb      	strb	r3, [r7, #23]
 8007c14:	e014      	b.n	8007c40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c24:	4413      	add	r3, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fe42 	bl	80078b2 <ld_clust>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c34:	e7c0      	b.n	8007bb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c36:	bf00      	nop
 8007c38:	e002      	b.n	8007c40 <follow_path+0xd8>
				break;
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c3e:	bf00      	nop
			}
		}
	}

	return res;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d031      	beq.n	8007cc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	e002      	b.n	8007c6e <get_ldnumber+0x24>
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d903      	bls.n	8007c7e <get_ldnumber+0x34>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8007c7c:	d1f4      	bne.n	8007c68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b3a      	cmp	r3, #58	; 0x3a
 8007c84:	d11c      	bne.n	8007cc0 <get_ldnumber+0x76>
			tp = *path;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	60fa      	str	r2, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	3b30      	subs	r3, #48	; 0x30
 8007c96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d80e      	bhi.n	8007cbc <get_ldnumber+0x72>
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d10a      	bne.n	8007cbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <get_ldnumber+0x72>
					vol = (int)i;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	e002      	b.n	8007cc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007cc4:	693b      	ldr	r3, [r7, #16]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	70da      	strb	r2, [r3, #3]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff f8e4 	bl	8006eb8 <move_window>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <check_fs+0x2a>
 8007cf6:	2304      	movs	r3, #4
 8007cf8:	e038      	b.n	8007d6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3334      	adds	r3, #52	; 0x34
 8007cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fe42 	bl	800698c <ld_word>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <check_fs+0x48>
 8007d14:	2303      	movs	r3, #3
 8007d16:	e029      	b.n	8007d6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1e:	2be9      	cmp	r3, #233	; 0xe9
 8007d20:	d009      	beq.n	8007d36 <check_fs+0x66>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d28:	2beb      	cmp	r3, #235	; 0xeb
 8007d2a:	d11e      	bne.n	8007d6a <check_fs+0x9a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007d32:	2b90      	cmp	r3, #144	; 0x90
 8007d34:	d119      	bne.n	8007d6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3334      	adds	r3, #52	; 0x34
 8007d3a:	3336      	adds	r3, #54	; 0x36
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe fe3c 	bl	80069ba <ld_dword>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <check_fs+0xa4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d101      	bne.n	8007d52 <check_fs+0x82>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e00c      	b.n	8007d6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3334      	adds	r3, #52	; 0x34
 8007d56:	3352      	adds	r3, #82	; 0x52
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe2e 	bl	80069ba <ld_dword>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <check_fs+0xa8>)
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d101      	bne.n	8007d6a <check_fs+0x9a>
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d6a:	2302      	movs	r3, #2
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	00544146 	.word	0x00544146
 8007d78:	33544146 	.word	0x33544146

08007d7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b096      	sub	sp, #88	; 0x58
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff ff5a 	bl	8007c4a <get_ldnumber>
 8007d96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da01      	bge.n	8007da2 <find_volume+0x26>
 8007d9e:	230b      	movs	r3, #11
 8007da0:	e236      	b.n	8008210 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007da2:	4aac      	ldr	r2, [pc, #688]	; (8008054 <find_volume+0x2d8>)
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <find_volume+0x3a>
 8007db2:	230c      	movs	r3, #12
 8007db4:	e22c      	b.n	8008210 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8007db6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007db8:	f7fe fedf 	bl	8006b7a <lock_fs>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <find_volume+0x4a>
 8007dc2:	230f      	movs	r3, #15
 8007dc4:	e224      	b.n	8008210 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01a      	beq.n	8007e12 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fd35 	bl	8006850 <disk_status>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10c      	bne.n	8007e12 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <find_volume+0x92>
 8007dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	e200      	b.n	8008210 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e1fe      	b.n	8008210 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fd2d 	bl	8006884 <disk_initialize>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e1e7      	b.n	8008210 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <find_volume+0xda>
 8007e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007e52:	230a      	movs	r3, #10
 8007e54:	e1dc      	b.n	8008210 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e5e:	f7ff ff37 	bl	8007cd0 <check_fs>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d14b      	bne.n	8007f08 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e70:	2300      	movs	r3, #0
 8007e72:	643b      	str	r3, [r7, #64]	; 0x40
 8007e74:	e01f      	b.n	8007eb6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e84:	4413      	add	r3, r2
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d006      	beq.n	8007ea0 <find_volume+0x124>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	3308      	adds	r3, #8
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fd8f 	bl	80069ba <ld_dword>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	e000      	b.n	8007ea2 <find_volume+0x126>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007eaa:	440b      	add	r3, r1
 8007eac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d9dc      	bls.n	8007e76 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <find_volume+0x150>
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <find_volume+0x172>
 8007ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee6:	f7ff fef3 	bl	8007cd0 <check_fs>
 8007eea:	4603      	mov	r3, r0
 8007eec:	e000      	b.n	8007ef0 <find_volume+0x174>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d905      	bls.n	8007f08 <find_volume+0x18c>
 8007efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efe:	3301      	adds	r3, #1
 8007f00:	643b      	str	r3, [r7, #64]	; 0x40
 8007f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d9e1      	bls.n	8007ecc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d101      	bne.n	8007f14 <find_volume+0x198>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e17d      	b.n	8008210 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d901      	bls.n	8007f20 <find_volume+0x1a4>
 8007f1c:	230d      	movs	r3, #13
 8007f1e:	e177      	b.n	8008210 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	3334      	adds	r3, #52	; 0x34
 8007f24:	330b      	adds	r3, #11
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fd30 	bl	800698c <ld_word>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f32:	d001      	beq.n	8007f38 <find_volume+0x1bc>
 8007f34:	230d      	movs	r3, #13
 8007f36:	e16b      	b.n	8008210 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	3334      	adds	r3, #52	; 0x34
 8007f3c:	3316      	adds	r3, #22
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fd24 	bl	800698c <ld_word>
 8007f44:	4603      	mov	r3, r0
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <find_volume+0x1e0>
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	3334      	adds	r3, #52	; 0x34
 8007f52:	3324      	adds	r3, #36	; 0x24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fd30 	bl	80069ba <ld_dword>
 8007f5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f60:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	789b      	ldrb	r3, [r3, #2]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d005      	beq.n	8007f80 <find_volume+0x204>
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	789b      	ldrb	r3, [r3, #2]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d001      	beq.n	8007f80 <find_volume+0x204>
 8007f7c:	230d      	movs	r3, #13
 8007f7e:	e147      	b.n	8008210 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	789b      	ldrb	r3, [r3, #2]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	fb02 f303 	mul.w	r3, r2, r3
 8007f8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	895b      	ldrh	r3, [r3, #10]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <find_volume+0x238>
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	895b      	ldrh	r3, [r3, #10]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	895b      	ldrh	r3, [r3, #10]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <find_volume+0x23c>
 8007fb4:	230d      	movs	r3, #13
 8007fb6:	e12b      	b.n	8008210 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	3334      	adds	r3, #52	; 0x34
 8007fbc:	3311      	adds	r3, #17
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fce4 	bl	800698c <ld_word>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	891b      	ldrh	r3, [r3, #8]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <find_volume+0x262>
 8007fda:	230d      	movs	r3, #13
 8007fdc:	e118      	b.n	8008210 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	3334      	adds	r3, #52	; 0x34
 8007fe2:	3313      	adds	r3, #19
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe fcd1 	bl	800698c <ld_word>
 8007fea:	4603      	mov	r3, r0
 8007fec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <find_volume+0x286>
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	3334      	adds	r3, #52	; 0x34
 8007ff8:	3320      	adds	r3, #32
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fcdd 	bl	80069ba <ld_dword>
 8008000:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	3334      	adds	r3, #52	; 0x34
 8008006:	330e      	adds	r3, #14
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe fcbf 	bl	800698c <ld_word>
 800800e:	4603      	mov	r3, r0
 8008010:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008012:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <find_volume+0x2a0>
 8008018:	230d      	movs	r3, #13
 800801a:	e0f9      	b.n	8008210 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800801c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	4413      	add	r3, r2
 8008022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008024:	8912      	ldrh	r2, [r2, #8]
 8008026:	0912      	lsrs	r2, r2, #4
 8008028:	b292      	uxth	r2, r2
 800802a:	4413      	add	r3, r2
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800802e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	429a      	cmp	r2, r3
 8008034:	d201      	bcs.n	800803a <find_volume+0x2be>
 8008036:	230d      	movs	r3, #13
 8008038:	e0ea      	b.n	8008210 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800803a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008042:	8952      	ldrh	r2, [r2, #10]
 8008044:	fbb3 f3f2 	udiv	r3, r3, r2
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <find_volume+0x2dc>
 8008050:	230d      	movs	r3, #13
 8008052:	e0dd      	b.n	8008210 <find_volume+0x494>
 8008054:	20000aa0 	.word	0x20000aa0
		fmt = FS_FAT32;
 8008058:	2303      	movs	r3, #3
 800805a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008064:	4293      	cmp	r3, r2
 8008066:	d802      	bhi.n	800806e <find_volume+0x2f2>
 8008068:	2302      	movs	r3, #2
 800806a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008074:	4293      	cmp	r3, r2
 8008076:	d802      	bhi.n	800807e <find_volume+0x302>
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800808a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800808c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800808e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008090:	441a      	add	r2, r3
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008096:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	441a      	add	r2, r3
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80080a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d11e      	bne.n	80080e6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	3334      	adds	r3, #52	; 0x34
 80080ac:	332a      	adds	r3, #42	; 0x2a
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fc6c 	bl	800698c <ld_word>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <find_volume+0x342>
 80080ba:	230d      	movs	r3, #13
 80080bc:	e0a8      	b.n	8008210 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	891b      	ldrh	r3, [r3, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <find_volume+0x34e>
 80080c6:	230d      	movs	r3, #13
 80080c8:	e0a2      	b.n	8008210 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	3334      	adds	r3, #52	; 0x34
 80080ce:	332c      	adds	r3, #44	; 0x2c
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fc72 	bl	80069ba <ld_dword>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44
 80080e4:	e01f      	b.n	8008126 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	891b      	ldrh	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <find_volume+0x376>
 80080ee:	230d      	movs	r3, #13
 80080f0:	e08e      	b.n	8008210 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f8:	441a      	add	r2, r3
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008102:	2b02      	cmp	r3, #2
 8008104:	d103      	bne.n	800810e <find_volume+0x392>
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	e00a      	b.n	8008124 <find_volume+0x3a8>
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	4613      	mov	r3, r2
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4413      	add	r3, r2
 8008118:	085a      	lsrs	r2, r3, #1
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008124:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	69da      	ldr	r2, [r3, #28]
 800812a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800812c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008130:	0a5b      	lsrs	r3, r3, #9
 8008132:	429a      	cmp	r2, r3
 8008134:	d201      	bcs.n	800813a <find_volume+0x3be>
 8008136:	230d      	movs	r3, #13
 8008138:	e06a      	b.n	8008210 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	615a      	str	r2, [r3, #20]
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008154:	2b03      	cmp	r3, #3
 8008156:	d149      	bne.n	80081ec <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	3334      	adds	r3, #52	; 0x34
 800815c:	3330      	adds	r3, #48	; 0x30
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fc14 	bl	800698c <ld_word>
 8008164:	4603      	mov	r3, r0
 8008166:	2b01      	cmp	r3, #1
 8008168:	d140      	bne.n	80081ec <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800816a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816c:	3301      	adds	r3, #1
 800816e:	4619      	mov	r1, r3
 8008170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008172:	f7fe fea1 	bl	8006eb8 <move_window>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d137      	bne.n	80081ec <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	2200      	movs	r2, #0
 8008180:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	3334      	adds	r3, #52	; 0x34
 8008186:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fbfe 	bl	800698c <ld_word>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008198:	429a      	cmp	r2, r3
 800819a:	d127      	bne.n	80081ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	3334      	adds	r3, #52	; 0x34
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fc0a 	bl	80069ba <ld_dword>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <find_volume+0x49c>)
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d11e      	bne.n	80081ec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	3334      	adds	r3, #52	; 0x34
 80081b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fbff 	bl	80069ba <ld_dword>
 80081bc:	4602      	mov	r2, r0
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <find_volume+0x4a0>)
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d113      	bne.n	80081ec <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	3334      	adds	r3, #52	; 0x34
 80081c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fbf4 	bl	80069ba <ld_dword>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	3334      	adds	r3, #52	; 0x34
 80081dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fbea 	bl	80069ba <ld_dword>
 80081e6:	4602      	mov	r2, r0
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80081f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <find_volume+0x4a4>)
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	4b08      	ldr	r3, [pc, #32]	; (8008220 <find_volume+0x4a4>)
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <find_volume+0x4a4>)
 8008202:	881a      	ldrh	r2, [r3, #0]
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800820a:	f7fe fdef 	bl	8006dec <clear_lock>
#endif
	return FR_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3758      	adds	r7, #88	; 0x58
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	41615252 	.word	0x41615252
 800821c:	61417272 	.word	0x61417272
 8008220:	20000aa4 	.word	0x20000aa4

08008224 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800822e:	2309      	movs	r3, #9
 8008230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d02e      	beq.n	8008296 <validate+0x72>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d02a      	beq.n	8008296 <validate+0x72>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d025      	beq.n	8008296 <validate+0x72>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	889a      	ldrh	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	429a      	cmp	r2, r3
 8008256:	d11e      	bne.n	8008296 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fc8c 	bl	8006b7a <lock_fs>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d014      	beq.n	8008292 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe faee 	bl	8006850 <disk_status>
 8008274:	4603      	mov	r3, r0
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <validate+0x60>
				res = FR_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	e008      	b.n	8008296 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fc8b 	bl	8006ba6 <unlock_fs>
 8008290:	e001      	b.n	8008296 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008292:	230f      	movs	r3, #15
 8008294:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <validate+0x7e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	e000      	b.n	80082a4 <validate+0x80>
 80082a2:	2300      	movs	r3, #0
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	6013      	str	r3, [r2, #0]
	return res;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fcbd 	bl	8007c4a <get_ldnumber>
 80082d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da01      	bge.n	80082dc <f_mount+0x28>
 80082d8:	230b      	movs	r3, #11
 80082da:	e048      	b.n	800836e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082dc:	4a26      	ldr	r2, [pc, #152]	; (8008378 <f_mount+0xc4>)
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082ec:	69b8      	ldr	r0, [r7, #24]
 80082ee:	f7fe fd7d 	bl	8006dec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fcab 	bl	8008c52 <ff_del_syncobj>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <f_mount+0x52>
 8008302:	2302      	movs	r3, #2
 8008304:	e033      	b.n	800836e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00f      	beq.n	8008332 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	330c      	adds	r3, #12
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f000 fc75 	bl	8008c12 <ff_cre_syncobj>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <f_mount+0x7e>
 800832e:	2302      	movs	r3, #2
 8008330:	e01d      	b.n	800836e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4910      	ldr	r1, [pc, #64]	; (8008378 <f_mount+0xc4>)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <f_mount+0x94>
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d001      	beq.n	800834c <f_mount+0x98>
 8008348:	2300      	movs	r3, #0
 800834a:	e010      	b.n	800836e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800834c:	f107 010c 	add.w	r1, r7, #12
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	2200      	movs	r2, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff fd10 	bl	8007d7c <find_volume>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	7dfa      	ldrb	r2, [r7, #23]
 8008364:	4611      	mov	r1, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fc1d 	bl	8006ba6 <unlock_fs>
 800836c:	7dfb      	ldrb	r3, [r7, #23]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000aa0 	.word	0x20000aa0

0800837c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b098      	sub	sp, #96	; 0x60
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <f_open+0x18>
 8008390:	2309      	movs	r3, #9
 8008392:	e1b4      	b.n	80086fe <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800839a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	f107 0110 	add.w	r1, r7, #16
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fce8 	bl	8007d7c <find_volume>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80083b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 8191 	bne.w	80086de <f_open+0x362>
		dj.obj.fs = fs;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	f107 0314 	add.w	r3, r7, #20
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff fbcd 	bl	8007b68 <follow_path>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80083d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d11a      	bne.n	8008412 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80083dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da03      	bge.n	80083ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80083e6:	2306      	movs	r3, #6
 80083e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083ec:	e011      	b.n	8008412 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fbe8 	bl	8006bdc <chk_lock>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	f003 031c 	and.w	r3, r3, #28
 8008418:	2b00      	cmp	r3, #0
 800841a:	d07f      	beq.n	800851c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800841c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d017      	beq.n	8008454 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008428:	2b04      	cmp	r3, #4
 800842a:	d10e      	bne.n	800844a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800842c:	f7fe fc30 	bl	8006c90 <enq_lock>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d006      	beq.n	8008444 <f_open+0xc8>
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff facd 	bl	80079da <dir_register>
 8008440:	4603      	mov	r3, r0
 8008442:	e000      	b.n	8008446 <f_open+0xca>
 8008444:	2312      	movs	r3, #18
 8008446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	f043 0308 	orr.w	r3, r3, #8
 8008450:	71fb      	strb	r3, [r7, #7]
 8008452:	e010      	b.n	8008476 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008454:	7ebb      	ldrb	r3, [r7, #26]
 8008456:	f003 0311 	and.w	r3, r3, #17
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <f_open+0xea>
					res = FR_DENIED;
 800845e:	2307      	movs	r3, #7
 8008460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008464:	e007      	b.n	8008476 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008466:	79fb      	ldrb	r3, [r7, #7]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <f_open+0xfa>
 8008470:	2308      	movs	r3, #8
 8008472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800847a:	2b00      	cmp	r3, #0
 800847c:	d168      	bne.n	8008550 <f_open+0x1d4>
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	2b00      	cmp	r3, #0
 8008486:	d063      	beq.n	8008550 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008488:	f7fd fe2a 	bl	80060e0 <get_fattime>
 800848c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	330e      	adds	r3, #14
 8008492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe facc 	bl	8006a32 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	3316      	adds	r3, #22
 800849e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fac6 	bl	8006a32 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	330b      	adds	r3, #11
 80084aa:	2220      	movs	r2, #32
 80084ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b2:	4611      	mov	r1, r2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff f9fc 	bl	80078b2 <ld_clust>
 80084ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084c0:	2200      	movs	r2, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fa14 	bl	80078f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	331c      	adds	r3, #28
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe faaf 	bl	8006a32 <st_dword>
					fs->wflag = 1;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2201      	movs	r2, #1
 80084d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80084da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d037      	beq.n	8008550 <f_open+0x1d4>
						dw = fs->winsect;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80084e6:	f107 0314 	add.w	r3, r7, #20
 80084ea:	2200      	movs	r2, #0
 80084ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe ff28 	bl	8007344 <remove_chain>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80084fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d126      	bne.n	8008550 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fcd6 	bl	8006eb8 <move_window>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008516:	3a01      	subs	r2, #1
 8008518:	611a      	str	r2, [r3, #16]
 800851a:	e019      	b.n	8008550 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800851c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008520:	2b00      	cmp	r3, #0
 8008522:	d115      	bne.n	8008550 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008524:	7ebb      	ldrb	r3, [r7, #26]
 8008526:	f003 0310 	and.w	r3, r3, #16
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <f_open+0x1ba>
					res = FR_NO_FILE;
 800852e:	2304      	movs	r3, #4
 8008530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008534:	e00c      	b.n	8008550 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d007      	beq.n	8008550 <f_open+0x1d4>
 8008540:	7ebb      	ldrb	r3, [r7, #26]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <f_open+0x1d4>
						res = FR_DENIED;
 800854a:	2307      	movs	r3, #7
 800854c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008554:	2b00      	cmp	r3, #0
 8008556:	d128      	bne.n	80085aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008568:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf14      	ite	ne
 8008582:	2301      	movne	r3, #1
 8008584:	2300      	moveq	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	f107 0314 	add.w	r3, r7, #20
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fb9d 	bl	8006cd0 <inc_lock>
 8008596:	4602      	mov	r2, r0
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <f_open+0x22e>
 80085a4:	2302      	movs	r3, #2
 80085a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80085aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 8095 	bne.w	80086de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff f979 	bl	80078b2 <ld_clust>
 80085c0:	4602      	mov	r2, r0
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	331c      	adds	r3, #28
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe f9f5 	bl	80069ba <ld_dword>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	88da      	ldrh	r2, [r3, #6]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	79fa      	ldrb	r2, [r7, #7]
 80085ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3330      	adds	r3, #48	; 0x30
 8008606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fa5b 	bl	8006ac8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d060      	beq.n	80086de <f_open+0x362>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05c      	beq.n	80086de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	895b      	ldrh	r3, [r3, #10]
 8008630:	025b      	lsls	r3, r3, #9
 8008632:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	657b      	str	r3, [r7, #84]	; 0x54
 8008640:	e016      	b.n	8008670 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fcf0 	bl	800702c <get_fat>
 800864c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800864e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008650:	2b01      	cmp	r3, #1
 8008652:	d802      	bhi.n	800865a <f_open+0x2de>
 8008654:	2302      	movs	r3, #2
 8008656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800865a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d102      	bne.n	8008668 <f_open+0x2ec>
 8008662:	2301      	movs	r3, #1
 8008664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800866a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	657b      	str	r3, [r7, #84]	; 0x54
 8008670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <f_open+0x304>
 8008678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	429a      	cmp	r2, r3
 800867e:	d8e0      	bhi.n	8008642 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008684:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d127      	bne.n	80086de <f_open+0x362>
 800868e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008694:	2b00      	cmp	r3, #0
 8008696:	d022      	beq.n	80086de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fca7 	bl	8006ff0 <clust2sect>
 80086a2:	6478      	str	r0, [r7, #68]	; 0x44
 80086a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <f_open+0x336>
						res = FR_INT_ERR;
 80086aa:	2302      	movs	r3, #2
 80086ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086b0:	e015      	b.n	80086de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80086b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b4:	0a5a      	lsrs	r2, r3, #9
 80086b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b8:	441a      	add	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	7858      	ldrb	r0, [r3, #1]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	2301      	movs	r3, #1
 80086ce:	f7fe f8ff 	bl	80068d0 <disk_read>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <f_open+0x362>
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80086de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <f_open+0x370>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fa56 	bl	8006ba6 <unlock_fs>
 80086fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3760      	adds	r7, #96	; 0x60
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08c      	sub	sp, #48	; 0x30
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f107 0210 	add.w	r2, r7, #16
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fd7c 	bl	8008224 <validate>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008736:	2b00      	cmp	r3, #0
 8008738:	d107      	bne.n	800874a <f_write+0x44>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	7d5b      	ldrb	r3, [r3, #21]
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <f_write+0x58>
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fa27 	bl	8006ba6 <unlock_fs>
 8008758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800875c:	e173      	b.n	8008a46 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	7d1b      	ldrb	r3, [r3, #20]
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <f_write+0x72>
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2107      	movs	r1, #7
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fa19 	bl	8006ba6 <unlock_fs>
 8008774:	2307      	movs	r3, #7
 8008776:	e166      	b.n	8008a46 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	441a      	add	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	f080 814b 	bcs.w	8008a20 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	43db      	mvns	r3, r3
 8008790:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008792:	e145      	b.n	8008a20 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 8101 	bne.w	80089a4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	0a5b      	lsrs	r3, r3, #9
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	8952      	ldrh	r2, [r2, #10]
 80087ac:	3a01      	subs	r2, #1
 80087ae:	4013      	ands	r3, r2
 80087b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d14d      	bne.n	8008854 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10c      	bne.n	80087da <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11a      	bne.n	8008802 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fe1c 	bl	800740e <create_chain>
 80087d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80087d8:	e013      	b.n	8008802 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	4619      	mov	r1, r3
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7fe fea8 	bl	800753e <clmt_clust>
 80087ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80087f0:	e007      	b.n	8008802 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7fe fe07 	bl	800740e <create_chain>
 8008800:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8110 	beq.w	8008a2a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	2b01      	cmp	r3, #1
 800880e:	d109      	bne.n	8008824 <f_write+0x11e>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2202      	movs	r2, #2
 8008814:	755a      	strb	r2, [r3, #21]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2102      	movs	r1, #2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe f9c3 	bl	8006ba6 <unlock_fs>
 8008820:	2302      	movs	r3, #2
 8008822:	e110      	b.n	8008a46 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d109      	bne.n	8008840 <f_write+0x13a>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	755a      	strb	r2, [r3, #21]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2101      	movs	r1, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe f9b5 	bl	8006ba6 <unlock_fs>
 800883c:	2301      	movs	r3, #1
 800883e:	e102      	b.n	8008a46 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008844:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <f_write+0x14e>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008852:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	7d1b      	ldrb	r3, [r3, #20]
 8008858:	b25b      	sxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	da1d      	bge.n	800889a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	7858      	ldrb	r0, [r3, #1]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1a      	ldr	r2, [r3, #32]
 800886c:	2301      	movs	r3, #1
 800886e:	f7fe f84f 	bl	8006910 <disk_write>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d009      	beq.n	800888c <f_write+0x186>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	755a      	strb	r2, [r3, #21]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2101      	movs	r1, #1
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe f98f 	bl	8006ba6 <unlock_fs>
 8008888:	2301      	movs	r3, #1
 800888a:	e0dc      	b.n	8008a46 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	7d1b      	ldrb	r3, [r3, #20]
 8008890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fe fba4 	bl	8006ff0 <clust2sect>
 80088a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <f_write+0x1be>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2202      	movs	r2, #2
 80088b4:	755a      	strb	r2, [r3, #21]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2102      	movs	r1, #2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe f973 	bl	8006ba6 <unlock_fs>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0c0      	b.n	8008a46 <f_write+0x340>
			sect += csect;
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	4413      	add	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0a5b      	lsrs	r3, r3, #9
 80088d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d041      	beq.n	800895c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	4413      	add	r3, r2
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	8952      	ldrh	r2, [r2, #10]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d905      	bls.n	80088f2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	895b      	ldrh	r3, [r3, #10]
 80088ea:	461a      	mov	r2, r3
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	7858      	ldrb	r0, [r3, #1]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	69f9      	ldr	r1, [r7, #28]
 80088fc:	f7fe f808 	bl	8006910 <disk_write>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <f_write+0x214>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	755a      	strb	r2, [r3, #21]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2101      	movs	r1, #1
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe f948 	bl	8006ba6 <unlock_fs>
 8008916:	2301      	movs	r3, #1
 8008918:	e095      	b.n	8008a46 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	6a3a      	ldr	r2, [r7, #32]
 8008924:	429a      	cmp	r2, r3
 8008926:	d915      	bls.n	8008954 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1a      	ldr	r2, [r3, #32]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	025b      	lsls	r3, r3, #9
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe f8a1 	bl	8006a88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	7d1b      	ldrb	r3, [r3, #20]
 800894a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894e:	b2da      	uxtb	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	025b      	lsls	r3, r3, #9
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800895a:	e044      	b.n	80089e6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	429a      	cmp	r2, r3
 8008964:	d01b      	beq.n	800899e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800896e:	429a      	cmp	r2, r3
 8008970:	d215      	bcs.n	800899e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	7858      	ldrb	r0, [r3, #1]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800897c:	2301      	movs	r3, #1
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	f7fd ffa6 	bl	80068d0 <disk_read>
 8008984:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	755a      	strb	r2, [r3, #21]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2101      	movs	r1, #1
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe f906 	bl	8006ba6 <unlock_fs>
 800899a:	2301      	movs	r3, #1
 800899c:	e053      	b.n	8008a46 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80089b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d901      	bls.n	80089be <f_write+0x2b8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089cc:	4413      	add	r3, r2
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	69f9      	ldr	r1, [r7, #28]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f858 	bl	8006a88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7d1b      	ldrb	r3, [r3, #20]
 80089dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	4413      	add	r3, r2
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	619a      	str	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	bf38      	it	cc
 8008a06:	461a      	movcc	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	60da      	str	r2, [r3, #12]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	441a      	add	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f47f aeb6 	bne.w	8008794 <f_write+0x8e>
 8008a28:	e000      	b.n	8008a2c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	7d1b      	ldrb	r3, [r3, #20]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe f8b1 	bl	8006ba6 <unlock_fs>
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3730      	adds	r7, #48	; 0x30
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f107 0208 	add.w	r2, r7, #8
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fbe0 	bl	8008224 <validate>
 8008a64:	4603      	mov	r3, r0
 8008a66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d16d      	bne.n	8008b4a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d067      	beq.n	8008b4a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7d1b      	ldrb	r3, [r3, #20]
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	da1a      	bge.n	8008aba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	7858      	ldrb	r0, [r3, #1]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	2301      	movs	r3, #1
 8008a94:	f7fd ff3c 	bl	8006910 <disk_write>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <f_sync+0x5e>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe f87f 	bl	8006ba6 <unlock_fs>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e055      	b.n	8008b58 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7d1b      	ldrb	r3, [r3, #20]
 8008ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008aba:	f7fd fb11 	bl	80060e0 <get_fattime>
 8008abe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fe f9f5 	bl	8006eb8 <move_window>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d138      	bne.n	8008b4a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	330b      	adds	r3, #11
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	330b      	adds	r3, #11
 8008ae8:	f042 0220 	orr.w	r2, r2, #32
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	f7fe fef8 	bl	80078f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f103 021c 	add.w	r2, r3, #28
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f7fd ff90 	bl	8006a32 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3316      	adds	r3, #22
 8008b16:	6939      	ldr	r1, [r7, #16]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fd ff8a 	bl	8006a32 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3312      	adds	r3, #18
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd ff6a 	bl	80069fe <st_word>
					fs->wflag = 1;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe f9ee 	bl	8006f14 <sync_fs>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
 8008b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	7dfa      	ldrb	r2, [r7, #23]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe f828 	bl	8006ba6 <unlock_fs>
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b76:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008b78:	7a5b      	ldrb	r3, [r3, #9]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d131      	bne.n	8008be4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b80:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008b82:	7a5b      	ldrb	r3, [r3, #9]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b8e:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008b90:	7a5b      	ldrb	r3, [r3, #9]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b9e:	4b14      	ldr	r3, [pc, #80]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008ba0:	7a5b      	ldrb	r3, [r3, #9]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008ba8:	4413      	add	r3, r2
 8008baa:	79fa      	ldrb	r2, [r7, #7]
 8008bac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008bae:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008bb0:	7a5b      	ldrb	r3, [r3, #9]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	b2d1      	uxtb	r1, r2
 8008bb8:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <FATFS_LinkDriverEx+0x90>)
 8008bba:	7251      	strb	r1, [r2, #9]
 8008bbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bbe:	7dbb      	ldrb	r3, [r7, #22]
 8008bc0:	3330      	adds	r3, #48	; 0x30
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	223a      	movs	r2, #58	; 0x3a
 8008bce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	222f      	movs	r2, #47	; 0x2f
 8008bd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3303      	adds	r3, #3
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr
 8008bf0:	20000ac8 	.word	0x20000ac8

08008bf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bfe:	2200      	movs	r2, #0
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ffac 	bl	8008b60 <FATFS_LinkDriverEx>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	4603      	mov	r3, r0
 8008c1a:	6039      	str	r1, [r7, #0]
 8008c1c:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	2300      	movs	r3, #0
 8008c24:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008c26:	f107 030c 	add.w	r3, r7, #12
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 f91b 	bl	8008e68 <osSemaphoreCreate>
 8008c32:	4602      	mov	r2, r0
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bf14      	ite	ne
 8008c40:	2301      	movne	r3, #1
 8008c42:	2300      	moveq	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	617b      	str	r3, [r7, #20]

    return ret;
 8008c48:	697b      	ldr	r3, [r7, #20]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9bc 	bl	8008fd8 <osSemaphoreDelete>
    return 1;
 8008c60:	2301      	movs	r3, #1
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f928 	bl	8008ed0 <osSemaphoreWait>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <ff_req_grant+0x20>
  {
    ret = 1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f965 	bl	8008f6c <osSemaphoreRelease>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cbc:	2b84      	cmp	r3, #132	; 0x84
 8008cbe:	d005      	beq.n	8008ccc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3303      	adds	r3, #3
 8008cca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cde:	f3ef 8305 	mrs	r3, IPSR
 8008ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ce4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf14      	ite	ne
 8008cea:	2301      	movne	r3, #1
 8008cec:	2300      	moveq	r3, #0
 8008cee:	b2db      	uxtb	r3, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr

08008cfa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cfe:	f001 fc49 	bl	800a594 <vTaskStartScheduler>
  
  return osOK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008d0c:	f002 f8b4 	bl	800ae78 <xTaskGetSchedulerState>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <osKernelRunning+0x12>
    return 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <osKernelRunning+0x14>
  else
    return 1;
 8008d1a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008d24:	f7ff ffd8 	bl	8008cd8 <inHandlerMode>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008d2e:	f001 fd4d 	bl	800a7cc <xTaskGetTickCountFromISR>
 8008d32:	4603      	mov	r3, r0
 8008d34:	e002      	b.n	8008d3c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008d36:	f001 fd3b 	bl	800a7b0 <xTaskGetTickCount>
 8008d3a:	4603      	mov	r3, r0
  }
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d42:	b089      	sub	sp, #36	; 0x24
 8008d44:	af04      	add	r7, sp, #16
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d020      	beq.n	8008d94 <osThreadCreate+0x54>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01c      	beq.n	8008d94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685c      	ldr	r4, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681d      	ldr	r5, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691e      	ldr	r6, [r3, #16]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff ff9c 	bl	8008caa <makeFreeRtosPriority>
 8008d72:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	9100      	str	r1, [sp, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	4632      	mov	r2, r6
 8008d86:	4629      	mov	r1, r5
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f001 fa41 	bl	800a210 <xTaskCreateStatic>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	e01c      	b.n	8008dce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685c      	ldr	r4, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008da0:	b29e      	uxth	r6, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff ff7e 	bl	8008caa <makeFreeRtosPriority>
 8008dae:	4602      	mov	r2, r0
 8008db0:	f107 030c 	add.w	r3, r7, #12
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	9200      	str	r2, [sp, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	4632      	mov	r2, r6
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f001 fa7f 	bl	800a2c2 <xTaskCreate>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d001      	beq.n	8008dce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e000      	b.n	8008dd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <osDelay+0x16>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	e000      	b.n	8008df0 <osDelay+0x18>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fb9b 	bl	800a52c <vTaskDelay>
  
  return osOK;
 8008df6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d013      	beq.n	8008e3e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <osTimerCreate+0x20>
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	e000      	b.n	8008e22 <osTimerCreate+0x22>
 8008e20:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	460a      	mov	r2, r1
 8008e32:	2101      	movs	r1, #1
 8008e34:	480b      	ldr	r0, [pc, #44]	; (8008e64 <osTimerCreate+0x64>)
 8008e36:	f002 fac8 	bl	800b3ca <xTimerCreateStatic>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	e00e      	b.n	8008e5c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <osTimerCreate+0x48>
 8008e44:	2201      	movs	r2, #1
 8008e46:	e000      	b.n	8008e4a <osTimerCreate+0x4a>
 8008e48:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2101      	movs	r1, #1
 8008e54:	4803      	ldr	r0, [pc, #12]	; (8008e64 <osTimerCreate+0x64>)
 8008e56:	f002 fa97 	bl	800b388 <xTimerCreate>
 8008e5a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	0800e170 	.word	0x0800e170

08008e68 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d010      	beq.n	8008e9c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10b      	bne.n	8008e98 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	2303      	movs	r3, #3
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	2001      	movs	r0, #1
 8008e90:	f000 faaa 	bl	80093e8 <xQueueGenericCreateStatic>
 8008e94:	4603      	mov	r3, r0
 8008e96:	e016      	b.n	8008ec6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e014      	b.n	8008ec6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d110      	bne.n	8008ec4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	f000 fb10 	bl	80094cc <xQueueGenericCreate>
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <osSemaphoreCreate+0x58>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fb62 	bl	8009584 <xQueueGenericSend>
      return sema;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	e000      	b.n	8008ec6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008ec4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	e03a      	b.n	8008f5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d103      	bne.n	8008efc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	e009      	b.n	8008f10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d006      	beq.n	8008f10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <osSemaphoreWait+0x40>
      ticks = 1;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008f10:	f7ff fee2 	bl	8008cd8 <inHandlerMode>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d017      	beq.n	8008f4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	461a      	mov	r2, r3
 8008f20:	2100      	movs	r1, #0
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 ff2a 	bl	8009d7c <xQueueReceiveFromISR>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d001      	beq.n	8008f32 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f2e:	23ff      	movs	r3, #255	; 0xff
 8008f30:	e015      	b.n	8008f5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d011      	beq.n	8008f5c <osSemaphoreWait+0x8c>
 8008f38:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <osSemaphoreWait+0x98>)
 8008f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	e008      	b.n	8008f5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fe0d 	bl	8009b6c <xQueueSemaphoreTake>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d001      	beq.n	8008f5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f58:	23ff      	movs	r3, #255	; 0xff
 8008f5a:	e000      	b.n	8008f5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f7c:	f7ff feac 	bl	8008cd8 <inHandlerMode>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d016      	beq.n	8008fb4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc87 	bl	80098a0 <xQueueGiveFromISR>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d001      	beq.n	8008f9c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f98:	23ff      	movs	r3, #255	; 0xff
 8008f9a:	e017      	b.n	8008fcc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d013      	beq.n	8008fca <osSemaphoreRelease+0x5e>
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <osSemaphoreRelease+0x68>)
 8008fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	e00a      	b.n	8008fca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fae2 	bl	8009584 <xQueueGenericSend>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d001      	beq.n	8008fca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008fc6:	23ff      	movs	r3, #255	; 0xff
 8008fc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008fca:	68fb      	ldr	r3, [r7, #12]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008fe0:	f7ff fe7a 	bl	8008cd8 <inHandlerMode>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008fea:	2382      	movs	r3, #130	; 0x82
 8008fec:	e003      	b.n	8008ff6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 ff41 	bl	8009e76 <vQueueDelete>

  return osOK; 
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008ffe:	b590      	push	{r4, r7, lr}
 8009000:	b085      	sub	sp, #20
 8009002:	af02      	add	r7, sp, #8
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d012      	beq.n	8009036 <osMessageCreate+0x38>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00e      	beq.n	8009036 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68dc      	ldr	r4, [r3, #12]
 8009028:	2300      	movs	r3, #0
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4623      	mov	r3, r4
 800902e:	f000 f9db 	bl	80093e8 <xQueueGenericCreateStatic>
 8009032:	4603      	mov	r3, r0
 8009034:	e008      	b.n	8009048 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	4619      	mov	r1, r3
 8009042:	f000 fa43 	bl	80094cc <xQueueGenericCreate>
 8009046:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bd90      	pop	{r4, r7, pc}

08009050 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <osMessagePut+0x1e>
    ticks = 1;
 800906a:	2301      	movs	r3, #1
 800906c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800906e:	f7ff fe33 	bl	8008cd8 <inHandlerMode>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d018      	beq.n	80090aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009078:	f107 0210 	add.w	r2, r7, #16
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	2300      	movs	r3, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fb78 	bl	8009778 <xQueueGenericSendFromISR>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d001      	beq.n	8009092 <osMessagePut+0x42>
      return osErrorOS;
 800908e:	23ff      	movs	r3, #255	; 0xff
 8009090:	e018      	b.n	80090c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d014      	beq.n	80090c2 <osMessagePut+0x72>
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <osMessagePut+0x7c>)
 800909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	e00b      	b.n	80090c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80090aa:	f107 0108 	add.w	r1, r7, #8
 80090ae:	2300      	movs	r3, #0
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fa66 	bl	8009584 <xQueueGenericSend>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d001      	beq.n	80090c2 <osMessagePut+0x72>
      return osErrorOS;
 80090be:	23ff      	movs	r3, #255	; 0xff
 80090c0:	e000      	b.n	80090c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b08b      	sub	sp, #44	; 0x2c
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	617b      	str	r3, [r7, #20]
    return event;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	461c      	mov	r4, r3
 80090f2:	f107 0314 	add.w	r3, r7, #20
 80090f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090fe:	e054      	b.n	80091aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009100:	2300      	movs	r3, #0
 8009102:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d103      	bne.n	8009118 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
 8009116:	e009      	b.n	800912c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <osMessageGet+0x5c>
      ticks = 1;
 8009128:	2301      	movs	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800912c:	f7ff fdd4 	bl	8008cd8 <inHandlerMode>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01c      	beq.n	8009170 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009136:	f107 0220 	add.w	r2, r7, #32
 800913a:	f107 0314 	add.w	r3, r7, #20
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	68b8      	ldr	r0, [r7, #8]
 8009144:	f000 fe1a 	bl	8009d7c <xQueueReceiveFromISR>
 8009148:	4603      	mov	r3, r0
 800914a:	2b01      	cmp	r3, #1
 800914c:	d102      	bne.n	8009154 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800914e:	2310      	movs	r3, #16
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	e001      	b.n	8009158 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01d      	beq.n	800919a <osMessageGet+0xca>
 800915e:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <osMessageGet+0xe4>)
 8009160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	e014      	b.n	800919a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	3304      	adds	r3, #4
 8009176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009178:	4619      	mov	r1, r3
 800917a:	68b8      	ldr	r0, [r7, #8]
 800917c:	f000 fc1a 	bl	80099b4 <xQueueReceive>
 8009180:	4603      	mov	r3, r0
 8009182:	2b01      	cmp	r3, #1
 8009184:	d102      	bne.n	800918c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009186:	2310      	movs	r3, #16
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e006      	b.n	800919a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <osMessageGet+0xc6>
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <osMessageGet+0xc8>
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	461c      	mov	r4, r3
 800919e:	f107 0314 	add.w	r3, r7, #20
 80091a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	372c      	adds	r7, #44	; 0x2c
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd90      	pop	{r4, r7, pc}
 80091b2:	bf00      	nop
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f103 0208 	add.w	r2, r3, #8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f103 0208 	add.w	r2, r3, #8
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f103 0208 	add.w	r2, r3, #8
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bc80      	pop	{r7}
 80091f4:	4770      	bx	lr

080091f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr

0800920e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	601a      	str	r2, [r3, #0]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr

08009254 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d103      	bne.n	8009274 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e00c      	b.n	800928e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3308      	adds	r3, #8
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	e002      	b.n	8009282 <vListInsert+0x2e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	429a      	cmp	r2, r3
 800928c:	d2f6      	bcs.n	800927c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr

080092c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6892      	ldr	r2, [r2, #8]
 80092da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	6852      	ldr	r2, [r2, #4]
 80092e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d103      	bne.n	80092f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	1e5a      	subs	r2, r3, #1
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
	...

08009318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d109      	bne.n	8009340 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60bb      	str	r3, [r7, #8]
 800933e:	e7fe      	b.n	800933e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009340:	f002 fc42 	bl	800bbc8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	68f9      	ldr	r1, [r7, #12]
 800934e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009370:	3b01      	subs	r3, #1
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	441a      	add	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d114      	bne.n	80093c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3310      	adds	r3, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 fbae 	bl	800ab04 <xTaskRemoveFromEventList>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d012      	beq.n	80093d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <xQueueGenericReset+0xcc>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	e009      	b.n	80093d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3310      	adds	r3, #16
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff fef7 	bl	80091b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3324      	adds	r3, #36	; 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff fef2 	bl	80091b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093d4:	f002 fc26 	bl	800bc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093d8:	2301      	movs	r3, #1
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <xQueueGenericCreateStatic+0x28>
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
 800940e:	e7fe      	b.n	800940e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <xQueueGenericCreateStatic+0x42>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
 8009428:	e7fe      	b.n	8009428 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <xQueueGenericCreateStatic+0x4e>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <xQueueGenericCreateStatic+0x52>
 8009436:	2301      	movs	r3, #1
 8009438:	e000      	b.n	800943c <xQueueGenericCreateStatic+0x54>
 800943a:	2300      	movs	r3, #0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <xQueueGenericCreateStatic+0x6c>
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	623b      	str	r3, [r7, #32]
 8009452:	e7fe      	b.n	8009452 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <xQueueGenericCreateStatic+0x78>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <xQueueGenericCreateStatic+0x7c>
 8009460:	2301      	movs	r3, #1
 8009462:	e000      	b.n	8009466 <xQueueGenericCreateStatic+0x7e>
 8009464:	2300      	movs	r3, #0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d109      	bne.n	800947e <xQueueGenericCreateStatic+0x96>
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	e7fe      	b.n	800947c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800947e:	2348      	movs	r3, #72	; 0x48
 8009480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b48      	cmp	r3, #72	; 0x48
 8009486:	d009      	beq.n	800949c <xQueueGenericCreateStatic+0xb4>
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	e7fe      	b.n	800949a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	4613      	mov	r3, r2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f842 	bl	8009546 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3730      	adds	r7, #48	; 0x30
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	; 0x28
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d109      	bne.n	80094f4 <xQueueGenericCreate+0x28>
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	613b      	str	r3, [r7, #16]
 80094f2:	e7fe      	b.n	80094f2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	e004      	b.n	800950a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	3348      	adds	r3, #72	; 0x48
 800950e:	4618      	mov	r0, r3
 8009510:	f002 fc50 	bl	800bdb4 <pvPortMalloc>
 8009514:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00f      	beq.n	800953c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	3348      	adds	r3, #72	; 0x48
 8009520:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800952a:	79fa      	ldrb	r2, [r7, #7]
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4613      	mov	r3, r2
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f805 	bl	8009546 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800953c:	69bb      	ldr	r3, [r7, #24]
	}
 800953e:	4618      	mov	r0, r3
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
 8009552:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e002      	b.n	8009568 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009574:	2101      	movs	r1, #1
 8009576:	69b8      	ldr	r0, [r7, #24]
 8009578:	f7ff fece 	bl	8009318 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08e      	sub	sp, #56	; 0x38
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009592:	2300      	movs	r3, #0
 8009594:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <xQueueGenericSend+0x30>
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095b2:	e7fe      	b.n	80095b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <xQueueGenericSend+0x3e>
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <xQueueGenericSend+0x42>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <xQueueGenericSend+0x44>
 80095c6:	2300      	movs	r3, #0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <xQueueGenericSend+0x5c>
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
 80095de:	e7fe      	b.n	80095de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d103      	bne.n	80095ee <xQueueGenericSend+0x6a>
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <xQueueGenericSend+0x6e>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueGenericSend+0x70>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <xQueueGenericSend+0x88>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	623b      	str	r3, [r7, #32]
 800960a:	e7fe      	b.n	800960a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800960c:	f001 fc34 	bl	800ae78 <xTaskGetSchedulerState>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <xQueueGenericSend+0x98>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <xQueueGenericSend+0x9c>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <xQueueGenericSend+0x9e>
 8009620:	2300      	movs	r3, #0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <xQueueGenericSend+0xb6>
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e7fe      	b.n	8009638 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800963a:	f002 fac5 	bl	800bbc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	429a      	cmp	r2, r3
 8009648:	d302      	bcc.n	8009650 <xQueueGenericSend+0xcc>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d129      	bne.n	80096a4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009656:	f000 fc47 	bl	8009ee8 <prvCopyDataToQueue>
 800965a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	3324      	adds	r3, #36	; 0x24
 8009668:	4618      	mov	r0, r3
 800966a:	f001 fa4b 	bl	800ab04 <xTaskRemoveFromEventList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d013      	beq.n	800969c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <xQueueGenericSend+0x1f0>)
 8009676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	e00a      	b.n	800969c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800968c:	4b39      	ldr	r3, [pc, #228]	; (8009774 <xQueueGenericSend+0x1f0>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800969c:	f002 fac2 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e063      	b.n	800976c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096aa:	f002 fabb 	bl	800bc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e05c      	b.n	800976c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d106      	bne.n	80096c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fa83 	bl	800abc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096c2:	2301      	movs	r3, #1
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096c6:	f002 faad 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ca:	f000 ffc7 	bl	800a65c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ce:	f002 fa7b 	bl	800bbc8 <vPortEnterCritical>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d8:	b25b      	sxtb	r3, r3
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSend+0x164>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x17a>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096fe:	f002 fa91 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009702:	1d3a      	adds	r2, r7, #4
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fa72 	bl	800abf4 <xTaskCheckForTimeOut>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d124      	bne.n	8009760 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009718:	f000 fcde 	bl	800a0d8 <prvIsQueueFull>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d018      	beq.n	8009754 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	3310      	adds	r3, #16
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 f99c 	bl	800aa68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009732:	f000 fc69 	bl	800a008 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009736:	f000 ff9f 	bl	800a678 <xTaskResumeAll>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f af7c 	bne.w	800963a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009742:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <xQueueGenericSend+0x1f0>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	e772      	b.n	800963a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009756:	f000 fc57 	bl	800a008 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800975a:	f000 ff8d 	bl	800a678 <xTaskResumeAll>
 800975e:	e76c      	b.n	800963a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009762:	f000 fc51 	bl	800a008 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009766:	f000 ff87 	bl	800a678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800976a:	2300      	movs	r3, #0
		}
	}
}
 800976c:	4618      	mov	r0, r3
 800976e:	3738      	adds	r7, #56	; 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08e      	sub	sp, #56	; 0x38
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <xQueueGenericSendFromISR+0x2c>
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
 80097a2:	e7fe      	b.n	80097a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d103      	bne.n	80097b2 <xQueueGenericSendFromISR+0x3a>
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <xQueueGenericSendFromISR+0x3e>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e000      	b.n	80097b8 <xQueueGenericSendFromISR+0x40>
 80097b6:	2300      	movs	r3, #0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <xQueueGenericSendFromISR+0x58>
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	623b      	str	r3, [r7, #32]
 80097ce:	e7fe      	b.n	80097ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d103      	bne.n	80097de <xQueueGenericSendFromISR+0x66>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <xQueueGenericSendFromISR+0x6a>
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <xQueueGenericSendFromISR+0x6c>
 80097e2:	2300      	movs	r3, #0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <xQueueGenericSendFromISR+0x84>
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	61fb      	str	r3, [r7, #28]
 80097fa:	e7fe      	b.n	80097fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097fc:	f002 fa9e 	bl	800bd3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009800:	f3ef 8211 	mrs	r2, BASEPRI
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	61ba      	str	r2, [r7, #24]
 8009816:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009818:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009824:	429a      	cmp	r2, r3
 8009826:	d302      	bcc.n	800982e <xQueueGenericSendFromISR+0xb6>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d12c      	bne.n	8009888 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800983e:	f000 fb53 	bl	8009ee8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009842:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984a:	d112      	bne.n	8009872 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d016      	beq.n	8009882 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	3324      	adds	r3, #36	; 0x24
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f953 	bl	800ab04 <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e007      	b.n	8009882 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009872:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009876:	3301      	adds	r3, #1
 8009878:	b2db      	uxtb	r3, r3
 800987a:	b25a      	sxtb	r2, r3
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009882:	2301      	movs	r3, #1
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009886:	e001      	b.n	800988c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009898:	4618      	mov	r0, r3
 800989a:	3738      	adds	r7, #56	; 0x38
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08e      	sub	sp, #56	; 0x38
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d109      	bne.n	80098c8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	623b      	str	r3, [r7, #32]
 80098c6:	e7fe      	b.n	80098c6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <xQueueGiveFromISR+0x44>
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	e7fe      	b.n	80098e2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d103      	bne.n	80098f4 <xQueueGiveFromISR+0x54>
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <xQueueGiveFromISR+0x58>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e000      	b.n	80098fa <xQueueGiveFromISR+0x5a>
 80098f8:	2300      	movs	r3, #0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <xQueueGiveFromISR+0x72>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	61bb      	str	r3, [r7, #24]
 8009910:	e7fe      	b.n	8009910 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009912:	f002 fa13 	bl	800bd3c <vPortValidateInterruptPriority>
	__asm volatile
 8009916:	f3ef 8211 	mrs	r2, BASEPRI
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	617a      	str	r2, [r7, #20]
 800992c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800992e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800993e:	429a      	cmp	r2, r3
 8009940:	d22b      	bcs.n	800999a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d112      	bne.n	8009984 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d016      	beq.n	8009994 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	3324      	adds	r3, #36	; 0x24
 800996a:	4618      	mov	r0, r3
 800996c:	f001 f8ca 	bl	800ab04 <xTaskRemoveFromEventList>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00e      	beq.n	8009994 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	e007      	b.n	8009994 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009988:	3301      	adds	r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	b25a      	sxtb	r2, r3
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009994:	2301      	movs	r3, #1
 8009996:	637b      	str	r3, [r7, #52]	; 0x34
 8009998:	e001      	b.n	800999e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800999a:	2300      	movs	r3, #0
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3738      	adds	r7, #56	; 0x38
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08c      	sub	sp, #48	; 0x30
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <xQueueReceive+0x2e>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	623b      	str	r3, [r7, #32]
 80099e0:	e7fe      	b.n	80099e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d103      	bne.n	80099f0 <xQueueReceive+0x3c>
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <xQueueReceive+0x40>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e000      	b.n	80099f6 <xQueueReceive+0x42>
 80099f4:	2300      	movs	r3, #0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <xQueueReceive+0x5a>
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	61fb      	str	r3, [r7, #28]
 8009a0c:	e7fe      	b.n	8009a0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a0e:	f001 fa33 	bl	800ae78 <xTaskGetSchedulerState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d102      	bne.n	8009a1e <xQueueReceive+0x6a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <xQueueReceive+0x6e>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <xQueueReceive+0x70>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <xQueueReceive+0x88>
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	e7fe      	b.n	8009a3a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a3c:	f002 f8c4 	bl	800bbc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01f      	beq.n	8009a8c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a50:	f000 fab4 	bl	8009fbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	1e5a      	subs	r2, r3, #1
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00f      	beq.n	8009a84 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	3310      	adds	r3, #16
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 f84b 	bl	800ab04 <xTaskRemoveFromEventList>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d007      	beq.n	8009a84 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a74:	4b3c      	ldr	r3, [pc, #240]	; (8009b68 <xQueueReceive+0x1b4>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a84:	f002 f8ce 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e069      	b.n	8009b60 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a92:	f002 f8c7 	bl	800bc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e062      	b.n	8009b60 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d106      	bne.n	8009aae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009aa0:	f107 0310 	add.w	r3, r7, #16
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 f88f 	bl	800abc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aae:	f002 f8b9 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ab2:	f000 fdd3 	bl	800a65c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ab6:	f002 f887 	bl	800bbc8 <vPortEnterCritical>
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d103      	bne.n	8009ad0 <xQueueReceive+0x11c>
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ad6:	b25b      	sxtb	r3, r3
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d103      	bne.n	8009ae6 <xQueueReceive+0x132>
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ae6:	f002 f89d 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aea:	1d3a      	adds	r2, r7, #4
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 f87e 	bl	800abf4 <xTaskCheckForTimeOut>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d123      	bne.n	8009b46 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b00:	f000 fad4 	bl	800a0ac <prvIsQueueEmpty>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d017      	beq.n	8009b3a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	3324      	adds	r3, #36	; 0x24
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 ffa8 	bl	800aa68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1a:	f000 fa75 	bl	800a008 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b1e:	f000 fdab 	bl	800a678 <xTaskResumeAll>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d189      	bne.n	8009a3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009b28:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <xQueueReceive+0x1b4>)
 8009b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	e780      	b.n	8009a3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3c:	f000 fa64 	bl	800a008 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b40:	f000 fd9a 	bl	800a678 <xTaskResumeAll>
 8009b44:	e77a      	b.n	8009a3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b48:	f000 fa5e 	bl	800a008 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b4c:	f000 fd94 	bl	800a678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b52:	f000 faab 	bl	800a0ac <prvIsQueueEmpty>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f43f af6f 	beq.w	8009a3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3730      	adds	r7, #48	; 0x30
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	; 0x38
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d109      	bne.n	8009b9c <xQueueSemaphoreTake+0x30>
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	623b      	str	r3, [r7, #32]
 8009b9a:	e7fe      	b.n	8009b9a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <xQueueSemaphoreTake+0x4c>
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	e7fe      	b.n	8009bb6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bb8:	f001 f95e 	bl	800ae78 <xTaskGetSchedulerState>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <xQueueSemaphoreTake+0x5c>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <xQueueSemaphoreTake+0x60>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e000      	b.n	8009bce <xQueueSemaphoreTake+0x62>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d109      	bne.n	8009be6 <xQueueSemaphoreTake+0x7a>
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	61bb      	str	r3, [r7, #24]
 8009be4:	e7fe      	b.n	8009be4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009be6:	f001 ffef 	bl	800bbc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d024      	beq.n	8009c40 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	1e5a      	subs	r2, r3, #1
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d104      	bne.n	8009c10 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009c06:	f001 fafd 	bl	800b204 <pvTaskIncrementMutexHeldCount>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00f      	beq.n	8009c38 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	3310      	adds	r3, #16
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 ff71 	bl	800ab04 <xTaskRemoveFromEventList>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d007      	beq.n	8009c38 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c28:	4b53      	ldr	r3, [pc, #332]	; (8009d78 <xQueueSemaphoreTake+0x20c>)
 8009c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c38:	f001 fff4 	bl	800bc24 <vPortExitCritical>
				return pdPASS;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e096      	b.n	8009d6e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d110      	bne.n	8009c68 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <xQueueSemaphoreTake+0xf4>
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	e7fe      	b.n	8009c5e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c60:	f001 ffe0 	bl	800bc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c64:	2300      	movs	r3, #0
 8009c66:	e082      	b.n	8009d6e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d106      	bne.n	8009c7c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c6e:	f107 030c 	add.w	r3, r7, #12
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 ffa8 	bl	800abc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c7c:	f001 ffd2 	bl	800bc24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c80:	f000 fcec 	bl	800a65c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c84:	f001 ffa0 	bl	800bbc8 <vPortEnterCritical>
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c94:	d103      	bne.n	8009c9e <xQueueSemaphoreTake+0x132>
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ca4:	b25b      	sxtb	r3, r3
 8009ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009caa:	d103      	bne.n	8009cb4 <xQueueSemaphoreTake+0x148>
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cb4:	f001 ffb6 	bl	800bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cb8:	463a      	mov	r2, r7
 8009cba:	f107 030c 	add.w	r3, r7, #12
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 ff97 	bl	800abf4 <xTaskCheckForTimeOut>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d132      	bne.n	8009d32 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cce:	f000 f9ed 	bl	800a0ac <prvIsQueueEmpty>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d026      	beq.n	8009d26 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009ce0:	f001 ff72 	bl	800bbc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 f8e3 	bl	800aeb4 <xTaskPriorityInherit>
 8009cee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009cf0:	f001 ff98 	bl	800bc24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	3324      	adds	r3, #36	; 0x24
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 feb3 	bl	800aa68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d04:	f000 f980 	bl	800a008 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d08:	f000 fcb6 	bl	800a678 <xTaskResumeAll>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f47f af69 	bne.w	8009be6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009d14:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <xQueueSemaphoreTake+0x20c>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	e75f      	b.n	8009be6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d28:	f000 f96e 	bl	800a008 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d2c:	f000 fca4 	bl	800a678 <xTaskResumeAll>
 8009d30:	e759      	b.n	8009be6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d34:	f000 f968 	bl	800a008 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d38:	f000 fc9e 	bl	800a678 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d3e:	f000 f9b5 	bl	800a0ac <prvIsQueueEmpty>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f43f af4e 	beq.w	8009be6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00d      	beq.n	8009d6c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009d50:	f001 ff3a 	bl	800bbc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d56:	f000 f8b0 	bl	8009eba <prvGetDisinheritPriorityAfterTimeout>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 f9b0 	bl	800b0c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d68:	f001 ff5c 	bl	800bc24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3738      	adds	r7, #56	; 0x38
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	; 0x38
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <xQueueReceiveFromISR+0x2a>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	623b      	str	r3, [r7, #32]
 8009da4:	e7fe      	b.n	8009da4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d103      	bne.n	8009db4 <xQueueReceiveFromISR+0x38>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <xQueueReceiveFromISR+0x3c>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e000      	b.n	8009dba <xQueueReceiveFromISR+0x3e>
 8009db8:	2300      	movs	r3, #0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <xQueueReceiveFromISR+0x56>
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	61fb      	str	r3, [r7, #28]
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dd2:	f001 ffb3 	bl	800bd3c <vPortValidateInterruptPriority>
	__asm volatile
 8009dd6:	f3ef 8211 	mrs	r2, BASEPRI
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	61ba      	str	r2, [r7, #24]
 8009dec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d02f      	beq.n	8009e5e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0c:	f000 f8d6 	bl	8009fbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	1e5a      	subs	r2, r3, #1
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e20:	d112      	bne.n	8009e48 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d016      	beq.n	8009e58 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	3310      	adds	r3, #16
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fe68 	bl	800ab04 <xTaskRemoveFromEventList>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e007      	b.n	8009e58 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	b25a      	sxtb	r2, r3
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5c:	e001      	b.n	8009e62 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3738      	adds	r7, #56	; 0x38
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <vQueueDelete+0x26>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60bb      	str	r3, [r7, #8]
 8009e9a:	e7fe      	b.n	8009e9a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f95b 	bl	800a158 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f002 f847 	bl	800bf40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d006      	beq.n	8009ed8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f1c3 0307 	rsb	r3, r3, #7
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e001      	b.n	8009edc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009edc:	68fb      	ldr	r3, [r7, #12]
	}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d14d      	bne.n	8009faa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f854 	bl	800afc0 <xTaskPriorityDisinherit>
 8009f18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	605a      	str	r2, [r3, #4]
 8009f20:	e043      	b.n	8009faa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d119      	bne.n	8009f5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6898      	ldr	r0, [r3, #8]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	461a      	mov	r2, r3
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f002 f962 	bl	800c1fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d32b      	bcc.n	8009faa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	609a      	str	r2, [r3, #8]
 8009f5a:	e026      	b.n	8009faa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68d8      	ldr	r0, [r3, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f64:	461a      	mov	r2, r3
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	f002 f948 	bl	800c1fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f74:	425b      	negs	r3, r3
 8009f76:	441a      	add	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d207      	bcs.n	8009f98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f90:	425b      	negs	r3, r3
 8009f92:	441a      	add	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d105      	bne.n	8009faa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009fb2:	697b      	ldr	r3, [r7, #20]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d018      	beq.n	800a000 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	441a      	add	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d303      	bcc.n	8009ff0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68d9      	ldr	r1, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	f002 f8fe 	bl	800c1fc <memcpy>
	}
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a010:	f001 fdda 	bl	800bbc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a01a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a01c:	e011      	b.n	800a042 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d012      	beq.n	800a04c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3324      	adds	r3, #36	; 0x24
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 fd6a 	bl	800ab04 <xTaskRemoveFromEventList>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a036:	f000 fe3d 	bl	800acb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dce9      	bgt.n	800a01e <prvUnlockQueue+0x16>
 800a04a:	e000      	b.n	800a04e <prvUnlockQueue+0x46>
					break;
 800a04c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	22ff      	movs	r2, #255	; 0xff
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a056:	f001 fde5 	bl	800bc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a05a:	f001 fdb5 	bl	800bbc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a064:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a066:	e011      	b.n	800a08c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d012      	beq.n	800a096 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3310      	adds	r3, #16
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fd45 	bl	800ab04 <xTaskRemoveFromEventList>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a080:	f000 fe18 	bl	800acb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	3b01      	subs	r3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a090:	2b00      	cmp	r3, #0
 800a092:	dce9      	bgt.n	800a068 <prvUnlockQueue+0x60>
 800a094:	e000      	b.n	800a098 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a096:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	22ff      	movs	r2, #255	; 0xff
 800a09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0a0:	f001 fdc0 	bl	800bc24 <vPortExitCritical>
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0b4:	f001 fd88 	bl	800bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e001      	b.n	800a0ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ca:	f001 fdab 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0e0:	f001 fd72 	bl	800bbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d102      	bne.n	800a0f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e001      	b.n	800a0fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0fa:	f001 fd93 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e014      	b.n	800a142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a118:	4a0e      	ldr	r2, [pc, #56]	; (800a154 <vQueueAddToRegistry+0x4c>)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a124:	490b      	ldr	r1, [pc, #44]	; (800a154 <vQueueAddToRegistry+0x4c>)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <vQueueAddToRegistry+0x4c>)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4413      	add	r3, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a13a:	e005      	b.n	800a148 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b07      	cmp	r3, #7
 800a146:	d9e7      	bls.n	800a118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bc80      	pop	{r7}
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20001f50 	.word	0x20001f50

0800a158 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a160:	2300      	movs	r3, #0
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	e016      	b.n	800a194 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a166:	4a0f      	ldr	r2, [pc, #60]	; (800a1a4 <vQueueUnregisterQueue+0x4c>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	00db      	lsls	r3, r3, #3
 800a16c:	4413      	add	r3, r2
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d10b      	bne.n	800a18e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a176:	4a0b      	ldr	r2, [pc, #44]	; (800a1a4 <vQueueUnregisterQueue+0x4c>)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2100      	movs	r1, #0
 800a17c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a180:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <vQueueUnregisterQueue+0x4c>)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	4413      	add	r3, r2
 800a188:	2200      	movs	r2, #0
 800a18a:	605a      	str	r2, [r3, #4]
				break;
 800a18c:	e005      	b.n	800a19a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3301      	adds	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b07      	cmp	r3, #7
 800a198:	d9e5      	bls.n	800a166 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr
 800a1a4:	20001f50 	.word	0x20001f50

0800a1a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1b8:	f001 fd06 	bl	800bbc8 <vPortEnterCritical>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d103      	bne.n	800a1d2 <vQueueWaitForMessageRestricted+0x2a>
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d103      	bne.n	800a1e8 <vQueueWaitForMessageRestricted+0x40>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e8:	f001 fd1c 	bl	800bc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3324      	adds	r3, #36	; 0x24
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fc57 	bl	800aab0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ff00 	bl	800a008 <prvUnlockQueue>
	}
 800a208:	bf00      	nop
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	; 0x38
 800a214:	af04      	add	r7, sp, #16
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <xTaskCreateStatic+0x28>
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	623b      	str	r3, [r7, #32]
 800a236:	e7fe      	b.n	800a236 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <xTaskCreateStatic+0x42>
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	e7fe      	b.n	800a250 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a252:	2354      	movs	r3, #84	; 0x54
 800a254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b54      	cmp	r3, #84	; 0x54
 800a25a:	d009      	beq.n	800a270 <xTaskCreateStatic+0x60>
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	e7fe      	b.n	800a26e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01e      	beq.n	800a2b4 <xTaskCreateStatic+0xa4>
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01b      	beq.n	800a2b4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a284:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	2202      	movs	r2, #2
 800a28a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a28e:	2300      	movs	r3, #0
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	f107 0314 	add.w	r3, r7, #20
 800a29a:	9301      	str	r3, [sp, #4]
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f850 	bl	800a34c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ae:	f000 f8d3 	bl	800a458 <prvAddNewTaskToReadyList>
 800a2b2:	e001      	b.n	800a2b8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2b8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3728      	adds	r7, #40	; 0x28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b08c      	sub	sp, #48	; 0x30
 800a2c6:	af04      	add	r7, sp, #16
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 fd6c 	bl	800bdb4 <pvPortMalloc>
 800a2dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00e      	beq.n	800a302 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a2e4:	2054      	movs	r0, #84	; 0x54
 800a2e6:	f001 fd65 	bl	800bdb4 <pvPortMalloc>
 800a2ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
 800a2f8:	e005      	b.n	800a306 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2fa:	6978      	ldr	r0, [r7, #20]
 800a2fc:	f001 fe20 	bl	800bf40 <vPortFree>
 800a300:	e001      	b.n	800a306 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d017      	beq.n	800a33c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a314:	88fa      	ldrh	r2, [r7, #6]
 800a316:	2300      	movs	r3, #0
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f80e 	bl	800a34c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a330:	69f8      	ldr	r0, [r7, #28]
 800a332:	f000 f891 	bl	800a458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a336:	2301      	movs	r3, #1
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	e002      	b.n	800a342 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a33c:	f04f 33ff 	mov.w	r3, #4294967295
 800a340:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a342:	69bb      	ldr	r3, [r7, #24]
	}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	461a      	mov	r2, r3
 800a364:	21a5      	movs	r1, #165	; 0xa5
 800a366:	f001 ff54 	bl	800c212 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a374:	3b01      	subs	r3, #1
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	f023 0307 	bic.w	r3, r3, #7
 800a382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <prvInitialiseNewTask+0x56>
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e7fe      	b.n	800a3a0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	e012      	b.n	800a3ce <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	7819      	ldrb	r1, [r3, #0]
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3334      	adds	r3, #52	; 0x34
 800a3b8:	460a      	mov	r2, r1
 800a3ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d006      	beq.n	800a3d6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b0f      	cmp	r3, #15
 800a3d2:	d9e9      	bls.n	800a3a8 <prvInitialiseNewTask+0x5c>
 800a3d4:	e000      	b.n	800a3d8 <prvInitialiseNewTask+0x8c>
		{
			break;
 800a3d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d901      	bls.n	800a3ea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3e6:	2306      	movs	r3, #6
 800a3e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	3304      	adds	r3, #4
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fef8 	bl	80091f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	3318      	adds	r3, #24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fef3 	bl	80091f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a414:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	f1c3 0207 	rsb	r2, r3, #7
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a424:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	2200      	movs	r2, #0
 800a42a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	68f9      	ldr	r1, [r7, #12]
 800a438:	69b8      	ldr	r0, [r7, #24]
 800a43a:	f001 fadb 	bl	800b9f4 <pxPortInitialiseStack>
 800a43e:	4602      	mov	r2, r0
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a450:	bf00      	nop
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a460:	f001 fbb2 	bl	800bbc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a464:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <prvAddNewTaskToReadyList+0xb8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	4a29      	ldr	r2, [pc, #164]	; (800a510 <prvAddNewTaskToReadyList+0xb8>)
 800a46c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <prvAddNewTaskToReadyList+0xbc>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d109      	bne.n	800a48a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a476:	4a27      	ldr	r2, [pc, #156]	; (800a514 <prvAddNewTaskToReadyList+0xbc>)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a47c:	4b24      	ldr	r3, [pc, #144]	; (800a510 <prvAddNewTaskToReadyList+0xb8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d110      	bne.n	800a4a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a484:	f000 fc3a 	bl	800acfc <prvInitialiseTaskLists>
 800a488:	e00d      	b.n	800a4a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a48a:	4b23      	ldr	r3, [pc, #140]	; (800a518 <prvAddNewTaskToReadyList+0xc0>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a492:	4b20      	ldr	r3, [pc, #128]	; (800a514 <prvAddNewTaskToReadyList+0xbc>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d802      	bhi.n	800a4a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4a0:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <prvAddNewTaskToReadyList+0xbc>)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4a6:	4b1d      	ldr	r3, [pc, #116]	; (800a51c <prvAddNewTaskToReadyList+0xc4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	4a1b      	ldr	r2, [pc, #108]	; (800a51c <prvAddNewTaskToReadyList+0xc4>)
 800a4ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	409a      	lsls	r2, r3
 800a4b8:	4b19      	ldr	r3, [pc, #100]	; (800a520 <prvAddNewTaskToReadyList+0xc8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	4a18      	ldr	r2, [pc, #96]	; (800a520 <prvAddNewTaskToReadyList+0xc8>)
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4a15      	ldr	r2, [pc, #84]	; (800a524 <prvAddNewTaskToReadyList+0xcc>)
 800a4d0:	441a      	add	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fe fe98 	bl	800920e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fba1 	bl	800bc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <prvAddNewTaskToReadyList+0xc0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00e      	beq.n	800a508 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4ea:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <prvAddNewTaskToReadyList+0xbc>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d207      	bcs.n	800a508 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4f8:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <prvAddNewTaskToReadyList+0xd0>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000bd4 	.word	0x20000bd4
 800a514:	20000ad4 	.word	0x20000ad4
 800a518:	20000be0 	.word	0x20000be0
 800a51c:	20000bf0 	.word	0x20000bf0
 800a520:	20000bdc 	.word	0x20000bdc
 800a524:	20000ad8 	.word	0x20000ad8
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d016      	beq.n	800a56c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <vTaskDelay+0x60>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <vTaskDelay+0x2e>
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60bb      	str	r3, [r7, #8]
 800a558:	e7fe      	b.n	800a558 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a55a:	f000 f87f 	bl	800a65c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a55e:	2100      	movs	r1, #0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fe63 	bl	800b22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a566:	f000 f887 	bl	800a678 <xTaskResumeAll>
 800a56a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d107      	bne.n	800a582 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <vTaskDelay+0x64>)
 800a574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000bfc 	.word	0x20000bfc
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	1d39      	adds	r1, r7, #4
 800a5a6:	f107 0308 	add.w	r3, r7, #8
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7f6 fbd6 	bl	8000d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	9202      	str	r2, [sp, #8]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	4920      	ldr	r1, [pc, #128]	; (800a644 <vTaskStartScheduler+0xb0>)
 800a5c4:	4820      	ldr	r0, [pc, #128]	; (800a648 <vTaskStartScheduler+0xb4>)
 800a5c6:	f7ff fe23 	bl	800a210 <xTaskCreateStatic>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	4b1f      	ldr	r3, [pc, #124]	; (800a64c <vTaskStartScheduler+0xb8>)
 800a5ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5d0:	4b1e      	ldr	r3, [pc, #120]	; (800a64c <vTaskStartScheduler+0xb8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	e001      	b.n	800a5e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d102      	bne.n	800a5ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5e8:	f000 fe86 	bl	800b2f8 <xTimerCreateTimerTask>
 800a5ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d115      	bne.n	800a620 <vTaskStartScheduler+0x8c>
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <vTaskStartScheduler+0xbc>)
 800a608:	f04f 32ff 	mov.w	r2, #4294967295
 800a60c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a60e:	4b11      	ldr	r3, [pc, #68]	; (800a654 <vTaskStartScheduler+0xc0>)
 800a610:	2201      	movs	r2, #1
 800a612:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a614:	4b10      	ldr	r3, [pc, #64]	; (800a658 <vTaskStartScheduler+0xc4>)
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a61a:	f001 fa65 	bl	800bae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a61e:	e00d      	b.n	800a63c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d109      	bne.n	800a63c <vTaskStartScheduler+0xa8>
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	e7fe      	b.n	800a63a <vTaskStartScheduler+0xa6>
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	0800e174 	.word	0x0800e174
 800a648:	0800accd 	.word	0x0800accd
 800a64c:	20000bf8 	.word	0x20000bf8
 800a650:	20000bf4 	.word	0x20000bf4
 800a654:	20000be0 	.word	0x20000be0
 800a658:	20000bd8 	.word	0x20000bd8

0800a65c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <vTaskSuspendAll+0x18>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3301      	adds	r3, #1
 800a666:	4a03      	ldr	r2, [pc, #12]	; (800a674 <vTaskSuspendAll+0x18>)
 800a668:	6013      	str	r3, [r2, #0]
}
 800a66a:	bf00      	nop
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	20000bfc 	.word	0x20000bfc

0800a678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a682:	2300      	movs	r3, #0
 800a684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a686:	4b41      	ldr	r3, [pc, #260]	; (800a78c <xTaskResumeAll+0x114>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <xTaskResumeAll+0x2a>
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	e7fe      	b.n	800a6a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6a2:	f001 fa91 	bl	800bbc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6a6:	4b39      	ldr	r3, [pc, #228]	; (800a78c <xTaskResumeAll+0x114>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	4a37      	ldr	r2, [pc, #220]	; (800a78c <xTaskResumeAll+0x114>)
 800a6ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b0:	4b36      	ldr	r3, [pc, #216]	; (800a78c <xTaskResumeAll+0x114>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d161      	bne.n	800a77c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6b8:	4b35      	ldr	r3, [pc, #212]	; (800a790 <xTaskResumeAll+0x118>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d05d      	beq.n	800a77c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6c0:	e02e      	b.n	800a720 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a6c2:	4b34      	ldr	r3, [pc, #208]	; (800a794 <xTaskResumeAll+0x11c>)
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3318      	adds	r3, #24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fdf8 	bl	80092c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fdf3 	bl	80092c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	409a      	lsls	r2, r3
 800a6e6:	4b2c      	ldr	r3, [pc, #176]	; (800a798 <xTaskResumeAll+0x120>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	4a2a      	ldr	r2, [pc, #168]	; (800a798 <xTaskResumeAll+0x120>)
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4a27      	ldr	r2, [pc, #156]	; (800a79c <xTaskResumeAll+0x124>)
 800a6fe:	441a      	add	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3304      	adds	r3, #4
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	f7fe fd81 	bl	800920e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	4b23      	ldr	r3, [pc, #140]	; (800a7a0 <xTaskResumeAll+0x128>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	429a      	cmp	r2, r3
 800a718:	d302      	bcc.n	800a720 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a71a:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <xTaskResumeAll+0x12c>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a720:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <xTaskResumeAll+0x11c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1cc      	bne.n	800a6c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a72e:	f000 fb7f 	bl	800ae30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a732:	4b1d      	ldr	r3, [pc, #116]	; (800a7a8 <xTaskResumeAll+0x130>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d010      	beq.n	800a760 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a73e:	f000 f857 	bl	800a7f0 <xTaskIncrementTick>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a748:	4b16      	ldr	r3, [pc, #88]	; (800a7a4 <xTaskResumeAll+0x12c>)
 800a74a:	2201      	movs	r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3b01      	subs	r3, #1
 800a752:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f1      	bne.n	800a73e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a75a:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <xTaskResumeAll+0x130>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a760:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <xTaskResumeAll+0x12c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d009      	beq.n	800a77c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a76c:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <xTaskResumeAll+0x134>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a77c:	f001 fa52 	bl	800bc24 <vPortExitCritical>

	return xAlreadyYielded;
 800a780:	68bb      	ldr	r3, [r7, #8]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20000bfc 	.word	0x20000bfc
 800a790:	20000bd4 	.word	0x20000bd4
 800a794:	20000b94 	.word	0x20000b94
 800a798:	20000bdc 	.word	0x20000bdc
 800a79c:	20000ad8 	.word	0x20000ad8
 800a7a0:	20000ad4 	.word	0x20000ad4
 800a7a4:	20000be8 	.word	0x20000be8
 800a7a8:	20000be4 	.word	0x20000be4
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7b6:	4b04      	ldr	r3, [pc, #16]	; (800a7c8 <xTaskGetTickCount+0x18>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7bc:	687b      	ldr	r3, [r7, #4]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	20000bd8 	.word	0x20000bd8

0800a7cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7d2:	f001 fab3 	bl	800bd3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a7da:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <xTaskGetTickCountFromISR+0x20>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7e0:	683b      	ldr	r3, [r7, #0]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000bd8 	.word	0x20000bd8

0800a7f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7fa:	4b50      	ldr	r3, [pc, #320]	; (800a93c <xTaskIncrementTick+0x14c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 808c 	bne.w	800a91c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a804:	4b4e      	ldr	r3, [pc, #312]	; (800a940 <xTaskIncrementTick+0x150>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3301      	adds	r3, #1
 800a80a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a80c:	4a4c      	ldr	r2, [pc, #304]	; (800a940 <xTaskIncrementTick+0x150>)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d11f      	bne.n	800a858 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a818:	4b4a      	ldr	r3, [pc, #296]	; (800a944 <xTaskIncrementTick+0x154>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d009      	beq.n	800a836 <xTaskIncrementTick+0x46>
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	e7fe      	b.n	800a834 <xTaskIncrementTick+0x44>
 800a836:	4b43      	ldr	r3, [pc, #268]	; (800a944 <xTaskIncrementTick+0x154>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	4b42      	ldr	r3, [pc, #264]	; (800a948 <xTaskIncrementTick+0x158>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a40      	ldr	r2, [pc, #256]	; (800a944 <xTaskIncrementTick+0x154>)
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	4a40      	ldr	r2, [pc, #256]	; (800a948 <xTaskIncrementTick+0x158>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	4b40      	ldr	r3, [pc, #256]	; (800a94c <xTaskIncrementTick+0x15c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3301      	adds	r3, #1
 800a850:	4a3e      	ldr	r2, [pc, #248]	; (800a94c <xTaskIncrementTick+0x15c>)
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	f000 faec 	bl	800ae30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a858:	4b3d      	ldr	r3, [pc, #244]	; (800a950 <xTaskIncrementTick+0x160>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d34d      	bcc.n	800a8fe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a862:	4b38      	ldr	r3, [pc, #224]	; (800a944 <xTaskIncrementTick+0x154>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <xTaskIncrementTick+0x80>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <xTaskIncrementTick+0x82>
 800a870:	2300      	movs	r3, #0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d004      	beq.n	800a880 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a876:	4b36      	ldr	r3, [pc, #216]	; (800a950 <xTaskIncrementTick+0x160>)
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	601a      	str	r2, [r3, #0]
					break;
 800a87e:	e03e      	b.n	800a8fe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a880:	4b30      	ldr	r3, [pc, #192]	; (800a944 <xTaskIncrementTick+0x154>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	429a      	cmp	r2, r3
 800a896:	d203      	bcs.n	800a8a0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a898:	4a2d      	ldr	r2, [pc, #180]	; (800a950 <xTaskIncrementTick+0x160>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6013      	str	r3, [r2, #0]
						break;
 800a89e:	e02e      	b.n	800a8fe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fd0d 	bl	80092c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	3318      	adds	r3, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fd04 	bl	80092c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	409a      	lsls	r2, r3
 800a8c4:	4b23      	ldr	r3, [pc, #140]	; (800a954 <xTaskIncrementTick+0x164>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	4a22      	ldr	r2, [pc, #136]	; (800a954 <xTaskIncrementTick+0x164>)
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a1f      	ldr	r2, [pc, #124]	; (800a958 <xTaskIncrementTick+0x168>)
 800a8dc:	441a      	add	r2, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f7fe fc92 	bl	800920e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ee:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <xTaskIncrementTick+0x16c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3b4      	bcc.n	800a862 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8fc:	e7b1      	b.n	800a862 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8fe:	4b17      	ldr	r3, [pc, #92]	; (800a95c <xTaskIncrementTick+0x16c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4914      	ldr	r1, [pc, #80]	; (800a958 <xTaskIncrementTick+0x168>)
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d907      	bls.n	800a926 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	e004      	b.n	800a926 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a91c:	4b10      	ldr	r3, [pc, #64]	; (800a960 <xTaskIncrementTick+0x170>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3301      	adds	r3, #1
 800a922:	4a0f      	ldr	r2, [pc, #60]	; (800a960 <xTaskIncrementTick+0x170>)
 800a924:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <xTaskIncrementTick+0x174>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a92e:	2301      	movs	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a932:	697b      	ldr	r3, [r7, #20]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20000bfc 	.word	0x20000bfc
 800a940:	20000bd8 	.word	0x20000bd8
 800a944:	20000b8c 	.word	0x20000b8c
 800a948:	20000b90 	.word	0x20000b90
 800a94c:	20000bec 	.word	0x20000bec
 800a950:	20000bf4 	.word	0x20000bf4
 800a954:	20000bdc 	.word	0x20000bdc
 800a958:	20000ad8 	.word	0x20000ad8
 800a95c:	20000ad4 	.word	0x20000ad4
 800a960:	20000be4 	.word	0x20000be4
 800a964:	20000be8 	.word	0x20000be8

0800a968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a96e:	4b39      	ldr	r3, [pc, #228]	; (800aa54 <vTaskSwitchContext+0xec>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a976:	4b38      	ldr	r3, [pc, #224]	; (800aa58 <vTaskSwitchContext+0xf0>)
 800a978:	2201      	movs	r2, #1
 800a97a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a97c:	e065      	b.n	800aa4a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800a97e:	4b36      	ldr	r3, [pc, #216]	; (800aa58 <vTaskSwitchContext+0xf0>)
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a984:	4b35      	ldr	r3, [pc, #212]	; (800aa5c <vTaskSwitchContext+0xf4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d111      	bne.n	800a9c0 <vTaskSwitchContext+0x58>
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d10b      	bne.n	800a9c0 <vTaskSwitchContext+0x58>
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d105      	bne.n	800a9c0 <vTaskSwitchContext+0x58>
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	330c      	adds	r3, #12
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d008      	beq.n	800a9d2 <vTaskSwitchContext+0x6a>
 800a9c0:	4b26      	ldr	r3, [pc, #152]	; (800aa5c <vTaskSwitchContext+0xf4>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <vTaskSwitchContext+0xf4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3334      	adds	r3, #52	; 0x34
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	f7f6 f9ab 	bl	8000d28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a9d2:	4b23      	ldr	r3, [pc, #140]	; (800aa60 <vTaskSwitchContext+0xf8>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	fab3 f383 	clz	r3, r3
 800a9de:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	f1c3 031f 	rsb	r3, r3, #31
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	491e      	ldr	r1, [pc, #120]	; (800aa64 <vTaskSwitchContext+0xfc>)
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <vTaskSwitchContext+0xa8>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	e7fe      	b.n	800aa0e <vTaskSwitchContext+0xa6>
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4a12      	ldr	r2, [pc, #72]	; (800aa64 <vTaskSwitchContext+0xfc>)
 800aa1c:	4413      	add	r3, r2
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	605a      	str	r2, [r3, #4]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	3308      	adds	r3, #8
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d104      	bne.n	800aa40 <vTaskSwitchContext+0xd8>
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	605a      	str	r2, [r3, #4]
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	4a05      	ldr	r2, [pc, #20]	; (800aa5c <vTaskSwitchContext+0xf4>)
 800aa48:	6013      	str	r3, [r2, #0]
}
 800aa4a:	bf00      	nop
 800aa4c:	3720      	adds	r7, #32
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000bfc 	.word	0x20000bfc
 800aa58:	20000be8 	.word	0x20000be8
 800aa5c:	20000ad4 	.word	0x20000ad4
 800aa60:	20000bdc 	.word	0x20000bdc
 800aa64:	20000ad8 	.word	0x20000ad8

0800aa68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d109      	bne.n	800aa8c <vTaskPlaceOnEventList+0x24>
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e7fe      	b.n	800aa8a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa8c:	4b07      	ldr	r3, [pc, #28]	; (800aaac <vTaskPlaceOnEventList+0x44>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3318      	adds	r3, #24
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7fe fbdd 	bl	8009254 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	6838      	ldr	r0, [r7, #0]
 800aa9e:	f000 fbc5 	bl	800b22c <prvAddCurrentTaskToDelayedList>
}
 800aaa2:	bf00      	nop
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000ad4 	.word	0x20000ad4

0800aab0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <vTaskPlaceOnEventListRestricted+0x26>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e7fe      	b.n	800aad4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aad6:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <vTaskPlaceOnEventListRestricted+0x50>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3318      	adds	r3, #24
 800aadc:	4619      	mov	r1, r3
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7fe fb95 	bl	800920e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800aaea:	f04f 33ff 	mov.w	r3, #4294967295
 800aaee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68b8      	ldr	r0, [r7, #8]
 800aaf4:	f000 fb9a 	bl	800b22c <prvAddCurrentTaskToDelayedList>
	}
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	20000ad4 	.word	0x20000ad4

0800ab04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <xTaskRemoveFromEventList+0x2a>
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e7fe      	b.n	800ab2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	3318      	adds	r3, #24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fbc6 	bl	80092c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab38:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <xTaskRemoveFromEventList+0xac>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11c      	bne.n	800ab7a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fbbd 	bl	80092c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4e:	2201      	movs	r2, #1
 800ab50:	409a      	lsls	r2, r3
 800ab52:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <xTaskRemoveFromEventList+0xb0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	4a16      	ldr	r2, [pc, #88]	; (800abb4 <xTaskRemoveFromEventList+0xb0>)
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <xTaskRemoveFromEventList+0xb4>)
 800ab6a:	441a      	add	r2, r3
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4619      	mov	r1, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	f7fe fb4b 	bl	800920e <vListInsertEnd>
 800ab78:	e005      	b.n	800ab86 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	3318      	adds	r3, #24
 800ab7e:	4619      	mov	r1, r3
 800ab80:	480e      	ldr	r0, [pc, #56]	; (800abbc <xTaskRemoveFromEventList+0xb8>)
 800ab82:	f7fe fb44 	bl	800920e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <xTaskRemoveFromEventList+0xbc>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d905      	bls.n	800aba0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab94:	2301      	movs	r3, #1
 800ab96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab98:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <xTaskRemoveFromEventList+0xc0>)
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	e001      	b.n	800aba4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aba4:	697b      	ldr	r3, [r7, #20]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000bfc 	.word	0x20000bfc
 800abb4:	20000bdc 	.word	0x20000bdc
 800abb8:	20000ad8 	.word	0x20000ad8
 800abbc:	20000b94 	.word	0x20000b94
 800abc0:	20000ad4 	.word	0x20000ad4
 800abc4:	20000be8 	.word	0x20000be8

0800abc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <vTaskInternalSetTimeOutState+0x24>)
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <vTaskInternalSetTimeOutState+0x28>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	605a      	str	r2, [r3, #4]
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bc80      	pop	{r7}
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000bec 	.word	0x20000bec
 800abf0:	20000bd8 	.word	0x20000bd8

0800abf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b088      	sub	sp, #32
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <xTaskCheckForTimeOut+0x24>
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	e7fe      	b.n	800ac16 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <xTaskCheckForTimeOut+0x3e>
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e7fe      	b.n	800ac30 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ac32:	f000 ffc9 	bl	800bbc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac36:	4b1d      	ldr	r3, [pc, #116]	; (800acac <xTaskCheckForTimeOut+0xb8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d102      	bne.n	800ac56 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	e023      	b.n	800ac9e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	4b15      	ldr	r3, [pc, #84]	; (800acb0 <xTaskCheckForTimeOut+0xbc>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d007      	beq.n	800ac72 <xTaskCheckForTimeOut+0x7e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d302      	bcc.n	800ac72 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	61fb      	str	r3, [r7, #28]
 800ac70:	e015      	b.n	800ac9e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d20b      	bcs.n	800ac94 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ff9d 	bl	800abc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	e004      	b.n	800ac9e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac9e:	f000 ffc1 	bl	800bc24 <vPortExitCritical>

	return xReturn;
 800aca2:	69fb      	ldr	r3, [r7, #28]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3720      	adds	r7, #32
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20000bd8 	.word	0x20000bd8
 800acb0:	20000bec 	.word	0x20000bec

0800acb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <vTaskMissedYield+0x14>)
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
}
 800acbe:	bf00      	nop
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	20000be8 	.word	0x20000be8

0800accc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acd4:	f000 f852 	bl	800ad7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acd8:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <prvIdleTask+0x28>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d9f9      	bls.n	800acd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <prvIdleTask+0x2c>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800acf0:	e7f0      	b.n	800acd4 <prvIdleTask+0x8>
 800acf2:	bf00      	nop
 800acf4:	20000ad8 	.word	0x20000ad8
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad02:	2300      	movs	r3, #0
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	e00c      	b.n	800ad22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4a12      	ldr	r2, [pc, #72]	; (800ad5c <prvInitialiseTaskLists+0x60>)
 800ad14:	4413      	add	r3, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fa4e 	bl	80091b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b06      	cmp	r3, #6
 800ad26:	d9ef      	bls.n	800ad08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad28:	480d      	ldr	r0, [pc, #52]	; (800ad60 <prvInitialiseTaskLists+0x64>)
 800ad2a:	f7fe fa45 	bl	80091b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad2e:	480d      	ldr	r0, [pc, #52]	; (800ad64 <prvInitialiseTaskLists+0x68>)
 800ad30:	f7fe fa42 	bl	80091b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad34:	480c      	ldr	r0, [pc, #48]	; (800ad68 <prvInitialiseTaskLists+0x6c>)
 800ad36:	f7fe fa3f 	bl	80091b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad3a:	480c      	ldr	r0, [pc, #48]	; (800ad6c <prvInitialiseTaskLists+0x70>)
 800ad3c:	f7fe fa3c 	bl	80091b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad40:	480b      	ldr	r0, [pc, #44]	; (800ad70 <prvInitialiseTaskLists+0x74>)
 800ad42:	f7fe fa39 	bl	80091b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <prvInitialiseTaskLists+0x78>)
 800ad48:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <prvInitialiseTaskLists+0x64>)
 800ad4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <prvInitialiseTaskLists+0x7c>)
 800ad4e:	4a05      	ldr	r2, [pc, #20]	; (800ad64 <prvInitialiseTaskLists+0x68>)
 800ad50:	601a      	str	r2, [r3, #0]
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000ad8 	.word	0x20000ad8
 800ad60:	20000b64 	.word	0x20000b64
 800ad64:	20000b78 	.word	0x20000b78
 800ad68:	20000b94 	.word	0x20000b94
 800ad6c:	20000ba8 	.word	0x20000ba8
 800ad70:	20000bc0 	.word	0x20000bc0
 800ad74:	20000b8c 	.word	0x20000b8c
 800ad78:	20000b90 	.word	0x20000b90

0800ad7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad82:	e019      	b.n	800adb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad84:	f000 ff20 	bl	800bbc8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ad88:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <prvCheckTasksWaitingTermination+0x4c>)
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe fa95 	bl	80092c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <prvCheckTasksWaitingTermination+0x50>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	4a0a      	ldr	r2, [pc, #40]	; (800adcc <prvCheckTasksWaitingTermination+0x50>)
 800ada2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <prvCheckTasksWaitingTermination+0x54>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	4a09      	ldr	r2, [pc, #36]	; (800add0 <prvCheckTasksWaitingTermination+0x54>)
 800adac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800adae:	f000 ff39 	bl	800bc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f80e 	bl	800add4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <prvCheckTasksWaitingTermination+0x54>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e1      	bne.n	800ad84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000ba8 	.word	0x20000ba8
 800adcc:	20000bd4 	.word	0x20000bd4
 800add0:	20000bbc 	.word	0x20000bbc

0800add4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d108      	bne.n	800adf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adea:	4618      	mov	r0, r3
 800adec:	f001 f8a8 	bl	800bf40 <vPortFree>
				vPortFree( pxTCB );
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 f8a5 	bl	800bf40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adf6:	e017      	b.n	800ae28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d103      	bne.n	800ae0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 f89c 	bl	800bf40 <vPortFree>
	}
 800ae08:	e00e      	b.n	800ae28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d009      	beq.n	800ae28 <prvDeleteTCB+0x54>
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e7fe      	b.n	800ae26 <prvDeleteTCB+0x52>
	}
 800ae28:	bf00      	nop
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae36:	4b0e      	ldr	r3, [pc, #56]	; (800ae70 <prvResetNextTaskUnblockTime+0x40>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <prvResetNextTaskUnblockTime+0x14>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e000      	b.n	800ae46 <prvResetNextTaskUnblockTime+0x16>
 800ae44:	2300      	movs	r3, #0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <prvResetNextTaskUnblockTime+0x44>)
 800ae4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae52:	e008      	b.n	800ae66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ae54:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <prvResetNextTaskUnblockTime+0x40>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	4a04      	ldr	r2, [pc, #16]	; (800ae74 <prvResetNextTaskUnblockTime+0x44>)
 800ae64:	6013      	str	r3, [r2, #0]
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr
 800ae70:	20000b8c 	.word	0x20000b8c
 800ae74:	20000bf4 	.word	0x20000bf4

0800ae78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <xTaskGetSchedulerState+0x34>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d102      	bne.n	800ae8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae86:	2301      	movs	r3, #1
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	e008      	b.n	800ae9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae8c:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <xTaskGetSchedulerState+0x38>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae94:	2302      	movs	r3, #2
 800ae96:	607b      	str	r3, [r7, #4]
 800ae98:	e001      	b.n	800ae9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae9e:	687b      	ldr	r3, [r7, #4]
	}
 800aea0:	4618      	mov	r0, r3
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bc80      	pop	{r7}
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	20000be0 	.word	0x20000be0
 800aeb0:	20000bfc 	.word	0x20000bfc

0800aeb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d06e      	beq.n	800afa8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aece:	4b39      	ldr	r3, [pc, #228]	; (800afb4 <xTaskPriorityInherit+0x100>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d25e      	bcs.n	800af96 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	db06      	blt.n	800aeee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee0:	4b34      	ldr	r3, [pc, #208]	; (800afb4 <xTaskPriorityInherit+0x100>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	f1c3 0207 	rsb	r2, r3, #7
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	6959      	ldr	r1, [r3, #20]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4a2e      	ldr	r2, [pc, #184]	; (800afb8 <xTaskPriorityInherit+0x104>)
 800af00:	4413      	add	r3, r2
 800af02:	4299      	cmp	r1, r3
 800af04:	d101      	bne.n	800af0a <xTaskPriorityInherit+0x56>
 800af06:	2301      	movs	r3, #1
 800af08:	e000      	b.n	800af0c <xTaskPriorityInherit+0x58>
 800af0a:	2300      	movs	r3, #0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d03a      	beq.n	800af86 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	3304      	adds	r3, #4
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe f9d5 	bl	80092c4 <uxListRemove>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d115      	bne.n	800af4c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af24:	4924      	ldr	r1, [pc, #144]	; (800afb8 <xTaskPriorityInherit+0x104>)
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	440b      	add	r3, r1
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <xTaskPriorityInherit+0x98>
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	2201      	movs	r2, #1
 800af3c:	fa02 f303 	lsl.w	r3, r2, r3
 800af40:	43da      	mvns	r2, r3
 800af42:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <xTaskPriorityInherit+0x108>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4013      	ands	r3, r2
 800af48:	4a1c      	ldr	r2, [pc, #112]	; (800afbc <xTaskPriorityInherit+0x108>)
 800af4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af4c:	4b19      	ldr	r3, [pc, #100]	; (800afb4 <xTaskPriorityInherit+0x100>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	2201      	movs	r2, #1
 800af5c:	409a      	lsls	r2, r3
 800af5e:	4b17      	ldr	r3, [pc, #92]	; (800afbc <xTaskPriorityInherit+0x108>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4313      	orrs	r3, r2
 800af64:	4a15      	ldr	r2, [pc, #84]	; (800afbc <xTaskPriorityInherit+0x108>)
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4a10      	ldr	r2, [pc, #64]	; (800afb8 <xTaskPriorityInherit+0x104>)
 800af76:	441a      	add	r2, r3
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fe f945 	bl	800920e <vListInsertEnd>
 800af84:	e004      	b.n	800af90 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <xTaskPriorityInherit+0x100>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	e008      	b.n	800afa8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af9a:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <xTaskPriorityInherit+0x100>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d201      	bcs.n	800afa8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afa8:	68fb      	ldr	r3, [r7, #12]
	}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000ad4 	.word	0x20000ad4
 800afb8:	20000ad8 	.word	0x20000ad8
 800afbc:	20000bdc 	.word	0x20000bdc

0800afc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d06c      	beq.n	800b0b0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800afd6:	4b39      	ldr	r3, [pc, #228]	; (800b0bc <xTaskPriorityDisinherit+0xfc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d009      	beq.n	800aff4 <xTaskPriorityDisinherit+0x34>
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	e7fe      	b.n	800aff2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d109      	bne.n	800b010 <xTaskPriorityDisinherit+0x50>
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	60bb      	str	r3, [r7, #8]
 800b00e:	e7fe      	b.n	800b00e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b014:	1e5a      	subs	r2, r3, #1
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b022:	429a      	cmp	r2, r3
 800b024:	d044      	beq.n	800b0b0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d140      	bne.n	800b0b0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3304      	adds	r3, #4
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe f946 	bl	80092c4 <uxListRemove>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d115      	bne.n	800b06a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	491f      	ldr	r1, [pc, #124]	; (800b0c0 <xTaskPriorityDisinherit+0x100>)
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	440b      	add	r3, r1
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <xTaskPriorityDisinherit+0xaa>
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	2201      	movs	r2, #1
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	43da      	mvns	r2, r3
 800b060:	4b18      	ldr	r3, [pc, #96]	; (800b0c4 <xTaskPriorityDisinherit+0x104>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4013      	ands	r3, r2
 800b066:	4a17      	ldr	r2, [pc, #92]	; (800b0c4 <xTaskPriorityDisinherit+0x104>)
 800b068:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	f1c3 0207 	rsb	r2, r3, #7
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	2201      	movs	r2, #1
 800b084:	409a      	lsls	r2, r3
 800b086:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <xTaskPriorityDisinherit+0x104>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	4a0d      	ldr	r2, [pc, #52]	; (800b0c4 <xTaskPriorityDisinherit+0x104>)
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <xTaskPriorityDisinherit+0x100>)
 800b09e:	441a      	add	r2, r3
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f7fe f8b1 	bl	800920e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0b0:	697b      	ldr	r3, [r7, #20]
	}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000ad4 	.word	0x20000ad4
 800b0c0:	20000ad8 	.word	0x20000ad8
 800b0c4:	20000bdc 	.word	0x20000bdc

0800b0c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8086 	beq.w	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d109      	bne.n	800b0fe <vTaskPriorityDisinheritAfterTimeout+0x36>
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	e7fe      	b.n	800b0fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d902      	bls.n	800b10e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e002      	b.n	800b114 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b112:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d067      	beq.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	429a      	cmp	r2, r3
 800b126:	d162      	bne.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b128:	4b33      	ldr	r3, [pc, #204]	; (800b1f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d109      	bne.n	800b146 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	60bb      	str	r3, [r7, #8]
 800b144:	e7fe      	b.n	800b144 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	db04      	blt.n	800b164 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	f1c3 0207 	rsb	r2, r3, #7
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	6959      	ldr	r1, [r3, #20]
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4a22      	ldr	r2, [pc, #136]	; (800b1fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b174:	4413      	add	r3, r2
 800b176:	4299      	cmp	r1, r3
 800b178:	d101      	bne.n	800b17e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b17e:	2300      	movs	r3, #0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d034      	beq.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	3304      	adds	r3, #4
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe f89b 	bl	80092c4 <uxListRemove>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d115      	bne.n	800b1c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b198:	4918      	ldr	r1, [pc, #96]	; (800b1fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10a      	bne.n	800b1c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b4:	43da      	mvns	r2, r3
 800b1b6:	4b12      	ldr	r3, [pc, #72]	; (800b200 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	4a10      	ldr	r2, [pc, #64]	; (800b200 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b1be:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	409a      	lsls	r2, r3
 800b1c8:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	; (800b200 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a07      	ldr	r2, [pc, #28]	; (800b1fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b1e0:	441a      	add	r2, r3
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe f810 	bl	800920e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1ee:	bf00      	nop
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000ad4 	.word	0x20000ad4
 800b1fc:	20000ad8 	.word	0x20000ad8
 800b200:	20000bdc 	.word	0x20000bdc

0800b204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b208:	4b07      	ldr	r3, [pc, #28]	; (800b228 <pvTaskIncrementMutexHeldCount+0x24>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <pvTaskIncrementMutexHeldCount+0x24>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b216:	3201      	adds	r2, #1
 800b218:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b21a:	4b03      	ldr	r3, [pc, #12]	; (800b228 <pvTaskIncrementMutexHeldCount+0x24>)
 800b21c:	681b      	ldr	r3, [r3, #0]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	20000ad4 	.word	0x20000ad4

0800b22c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b236:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe f83e 	bl	80092c4 <uxListRemove>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b24e:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	2201      	movs	r2, #1
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	43da      	mvns	r2, r3
 800b25c:	4b21      	ldr	r3, [pc, #132]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4013      	ands	r3, r2
 800b262:	4a20      	ldr	r2, [pc, #128]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b264:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d10a      	bne.n	800b284 <prvAddCurrentTaskToDelayedList+0x58>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b274:	4b1a      	ldr	r3, [pc, #104]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3304      	adds	r3, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	481a      	ldr	r0, [pc, #104]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b27e:	f7fd ffc6 	bl	800920e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b282:	e026      	b.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4413      	add	r3, r2
 800b28a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b28c:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d209      	bcs.n	800b2b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b29c:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	f7fd ffd3 	bl	8009254 <vListInsert>
}
 800b2ae:	e010      	b.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b0:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f7fd ffc9 	bl	8009254 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2c2:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d202      	bcs.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2cc:	4a09      	ldr	r2, [pc, #36]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6013      	str	r3, [r2, #0]
}
 800b2d2:	bf00      	nop
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000bd8 	.word	0x20000bd8
 800b2e0:	20000ad4 	.word	0x20000ad4
 800b2e4:	20000bdc 	.word	0x20000bdc
 800b2e8:	20000bc0 	.word	0x20000bc0
 800b2ec:	20000b90 	.word	0x20000b90
 800b2f0:	20000b8c 	.word	0x20000b8c
 800b2f4:	20000bf4 	.word	0x20000bf4

0800b2f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b302:	f000 fb37 	bl	800b974 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b306:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <xTimerCreateTimerTask+0x80>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d021      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b316:	1d3a      	adds	r2, r7, #4
 800b318:	f107 0108 	add.w	r1, r7, #8
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4618      	mov	r0, r3
 800b322:	f7f5 fd33 	bl	8000d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	9202      	str	r2, [sp, #8]
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	2302      	movs	r3, #2
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2300      	movs	r3, #0
 800b336:	460a      	mov	r2, r1
 800b338:	4910      	ldr	r1, [pc, #64]	; (800b37c <xTimerCreateTimerTask+0x84>)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <xTimerCreateTimerTask+0x88>)
 800b33c:	f7fe ff68 	bl	800a210 <xTaskCreateStatic>
 800b340:	4602      	mov	r2, r0
 800b342:	4b10      	ldr	r3, [pc, #64]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b344:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <xTimerCreateTimerTask+0x8c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b34e:	2301      	movs	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d109      	bne.n	800b36c <xTimerCreateTimerTask+0x74>
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
 800b36a:	e7fe      	b.n	800b36a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b36c:	697b      	ldr	r3, [r7, #20]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20000c30 	.word	0x20000c30
 800b37c:	0800e17c 	.word	0x0800e17c
 800b380:	0800b5bd 	.word	0x0800b5bd
 800b384:	20000c34 	.word	0x20000c34

0800b388 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b396:	202c      	movs	r0, #44	; 0x2c
 800b398:	f000 fd0c 	bl	800bdb4 <pvPortMalloc>
 800b39c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00d      	beq.n	800b3c0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 f844 	bl	800b440 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b3c0:	697b      	ldr	r3, [r7, #20]
	}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b08a      	sub	sp, #40	; 0x28
 800b3ce:	af02      	add	r7, sp, #8
 800b3d0:	60f8      	str	r0, [r7, #12]
 800b3d2:	60b9      	str	r1, [r7, #8]
 800b3d4:	607a      	str	r2, [r7, #4]
 800b3d6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b3d8:	232c      	movs	r3, #44	; 0x2c
 800b3da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b2c      	cmp	r3, #44	; 0x2c
 800b3e0:	d009      	beq.n	800b3f6 <xTimerCreateStatic+0x2c>
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	61bb      	str	r3, [r7, #24]
 800b3f4:	e7fe      	b.n	800b3f4 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <xTimerCreateStatic+0x46>
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	e7fe      	b.n	800b40e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00d      	beq.n	800b436 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 f809 	bl	800b440 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800b436:	69fb      	ldr	r3, [r7, #28]
	}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <prvInitialiseNewTimer+0x28>
 800b454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	e7fe      	b.n	800b466 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d015      	beq.n	800b49a <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b46e:	f000 fa81 	bl	800b974 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	6a3a      	ldr	r2, [r7, #32]
 800b48e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	3304      	adds	r3, #4
 800b494:	4618      	mov	r0, r3
 800b496:	f7fd feae 	bl	80091f6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b49a:	bf00      	nop
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d109      	bne.n	800b4d0 <xTimerGenericCommand+0x2c>
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	623b      	str	r3, [r7, #32]
 800b4ce:	e7fe      	b.n	800b4ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4d0:	4b19      	ldr	r3, [pc, #100]	; (800b538 <xTimerGenericCommand+0x94>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d02a      	beq.n	800b52e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	dc18      	bgt.n	800b51c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4ea:	f7ff fcc5 	bl	800ae78 <xTaskGetSchedulerState>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d109      	bne.n	800b508 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4f4:	4b10      	ldr	r3, [pc, #64]	; (800b538 <xTimerGenericCommand+0x94>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	f107 0114 	add.w	r1, r7, #20
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b500:	f7fe f840 	bl	8009584 <xQueueGenericSend>
 800b504:	6278      	str	r0, [r7, #36]	; 0x24
 800b506:	e012      	b.n	800b52e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <xTimerGenericCommand+0x94>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	f107 0114 	add.w	r1, r7, #20
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	f7fe f836 	bl	8009584 <xQueueGenericSend>
 800b518:	6278      	str	r0, [r7, #36]	; 0x24
 800b51a:	e008      	b.n	800b52e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <xTimerGenericCommand+0x94>)
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	f107 0114 	add.w	r1, r7, #20
 800b524:	2300      	movs	r3, #0
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	f7fe f926 	bl	8009778 <xQueueGenericSendFromISR>
 800b52c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b530:	4618      	mov	r0, r3
 800b532:	3728      	adds	r7, #40	; 0x28
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000c30 	.word	0x20000c30

0800b53c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af02      	add	r7, sp, #8
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b546:	4b1c      	ldr	r3, [pc, #112]	; (800b5b8 <prvProcessExpiredTimer+0x7c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	3304      	adds	r3, #4
 800b554:	4618      	mov	r0, r3
 800b556:	f7fd feb5 	bl	80092c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d121      	bne.n	800b5a6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	18d1      	adds	r1, r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	6978      	ldr	r0, [r7, #20]
 800b570:	f000 f8c8 	bl	800b704 <prvInsertTimerInActiveList>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d015      	beq.n	800b5a6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b57a:	2300      	movs	r3, #0
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	2300      	movs	r3, #0
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	2100      	movs	r1, #0
 800b584:	6978      	ldr	r0, [r7, #20]
 800b586:	f7ff ff8d 	bl	800b4a4 <xTimerGenericCommand>
 800b58a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <prvProcessExpiredTimer+0x6a>
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e7fe      	b.n	800b5a4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	6978      	ldr	r0, [r7, #20]
 800b5ac:	4798      	blx	r3
}
 800b5ae:	bf00      	nop
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000c28 	.word	0x20000c28

0800b5bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f857 	bl	800b67c <prvGetNextExpireTime>
 800b5ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f803 	bl	800b5e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5da:	f000 f8d5 	bl	800b788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5de:	e7f1      	b.n	800b5c4 <prvTimerTask+0x8>

0800b5e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5ea:	f7ff f837 	bl	800a65c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5ee:	f107 0308 	add.w	r3, r7, #8
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 f866 	bl	800b6c4 <prvSampleTimeNow>
 800b5f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d130      	bne.n	800b662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10a      	bne.n	800b61c <prvProcessTimerOrBlockTask+0x3c>
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d806      	bhi.n	800b61c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b60e:	f7ff f833 	bl	800a678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b612:	68f9      	ldr	r1, [r7, #12]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ff91 	bl	800b53c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b61a:	e024      	b.n	800b666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d008      	beq.n	800b634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b622:	4b13      	ldr	r3, [pc, #76]	; (800b670 <prvProcessTimerOrBlockTask+0x90>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bf0c      	ite	eq
 800b62c:	2301      	moveq	r3, #1
 800b62e:	2300      	movne	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b634:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <prvProcessTimerOrBlockTask+0x94>)
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	f7fe fdb1 	bl	800a1a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b646:	f7ff f817 	bl	800a678 <xTaskResumeAll>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b650:	4b09      	ldr	r3, [pc, #36]	; (800b678 <prvProcessTimerOrBlockTask+0x98>)
 800b652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	f3bf 8f6f 	isb	sy
}
 800b660:	e001      	b.n	800b666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b662:	f7ff f809 	bl	800a678 <xTaskResumeAll>
}
 800b666:	bf00      	nop
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000c2c 	.word	0x20000c2c
 800b674:	20000c30 	.word	0x20000c30
 800b678:	e000ed04 	.word	0xe000ed04

0800b67c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b684:	4b0e      	ldr	r3, [pc, #56]	; (800b6c0 <prvGetNextExpireTime+0x44>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bf0c      	ite	eq
 800b68e:	2301      	moveq	r3, #1
 800b690:	2300      	movne	r3, #0
 800b692:	b2db      	uxtb	r3, r3
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6a2:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <prvGetNextExpireTime+0x44>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	e001      	b.n	800b6b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	20000c28 	.word	0x20000c28

0800b6c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6cc:	f7ff f870 	bl	800a7b0 <xTaskGetTickCount>
 800b6d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6d2:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <prvSampleTimeNow+0x3c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d205      	bcs.n	800b6e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6dc:	f000 f8ea 	bl	800b8b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e002      	b.n	800b6ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6ee:	4a04      	ldr	r2, [pc, #16]	; (800b700 <prvSampleTimeNow+0x3c>)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000c38 	.word	0x20000c38

0800b704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	429a      	cmp	r2, r3
 800b728:	d812      	bhi.n	800b750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	429a      	cmp	r2, r3
 800b736:	d302      	bcc.n	800b73e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	617b      	str	r3, [r7, #20]
 800b73c:	e01b      	b.n	800b776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b73e:	4b10      	ldr	r3, [pc, #64]	; (800b780 <prvInsertTimerInActiveList+0x7c>)
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3304      	adds	r3, #4
 800b746:	4619      	mov	r1, r3
 800b748:	4610      	mov	r0, r2
 800b74a:	f7fd fd83 	bl	8009254 <vListInsert>
 800b74e:	e012      	b.n	800b776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d206      	bcs.n	800b766 <prvInsertTimerInActiveList+0x62>
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d302      	bcc.n	800b766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b760:	2301      	movs	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	e007      	b.n	800b776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <prvInsertTimerInActiveList+0x80>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7fd fd6f 	bl	8009254 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b776:	697b      	ldr	r3, [r7, #20]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20000c2c 	.word	0x20000c2c
 800b784:	20000c28 	.word	0x20000c28

0800b788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	; 0x30
 800b78c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b78e:	e07f      	b.n	800b890 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	db7b      	blt.n	800b88e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fd fd8c 	bl	80092c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ac:	1d3b      	adds	r3, r7, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff ff88 	bl	800b6c4 <prvSampleTimeNow>
 800b7b4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b09      	cmp	r3, #9
 800b7ba:	d869      	bhi.n	800b890 <prvProcessReceivedCommands+0x108>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <prvProcessReceivedCommands+0x3c>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7ed 	.word	0x0800b7ed
 800b7c8:	0800b7ed 	.word	0x0800b7ed
 800b7cc:	0800b7ed 	.word	0x0800b7ed
 800b7d0:	0800b891 	.word	0x0800b891
 800b7d4:	0800b847 	.word	0x0800b847
 800b7d8:	0800b87d 	.word	0x0800b87d
 800b7dc:	0800b7ed 	.word	0x0800b7ed
 800b7e0:	0800b7ed 	.word	0x0800b7ed
 800b7e4:	0800b891 	.word	0x0800b891
 800b7e8:	0800b847 	.word	0x0800b847
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	18d1      	adds	r1, r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7fa:	f7ff ff83 	bl	800b704 <prvInsertTimerInActiveList>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d045      	beq.n	800b890 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b80a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d13d      	bne.n	800b890 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	441a      	add	r2, r3
 800b81c:	2300      	movs	r3, #0
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	2300      	movs	r3, #0
 800b822:	2100      	movs	r1, #0
 800b824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b826:	f7ff fe3d 	bl	800b4a4 <xTimerGenericCommand>
 800b82a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d12e      	bne.n	800b890 <prvProcessReceivedCommands+0x108>
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	61bb      	str	r3, [r7, #24]
 800b844:	e7fe      	b.n	800b844 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <prvProcessReceivedCommands+0xe0>
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	e7fe      	b.n	800b866 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	699a      	ldr	r2, [r3, #24]
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	18d1      	adds	r1, r2, r3
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	6a3a      	ldr	r2, [r7, #32]
 800b874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b876:	f7ff ff45 	bl	800b704 <prvInsertTimerInActiveList>
					break;
 800b87a:	e009      	b.n	800b890 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b882:	2b00      	cmp	r3, #0
 800b884:	d104      	bne.n	800b890 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800b886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b888:	f000 fb5a 	bl	800bf40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b88c:	e000      	b.n	800b890 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b88e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <prvProcessReceivedCommands+0x128>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	2200      	movs	r2, #0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe f88a 	bl	80099b4 <xQueueReceive>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f47f af74 	bne.w	800b790 <prvProcessReceivedCommands+0x8>
	}
}
 800b8a8:	bf00      	nop
 800b8aa:	3728      	adds	r7, #40	; 0x28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000c30 	.word	0x20000c30

0800b8b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8ba:	e044      	b.n	800b946 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8bc:	4b2b      	ldr	r3, [pc, #172]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8c6:	4b29      	ldr	r3, [pc, #164]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fd fcf5 	bl	80092c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d12d      	bne.n	800b946 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d90e      	bls.n	800b91a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b908:	4b18      	ldr	r3, [pc, #96]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	3304      	adds	r3, #4
 800b910:	4619      	mov	r1, r3
 800b912:	4610      	mov	r0, r2
 800b914:	f7fd fc9e 	bl	8009254 <vListInsert>
 800b918:	e015      	b.n	800b946 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	2300      	movs	r3, #0
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	2100      	movs	r1, #0
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7ff fdbd 	bl	800b4a4 <xTimerGenericCommand>
 800b92a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <prvSwitchTimerLists+0x92>
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	e7fe      	b.n	800b944 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b946:	4b09      	ldr	r3, [pc, #36]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1b5      	bne.n	800b8bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b950:	4b06      	ldr	r3, [pc, #24]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b956:	4b06      	ldr	r3, [pc, #24]	; (800b970 <prvSwitchTimerLists+0xbc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a04      	ldr	r2, [pc, #16]	; (800b96c <prvSwitchTimerLists+0xb8>)
 800b95c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b95e:	4a04      	ldr	r2, [pc, #16]	; (800b970 <prvSwitchTimerLists+0xbc>)
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	6013      	str	r3, [r2, #0]
}
 800b964:	bf00      	nop
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20000c28 	.word	0x20000c28
 800b970:	20000c2c 	.word	0x20000c2c

0800b974 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b97a:	f000 f925 	bl	800bbc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b97e:	4b15      	ldr	r3, [pc, #84]	; (800b9d4 <prvCheckForValidListAndQueue+0x60>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d120      	bne.n	800b9c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b986:	4814      	ldr	r0, [pc, #80]	; (800b9d8 <prvCheckForValidListAndQueue+0x64>)
 800b988:	f7fd fc16 	bl	80091b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b98c:	4813      	ldr	r0, [pc, #76]	; (800b9dc <prvCheckForValidListAndQueue+0x68>)
 800b98e:	f7fd fc13 	bl	80091b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <prvCheckForValidListAndQueue+0x6c>)
 800b994:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <prvCheckForValidListAndQueue+0x64>)
 800b996:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b998:	4b12      	ldr	r3, [pc, #72]	; (800b9e4 <prvCheckForValidListAndQueue+0x70>)
 800b99a:	4a10      	ldr	r2, [pc, #64]	; (800b9dc <prvCheckForValidListAndQueue+0x68>)
 800b99c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b99e:	2300      	movs	r3, #0
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <prvCheckForValidListAndQueue+0x74>)
 800b9a4:	4a11      	ldr	r2, [pc, #68]	; (800b9ec <prvCheckForValidListAndQueue+0x78>)
 800b9a6:	210c      	movs	r1, #12
 800b9a8:	200a      	movs	r0, #10
 800b9aa:	f7fd fd1d 	bl	80093e8 <xQueueGenericCreateStatic>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <prvCheckForValidListAndQueue+0x60>)
 800b9b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9b4:	4b07      	ldr	r3, [pc, #28]	; (800b9d4 <prvCheckForValidListAndQueue+0x60>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d005      	beq.n	800b9c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <prvCheckForValidListAndQueue+0x60>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	490b      	ldr	r1, [pc, #44]	; (800b9f0 <prvCheckForValidListAndQueue+0x7c>)
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fba0 	bl	800a108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9c8:	f000 f92c 	bl	800bc24 <vPortExitCritical>
}
 800b9cc:	bf00      	nop
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000c30 	.word	0x20000c30
 800b9d8:	20000c00 	.word	0x20000c00
 800b9dc:	20000c14 	.word	0x20000c14
 800b9e0:	20000c28 	.word	0x20000c28
 800b9e4:	20000c2c 	.word	0x20000c2c
 800b9e8:	20000cb4 	.word	0x20000cb4
 800b9ec:	20000c3c 	.word	0x20000c3c
 800b9f0:	0800e184 	.word	0x0800e184

0800b9f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3b04      	subs	r3, #4
 800ba04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3b04      	subs	r3, #4
 800ba12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f023 0201 	bic.w	r2, r3, #1
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3b04      	subs	r3, #4
 800ba22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba24:	4a08      	ldr	r2, [pc, #32]	; (800ba48 <pxPortInitialiseStack+0x54>)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3b14      	subs	r3, #20
 800ba2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3b20      	subs	r3, #32
 800ba3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bc80      	pop	{r7}
 800ba46:	4770      	bx	lr
 800ba48:	0800ba4d 	.word	0x0800ba4d

0800ba4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba56:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <prvTaskExitError+0x4c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5e:	d009      	beq.n	800ba74 <prvTaskExitError+0x28>
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e7fe      	b.n	800ba72 <prvTaskExitError+0x26>
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba86:	bf00      	nop
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0fc      	beq.n	800ba88 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bc80      	pop	{r7}
 800ba96:	4770      	bx	lr
 800ba98:	20000074 	.word	0x20000074
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <pxCurrentTCBConst2>)
 800baa2:	6819      	ldr	r1, [r3, #0]
 800baa4:	6808      	ldr	r0, [r1, #0]
 800baa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800baaa:	f380 8809 	msr	PSP, r0
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f04f 0000 	mov.w	r0, #0
 800bab6:	f380 8811 	msr	BASEPRI, r0
 800baba:	f04e 0e0d 	orr.w	lr, lr, #13
 800babe:	4770      	bx	lr

0800bac0 <pxCurrentTCBConst2>:
 800bac0:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop

0800bac8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bac8:	4806      	ldr	r0, [pc, #24]	; (800bae4 <prvPortStartFirstTask+0x1c>)
 800baca:	6800      	ldr	r0, [r0, #0]
 800bacc:	6800      	ldr	r0, [r0, #0]
 800bace:	f380 8808 	msr	MSP, r0
 800bad2:	b662      	cpsie	i
 800bad4:	b661      	cpsie	f
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	df00      	svc	0
 800bae0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bae2:	bf00      	nop
 800bae4:	e000ed08 	.word	0xe000ed08

0800bae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baee:	4b31      	ldr	r3, [pc, #196]	; (800bbb4 <xPortStartScheduler+0xcc>)
 800baf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	22ff      	movs	r2, #255	; 0xff
 800bafe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	4b29      	ldr	r3, [pc, #164]	; (800bbb8 <xPortStartScheduler+0xd0>)
 800bb14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb16:	4b29      	ldr	r3, [pc, #164]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb18:	2207      	movs	r2, #7
 800bb1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb1c:	e009      	b.n	800bb32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bb1e:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	4a25      	ldr	r2, [pc, #148]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3a:	2b80      	cmp	r3, #128	; 0x80
 800bb3c:	d0ef      	beq.n	800bb1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb3e:	4b1f      	ldr	r3, [pc, #124]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f1c3 0307 	rsb	r3, r3, #7
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d009      	beq.n	800bb5e <xPortStartScheduler+0x76>
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	60bb      	str	r3, [r7, #8]
 800bb5c:	e7fe      	b.n	800bb5c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb5e:	4b17      	ldr	r3, [pc, #92]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	021b      	lsls	r3, r3, #8
 800bb64:	4a15      	ldr	r2, [pc, #84]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb68:	4b14      	ldr	r3, [pc, #80]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb70:	4a12      	ldr	r2, [pc, #72]	; (800bbbc <xPortStartScheduler+0xd4>)
 800bb72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb7c:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <xPortStartScheduler+0xd8>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0f      	ldr	r2, [pc, #60]	; (800bbc0 <xPortStartScheduler+0xd8>)
 800bb82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb88:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <xPortStartScheduler+0xd8>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a0c      	ldr	r2, [pc, #48]	; (800bbc0 <xPortStartScheduler+0xd8>)
 800bb8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb94:	f000 f8b0 	bl	800bcf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <xPortStartScheduler+0xdc>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb9e:	f7ff ff93 	bl	800bac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bba2:	f7fe fee1 	bl	800a968 <vTaskSwitchContext>
	prvTaskExitError();
 800bba6:	f7ff ff51 	bl	800ba4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	e000e400 	.word	0xe000e400
 800bbb8:	20000cfc 	.word	0x20000cfc
 800bbbc:	20000d00 	.word	0x20000d00
 800bbc0:	e000ed20 	.word	0xe000ed20
 800bbc4:	20000074 	.word	0x20000074

0800bbc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbe0:	4b0e      	ldr	r3, [pc, #56]	; (800bc1c <vPortEnterCritical+0x54>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	4a0d      	ldr	r2, [pc, #52]	; (800bc1c <vPortEnterCritical+0x54>)
 800bbe8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbea:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <vPortEnterCritical+0x54>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d10e      	bne.n	800bc10 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <vPortEnterCritical+0x58>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d009      	beq.n	800bc10 <vPortEnterCritical+0x48>
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	e7fe      	b.n	800bc0e <vPortEnterCritical+0x46>
	}
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000074 	.word	0x20000074
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc2a:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <vPortExitCritical+0x48>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d109      	bne.n	800bc46 <vPortExitCritical+0x22>
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	607b      	str	r3, [r7, #4]
 800bc44:	e7fe      	b.n	800bc44 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bc46:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <vPortExitCritical+0x48>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	4a07      	ldr	r2, [pc, #28]	; (800bc6c <vPortExitCritical+0x48>)
 800bc4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <vPortExitCritical+0x48>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <vPortExitCritical+0x3e>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc62:	bf00      	nop
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bc80      	pop	{r7}
 800bc6a:	4770      	bx	lr
 800bc6c:	20000074 	.word	0x20000074

0800bc70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc70:	f3ef 8009 	mrs	r0, PSP
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <pxCurrentTCBConst>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bc80:	6010      	str	r0, [r2, #0]
 800bc82:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bc86:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc8a:	f380 8811 	msr	BASEPRI, r0
 800bc8e:	f7fe fe6b 	bl	800a968 <vTaskSwitchContext>
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8811 	msr	BASEPRI, r0
 800bc9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bc9e:	6819      	ldr	r1, [r3, #0]
 800bca0:	6808      	ldr	r0, [r1, #0]
 800bca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bca6:	f380 8809 	msr	PSP, r0
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	4770      	bx	lr

0800bcb0 <pxCurrentTCBConst>:
 800bcb0:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop

0800bcb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcd0:	f7fe fd8e 	bl	800a7f0 <xTaskIncrementTick>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <SysTick_Handler+0x3c>)
 800bcdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	2300      	movs	r3, #0
 800bce4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <vPortSetupTimerInterrupt+0x30>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <vPortSetupTimerInterrupt+0x34>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd08:	4b09      	ldr	r3, [pc, #36]	; (800bd30 <vPortSetupTimerInterrupt+0x38>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a09      	ldr	r2, [pc, #36]	; (800bd34 <vPortSetupTimerInterrupt+0x3c>)
 800bd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd12:	099b      	lsrs	r3, r3, #6
 800bd14:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <vPortSetupTimerInterrupt+0x40>)
 800bd16:	3b01      	subs	r3, #1
 800bd18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd1a:	4b03      	ldr	r3, [pc, #12]	; (800bd28 <vPortSetupTimerInterrupt+0x30>)
 800bd1c:	2207      	movs	r2, #7
 800bd1e:	601a      	str	r2, [r3, #0]
}
 800bd20:	bf00      	nop
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bc80      	pop	{r7}
 800bd26:	4770      	bx	lr
 800bd28:	e000e010 	.word	0xe000e010
 800bd2c:	e000e018 	.word	0xe000e018
 800bd30:	20000064 	.word	0x20000064
 800bd34:	10624dd3 	.word	0x10624dd3
 800bd38:	e000e014 	.word	0xe000e014

0800bd3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd42:	f3ef 8305 	mrs	r3, IPSR
 800bd46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b0f      	cmp	r3, #15
 800bd4c:	d913      	bls.n	800bd76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd4e:	4a15      	ldr	r2, [pc, #84]	; (800bda4 <vPortValidateInterruptPriority+0x68>)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd58:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <vPortValidateInterruptPriority+0x6c>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	7afa      	ldrb	r2, [r7, #11]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d209      	bcs.n	800bd76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	607b      	str	r3, [r7, #4]
 800bd74:	e7fe      	b.n	800bd74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd76:	4b0d      	ldr	r3, [pc, #52]	; (800bdac <vPortValidateInterruptPriority+0x70>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <vPortValidateInterruptPriority+0x74>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d909      	bls.n	800bd9a <vPortValidateInterruptPriority+0x5e>
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	603b      	str	r3, [r7, #0]
 800bd98:	e7fe      	b.n	800bd98 <vPortValidateInterruptPriority+0x5c>
	}
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bc80      	pop	{r7}
 800bda2:	4770      	bx	lr
 800bda4:	e000e3f0 	.word	0xe000e3f0
 800bda8:	20000cfc 	.word	0x20000cfc
 800bdac:	e000ed0c 	.word	0xe000ed0c
 800bdb0:	20000d00 	.word	0x20000d00

0800bdb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08a      	sub	sp, #40	; 0x28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdc0:	f7fe fc4c 	bl	800a65c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdc4:	4b59      	ldr	r3, [pc, #356]	; (800bf2c <pvPortMalloc+0x178>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdcc:	f000 f910 	bl	800bff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdd0:	4b57      	ldr	r3, [pc, #348]	; (800bf30 <pvPortMalloc+0x17c>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f040 808c 	bne.w	800bef6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01c      	beq.n	800be1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bde4:	2208      	movs	r2, #8
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d013      	beq.n	800be1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f023 0307 	bic.w	r3, r3, #7
 800bdfc:	3308      	adds	r3, #8
 800bdfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	2b00      	cmp	r3, #0
 800be08:	d009      	beq.n	800be1e <pvPortMalloc+0x6a>
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	e7fe      	b.n	800be1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d068      	beq.n	800bef6 <pvPortMalloc+0x142>
 800be24:	4b43      	ldr	r3, [pc, #268]	; (800bf34 <pvPortMalloc+0x180>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d863      	bhi.n	800bef6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be2e:	4b42      	ldr	r3, [pc, #264]	; (800bf38 <pvPortMalloc+0x184>)
 800be30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be32:	4b41      	ldr	r3, [pc, #260]	; (800bf38 <pvPortMalloc+0x184>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be38:	e004      	b.n	800be44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d903      	bls.n	800be56 <pvPortMalloc+0xa2>
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1f1      	bne.n	800be3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be56:	4b35      	ldr	r3, [pc, #212]	; (800bf2c <pvPortMalloc+0x178>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d04a      	beq.n	800bef6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2208      	movs	r2, #8
 800be66:	4413      	add	r3, r2
 800be68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	1ad2      	subs	r2, r2, r3
 800be7a:	2308      	movs	r3, #8
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	429a      	cmp	r2, r3
 800be80:	d91e      	bls.n	800bec0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4413      	add	r3, r2
 800be88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	f003 0307 	and.w	r3, r3, #7
 800be90:	2b00      	cmp	r3, #0
 800be92:	d009      	beq.n	800bea8 <pvPortMalloc+0xf4>
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	613b      	str	r3, [r7, #16]
 800bea6:	e7fe      	b.n	800bea6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beba:	69b8      	ldr	r0, [r7, #24]
 800bebc:	f000 f8fa 	bl	800c0b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bec0:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <pvPortMalloc+0x180>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	4a1a      	ldr	r2, [pc, #104]	; (800bf34 <pvPortMalloc+0x180>)
 800becc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bece:	4b19      	ldr	r3, [pc, #100]	; (800bf34 <pvPortMalloc+0x180>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <pvPortMalloc+0x188>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d203      	bcs.n	800bee2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800beda:	4b16      	ldr	r3, [pc, #88]	; (800bf34 <pvPortMalloc+0x180>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a17      	ldr	r2, [pc, #92]	; (800bf3c <pvPortMalloc+0x188>)
 800bee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	4b12      	ldr	r3, [pc, #72]	; (800bf30 <pvPortMalloc+0x17c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	431a      	orrs	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bef6:	f7fe fbbf 	bl	800a678 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bf00:	f7f4 ff20 	bl	8000d44 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <pvPortMalloc+0x16e>
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	e7fe      	b.n	800bf20 <pvPortMalloc+0x16c>
	return pvReturn;
 800bf22:	69fb      	ldr	r3, [r7, #28]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3728      	adds	r7, #40	; 0x28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	2000190c 	.word	0x2000190c
 800bf30:	20001918 	.word	0x20001918
 800bf34:	20001910 	.word	0x20001910
 800bf38:	20001904 	.word	0x20001904
 800bf3c:	20001914 	.word	0x20001914

0800bf40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d046      	beq.n	800bfe0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf52:	2308      	movs	r3, #8
 800bf54:	425b      	negs	r3, r3
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	4413      	add	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	4b20      	ldr	r3, [pc, #128]	; (800bfe8 <vPortFree+0xa8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <vPortFree+0x42>
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e7fe      	b.n	800bf80 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d009      	beq.n	800bf9e <vPortFree+0x5e>
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	60bb      	str	r3, [r7, #8]
 800bf9c:	e7fe      	b.n	800bf9c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <vPortFree+0xa8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d019      	beq.n	800bfe0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d115      	bne.n	800bfe0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <vPortFree+0xa8>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	43db      	mvns	r3, r3
 800bfbe:	401a      	ands	r2, r3
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfc4:	f7fe fb4a 	bl	800a65c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	4b07      	ldr	r3, [pc, #28]	; (800bfec <vPortFree+0xac>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	4a06      	ldr	r2, [pc, #24]	; (800bfec <vPortFree+0xac>)
 800bfd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfd6:	6938      	ldr	r0, [r7, #16]
 800bfd8:	f000 f86c 	bl	800c0b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bfdc:	f7fe fb4c 	bl	800a678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfe0:	bf00      	nop
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20001918 	.word	0x20001918
 800bfec:	20001910 	.word	0x20001910

0800bff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bffc:	4b27      	ldr	r3, [pc, #156]	; (800c09c <prvHeapInit+0xac>)
 800bffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3307      	adds	r3, #7
 800c00e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f023 0307 	bic.w	r3, r3, #7
 800c016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	4a1f      	ldr	r2, [pc, #124]	; (800c09c <prvHeapInit+0xac>)
 800c020:	4413      	add	r3, r2
 800c022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c028:	4a1d      	ldr	r2, [pc, #116]	; (800c0a0 <prvHeapInit+0xb0>)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c02e:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <prvHeapInit+0xb0>)
 800c030:	2200      	movs	r2, #0
 800c032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	4413      	add	r3, r2
 800c03a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c03c:	2208      	movs	r2, #8
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	1a9b      	subs	r3, r3, r2
 800c042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 0307 	bic.w	r3, r3, #7
 800c04a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4a15      	ldr	r2, [pc, #84]	; (800c0a4 <prvHeapInit+0xb4>)
 800c050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c052:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <prvHeapInit+0xb4>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2200      	movs	r2, #0
 800c058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <prvHeapInit+0xb4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	1ad2      	subs	r2, r2, r3
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c070:	4b0c      	ldr	r3, [pc, #48]	; (800c0a4 <prvHeapInit+0xb4>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	4a0a      	ldr	r2, [pc, #40]	; (800c0a8 <prvHeapInit+0xb8>)
 800c07e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	4a09      	ldr	r2, [pc, #36]	; (800c0ac <prvHeapInit+0xbc>)
 800c086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c088:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <prvHeapInit+0xc0>)
 800c08a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c08e:	601a      	str	r2, [r3, #0]
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	bc80      	pop	{r7}
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	20000d04 	.word	0x20000d04
 800c0a0:	20001904 	.word	0x20001904
 800c0a4:	2000190c 	.word	0x2000190c
 800c0a8:	20001914 	.word	0x20001914
 800c0ac:	20001910 	.word	0x20001910
 800c0b0:	20001918 	.word	0x20001918

0800c0b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0bc:	4b27      	ldr	r3, [pc, #156]	; (800c15c <prvInsertBlockIntoFreeList+0xa8>)
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e002      	b.n	800c0c8 <prvInsertBlockIntoFreeList+0x14>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d8f7      	bhi.n	800c0c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d108      	bne.n	800c0f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	441a      	add	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	441a      	add	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d118      	bne.n	800c13c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4b14      	ldr	r3, [pc, #80]	; (800c160 <prvInsertBlockIntoFreeList+0xac>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d00d      	beq.n	800c132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685a      	ldr	r2, [r3, #4]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	441a      	add	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	601a      	str	r2, [r3, #0]
 800c130:	e008      	b.n	800c144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c132:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <prvInsertBlockIntoFreeList+0xac>)
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	e003      	b.n	800c144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d002      	beq.n	800c152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c152:	bf00      	nop
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr
 800c15c:	20001904 	.word	0x20001904
 800c160:	2000190c 	.word	0x2000190c

0800c164 <atoff>:
 800c164:	2100      	movs	r1, #0
 800c166:	f000 be7f 	b.w	800ce68 <strtof>

0800c16a <atoi>:
 800c16a:	220a      	movs	r2, #10
 800c16c:	2100      	movs	r1, #0
 800c16e:	f000 bf45 	b.w	800cffc <strtol>
	...

0800c174 <__errno>:
 800c174:	4b01      	ldr	r3, [pc, #4]	; (800c17c <__errno+0x8>)
 800c176:	6818      	ldr	r0, [r3, #0]
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000078 	.word	0x20000078

0800c180 <__libc_init_array>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	2500      	movs	r5, #0
 800c184:	4e0c      	ldr	r6, [pc, #48]	; (800c1b8 <__libc_init_array+0x38>)
 800c186:	4c0d      	ldr	r4, [pc, #52]	; (800c1bc <__libc_init_array+0x3c>)
 800c188:	1ba4      	subs	r4, r4, r6
 800c18a:	10a4      	asrs	r4, r4, #2
 800c18c:	42a5      	cmp	r5, r4
 800c18e:	d109      	bne.n	800c1a4 <__libc_init_array+0x24>
 800c190:	f001 ff66 	bl	800e060 <_init>
 800c194:	2500      	movs	r5, #0
 800c196:	4e0a      	ldr	r6, [pc, #40]	; (800c1c0 <__libc_init_array+0x40>)
 800c198:	4c0a      	ldr	r4, [pc, #40]	; (800c1c4 <__libc_init_array+0x44>)
 800c19a:	1ba4      	subs	r4, r4, r6
 800c19c:	10a4      	asrs	r4, r4, #2
 800c19e:	42a5      	cmp	r5, r4
 800c1a0:	d105      	bne.n	800c1ae <__libc_init_array+0x2e>
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1a8:	4798      	blx	r3
 800c1aa:	3501      	adds	r5, #1
 800c1ac:	e7ee      	b.n	800c18c <__libc_init_array+0xc>
 800c1ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1b2:	4798      	blx	r3
 800c1b4:	3501      	adds	r5, #1
 800c1b6:	e7f2      	b.n	800c19e <__libc_init_array+0x1e>
 800c1b8:	0800e4d0 	.word	0x0800e4d0
 800c1bc:	0800e4d0 	.word	0x0800e4d0
 800c1c0:	0800e4d0 	.word	0x0800e4d0
 800c1c4:	0800e4d4 	.word	0x0800e4d4

0800c1c8 <__itoa>:
 800c1c8:	1e93      	subs	r3, r2, #2
 800c1ca:	2b22      	cmp	r3, #34	; 0x22
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	d904      	bls.n	800c1dc <__itoa+0x14>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	700b      	strb	r3, [r1, #0]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	2a0a      	cmp	r2, #10
 800c1de:	d109      	bne.n	800c1f4 <__itoa+0x2c>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	da07      	bge.n	800c1f4 <__itoa+0x2c>
 800c1e4:	232d      	movs	r3, #45	; 0x2d
 800c1e6:	700b      	strb	r3, [r1, #0]
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4240      	negs	r0, r0
 800c1ec:	4421      	add	r1, r4
 800c1ee:	f000 ff1b 	bl	800d028 <__utoa>
 800c1f2:	e7f1      	b.n	800c1d8 <__itoa+0x10>
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	e7f9      	b.n	800c1ec <__itoa+0x24>

0800c1f8 <itoa>:
 800c1f8:	f7ff bfe6 	b.w	800c1c8 <__itoa>

0800c1fc <memcpy>:
 800c1fc:	b510      	push	{r4, lr}
 800c1fe:	1e43      	subs	r3, r0, #1
 800c200:	440a      	add	r2, r1
 800c202:	4291      	cmp	r1, r2
 800c204:	d100      	bne.n	800c208 <memcpy+0xc>
 800c206:	bd10      	pop	{r4, pc}
 800c208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c210:	e7f7      	b.n	800c202 <memcpy+0x6>

0800c212 <memset>:
 800c212:	4603      	mov	r3, r0
 800c214:	4402      	add	r2, r0
 800c216:	4293      	cmp	r3, r2
 800c218:	d100      	bne.n	800c21c <memset+0xa>
 800c21a:	4770      	bx	lr
 800c21c:	f803 1b01 	strb.w	r1, [r3], #1
 800c220:	e7f9      	b.n	800c216 <memset+0x4>

0800c222 <sulp>:
 800c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	460f      	mov	r7, r1
 800c228:	4690      	mov	r8, r2
 800c22a:	f001 fd45 	bl	800dcb8 <__ulp>
 800c22e:	4604      	mov	r4, r0
 800c230:	460d      	mov	r5, r1
 800c232:	f1b8 0f00 	cmp.w	r8, #0
 800c236:	d011      	beq.n	800c25c <sulp+0x3a>
 800c238:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c23c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c240:	2b00      	cmp	r3, #0
 800c242:	dd0b      	ble.n	800c25c <sulp+0x3a>
 800c244:	2400      	movs	r4, #0
 800c246:	051b      	lsls	r3, r3, #20
 800c248:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c24c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c250:	4622      	mov	r2, r4
 800c252:	462b      	mov	r3, r5
 800c254:	f7f4 f962 	bl	800051c <__aeabi_dmul>
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	4620      	mov	r0, r4
 800c25e:	4629      	mov	r1, r5
 800c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c264:	0000      	movs	r0, r0
	...

0800c268 <_strtod_l>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	461f      	mov	r7, r3
 800c26e:	2300      	movs	r3, #0
 800c270:	b0a1      	sub	sp, #132	; 0x84
 800c272:	4683      	mov	fp, r0
 800c274:	4638      	mov	r0, r7
 800c276:	460e      	mov	r6, r1
 800c278:	9217      	str	r2, [sp, #92]	; 0x5c
 800c27a:	931c      	str	r3, [sp, #112]	; 0x70
 800c27c:	f001 fa3d 	bl	800d6fa <__localeconv_l>
 800c280:	4680      	mov	r8, r0
 800c282:	6800      	ldr	r0, [r0, #0]
 800c284:	f7f3 ff86 	bl	8000194 <strlen>
 800c288:	f04f 0900 	mov.w	r9, #0
 800c28c:	4604      	mov	r4, r0
 800c28e:	f04f 0a00 	mov.w	sl, #0
 800c292:	961b      	str	r6, [sp, #108]	; 0x6c
 800c294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c296:	781a      	ldrb	r2, [r3, #0]
 800c298:	2a0d      	cmp	r2, #13
 800c29a:	d832      	bhi.n	800c302 <_strtod_l+0x9a>
 800c29c:	2a09      	cmp	r2, #9
 800c29e:	d236      	bcs.n	800c30e <_strtod_l+0xa6>
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	d03e      	beq.n	800c322 <_strtod_l+0xba>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c2aa:	782b      	ldrb	r3, [r5, #0]
 800c2ac:	2b30      	cmp	r3, #48	; 0x30
 800c2ae:	f040 80ac 	bne.w	800c40a <_strtod_l+0x1a2>
 800c2b2:	786b      	ldrb	r3, [r5, #1]
 800c2b4:	2b58      	cmp	r3, #88	; 0x58
 800c2b6:	d001      	beq.n	800c2bc <_strtod_l+0x54>
 800c2b8:	2b78      	cmp	r3, #120	; 0x78
 800c2ba:	d167      	bne.n	800c38c <_strtod_l+0x124>
 800c2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2be:	9702      	str	r7, [sp, #8]
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	ab1c      	add	r3, sp, #112	; 0x70
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	4a89      	ldr	r2, [pc, #548]	; (800c4ec <_strtod_l+0x284>)
 800c2c8:	ab1d      	add	r3, sp, #116	; 0x74
 800c2ca:	a91b      	add	r1, sp, #108	; 0x6c
 800c2cc:	4658      	mov	r0, fp
 800c2ce:	f000 ff39 	bl	800d144 <__gethex>
 800c2d2:	f010 0407 	ands.w	r4, r0, #7
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	d005      	beq.n	800c2e6 <_strtod_l+0x7e>
 800c2da:	2c06      	cmp	r4, #6
 800c2dc:	d12b      	bne.n	800c336 <_strtod_l+0xce>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	951b      	str	r5, [sp, #108]	; 0x6c
 800c2e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f040 85a6 	bne.w	800ce3a <_strtod_l+0xbd2>
 800c2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2f0:	b1e3      	cbz	r3, 800c32c <_strtod_l+0xc4>
 800c2f2:	464a      	mov	r2, r9
 800c2f4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	b021      	add	sp, #132	; 0x84
 800c2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c302:	2a2b      	cmp	r2, #43	; 0x2b
 800c304:	d015      	beq.n	800c332 <_strtod_l+0xca>
 800c306:	2a2d      	cmp	r2, #45	; 0x2d
 800c308:	d004      	beq.n	800c314 <_strtod_l+0xac>
 800c30a:	2a20      	cmp	r2, #32
 800c30c:	d1ca      	bne.n	800c2a4 <_strtod_l+0x3c>
 800c30e:	3301      	adds	r3, #1
 800c310:	931b      	str	r3, [sp, #108]	; 0x6c
 800c312:	e7bf      	b.n	800c294 <_strtod_l+0x2c>
 800c314:	2201      	movs	r2, #1
 800c316:	920d      	str	r2, [sp, #52]	; 0x34
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1c2      	bne.n	800c2a8 <_strtod_l+0x40>
 800c322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c324:	961b      	str	r6, [sp, #108]	; 0x6c
 800c326:	2b00      	cmp	r3, #0
 800c328:	f040 8585 	bne.w	800ce36 <_strtod_l+0xbce>
 800c32c:	464a      	mov	r2, r9
 800c32e:	4653      	mov	r3, sl
 800c330:	e7e2      	b.n	800c2f8 <_strtod_l+0x90>
 800c332:	2200      	movs	r2, #0
 800c334:	e7ef      	b.n	800c316 <_strtod_l+0xae>
 800c336:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c338:	b13a      	cbz	r2, 800c34a <_strtod_l+0xe2>
 800c33a:	2135      	movs	r1, #53	; 0x35
 800c33c:	a81e      	add	r0, sp, #120	; 0x78
 800c33e:	f001 fdae 	bl	800de9e <__copybits>
 800c342:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c344:	4658      	mov	r0, fp
 800c346:	f001 fa20 	bl	800d78a <_Bfree>
 800c34a:	3c01      	subs	r4, #1
 800c34c:	2c04      	cmp	r4, #4
 800c34e:	d806      	bhi.n	800c35e <_strtod_l+0xf6>
 800c350:	e8df f004 	tbb	[pc, r4]
 800c354:	1714030a 	.word	0x1714030a
 800c358:	0a          	.byte	0x0a
 800c359:	00          	.byte	0x00
 800c35a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800c35e:	0731      	lsls	r1, r6, #28
 800c360:	d5c1      	bpl.n	800c2e6 <_strtod_l+0x7e>
 800c362:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800c366:	e7be      	b.n	800c2e6 <_strtod_l+0x7e>
 800c368:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c36a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800c36e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c376:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800c37a:	e7f0      	b.n	800c35e <_strtod_l+0xf6>
 800c37c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800c4f0 <_strtod_l+0x288>
 800c380:	e7ed      	b.n	800c35e <_strtod_l+0xf6>
 800c382:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800c386:	f04f 39ff 	mov.w	r9, #4294967295
 800c38a:	e7e8      	b.n	800c35e <_strtod_l+0xf6>
 800c38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	921b      	str	r2, [sp, #108]	; 0x6c
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	2b30      	cmp	r3, #48	; 0x30
 800c396:	d0f9      	beq.n	800c38c <_strtod_l+0x124>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d0a4      	beq.n	800c2e6 <_strtod_l+0x7e>
 800c39c:	2301      	movs	r3, #1
 800c39e:	2500      	movs	r5, #0
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	9307      	str	r3, [sp, #28]
 800c3a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3a6:	9506      	str	r5, [sp, #24]
 800c3a8:	9308      	str	r3, [sp, #32]
 800c3aa:	9504      	str	r5, [sp, #16]
 800c3ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c3ae:	7807      	ldrb	r7, [r0, #0]
 800c3b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c3b4:	b2d9      	uxtb	r1, r3
 800c3b6:	2909      	cmp	r1, #9
 800c3b8:	d929      	bls.n	800c40e <_strtod_l+0x1a6>
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	f8d8 1000 	ldr.w	r1, [r8]
 800c3c0:	f001 fe24 	bl	800e00c <strncmp>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d031      	beq.n	800c42c <_strtod_l+0x1c4>
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	9c04      	ldr	r4, [sp, #16]
 800c3d0:	9005      	str	r0, [sp, #20]
 800c3d2:	2b65      	cmp	r3, #101	; 0x65
 800c3d4:	d001      	beq.n	800c3da <_strtod_l+0x172>
 800c3d6:	2b45      	cmp	r3, #69	; 0x45
 800c3d8:	d114      	bne.n	800c404 <_strtod_l+0x19c>
 800c3da:	b924      	cbnz	r4, 800c3e6 <_strtod_l+0x17e>
 800c3dc:	b910      	cbnz	r0, 800c3e4 <_strtod_l+0x17c>
 800c3de:	9b07      	ldr	r3, [sp, #28]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d09e      	beq.n	800c322 <_strtod_l+0xba>
 800c3e4:	2400      	movs	r4, #0
 800c3e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c3e8:	1c73      	adds	r3, r6, #1
 800c3ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3ec:	7873      	ldrb	r3, [r6, #1]
 800c3ee:	2b2b      	cmp	r3, #43	; 0x2b
 800c3f0:	d078      	beq.n	800c4e4 <_strtod_l+0x27c>
 800c3f2:	2b2d      	cmp	r3, #45	; 0x2d
 800c3f4:	d070      	beq.n	800c4d8 <_strtod_l+0x270>
 800c3f6:	f04f 0c00 	mov.w	ip, #0
 800c3fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c3fe:	2f09      	cmp	r7, #9
 800c400:	d97c      	bls.n	800c4fc <_strtod_l+0x294>
 800c402:	961b      	str	r6, [sp, #108]	; 0x6c
 800c404:	f04f 0e00 	mov.w	lr, #0
 800c408:	e09a      	b.n	800c540 <_strtod_l+0x2d8>
 800c40a:	2300      	movs	r3, #0
 800c40c:	e7c7      	b.n	800c39e <_strtod_l+0x136>
 800c40e:	9904      	ldr	r1, [sp, #16]
 800c410:	3001      	adds	r0, #1
 800c412:	2908      	cmp	r1, #8
 800c414:	bfd7      	itett	le
 800c416:	9906      	ldrle	r1, [sp, #24]
 800c418:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c41c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c420:	9306      	strle	r3, [sp, #24]
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	901b      	str	r0, [sp, #108]	; 0x6c
 800c426:	3301      	adds	r3, #1
 800c428:	9304      	str	r3, [sp, #16]
 800c42a:	e7bf      	b.n	800c3ac <_strtod_l+0x144>
 800c42c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c42e:	191a      	adds	r2, r3, r4
 800c430:	921b      	str	r2, [sp, #108]	; 0x6c
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	5d1b      	ldrb	r3, [r3, r4]
 800c436:	2a00      	cmp	r2, #0
 800c438:	d037      	beq.n	800c4aa <_strtod_l+0x242>
 800c43a:	4602      	mov	r2, r0
 800c43c:	9c04      	ldr	r4, [sp, #16]
 800c43e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c442:	2909      	cmp	r1, #9
 800c444:	d913      	bls.n	800c46e <_strtod_l+0x206>
 800c446:	2101      	movs	r1, #1
 800c448:	9105      	str	r1, [sp, #20]
 800c44a:	e7c2      	b.n	800c3d2 <_strtod_l+0x16a>
 800c44c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c44e:	3001      	adds	r0, #1
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	921b      	str	r2, [sp, #108]	; 0x6c
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	2b30      	cmp	r3, #48	; 0x30
 800c458:	d0f8      	beq.n	800c44c <_strtod_l+0x1e4>
 800c45a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c45e:	2a08      	cmp	r2, #8
 800c460:	f200 84f0 	bhi.w	800ce44 <_strtod_l+0xbdc>
 800c464:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c466:	9208      	str	r2, [sp, #32]
 800c468:	4602      	mov	r2, r0
 800c46a:	2000      	movs	r0, #0
 800c46c:	4604      	mov	r4, r0
 800c46e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c472:	f100 0101 	add.w	r1, r0, #1
 800c476:	d012      	beq.n	800c49e <_strtod_l+0x236>
 800c478:	440a      	add	r2, r1
 800c47a:	270a      	movs	r7, #10
 800c47c:	4621      	mov	r1, r4
 800c47e:	eb00 0c04 	add.w	ip, r0, r4
 800c482:	458c      	cmp	ip, r1
 800c484:	d113      	bne.n	800c4ae <_strtod_l+0x246>
 800c486:	1821      	adds	r1, r4, r0
 800c488:	2908      	cmp	r1, #8
 800c48a:	f104 0401 	add.w	r4, r4, #1
 800c48e:	4404      	add	r4, r0
 800c490:	dc19      	bgt.n	800c4c6 <_strtod_l+0x25e>
 800c492:	210a      	movs	r1, #10
 800c494:	9b06      	ldr	r3, [sp, #24]
 800c496:	fb01 e303 	mla	r3, r1, r3, lr
 800c49a:	9306      	str	r3, [sp, #24]
 800c49c:	2100      	movs	r1, #0
 800c49e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4a0:	1c58      	adds	r0, r3, #1
 800c4a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800c4a4:	785b      	ldrb	r3, [r3, #1]
 800c4a6:	4608      	mov	r0, r1
 800c4a8:	e7c9      	b.n	800c43e <_strtod_l+0x1d6>
 800c4aa:	9804      	ldr	r0, [sp, #16]
 800c4ac:	e7d3      	b.n	800c456 <_strtod_l+0x1ee>
 800c4ae:	2908      	cmp	r1, #8
 800c4b0:	f101 0101 	add.w	r1, r1, #1
 800c4b4:	dc03      	bgt.n	800c4be <_strtod_l+0x256>
 800c4b6:	9b06      	ldr	r3, [sp, #24]
 800c4b8:	437b      	muls	r3, r7
 800c4ba:	9306      	str	r3, [sp, #24]
 800c4bc:	e7e1      	b.n	800c482 <_strtod_l+0x21a>
 800c4be:	2910      	cmp	r1, #16
 800c4c0:	bfd8      	it	le
 800c4c2:	437d      	mulle	r5, r7
 800c4c4:	e7dd      	b.n	800c482 <_strtod_l+0x21a>
 800c4c6:	2c10      	cmp	r4, #16
 800c4c8:	bfdc      	itt	le
 800c4ca:	210a      	movle	r1, #10
 800c4cc:	fb01 e505 	mlale	r5, r1, r5, lr
 800c4d0:	e7e4      	b.n	800c49c <_strtod_l+0x234>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	9305      	str	r3, [sp, #20]
 800c4d6:	e781      	b.n	800c3dc <_strtod_l+0x174>
 800c4d8:	f04f 0c01 	mov.w	ip, #1
 800c4dc:	1cb3      	adds	r3, r6, #2
 800c4de:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4e0:	78b3      	ldrb	r3, [r6, #2]
 800c4e2:	e78a      	b.n	800c3fa <_strtod_l+0x192>
 800c4e4:	f04f 0c00 	mov.w	ip, #0
 800c4e8:	e7f8      	b.n	800c4dc <_strtod_l+0x274>
 800c4ea:	bf00      	nop
 800c4ec:	0800e250 	.word	0x0800e250
 800c4f0:	7ff00000 	.word	0x7ff00000
 800c4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f6:	1c5f      	adds	r7, r3, #1
 800c4f8:	971b      	str	r7, [sp, #108]	; 0x6c
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	2b30      	cmp	r3, #48	; 0x30
 800c4fe:	d0f9      	beq.n	800c4f4 <_strtod_l+0x28c>
 800c500:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c504:	2f08      	cmp	r7, #8
 800c506:	f63f af7d 	bhi.w	800c404 <_strtod_l+0x19c>
 800c50a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c50e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c510:	9309      	str	r3, [sp, #36]	; 0x24
 800c512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c514:	1c5f      	adds	r7, r3, #1
 800c516:	971b      	str	r7, [sp, #108]	; 0x6c
 800c518:	785b      	ldrb	r3, [r3, #1]
 800c51a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c51e:	f1b8 0f09 	cmp.w	r8, #9
 800c522:	d937      	bls.n	800c594 <_strtod_l+0x32c>
 800c524:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c526:	1a7f      	subs	r7, r7, r1
 800c528:	2f08      	cmp	r7, #8
 800c52a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c52e:	dc37      	bgt.n	800c5a0 <_strtod_l+0x338>
 800c530:	45be      	cmp	lr, r7
 800c532:	bfa8      	it	ge
 800c534:	46be      	movge	lr, r7
 800c536:	f1bc 0f00 	cmp.w	ip, #0
 800c53a:	d001      	beq.n	800c540 <_strtod_l+0x2d8>
 800c53c:	f1ce 0e00 	rsb	lr, lr, #0
 800c540:	2c00      	cmp	r4, #0
 800c542:	d151      	bne.n	800c5e8 <_strtod_l+0x380>
 800c544:	2800      	cmp	r0, #0
 800c546:	f47f aece 	bne.w	800c2e6 <_strtod_l+0x7e>
 800c54a:	9a07      	ldr	r2, [sp, #28]
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	f47f aeca 	bne.w	800c2e6 <_strtod_l+0x7e>
 800c552:	9a05      	ldr	r2, [sp, #20]
 800c554:	2a00      	cmp	r2, #0
 800c556:	f47f aee4 	bne.w	800c322 <_strtod_l+0xba>
 800c55a:	2b4e      	cmp	r3, #78	; 0x4e
 800c55c:	d027      	beq.n	800c5ae <_strtod_l+0x346>
 800c55e:	dc21      	bgt.n	800c5a4 <_strtod_l+0x33c>
 800c560:	2b49      	cmp	r3, #73	; 0x49
 800c562:	f47f aede 	bne.w	800c322 <_strtod_l+0xba>
 800c566:	49a4      	ldr	r1, [pc, #656]	; (800c7f8 <_strtod_l+0x590>)
 800c568:	a81b      	add	r0, sp, #108	; 0x6c
 800c56a:	f001 f81f 	bl	800d5ac <__match>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f43f aed7 	beq.w	800c322 <_strtod_l+0xba>
 800c574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c576:	49a1      	ldr	r1, [pc, #644]	; (800c7fc <_strtod_l+0x594>)
 800c578:	3b01      	subs	r3, #1
 800c57a:	a81b      	add	r0, sp, #108	; 0x6c
 800c57c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c57e:	f001 f815 	bl	800d5ac <__match>
 800c582:	b910      	cbnz	r0, 800c58a <_strtod_l+0x322>
 800c584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c586:	3301      	adds	r3, #1
 800c588:	931b      	str	r3, [sp, #108]	; 0x6c
 800c58a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800c810 <_strtod_l+0x5a8>
 800c58e:	f04f 0900 	mov.w	r9, #0
 800c592:	e6a8      	b.n	800c2e6 <_strtod_l+0x7e>
 800c594:	210a      	movs	r1, #10
 800c596:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c59a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c59e:	e7b8      	b.n	800c512 <_strtod_l+0x2aa>
 800c5a0:	46be      	mov	lr, r7
 800c5a2:	e7c8      	b.n	800c536 <_strtod_l+0x2ce>
 800c5a4:	2b69      	cmp	r3, #105	; 0x69
 800c5a6:	d0de      	beq.n	800c566 <_strtod_l+0x2fe>
 800c5a8:	2b6e      	cmp	r3, #110	; 0x6e
 800c5aa:	f47f aeba 	bne.w	800c322 <_strtod_l+0xba>
 800c5ae:	4994      	ldr	r1, [pc, #592]	; (800c800 <_strtod_l+0x598>)
 800c5b0:	a81b      	add	r0, sp, #108	; 0x6c
 800c5b2:	f000 fffb 	bl	800d5ac <__match>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f aeb3 	beq.w	800c322 <_strtod_l+0xba>
 800c5bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b28      	cmp	r3, #40	; 0x28
 800c5c2:	d10e      	bne.n	800c5e2 <_strtod_l+0x37a>
 800c5c4:	aa1e      	add	r2, sp, #120	; 0x78
 800c5c6:	498f      	ldr	r1, [pc, #572]	; (800c804 <_strtod_l+0x59c>)
 800c5c8:	a81b      	add	r0, sp, #108	; 0x6c
 800c5ca:	f001 f803 	bl	800d5d4 <__hexnan>
 800c5ce:	2805      	cmp	r0, #5
 800c5d0:	d107      	bne.n	800c5e2 <_strtod_l+0x37a>
 800c5d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5d4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800c5d8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800c5dc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800c5e0:	e681      	b.n	800c2e6 <_strtod_l+0x7e>
 800c5e2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800c818 <_strtod_l+0x5b0>
 800c5e6:	e7d2      	b.n	800c58e <_strtod_l+0x326>
 800c5e8:	ebae 0302 	sub.w	r3, lr, r2
 800c5ec:	9307      	str	r3, [sp, #28]
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	9806      	ldr	r0, [sp, #24]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bf08      	it	eq
 800c5f6:	4623      	moveq	r3, r4
 800c5f8:	2c10      	cmp	r4, #16
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	46a0      	mov	r8, r4
 800c5fe:	bfa8      	it	ge
 800c600:	f04f 0810 	movge.w	r8, #16
 800c604:	f7f3 ff10 	bl	8000428 <__aeabi_ui2d>
 800c608:	2c09      	cmp	r4, #9
 800c60a:	4681      	mov	r9, r0
 800c60c:	468a      	mov	sl, r1
 800c60e:	dc13      	bgt.n	800c638 <_strtod_l+0x3d0>
 800c610:	9b07      	ldr	r3, [sp, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f43f ae67 	beq.w	800c2e6 <_strtod_l+0x7e>
 800c618:	9b07      	ldr	r3, [sp, #28]
 800c61a:	dd7e      	ble.n	800c71a <_strtod_l+0x4b2>
 800c61c:	2b16      	cmp	r3, #22
 800c61e:	dc65      	bgt.n	800c6ec <_strtod_l+0x484>
 800c620:	4a79      	ldr	r2, [pc, #484]	; (800c808 <_strtod_l+0x5a0>)
 800c622:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c626:	464a      	mov	r2, r9
 800c628:	e9de 0100 	ldrd	r0, r1, [lr]
 800c62c:	4653      	mov	r3, sl
 800c62e:	f7f3 ff75 	bl	800051c <__aeabi_dmul>
 800c632:	4681      	mov	r9, r0
 800c634:	468a      	mov	sl, r1
 800c636:	e656      	b.n	800c2e6 <_strtod_l+0x7e>
 800c638:	4b73      	ldr	r3, [pc, #460]	; (800c808 <_strtod_l+0x5a0>)
 800c63a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c63e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c642:	f7f3 ff6b 	bl	800051c <__aeabi_dmul>
 800c646:	4606      	mov	r6, r0
 800c648:	4628      	mov	r0, r5
 800c64a:	460f      	mov	r7, r1
 800c64c:	f7f3 feec 	bl	8000428 <__aeabi_ui2d>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4630      	mov	r0, r6
 800c656:	4639      	mov	r1, r7
 800c658:	f7f3 fdaa 	bl	80001b0 <__adddf3>
 800c65c:	2c0f      	cmp	r4, #15
 800c65e:	4681      	mov	r9, r0
 800c660:	468a      	mov	sl, r1
 800c662:	ddd5      	ble.n	800c610 <_strtod_l+0x3a8>
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	eba4 0808 	sub.w	r8, r4, r8
 800c66a:	4498      	add	r8, r3
 800c66c:	f1b8 0f00 	cmp.w	r8, #0
 800c670:	f340 809a 	ble.w	800c7a8 <_strtod_l+0x540>
 800c674:	f018 030f 	ands.w	r3, r8, #15
 800c678:	d00a      	beq.n	800c690 <_strtod_l+0x428>
 800c67a:	4963      	ldr	r1, [pc, #396]	; (800c808 <_strtod_l+0x5a0>)
 800c67c:	464a      	mov	r2, r9
 800c67e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c682:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c686:	4653      	mov	r3, sl
 800c688:	f7f3 ff48 	bl	800051c <__aeabi_dmul>
 800c68c:	4681      	mov	r9, r0
 800c68e:	468a      	mov	sl, r1
 800c690:	f038 080f 	bics.w	r8, r8, #15
 800c694:	d077      	beq.n	800c786 <_strtod_l+0x51e>
 800c696:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c69a:	dd4b      	ble.n	800c734 <_strtod_l+0x4cc>
 800c69c:	f04f 0800 	mov.w	r8, #0
 800c6a0:	f8cd 8010 	str.w	r8, [sp, #16]
 800c6a4:	f8cd 8020 	str.w	r8, [sp, #32]
 800c6a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6ac:	2322      	movs	r3, #34	; 0x22
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800c810 <_strtod_l+0x5a8>
 800c6b6:	f8cb 3000 	str.w	r3, [fp]
 800c6ba:	9b08      	ldr	r3, [sp, #32]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f43f ae12 	beq.w	800c2e6 <_strtod_l+0x7e>
 800c6c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6c4:	4658      	mov	r0, fp
 800c6c6:	f001 f860 	bl	800d78a <_Bfree>
 800c6ca:	9906      	ldr	r1, [sp, #24]
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	f001 f85c 	bl	800d78a <_Bfree>
 800c6d2:	9904      	ldr	r1, [sp, #16]
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f001 f858 	bl	800d78a <_Bfree>
 800c6da:	9908      	ldr	r1, [sp, #32]
 800c6dc:	4658      	mov	r0, fp
 800c6de:	f001 f854 	bl	800d78a <_Bfree>
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4658      	mov	r0, fp
 800c6e6:	f001 f850 	bl	800d78a <_Bfree>
 800c6ea:	e5fc      	b.n	800c2e6 <_strtod_l+0x7e>
 800c6ec:	9a07      	ldr	r2, [sp, #28]
 800c6ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	dbb6      	blt.n	800c664 <_strtod_l+0x3fc>
 800c6f6:	4d44      	ldr	r5, [pc, #272]	; (800c808 <_strtod_l+0x5a0>)
 800c6f8:	f1c4 040f 	rsb	r4, r4, #15
 800c6fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c700:	464a      	mov	r2, r9
 800c702:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c706:	4653      	mov	r3, sl
 800c708:	f7f3 ff08 	bl	800051c <__aeabi_dmul>
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	1b1c      	subs	r4, r3, r4
 800c710:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c714:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c718:	e789      	b.n	800c62e <_strtod_l+0x3c6>
 800c71a:	f113 0f16 	cmn.w	r3, #22
 800c71e:	dba1      	blt.n	800c664 <_strtod_l+0x3fc>
 800c720:	4a39      	ldr	r2, [pc, #228]	; (800c808 <_strtod_l+0x5a0>)
 800c722:	4648      	mov	r0, r9
 800c724:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c728:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c72c:	4651      	mov	r1, sl
 800c72e:	f7f4 f81f 	bl	8000770 <__aeabi_ddiv>
 800c732:	e77e      	b.n	800c632 <_strtod_l+0x3ca>
 800c734:	2300      	movs	r3, #0
 800c736:	4648      	mov	r0, r9
 800c738:	4651      	mov	r1, sl
 800c73a:	461d      	mov	r5, r3
 800c73c:	4e33      	ldr	r6, [pc, #204]	; (800c80c <_strtod_l+0x5a4>)
 800c73e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c742:	f1b8 0f01 	cmp.w	r8, #1
 800c746:	dc21      	bgt.n	800c78c <_strtod_l+0x524>
 800c748:	b10b      	cbz	r3, 800c74e <_strtod_l+0x4e6>
 800c74a:	4681      	mov	r9, r0
 800c74c:	468a      	mov	sl, r1
 800c74e:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <_strtod_l+0x5a4>)
 800c750:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800c754:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c758:	464a      	mov	r2, r9
 800c75a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c75e:	4653      	mov	r3, sl
 800c760:	f7f3 fedc 	bl	800051c <__aeabi_dmul>
 800c764:	4b2a      	ldr	r3, [pc, #168]	; (800c810 <_strtod_l+0x5a8>)
 800c766:	460a      	mov	r2, r1
 800c768:	400b      	ands	r3, r1
 800c76a:	492a      	ldr	r1, [pc, #168]	; (800c814 <_strtod_l+0x5ac>)
 800c76c:	4681      	mov	r9, r0
 800c76e:	428b      	cmp	r3, r1
 800c770:	d894      	bhi.n	800c69c <_strtod_l+0x434>
 800c772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c776:	428b      	cmp	r3, r1
 800c778:	bf86      	itte	hi
 800c77a:	f04f 39ff 	movhi.w	r9, #4294967295
 800c77e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800c81c <_strtod_l+0x5b4>
 800c782:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800c786:	2300      	movs	r3, #0
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	e07b      	b.n	800c884 <_strtod_l+0x61c>
 800c78c:	f018 0f01 	tst.w	r8, #1
 800c790:	d006      	beq.n	800c7a0 <_strtod_l+0x538>
 800c792:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79a:	f7f3 febf 	bl	800051c <__aeabi_dmul>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	3501      	adds	r5, #1
 800c7a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7a6:	e7cc      	b.n	800c742 <_strtod_l+0x4da>
 800c7a8:	d0ed      	beq.n	800c786 <_strtod_l+0x51e>
 800c7aa:	f1c8 0800 	rsb	r8, r8, #0
 800c7ae:	f018 020f 	ands.w	r2, r8, #15
 800c7b2:	d00a      	beq.n	800c7ca <_strtod_l+0x562>
 800c7b4:	4b14      	ldr	r3, [pc, #80]	; (800c808 <_strtod_l+0x5a0>)
 800c7b6:	4648      	mov	r0, r9
 800c7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7bc:	4651      	mov	r1, sl
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 ffd5 	bl	8000770 <__aeabi_ddiv>
 800c7c6:	4681      	mov	r9, r0
 800c7c8:	468a      	mov	sl, r1
 800c7ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c7ce:	d0da      	beq.n	800c786 <_strtod_l+0x51e>
 800c7d0:	f1b8 0f1f 	cmp.w	r8, #31
 800c7d4:	dd24      	ble.n	800c820 <_strtod_l+0x5b8>
 800c7d6:	f04f 0800 	mov.w	r8, #0
 800c7da:	f8cd 8010 	str.w	r8, [sp, #16]
 800c7de:	f8cd 8020 	str.w	r8, [sp, #32]
 800c7e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7e6:	2322      	movs	r3, #34	; 0x22
 800c7e8:	f04f 0900 	mov.w	r9, #0
 800c7ec:	f04f 0a00 	mov.w	sl, #0
 800c7f0:	f8cb 3000 	str.w	r3, [fp]
 800c7f4:	e761      	b.n	800c6ba <_strtod_l+0x452>
 800c7f6:	bf00      	nop
 800c7f8:	0800e244 	.word	0x0800e244
 800c7fc:	0800e247 	.word	0x0800e247
 800c800:	0800e24d 	.word	0x0800e24d
 800c804:	0800e264 	.word	0x0800e264
 800c808:	0800e2f8 	.word	0x0800e2f8
 800c80c:	0800e2d0 	.word	0x0800e2d0
 800c810:	7ff00000 	.word	0x7ff00000
 800c814:	7ca00000 	.word	0x7ca00000
 800c818:	fff80000 	.word	0xfff80000
 800c81c:	7fefffff 	.word	0x7fefffff
 800c820:	f018 0310 	ands.w	r3, r8, #16
 800c824:	bf18      	it	ne
 800c826:	236a      	movne	r3, #106	; 0x6a
 800c828:	4648      	mov	r0, r9
 800c82a:	9305      	str	r3, [sp, #20]
 800c82c:	4651      	mov	r1, sl
 800c82e:	2300      	movs	r3, #0
 800c830:	4da1      	ldr	r5, [pc, #644]	; (800cab8 <_strtod_l+0x850>)
 800c832:	f1b8 0f00 	cmp.w	r8, #0
 800c836:	f300 8113 	bgt.w	800ca60 <_strtod_l+0x7f8>
 800c83a:	b10b      	cbz	r3, 800c840 <_strtod_l+0x5d8>
 800c83c:	4681      	mov	r9, r0
 800c83e:	468a      	mov	sl, r1
 800c840:	9b05      	ldr	r3, [sp, #20]
 800c842:	b1bb      	cbz	r3, 800c874 <_strtod_l+0x60c>
 800c844:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800c848:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	4651      	mov	r1, sl
 800c850:	dd10      	ble.n	800c874 <_strtod_l+0x60c>
 800c852:	2b1f      	cmp	r3, #31
 800c854:	f340 8110 	ble.w	800ca78 <_strtod_l+0x810>
 800c858:	2b34      	cmp	r3, #52	; 0x34
 800c85a:	bfd8      	it	le
 800c85c:	f04f 32ff 	movle.w	r2, #4294967295
 800c860:	f04f 0900 	mov.w	r9, #0
 800c864:	bfcf      	iteee	gt
 800c866:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800c86a:	3b20      	suble	r3, #32
 800c86c:	fa02 f303 	lslle.w	r3, r2, r3
 800c870:	ea03 0a01 	andle.w	sl, r3, r1
 800c874:	2200      	movs	r2, #0
 800c876:	2300      	movs	r3, #0
 800c878:	4648      	mov	r0, r9
 800c87a:	4651      	mov	r1, sl
 800c87c:	f7f4 f8b6 	bl	80009ec <__aeabi_dcmpeq>
 800c880:	2800      	cmp	r0, #0
 800c882:	d1a8      	bne.n	800c7d6 <_strtod_l+0x56e>
 800c884:	9b06      	ldr	r3, [sp, #24]
 800c886:	9a04      	ldr	r2, [sp, #16]
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	9908      	ldr	r1, [sp, #32]
 800c88c:	4623      	mov	r3, r4
 800c88e:	4658      	mov	r0, fp
 800c890:	f000 ffcd 	bl	800d82e <__s2b>
 800c894:	9008      	str	r0, [sp, #32]
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f af00 	beq.w	800c69c <_strtod_l+0x434>
 800c89c:	9a07      	ldr	r2, [sp, #28]
 800c89e:	9b07      	ldr	r3, [sp, #28]
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	f1c3 0300 	rsb	r3, r3, #0
 800c8a6:	bfa8      	it	ge
 800c8a8:	2300      	movge	r3, #0
 800c8aa:	f04f 0800 	mov.w	r8, #0
 800c8ae:	930e      	str	r3, [sp, #56]	; 0x38
 800c8b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c8b4:	9316      	str	r3, [sp, #88]	; 0x58
 800c8b6:	f8cd 8010 	str.w	r8, [sp, #16]
 800c8ba:	9b08      	ldr	r3, [sp, #32]
 800c8bc:	4658      	mov	r0, fp
 800c8be:	6859      	ldr	r1, [r3, #4]
 800c8c0:	f000 ff2f 	bl	800d722 <_Balloc>
 800c8c4:	9006      	str	r0, [sp, #24]
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f aef0 	beq.w	800c6ac <_strtod_l+0x444>
 800c8cc:	9b08      	ldr	r3, [sp, #32]
 800c8ce:	300c      	adds	r0, #12
 800c8d0:	691a      	ldr	r2, [r3, #16]
 800c8d2:	f103 010c 	add.w	r1, r3, #12
 800c8d6:	3202      	adds	r2, #2
 800c8d8:	0092      	lsls	r2, r2, #2
 800c8da:	f7ff fc8f 	bl	800c1fc <memcpy>
 800c8de:	ab1e      	add	r3, sp, #120	; 0x78
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	464a      	mov	r2, r9
 800c8e8:	4653      	mov	r3, sl
 800c8ea:	4658      	mov	r0, fp
 800c8ec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800c8f0:	f001 fa58 	bl	800dda4 <__d2b>
 800c8f4:	901c      	str	r0, [sp, #112]	; 0x70
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	f43f aed8 	beq.w	800c6ac <_strtod_l+0x444>
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	4658      	mov	r0, fp
 800c900:	f001 f821 	bl	800d946 <__i2b>
 800c904:	9004      	str	r0, [sp, #16]
 800c906:	4603      	mov	r3, r0
 800c908:	2800      	cmp	r0, #0
 800c90a:	f43f aecf 	beq.w	800c6ac <_strtod_l+0x444>
 800c90e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c910:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c912:	2d00      	cmp	r5, #0
 800c914:	bfab      	itete	ge
 800c916:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c918:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c91a:	18ee      	addge	r6, r5, r3
 800c91c:	1b5c      	sublt	r4, r3, r5
 800c91e:	9b05      	ldr	r3, [sp, #20]
 800c920:	bfa8      	it	ge
 800c922:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c924:	eba5 0503 	sub.w	r5, r5, r3
 800c928:	4415      	add	r5, r2
 800c92a:	4b64      	ldr	r3, [pc, #400]	; (800cabc <_strtod_l+0x854>)
 800c92c:	f105 35ff 	add.w	r5, r5, #4294967295
 800c930:	bfb8      	it	lt
 800c932:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c934:	429d      	cmp	r5, r3
 800c936:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c93a:	f280 80af 	bge.w	800ca9c <_strtod_l+0x834>
 800c93e:	1b5b      	subs	r3, r3, r5
 800c940:	2b1f      	cmp	r3, #31
 800c942:	eba2 0203 	sub.w	r2, r2, r3
 800c946:	f04f 0701 	mov.w	r7, #1
 800c94a:	f300 809c 	bgt.w	800ca86 <_strtod_l+0x81e>
 800c94e:	2500      	movs	r5, #0
 800c950:	fa07 f303 	lsl.w	r3, r7, r3
 800c954:	930f      	str	r3, [sp, #60]	; 0x3c
 800c956:	18b7      	adds	r7, r6, r2
 800c958:	9b05      	ldr	r3, [sp, #20]
 800c95a:	42be      	cmp	r6, r7
 800c95c:	4414      	add	r4, r2
 800c95e:	441c      	add	r4, r3
 800c960:	4633      	mov	r3, r6
 800c962:	bfa8      	it	ge
 800c964:	463b      	movge	r3, r7
 800c966:	42a3      	cmp	r3, r4
 800c968:	bfa8      	it	ge
 800c96a:	4623      	movge	r3, r4
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfc2      	ittt	gt
 800c970:	1aff      	subgt	r7, r7, r3
 800c972:	1ae4      	subgt	r4, r4, r3
 800c974:	1af6      	subgt	r6, r6, r3
 800c976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c978:	b1bb      	cbz	r3, 800c9aa <_strtod_l+0x742>
 800c97a:	461a      	mov	r2, r3
 800c97c:	9904      	ldr	r1, [sp, #16]
 800c97e:	4658      	mov	r0, fp
 800c980:	f001 f880 	bl	800da84 <__pow5mult>
 800c984:	9004      	str	r0, [sp, #16]
 800c986:	2800      	cmp	r0, #0
 800c988:	f43f ae90 	beq.w	800c6ac <_strtod_l+0x444>
 800c98c:	4601      	mov	r1, r0
 800c98e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c990:	4658      	mov	r0, fp
 800c992:	f000 ffe1 	bl	800d958 <__multiply>
 800c996:	9009      	str	r0, [sp, #36]	; 0x24
 800c998:	2800      	cmp	r0, #0
 800c99a:	f43f ae87 	beq.w	800c6ac <_strtod_l+0x444>
 800c99e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9a0:	4658      	mov	r0, fp
 800c9a2:	f000 fef2 	bl	800d78a <_Bfree>
 800c9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a8:	931c      	str	r3, [sp, #112]	; 0x70
 800c9aa:	2f00      	cmp	r7, #0
 800c9ac:	dc7a      	bgt.n	800caa4 <_strtod_l+0x83c>
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dd08      	ble.n	800c9c6 <_strtod_l+0x75e>
 800c9b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c9b6:	9906      	ldr	r1, [sp, #24]
 800c9b8:	4658      	mov	r0, fp
 800c9ba:	f001 f863 	bl	800da84 <__pow5mult>
 800c9be:	9006      	str	r0, [sp, #24]
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f43f ae73 	beq.w	800c6ac <_strtod_l+0x444>
 800c9c6:	2c00      	cmp	r4, #0
 800c9c8:	dd08      	ble.n	800c9dc <_strtod_l+0x774>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	9906      	ldr	r1, [sp, #24]
 800c9ce:	4658      	mov	r0, fp
 800c9d0:	f001 f8a6 	bl	800db20 <__lshift>
 800c9d4:	9006      	str	r0, [sp, #24]
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f43f ae68 	beq.w	800c6ac <_strtod_l+0x444>
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	dd08      	ble.n	800c9f2 <_strtod_l+0x78a>
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	9904      	ldr	r1, [sp, #16]
 800c9e4:	4658      	mov	r0, fp
 800c9e6:	f001 f89b 	bl	800db20 <__lshift>
 800c9ea:	9004      	str	r0, [sp, #16]
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f43f ae5d 	beq.w	800c6ac <_strtod_l+0x444>
 800c9f2:	9a06      	ldr	r2, [sp, #24]
 800c9f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	f001 f900 	bl	800dbfc <__mdiff>
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f43f ae54 	beq.w	800c6ac <_strtod_l+0x444>
 800ca04:	2400      	movs	r4, #0
 800ca06:	68c3      	ldr	r3, [r0, #12]
 800ca08:	9904      	ldr	r1, [sp, #16]
 800ca0a:	60c4      	str	r4, [r0, #12]
 800ca0c:	930c      	str	r3, [sp, #48]	; 0x30
 800ca0e:	f001 f8db 	bl	800dbc8 <__mcmp>
 800ca12:	42a0      	cmp	r0, r4
 800ca14:	da54      	bge.n	800cac0 <_strtod_l+0x858>
 800ca16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca18:	b9f3      	cbnz	r3, 800ca58 <_strtod_l+0x7f0>
 800ca1a:	f1b9 0f00 	cmp.w	r9, #0
 800ca1e:	d11b      	bne.n	800ca58 <_strtod_l+0x7f0>
 800ca20:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ca24:	b9c3      	cbnz	r3, 800ca58 <_strtod_l+0x7f0>
 800ca26:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ca2a:	0d1b      	lsrs	r3, r3, #20
 800ca2c:	051b      	lsls	r3, r3, #20
 800ca2e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca32:	d911      	bls.n	800ca58 <_strtod_l+0x7f0>
 800ca34:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ca38:	b91b      	cbnz	r3, 800ca42 <_strtod_l+0x7da>
 800ca3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	dd0a      	ble.n	800ca58 <_strtod_l+0x7f0>
 800ca42:	4641      	mov	r1, r8
 800ca44:	2201      	movs	r2, #1
 800ca46:	4658      	mov	r0, fp
 800ca48:	f001 f86a 	bl	800db20 <__lshift>
 800ca4c:	9904      	ldr	r1, [sp, #16]
 800ca4e:	4680      	mov	r8, r0
 800ca50:	f001 f8ba 	bl	800dbc8 <__mcmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	dc68      	bgt.n	800cb2a <_strtod_l+0x8c2>
 800ca58:	9b05      	ldr	r3, [sp, #20]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d172      	bne.n	800cb44 <_strtod_l+0x8dc>
 800ca5e:	e630      	b.n	800c6c2 <_strtod_l+0x45a>
 800ca60:	f018 0f01 	tst.w	r8, #1
 800ca64:	d004      	beq.n	800ca70 <_strtod_l+0x808>
 800ca66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca6a:	f7f3 fd57 	bl	800051c <__aeabi_dmul>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ca74:	3508      	adds	r5, #8
 800ca76:	e6dc      	b.n	800c832 <_strtod_l+0x5ca>
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca80:	ea03 0909 	and.w	r9, r3, r9
 800ca84:	e6f6      	b.n	800c874 <_strtod_l+0x60c>
 800ca86:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ca8a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ca8e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ca92:	35e2      	adds	r5, #226	; 0xe2
 800ca94:	fa07 f505 	lsl.w	r5, r7, r5
 800ca98:	970f      	str	r7, [sp, #60]	; 0x3c
 800ca9a:	e75c      	b.n	800c956 <_strtod_l+0x6ee>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	2500      	movs	r5, #0
 800caa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800caa2:	e758      	b.n	800c956 <_strtod_l+0x6ee>
 800caa4:	463a      	mov	r2, r7
 800caa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caa8:	4658      	mov	r0, fp
 800caaa:	f001 f839 	bl	800db20 <__lshift>
 800caae:	901c      	str	r0, [sp, #112]	; 0x70
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f47f af7c 	bne.w	800c9ae <_strtod_l+0x746>
 800cab6:	e5f9      	b.n	800c6ac <_strtod_l+0x444>
 800cab8:	0800e278 	.word	0x0800e278
 800cabc:	fffffc02 	.word	0xfffffc02
 800cac0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cac4:	f040 8089 	bne.w	800cbda <_strtod_l+0x972>
 800cac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800cace:	b342      	cbz	r2, 800cb22 <_strtod_l+0x8ba>
 800cad0:	4aaf      	ldr	r2, [pc, #700]	; (800cd90 <_strtod_l+0xb28>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d156      	bne.n	800cb84 <_strtod_l+0x91c>
 800cad6:	9b05      	ldr	r3, [sp, #20]
 800cad8:	4648      	mov	r0, r9
 800cada:	b1eb      	cbz	r3, 800cb18 <_strtod_l+0x8b0>
 800cadc:	4653      	mov	r3, sl
 800cade:	4aad      	ldr	r2, [pc, #692]	; (800cd94 <_strtod_l+0xb2c>)
 800cae0:	f04f 31ff 	mov.w	r1, #4294967295
 800cae4:	401a      	ands	r2, r3
 800cae6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800caea:	d818      	bhi.n	800cb1e <_strtod_l+0x8b6>
 800caec:	0d12      	lsrs	r2, r2, #20
 800caee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800caf2:	fa01 f303 	lsl.w	r3, r1, r3
 800caf6:	4298      	cmp	r0, r3
 800caf8:	d144      	bne.n	800cb84 <_strtod_l+0x91c>
 800cafa:	4ba7      	ldr	r3, [pc, #668]	; (800cd98 <_strtod_l+0xb30>)
 800cafc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d102      	bne.n	800cb08 <_strtod_l+0x8a0>
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f add2 	beq.w	800c6ac <_strtod_l+0x444>
 800cb08:	4ba2      	ldr	r3, [pc, #648]	; (800cd94 <_strtod_l+0xb2c>)
 800cb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb0c:	f04f 0900 	mov.w	r9, #0
 800cb10:	401a      	ands	r2, r3
 800cb12:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800cb16:	e79f      	b.n	800ca58 <_strtod_l+0x7f0>
 800cb18:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1c:	e7eb      	b.n	800caf6 <_strtod_l+0x88e>
 800cb1e:	460b      	mov	r3, r1
 800cb20:	e7e9      	b.n	800caf6 <_strtod_l+0x88e>
 800cb22:	bb7b      	cbnz	r3, 800cb84 <_strtod_l+0x91c>
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	d12c      	bne.n	800cb84 <_strtod_l+0x91c>
 800cb2a:	9905      	ldr	r1, [sp, #20]
 800cb2c:	4653      	mov	r3, sl
 800cb2e:	4a99      	ldr	r2, [pc, #612]	; (800cd94 <_strtod_l+0xb2c>)
 800cb30:	b1f1      	cbz	r1, 800cb70 <_strtod_l+0x908>
 800cb32:	ea02 010a 	and.w	r1, r2, sl
 800cb36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb3a:	dc19      	bgt.n	800cb70 <_strtod_l+0x908>
 800cb3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb40:	f77f ae51 	ble.w	800c7e6 <_strtod_l+0x57e>
 800cb44:	2300      	movs	r3, #0
 800cb46:	4a95      	ldr	r2, [pc, #596]	; (800cd9c <_strtod_l+0xb34>)
 800cb48:	4648      	mov	r0, r9
 800cb4a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cb4e:	4651      	mov	r1, sl
 800cb50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cb54:	f7f3 fce2 	bl	800051c <__aeabi_dmul>
 800cb58:	4681      	mov	r9, r0
 800cb5a:	468a      	mov	sl, r1
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	f47f adb0 	bne.w	800c6c2 <_strtod_l+0x45a>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f47f adad 	bne.w	800c6c2 <_strtod_l+0x45a>
 800cb68:	2322      	movs	r3, #34	; 0x22
 800cb6a:	f8cb 3000 	str.w	r3, [fp]
 800cb6e:	e5a8      	b.n	800c6c2 <_strtod_l+0x45a>
 800cb70:	4013      	ands	r3, r2
 800cb72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb76:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800cb7a:	f04f 39ff 	mov.w	r9, #4294967295
 800cb7e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800cb82:	e769      	b.n	800ca58 <_strtod_l+0x7f0>
 800cb84:	b19d      	cbz	r5, 800cbae <_strtod_l+0x946>
 800cb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb88:	421d      	tst	r5, r3
 800cb8a:	f43f af65 	beq.w	800ca58 <_strtod_l+0x7f0>
 800cb8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb90:	9a05      	ldr	r2, [sp, #20]
 800cb92:	4648      	mov	r0, r9
 800cb94:	4651      	mov	r1, sl
 800cb96:	b173      	cbz	r3, 800cbb6 <_strtod_l+0x94e>
 800cb98:	f7ff fb43 	bl	800c222 <sulp>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cba4:	f7f3 fb04 	bl	80001b0 <__adddf3>
 800cba8:	4681      	mov	r9, r0
 800cbaa:	468a      	mov	sl, r1
 800cbac:	e754      	b.n	800ca58 <_strtod_l+0x7f0>
 800cbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb0:	ea13 0f09 	tst.w	r3, r9
 800cbb4:	e7e9      	b.n	800cb8a <_strtod_l+0x922>
 800cbb6:	f7ff fb34 	bl	800c222 <sulp>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cbc2:	f7f3 faf3 	bl	80001ac <__aeabi_dsub>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4681      	mov	r9, r0
 800cbcc:	468a      	mov	sl, r1
 800cbce:	f7f3 ff0d 	bl	80009ec <__aeabi_dcmpeq>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f47f ae07 	bne.w	800c7e6 <_strtod_l+0x57e>
 800cbd8:	e73e      	b.n	800ca58 <_strtod_l+0x7f0>
 800cbda:	9904      	ldr	r1, [sp, #16]
 800cbdc:	4640      	mov	r0, r8
 800cbde:	f001 f930 	bl	800de42 <__ratio>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	f7f3 ff12 	bl	8000a14 <__aeabi_dcmple>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d075      	beq.n	800cce0 <_strtod_l+0xa78>
 800cbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d047      	beq.n	800cc8a <_strtod_l+0xa22>
 800cbfa:	2600      	movs	r6, #0
 800cbfc:	4f68      	ldr	r7, [pc, #416]	; (800cda0 <_strtod_l+0xb38>)
 800cbfe:	4d68      	ldr	r5, [pc, #416]	; (800cda0 <_strtod_l+0xb38>)
 800cc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc06:	0d1b      	lsrs	r3, r3, #20
 800cc08:	051b      	lsls	r3, r3, #20
 800cc0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc0e:	4b65      	ldr	r3, [pc, #404]	; (800cda4 <_strtod_l+0xb3c>)
 800cc10:	429a      	cmp	r2, r3
 800cc12:	f040 80cf 	bne.w	800cdb4 <_strtod_l+0xb4c>
 800cc16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc20:	4648      	mov	r0, r9
 800cc22:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800cc26:	4651      	mov	r1, sl
 800cc28:	f001 f846 	bl	800dcb8 <__ulp>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4630      	mov	r0, r6
 800cc32:	4639      	mov	r1, r7
 800cc34:	f7f3 fc72 	bl	800051c <__aeabi_dmul>
 800cc38:	464a      	mov	r2, r9
 800cc3a:	4653      	mov	r3, sl
 800cc3c:	f7f3 fab8 	bl	80001b0 <__adddf3>
 800cc40:	460b      	mov	r3, r1
 800cc42:	4954      	ldr	r1, [pc, #336]	; (800cd94 <_strtod_l+0xb2c>)
 800cc44:	4a58      	ldr	r2, [pc, #352]	; (800cda8 <_strtod_l+0xb40>)
 800cc46:	4019      	ands	r1, r3
 800cc48:	4291      	cmp	r1, r2
 800cc4a:	4681      	mov	r9, r0
 800cc4c:	d95e      	bls.n	800cd0c <_strtod_l+0xaa4>
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d103      	bne.n	800cc60 <_strtod_l+0x9f8>
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	f43f ad26 	beq.w	800c6ac <_strtod_l+0x444>
 800cc60:	f04f 39ff 	mov.w	r9, #4294967295
 800cc64:	f8df a130 	ldr.w	sl, [pc, #304]	; 800cd98 <_strtod_l+0xb30>
 800cc68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc6a:	4658      	mov	r0, fp
 800cc6c:	f000 fd8d 	bl	800d78a <_Bfree>
 800cc70:	9906      	ldr	r1, [sp, #24]
 800cc72:	4658      	mov	r0, fp
 800cc74:	f000 fd89 	bl	800d78a <_Bfree>
 800cc78:	9904      	ldr	r1, [sp, #16]
 800cc7a:	4658      	mov	r0, fp
 800cc7c:	f000 fd85 	bl	800d78a <_Bfree>
 800cc80:	4641      	mov	r1, r8
 800cc82:	4658      	mov	r0, fp
 800cc84:	f000 fd81 	bl	800d78a <_Bfree>
 800cc88:	e617      	b.n	800c8ba <_strtod_l+0x652>
 800cc8a:	f1b9 0f00 	cmp.w	r9, #0
 800cc8e:	d119      	bne.n	800ccc4 <_strtod_l+0xa5c>
 800cc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc96:	b9e3      	cbnz	r3, 800ccd2 <_strtod_l+0xa6a>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4b41      	ldr	r3, [pc, #260]	; (800cda0 <_strtod_l+0xb38>)
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 feae 	bl	8000a00 <__aeabi_dcmplt>
 800cca4:	b9c8      	cbnz	r0, 800ccda <_strtod_l+0xa72>
 800cca6:	2200      	movs	r2, #0
 800cca8:	4b40      	ldr	r3, [pc, #256]	; (800cdac <_strtod_l+0xb44>)
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 fc35 	bl	800051c <__aeabi_dmul>
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ccba:	9418      	str	r4, [sp, #96]	; 0x60
 800ccbc:	9319      	str	r3, [sp, #100]	; 0x64
 800ccbe:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ccc2:	e79d      	b.n	800cc00 <_strtod_l+0x998>
 800ccc4:	f1b9 0f01 	cmp.w	r9, #1
 800ccc8:	d103      	bne.n	800ccd2 <_strtod_l+0xa6a>
 800ccca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f43f ad8a 	beq.w	800c7e6 <_strtod_l+0x57e>
 800ccd2:	2600      	movs	r6, #0
 800ccd4:	4f36      	ldr	r7, [pc, #216]	; (800cdb0 <_strtod_l+0xb48>)
 800ccd6:	2400      	movs	r4, #0
 800ccd8:	e791      	b.n	800cbfe <_strtod_l+0x996>
 800ccda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccdc:	4d33      	ldr	r5, [pc, #204]	; (800cdac <_strtod_l+0xb44>)
 800ccde:	e7ea      	b.n	800ccb6 <_strtod_l+0xa4e>
 800cce0:	4b32      	ldr	r3, [pc, #200]	; (800cdac <_strtod_l+0xb44>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	4630      	mov	r0, r6
 800cce6:	4639      	mov	r1, r7
 800cce8:	f7f3 fc18 	bl	800051c <__aeabi_dmul>
 800ccec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccee:	4604      	mov	r4, r0
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	b933      	cbnz	r3, 800cd02 <_strtod_l+0xa9a>
 800ccf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccf8:	9010      	str	r0, [sp, #64]	; 0x40
 800ccfa:	9311      	str	r3, [sp, #68]	; 0x44
 800ccfc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cd00:	e77e      	b.n	800cc00 <_strtod_l+0x998>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cd0a:	e7f7      	b.n	800ccfc <_strtod_l+0xa94>
 800cd0c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800cd10:	9b05      	ldr	r3, [sp, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1a8      	bne.n	800cc68 <_strtod_l+0xa00>
 800cd16:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800cd1a:	0d1b      	lsrs	r3, r3, #20
 800cd1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd1e:	051b      	lsls	r3, r3, #20
 800cd20:	429a      	cmp	r2, r3
 800cd22:	4656      	mov	r6, sl
 800cd24:	d1a0      	bne.n	800cc68 <_strtod_l+0xa00>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f7f3 fea7 	bl	8000a7c <__aeabi_d2iz>
 800cd2e:	f7f3 fb8b 	bl	8000448 <__aeabi_i2d>
 800cd32:	460b      	mov	r3, r1
 800cd34:	4602      	mov	r2, r0
 800cd36:	4629      	mov	r1, r5
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7f3 fa37 	bl	80001ac <__aeabi_dsub>
 800cd3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd40:	4604      	mov	r4, r0
 800cd42:	460d      	mov	r5, r1
 800cd44:	b933      	cbnz	r3, 800cd54 <_strtod_l+0xaec>
 800cd46:	f1b9 0f00 	cmp.w	r9, #0
 800cd4a:	d103      	bne.n	800cd54 <_strtod_l+0xaec>
 800cd4c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	d06a      	beq.n	800ce2a <_strtod_l+0xbc2>
 800cd54:	a30a      	add	r3, pc, #40	; (adr r3, 800cd80 <_strtod_l+0xb18>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7f3 fe4f 	bl	8000a00 <__aeabi_dcmplt>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f47f acad 	bne.w	800c6c2 <_strtod_l+0x45a>
 800cd68:	a307      	add	r3, pc, #28	; (adr r3, 800cd88 <_strtod_l+0xb20>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7f3 fe63 	bl	8000a3c <__aeabi_dcmpgt>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f43f af76 	beq.w	800cc68 <_strtod_l+0xa00>
 800cd7c:	e4a1      	b.n	800c6c2 <_strtod_l+0x45a>
 800cd7e:	bf00      	nop
 800cd80:	94a03595 	.word	0x94a03595
 800cd84:	3fdfffff 	.word	0x3fdfffff
 800cd88:	35afe535 	.word	0x35afe535
 800cd8c:	3fe00000 	.word	0x3fe00000
 800cd90:	000fffff 	.word	0x000fffff
 800cd94:	7ff00000 	.word	0x7ff00000
 800cd98:	7fefffff 	.word	0x7fefffff
 800cd9c:	39500000 	.word	0x39500000
 800cda0:	3ff00000 	.word	0x3ff00000
 800cda4:	7fe00000 	.word	0x7fe00000
 800cda8:	7c9fffff 	.word	0x7c9fffff
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	bff00000 	.word	0xbff00000
 800cdb4:	9b05      	ldr	r3, [sp, #20]
 800cdb6:	b313      	cbz	r3, 800cdfe <_strtod_l+0xb96>
 800cdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cdbe:	d81e      	bhi.n	800cdfe <_strtod_l+0xb96>
 800cdc0:	a325      	add	r3, pc, #148	; (adr r3, 800ce58 <_strtod_l+0xbf0>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7f3 fe23 	bl	8000a14 <__aeabi_dcmple>
 800cdce:	b190      	cbz	r0, 800cdf6 <_strtod_l+0xb8e>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7f3 fe7a 	bl	8000acc <__aeabi_d2uiz>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	bf08      	it	eq
 800cddc:	2001      	moveq	r0, #1
 800cdde:	f7f3 fb23 	bl	8000428 <__aeabi_ui2d>
 800cde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cde4:	4604      	mov	r4, r0
 800cde6:	460d      	mov	r5, r1
 800cde8:	b9d3      	cbnz	r3, 800ce20 <_strtod_l+0xbb8>
 800cdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdee:	9012      	str	r0, [sp, #72]	; 0x48
 800cdf0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdf2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cdf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdf8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cdfc:	1a9f      	subs	r7, r3, r2
 800cdfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce02:	f000 ff59 	bl	800dcb8 <__ulp>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	f7f3 fb85 	bl	800051c <__aeabi_dmul>
 800ce12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce16:	f7f3 f9cb 	bl	80001b0 <__adddf3>
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	468a      	mov	sl, r1
 800ce1e:	e777      	b.n	800cd10 <_strtod_l+0xaa8>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ce28:	e7e3      	b.n	800cdf2 <_strtod_l+0xb8a>
 800ce2a:	a30d      	add	r3, pc, #52	; (adr r3, 800ce60 <_strtod_l+0xbf8>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f7f3 fde6 	bl	8000a00 <__aeabi_dcmplt>
 800ce34:	e79f      	b.n	800cd76 <_strtod_l+0xb0e>
 800ce36:	2300      	movs	r3, #0
 800ce38:	930d      	str	r3, [sp, #52]	; 0x34
 800ce3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce3e:	6013      	str	r3, [r2, #0]
 800ce40:	f7ff ba55 	b.w	800c2ee <_strtod_l+0x86>
 800ce44:	2b65      	cmp	r3, #101	; 0x65
 800ce46:	f04f 0200 	mov.w	r2, #0
 800ce4a:	f43f ab42 	beq.w	800c4d2 <_strtod_l+0x26a>
 800ce4e:	2101      	movs	r1, #1
 800ce50:	4614      	mov	r4, r2
 800ce52:	9105      	str	r1, [sp, #20]
 800ce54:	f7ff babf 	b.w	800c3d6 <_strtod_l+0x16e>
 800ce58:	ffc00000 	.word	0xffc00000
 800ce5c:	41dfffff 	.word	0x41dfffff
 800ce60:	94a03595 	.word	0x94a03595
 800ce64:	3fcfffff 	.word	0x3fcfffff

0800ce68 <strtof>:
 800ce68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6c:	4e21      	ldr	r6, [pc, #132]	; (800cef4 <strtof+0x8c>)
 800ce6e:	4a22      	ldr	r2, [pc, #136]	; (800cef8 <strtof+0x90>)
 800ce70:	6834      	ldr	r4, [r6, #0]
 800ce72:	6a23      	ldr	r3, [r4, #32]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	bf08      	it	eq
 800ce78:	4613      	moveq	r3, r2
 800ce7a:	460a      	mov	r2, r1
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f7ff f9f2 	bl	800c268 <_strtod_l>
 800ce84:	4605      	mov	r5, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	4621      	mov	r1, r4
 800ce90:	f7f3 fdde 	bl	8000a50 <__aeabi_dcmpun>
 800ce94:	b120      	cbz	r0, 800cea0 <strtof+0x38>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9c:	f001 b8b2 	b.w	800e004 <nanf>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f7f3 fe32 	bl	8000b0c <__aeabi_d2f>
 800cea8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800ceac:	4607      	mov	r7, r0
 800ceae:	4913      	ldr	r1, [pc, #76]	; (800cefc <strtof+0x94>)
 800ceb0:	4640      	mov	r0, r8
 800ceb2:	f7f3 fef1 	bl	8000c98 <__aeabi_fcmpun>
 800ceb6:	b9c8      	cbnz	r0, 800ceec <strtof+0x84>
 800ceb8:	4910      	ldr	r1, [pc, #64]	; (800cefc <strtof+0x94>)
 800ceba:	4640      	mov	r0, r8
 800cebc:	f7f3 fece 	bl	8000c5c <__aeabi_fcmple>
 800cec0:	b9a0      	cbnz	r0, 800ceec <strtof+0x84>
 800cec2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cec6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceca:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <strtof+0x98>)
 800cecc:	4628      	mov	r0, r5
 800cece:	4621      	mov	r1, r4
 800ced0:	f7f3 fdbe 	bl	8000a50 <__aeabi_dcmpun>
 800ced4:	b938      	cbnz	r0, 800cee6 <strtof+0x7e>
 800ced6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceda:	4b09      	ldr	r3, [pc, #36]	; (800cf00 <strtof+0x98>)
 800cedc:	4628      	mov	r0, r5
 800cede:	4621      	mov	r1, r4
 800cee0:	f7f3 fd98 	bl	8000a14 <__aeabi_dcmple>
 800cee4:	b110      	cbz	r0, 800ceec <strtof+0x84>
 800cee6:	2222      	movs	r2, #34	; 0x22
 800cee8:	6833      	ldr	r3, [r6, #0]
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	4638      	mov	r0, r7
 800ceee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef2:	bf00      	nop
 800cef4:	20000078 	.word	0x20000078
 800cef8:	200000dc 	.word	0x200000dc
 800cefc:	7f7fffff 	.word	0x7f7fffff
 800cf00:	7fefffff 	.word	0x7fefffff

0800cf04 <_strtol_l.isra.0>:
 800cf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf08:	4680      	mov	r8, r0
 800cf0a:	4689      	mov	r9, r1
 800cf0c:	4692      	mov	sl, r2
 800cf0e:	461e      	mov	r6, r3
 800cf10:	460f      	mov	r7, r1
 800cf12:	463d      	mov	r5, r7
 800cf14:	9808      	ldr	r0, [sp, #32]
 800cf16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf1a:	f000 fbeb 	bl	800d6f4 <__locale_ctype_ptr_l>
 800cf1e:	4420      	add	r0, r4
 800cf20:	7843      	ldrb	r3, [r0, #1]
 800cf22:	f013 0308 	ands.w	r3, r3, #8
 800cf26:	d132      	bne.n	800cf8e <_strtol_l.isra.0+0x8a>
 800cf28:	2c2d      	cmp	r4, #45	; 0x2d
 800cf2a:	d132      	bne.n	800cf92 <_strtol_l.isra.0+0x8e>
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	787c      	ldrb	r4, [r7, #1]
 800cf30:	1cbd      	adds	r5, r7, #2
 800cf32:	2e00      	cmp	r6, #0
 800cf34:	d05d      	beq.n	800cff2 <_strtol_l.isra.0+0xee>
 800cf36:	2e10      	cmp	r6, #16
 800cf38:	d109      	bne.n	800cf4e <_strtol_l.isra.0+0x4a>
 800cf3a:	2c30      	cmp	r4, #48	; 0x30
 800cf3c:	d107      	bne.n	800cf4e <_strtol_l.isra.0+0x4a>
 800cf3e:	782b      	ldrb	r3, [r5, #0]
 800cf40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf44:	2b58      	cmp	r3, #88	; 0x58
 800cf46:	d14f      	bne.n	800cfe8 <_strtol_l.isra.0+0xe4>
 800cf48:	2610      	movs	r6, #16
 800cf4a:	786c      	ldrb	r4, [r5, #1]
 800cf4c:	3502      	adds	r5, #2
 800cf4e:	2a00      	cmp	r2, #0
 800cf50:	bf14      	ite	ne
 800cf52:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cf56:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cf5a:	2700      	movs	r7, #0
 800cf5c:	fbb1 fcf6 	udiv	ip, r1, r6
 800cf60:	4638      	mov	r0, r7
 800cf62:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cf66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cf6a:	2b09      	cmp	r3, #9
 800cf6c:	d817      	bhi.n	800cf9e <_strtol_l.isra.0+0x9a>
 800cf6e:	461c      	mov	r4, r3
 800cf70:	42a6      	cmp	r6, r4
 800cf72:	dd23      	ble.n	800cfbc <_strtol_l.isra.0+0xb8>
 800cf74:	1c7b      	adds	r3, r7, #1
 800cf76:	d007      	beq.n	800cf88 <_strtol_l.isra.0+0x84>
 800cf78:	4584      	cmp	ip, r0
 800cf7a:	d31c      	bcc.n	800cfb6 <_strtol_l.isra.0+0xb2>
 800cf7c:	d101      	bne.n	800cf82 <_strtol_l.isra.0+0x7e>
 800cf7e:	45a6      	cmp	lr, r4
 800cf80:	db19      	blt.n	800cfb6 <_strtol_l.isra.0+0xb2>
 800cf82:	2701      	movs	r7, #1
 800cf84:	fb00 4006 	mla	r0, r0, r6, r4
 800cf88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf8c:	e7eb      	b.n	800cf66 <_strtol_l.isra.0+0x62>
 800cf8e:	462f      	mov	r7, r5
 800cf90:	e7bf      	b.n	800cf12 <_strtol_l.isra.0+0xe>
 800cf92:	2c2b      	cmp	r4, #43	; 0x2b
 800cf94:	bf04      	itt	eq
 800cf96:	1cbd      	addeq	r5, r7, #2
 800cf98:	787c      	ldrbeq	r4, [r7, #1]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	e7c9      	b.n	800cf32 <_strtol_l.isra.0+0x2e>
 800cf9e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cfa2:	2b19      	cmp	r3, #25
 800cfa4:	d801      	bhi.n	800cfaa <_strtol_l.isra.0+0xa6>
 800cfa6:	3c37      	subs	r4, #55	; 0x37
 800cfa8:	e7e2      	b.n	800cf70 <_strtol_l.isra.0+0x6c>
 800cfaa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cfae:	2b19      	cmp	r3, #25
 800cfb0:	d804      	bhi.n	800cfbc <_strtol_l.isra.0+0xb8>
 800cfb2:	3c57      	subs	r4, #87	; 0x57
 800cfb4:	e7dc      	b.n	800cf70 <_strtol_l.isra.0+0x6c>
 800cfb6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfba:	e7e5      	b.n	800cf88 <_strtol_l.isra.0+0x84>
 800cfbc:	1c7b      	adds	r3, r7, #1
 800cfbe:	d108      	bne.n	800cfd2 <_strtol_l.isra.0+0xce>
 800cfc0:	2322      	movs	r3, #34	; 0x22
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	f8c8 3000 	str.w	r3, [r8]
 800cfc8:	f1ba 0f00 	cmp.w	sl, #0
 800cfcc:	d107      	bne.n	800cfde <_strtol_l.isra.0+0xda>
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	b102      	cbz	r2, 800cfd6 <_strtol_l.isra.0+0xd2>
 800cfd4:	4240      	negs	r0, r0
 800cfd6:	f1ba 0f00 	cmp.w	sl, #0
 800cfda:	d0f8      	beq.n	800cfce <_strtol_l.isra.0+0xca>
 800cfdc:	b10f      	cbz	r7, 800cfe2 <_strtol_l.isra.0+0xde>
 800cfde:	f105 39ff 	add.w	r9, r5, #4294967295
 800cfe2:	f8ca 9000 	str.w	r9, [sl]
 800cfe6:	e7f2      	b.n	800cfce <_strtol_l.isra.0+0xca>
 800cfe8:	2430      	movs	r4, #48	; 0x30
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d1af      	bne.n	800cf4e <_strtol_l.isra.0+0x4a>
 800cfee:	2608      	movs	r6, #8
 800cff0:	e7ad      	b.n	800cf4e <_strtol_l.isra.0+0x4a>
 800cff2:	2c30      	cmp	r4, #48	; 0x30
 800cff4:	d0a3      	beq.n	800cf3e <_strtol_l.isra.0+0x3a>
 800cff6:	260a      	movs	r6, #10
 800cff8:	e7a9      	b.n	800cf4e <_strtol_l.isra.0+0x4a>
	...

0800cffc <strtol>:
 800cffc:	4b08      	ldr	r3, [pc, #32]	; (800d020 <strtol+0x24>)
 800cffe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d000:	681c      	ldr	r4, [r3, #0]
 800d002:	4d08      	ldr	r5, [pc, #32]	; (800d024 <strtol+0x28>)
 800d004:	6a23      	ldr	r3, [r4, #32]
 800d006:	2b00      	cmp	r3, #0
 800d008:	bf08      	it	eq
 800d00a:	462b      	moveq	r3, r5
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	4613      	mov	r3, r2
 800d010:	460a      	mov	r2, r1
 800d012:	4601      	mov	r1, r0
 800d014:	4620      	mov	r0, r4
 800d016:	f7ff ff75 	bl	800cf04 <_strtol_l.isra.0>
 800d01a:	b003      	add	sp, #12
 800d01c:	bd30      	pop	{r4, r5, pc}
 800d01e:	bf00      	nop
 800d020:	20000078 	.word	0x20000078
 800d024:	200000dc 	.word	0x200000dc

0800d028 <__utoa>:
 800d028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02a:	b08b      	sub	sp, #44	; 0x2c
 800d02c:	4605      	mov	r5, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	466e      	mov	r6, sp
 800d032:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <__utoa+0x78>)
 800d034:	f103 0c20 	add.w	ip, r3, #32
 800d038:	4637      	mov	r7, r6
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	6859      	ldr	r1, [r3, #4]
 800d03e:	3308      	adds	r3, #8
 800d040:	c703      	stmia	r7!, {r0, r1}
 800d042:	4563      	cmp	r3, ip
 800d044:	463e      	mov	r6, r7
 800d046:	d1f7      	bne.n	800d038 <__utoa+0x10>
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	791b      	ldrb	r3, [r3, #4]
 800d04c:	6038      	str	r0, [r7, #0]
 800d04e:	713b      	strb	r3, [r7, #4]
 800d050:	1e93      	subs	r3, r2, #2
 800d052:	2b22      	cmp	r3, #34	; 0x22
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	d904      	bls.n	800d064 <__utoa+0x3c>
 800d05a:	7023      	strb	r3, [r4, #0]
 800d05c:	461c      	mov	r4, r3
 800d05e:	4620      	mov	r0, r4
 800d060:	b00b      	add	sp, #44	; 0x2c
 800d062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d064:	1e66      	subs	r6, r4, #1
 800d066:	fbb5 f0f2 	udiv	r0, r5, r2
 800d06a:	fb02 5510 	mls	r5, r2, r0, r5
 800d06e:	af0a      	add	r7, sp, #40	; 0x28
 800d070:	443d      	add	r5, r7
 800d072:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800d076:	1c59      	adds	r1, r3, #1
 800d078:	f806 5f01 	strb.w	r5, [r6, #1]!
 800d07c:	4605      	mov	r5, r0
 800d07e:	b968      	cbnz	r0, 800d09c <__utoa+0x74>
 800d080:	4622      	mov	r2, r4
 800d082:	5460      	strb	r0, [r4, r1]
 800d084:	4423      	add	r3, r4
 800d086:	1b19      	subs	r1, r3, r4
 800d088:	1b10      	subs	r0, r2, r4
 800d08a:	4281      	cmp	r1, r0
 800d08c:	dde7      	ble.n	800d05e <__utoa+0x36>
 800d08e:	7811      	ldrb	r1, [r2, #0]
 800d090:	7818      	ldrb	r0, [r3, #0]
 800d092:	f802 0b01 	strb.w	r0, [r2], #1
 800d096:	f803 1901 	strb.w	r1, [r3], #-1
 800d09a:	e7f4      	b.n	800d086 <__utoa+0x5e>
 800d09c:	460b      	mov	r3, r1
 800d09e:	e7e2      	b.n	800d066 <__utoa+0x3e>
 800d0a0:	0800e2a0 	.word	0x0800e2a0

0800d0a4 <rshift>:
 800d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0a6:	6906      	ldr	r6, [r0, #16]
 800d0a8:	114b      	asrs	r3, r1, #5
 800d0aa:	429e      	cmp	r6, r3
 800d0ac:	f100 0414 	add.w	r4, r0, #20
 800d0b0:	dd31      	ble.n	800d116 <rshift+0x72>
 800d0b2:	f011 011f 	ands.w	r1, r1, #31
 800d0b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d0ba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d0be:	d108      	bne.n	800d0d2 <rshift+0x2e>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	42b2      	cmp	r2, r6
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	d211      	bcs.n	800d0ec <rshift+0x48>
 800d0c8:	f852 3b04 	ldr.w	r3, [r2], #4
 800d0cc:	f841 3b04 	str.w	r3, [r1], #4
 800d0d0:	e7f7      	b.n	800d0c2 <rshift+0x1e>
 800d0d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d0d6:	4623      	mov	r3, r4
 800d0d8:	f1c1 0c20 	rsb	ip, r1, #32
 800d0dc:	40cd      	lsrs	r5, r1
 800d0de:	3204      	adds	r2, #4
 800d0e0:	42b2      	cmp	r2, r6
 800d0e2:	4617      	mov	r7, r2
 800d0e4:	d30d      	bcc.n	800d102 <rshift+0x5e>
 800d0e6:	601d      	str	r5, [r3, #0]
 800d0e8:	b105      	cbz	r5, 800d0ec <rshift+0x48>
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	eba3 0204 	sub.w	r2, r3, r4
 800d0f2:	bf08      	it	eq
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0fa:	6102      	str	r2, [r0, #16]
 800d0fc:	bf08      	it	eq
 800d0fe:	6143      	streq	r3, [r0, #20]
 800d100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d102:	683f      	ldr	r7, [r7, #0]
 800d104:	fa07 f70c 	lsl.w	r7, r7, ip
 800d108:	433d      	orrs	r5, r7
 800d10a:	f843 5b04 	str.w	r5, [r3], #4
 800d10e:	f852 5b04 	ldr.w	r5, [r2], #4
 800d112:	40cd      	lsrs	r5, r1
 800d114:	e7e4      	b.n	800d0e0 <rshift+0x3c>
 800d116:	4623      	mov	r3, r4
 800d118:	e7e8      	b.n	800d0ec <rshift+0x48>

0800d11a <__hexdig_fun>:
 800d11a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d11e:	2b09      	cmp	r3, #9
 800d120:	d802      	bhi.n	800d128 <__hexdig_fun+0xe>
 800d122:	3820      	subs	r0, #32
 800d124:	b2c0      	uxtb	r0, r0
 800d126:	4770      	bx	lr
 800d128:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d12c:	2b05      	cmp	r3, #5
 800d12e:	d801      	bhi.n	800d134 <__hexdig_fun+0x1a>
 800d130:	3847      	subs	r0, #71	; 0x47
 800d132:	e7f7      	b.n	800d124 <__hexdig_fun+0xa>
 800d134:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d138:	2b05      	cmp	r3, #5
 800d13a:	d801      	bhi.n	800d140 <__hexdig_fun+0x26>
 800d13c:	3827      	subs	r0, #39	; 0x27
 800d13e:	e7f1      	b.n	800d124 <__hexdig_fun+0xa>
 800d140:	2000      	movs	r0, #0
 800d142:	4770      	bx	lr

0800d144 <__gethex>:
 800d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	b08b      	sub	sp, #44	; 0x2c
 800d14a:	9002      	str	r0, [sp, #8]
 800d14c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d14e:	468a      	mov	sl, r1
 800d150:	4690      	mov	r8, r2
 800d152:	9306      	str	r3, [sp, #24]
 800d154:	f000 fad1 	bl	800d6fa <__localeconv_l>
 800d158:	6803      	ldr	r3, [r0, #0]
 800d15a:	f04f 0b00 	mov.w	fp, #0
 800d15e:	4618      	mov	r0, r3
 800d160:	9303      	str	r3, [sp, #12]
 800d162:	f7f3 f817 	bl	8000194 <strlen>
 800d166:	9b03      	ldr	r3, [sp, #12]
 800d168:	9001      	str	r0, [sp, #4]
 800d16a:	4403      	add	r3, r0
 800d16c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	f8da 3000 	ldr.w	r3, [sl]
 800d176:	3302      	adds	r3, #2
 800d178:	461f      	mov	r7, r3
 800d17a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d17e:	2830      	cmp	r0, #48	; 0x30
 800d180:	d06c      	beq.n	800d25c <__gethex+0x118>
 800d182:	f7ff ffca 	bl	800d11a <__hexdig_fun>
 800d186:	4604      	mov	r4, r0
 800d188:	2800      	cmp	r0, #0
 800d18a:	d16a      	bne.n	800d262 <__gethex+0x11e>
 800d18c:	9a01      	ldr	r2, [sp, #4]
 800d18e:	9903      	ldr	r1, [sp, #12]
 800d190:	4638      	mov	r0, r7
 800d192:	f000 ff3b 	bl	800e00c <strncmp>
 800d196:	2800      	cmp	r0, #0
 800d198:	d166      	bne.n	800d268 <__gethex+0x124>
 800d19a:	9b01      	ldr	r3, [sp, #4]
 800d19c:	5cf8      	ldrb	r0, [r7, r3]
 800d19e:	18fe      	adds	r6, r7, r3
 800d1a0:	f7ff ffbb 	bl	800d11a <__hexdig_fun>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d062      	beq.n	800d26e <__gethex+0x12a>
 800d1a8:	4633      	mov	r3, r6
 800d1aa:	7818      	ldrb	r0, [r3, #0]
 800d1ac:	461f      	mov	r7, r3
 800d1ae:	2830      	cmp	r0, #48	; 0x30
 800d1b0:	f103 0301 	add.w	r3, r3, #1
 800d1b4:	d0f9      	beq.n	800d1aa <__gethex+0x66>
 800d1b6:	f7ff ffb0 	bl	800d11a <__hexdig_fun>
 800d1ba:	fab0 f580 	clz	r5, r0
 800d1be:	4634      	mov	r4, r6
 800d1c0:	f04f 0b01 	mov.w	fp, #1
 800d1c4:	096d      	lsrs	r5, r5, #5
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	7830      	ldrb	r0, [r6, #0]
 800d1cc:	3201      	adds	r2, #1
 800d1ce:	f7ff ffa4 	bl	800d11a <__hexdig_fun>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d1f8      	bne.n	800d1c8 <__gethex+0x84>
 800d1d6:	9a01      	ldr	r2, [sp, #4]
 800d1d8:	9903      	ldr	r1, [sp, #12]
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f000 ff16 	bl	800e00c <strncmp>
 800d1e0:	b950      	cbnz	r0, 800d1f8 <__gethex+0xb4>
 800d1e2:	b954      	cbnz	r4, 800d1fa <__gethex+0xb6>
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	18f4      	adds	r4, r6, r3
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	4616      	mov	r6, r2
 800d1ec:	7830      	ldrb	r0, [r6, #0]
 800d1ee:	3201      	adds	r2, #1
 800d1f0:	f7ff ff93 	bl	800d11a <__hexdig_fun>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d1f8      	bne.n	800d1ea <__gethex+0xa6>
 800d1f8:	b10c      	cbz	r4, 800d1fe <__gethex+0xba>
 800d1fa:	1ba4      	subs	r4, r4, r6
 800d1fc:	00a4      	lsls	r4, r4, #2
 800d1fe:	7833      	ldrb	r3, [r6, #0]
 800d200:	2b50      	cmp	r3, #80	; 0x50
 800d202:	d001      	beq.n	800d208 <__gethex+0xc4>
 800d204:	2b70      	cmp	r3, #112	; 0x70
 800d206:	d140      	bne.n	800d28a <__gethex+0x146>
 800d208:	7873      	ldrb	r3, [r6, #1]
 800d20a:	2b2b      	cmp	r3, #43	; 0x2b
 800d20c:	d031      	beq.n	800d272 <__gethex+0x12e>
 800d20e:	2b2d      	cmp	r3, #45	; 0x2d
 800d210:	d033      	beq.n	800d27a <__gethex+0x136>
 800d212:	f04f 0900 	mov.w	r9, #0
 800d216:	1c71      	adds	r1, r6, #1
 800d218:	7808      	ldrb	r0, [r1, #0]
 800d21a:	f7ff ff7e 	bl	800d11a <__hexdig_fun>
 800d21e:	1e43      	subs	r3, r0, #1
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b18      	cmp	r3, #24
 800d224:	d831      	bhi.n	800d28a <__gethex+0x146>
 800d226:	f1a0 0210 	sub.w	r2, r0, #16
 800d22a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d22e:	f7ff ff74 	bl	800d11a <__hexdig_fun>
 800d232:	1e43      	subs	r3, r0, #1
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b18      	cmp	r3, #24
 800d238:	d922      	bls.n	800d280 <__gethex+0x13c>
 800d23a:	f1b9 0f00 	cmp.w	r9, #0
 800d23e:	d000      	beq.n	800d242 <__gethex+0xfe>
 800d240:	4252      	negs	r2, r2
 800d242:	4414      	add	r4, r2
 800d244:	f8ca 1000 	str.w	r1, [sl]
 800d248:	b30d      	cbz	r5, 800d28e <__gethex+0x14a>
 800d24a:	f1bb 0f00 	cmp.w	fp, #0
 800d24e:	bf0c      	ite	eq
 800d250:	2706      	moveq	r7, #6
 800d252:	2700      	movne	r7, #0
 800d254:	4638      	mov	r0, r7
 800d256:	b00b      	add	sp, #44	; 0x2c
 800d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25c:	f10b 0b01 	add.w	fp, fp, #1
 800d260:	e78a      	b.n	800d178 <__gethex+0x34>
 800d262:	2500      	movs	r5, #0
 800d264:	462c      	mov	r4, r5
 800d266:	e7ae      	b.n	800d1c6 <__gethex+0x82>
 800d268:	463e      	mov	r6, r7
 800d26a:	2501      	movs	r5, #1
 800d26c:	e7c7      	b.n	800d1fe <__gethex+0xba>
 800d26e:	4604      	mov	r4, r0
 800d270:	e7fb      	b.n	800d26a <__gethex+0x126>
 800d272:	f04f 0900 	mov.w	r9, #0
 800d276:	1cb1      	adds	r1, r6, #2
 800d278:	e7ce      	b.n	800d218 <__gethex+0xd4>
 800d27a:	f04f 0901 	mov.w	r9, #1
 800d27e:	e7fa      	b.n	800d276 <__gethex+0x132>
 800d280:	230a      	movs	r3, #10
 800d282:	fb03 0202 	mla	r2, r3, r2, r0
 800d286:	3a10      	subs	r2, #16
 800d288:	e7cf      	b.n	800d22a <__gethex+0xe6>
 800d28a:	4631      	mov	r1, r6
 800d28c:	e7da      	b.n	800d244 <__gethex+0x100>
 800d28e:	4629      	mov	r1, r5
 800d290:	1bf3      	subs	r3, r6, r7
 800d292:	3b01      	subs	r3, #1
 800d294:	2b07      	cmp	r3, #7
 800d296:	dc49      	bgt.n	800d32c <__gethex+0x1e8>
 800d298:	9802      	ldr	r0, [sp, #8]
 800d29a:	f000 fa42 	bl	800d722 <_Balloc>
 800d29e:	f04f 0b00 	mov.w	fp, #0
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	46da      	mov	sl, fp
 800d2a6:	9b01      	ldr	r3, [sp, #4]
 800d2a8:	f100 0914 	add.w	r9, r0, #20
 800d2ac:	f1c3 0301 	rsb	r3, r3, #1
 800d2b0:	f8cd 9010 	str.w	r9, [sp, #16]
 800d2b4:	9308      	str	r3, [sp, #32]
 800d2b6:	42b7      	cmp	r7, r6
 800d2b8:	d33b      	bcc.n	800d332 <__gethex+0x1ee>
 800d2ba:	9804      	ldr	r0, [sp, #16]
 800d2bc:	f840 ab04 	str.w	sl, [r0], #4
 800d2c0:	eba0 0009 	sub.w	r0, r0, r9
 800d2c4:	1080      	asrs	r0, r0, #2
 800d2c6:	6128      	str	r0, [r5, #16]
 800d2c8:	0147      	lsls	r7, r0, #5
 800d2ca:	4650      	mov	r0, sl
 800d2cc:	f000 faed 	bl	800d8aa <__hi0bits>
 800d2d0:	f8d8 6000 	ldr.w	r6, [r8]
 800d2d4:	1a3f      	subs	r7, r7, r0
 800d2d6:	42b7      	cmp	r7, r6
 800d2d8:	dd64      	ble.n	800d3a4 <__gethex+0x260>
 800d2da:	1bbf      	subs	r7, r7, r6
 800d2dc:	4639      	mov	r1, r7
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f000 fdf7 	bl	800ded2 <__any_on>
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	b178      	cbz	r0, 800d308 <__gethex+0x1c4>
 800d2e8:	f04f 0a01 	mov.w	sl, #1
 800d2ec:	1e7b      	subs	r3, r7, #1
 800d2ee:	1159      	asrs	r1, r3, #5
 800d2f0:	f003 021f 	and.w	r2, r3, #31
 800d2f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d2f8:	fa0a f202 	lsl.w	r2, sl, r2
 800d2fc:	420a      	tst	r2, r1
 800d2fe:	d003      	beq.n	800d308 <__gethex+0x1c4>
 800d300:	4553      	cmp	r3, sl
 800d302:	dc46      	bgt.n	800d392 <__gethex+0x24e>
 800d304:	f04f 0a02 	mov.w	sl, #2
 800d308:	4639      	mov	r1, r7
 800d30a:	4628      	mov	r0, r5
 800d30c:	f7ff feca 	bl	800d0a4 <rshift>
 800d310:	443c      	add	r4, r7
 800d312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d316:	42a3      	cmp	r3, r4
 800d318:	da52      	bge.n	800d3c0 <__gethex+0x27c>
 800d31a:	4629      	mov	r1, r5
 800d31c:	9802      	ldr	r0, [sp, #8]
 800d31e:	f000 fa34 	bl	800d78a <_Bfree>
 800d322:	2300      	movs	r3, #0
 800d324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d326:	27a3      	movs	r7, #163	; 0xa3
 800d328:	6013      	str	r3, [r2, #0]
 800d32a:	e793      	b.n	800d254 <__gethex+0x110>
 800d32c:	3101      	adds	r1, #1
 800d32e:	105b      	asrs	r3, r3, #1
 800d330:	e7b0      	b.n	800d294 <__gethex+0x150>
 800d332:	1e73      	subs	r3, r6, #1
 800d334:	9305      	str	r3, [sp, #20]
 800d336:	9a07      	ldr	r2, [sp, #28]
 800d338:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d018      	beq.n	800d372 <__gethex+0x22e>
 800d340:	f1bb 0f20 	cmp.w	fp, #32
 800d344:	d107      	bne.n	800d356 <__gethex+0x212>
 800d346:	9b04      	ldr	r3, [sp, #16]
 800d348:	f8c3 a000 	str.w	sl, [r3]
 800d34c:	f04f 0a00 	mov.w	sl, #0
 800d350:	46d3      	mov	fp, sl
 800d352:	3304      	adds	r3, #4
 800d354:	9304      	str	r3, [sp, #16]
 800d356:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d35a:	f7ff fede 	bl	800d11a <__hexdig_fun>
 800d35e:	f000 000f 	and.w	r0, r0, #15
 800d362:	fa00 f00b 	lsl.w	r0, r0, fp
 800d366:	ea4a 0a00 	orr.w	sl, sl, r0
 800d36a:	f10b 0b04 	add.w	fp, fp, #4
 800d36e:	9b05      	ldr	r3, [sp, #20]
 800d370:	e00d      	b.n	800d38e <__gethex+0x24a>
 800d372:	9b05      	ldr	r3, [sp, #20]
 800d374:	9a08      	ldr	r2, [sp, #32]
 800d376:	4413      	add	r3, r2
 800d378:	42bb      	cmp	r3, r7
 800d37a:	d3e1      	bcc.n	800d340 <__gethex+0x1fc>
 800d37c:	4618      	mov	r0, r3
 800d37e:	9a01      	ldr	r2, [sp, #4]
 800d380:	9903      	ldr	r1, [sp, #12]
 800d382:	9309      	str	r3, [sp, #36]	; 0x24
 800d384:	f000 fe42 	bl	800e00c <strncmp>
 800d388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d1d8      	bne.n	800d340 <__gethex+0x1fc>
 800d38e:	461e      	mov	r6, r3
 800d390:	e791      	b.n	800d2b6 <__gethex+0x172>
 800d392:	1eb9      	subs	r1, r7, #2
 800d394:	4628      	mov	r0, r5
 800d396:	f000 fd9c 	bl	800ded2 <__any_on>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0b2      	beq.n	800d304 <__gethex+0x1c0>
 800d39e:	f04f 0a03 	mov.w	sl, #3
 800d3a2:	e7b1      	b.n	800d308 <__gethex+0x1c4>
 800d3a4:	da09      	bge.n	800d3ba <__gethex+0x276>
 800d3a6:	1bf7      	subs	r7, r6, r7
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	463a      	mov	r2, r7
 800d3ac:	9802      	ldr	r0, [sp, #8]
 800d3ae:	f000 fbb7 	bl	800db20 <__lshift>
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	1be4      	subs	r4, r4, r7
 800d3b6:	f100 0914 	add.w	r9, r0, #20
 800d3ba:	f04f 0a00 	mov.w	sl, #0
 800d3be:	e7a8      	b.n	800d312 <__gethex+0x1ce>
 800d3c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d3c4:	42a0      	cmp	r0, r4
 800d3c6:	dd6b      	ble.n	800d4a0 <__gethex+0x35c>
 800d3c8:	1b04      	subs	r4, r0, r4
 800d3ca:	42a6      	cmp	r6, r4
 800d3cc:	dc2e      	bgt.n	800d42c <__gethex+0x2e8>
 800d3ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d022      	beq.n	800d41c <__gethex+0x2d8>
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d024      	beq.n	800d424 <__gethex+0x2e0>
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d115      	bne.n	800d40a <__gethex+0x2c6>
 800d3de:	42a6      	cmp	r6, r4
 800d3e0:	d113      	bne.n	800d40a <__gethex+0x2c6>
 800d3e2:	2e01      	cmp	r6, #1
 800d3e4:	dc0b      	bgt.n	800d3fe <__gethex+0x2ba>
 800d3e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3ea:	9a06      	ldr	r2, [sp, #24]
 800d3ec:	2762      	movs	r7, #98	; 0x62
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	612b      	str	r3, [r5, #16]
 800d3f4:	f8c9 3000 	str.w	r3, [r9]
 800d3f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3fa:	601d      	str	r5, [r3, #0]
 800d3fc:	e72a      	b.n	800d254 <__gethex+0x110>
 800d3fe:	1e71      	subs	r1, r6, #1
 800d400:	4628      	mov	r0, r5
 800d402:	f000 fd66 	bl	800ded2 <__any_on>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1ed      	bne.n	800d3e6 <__gethex+0x2a2>
 800d40a:	4629      	mov	r1, r5
 800d40c:	9802      	ldr	r0, [sp, #8]
 800d40e:	f000 f9bc 	bl	800d78a <_Bfree>
 800d412:	2300      	movs	r3, #0
 800d414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d416:	2750      	movs	r7, #80	; 0x50
 800d418:	6013      	str	r3, [r2, #0]
 800d41a:	e71b      	b.n	800d254 <__gethex+0x110>
 800d41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d0e1      	beq.n	800d3e6 <__gethex+0x2a2>
 800d422:	e7f2      	b.n	800d40a <__gethex+0x2c6>
 800d424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1dd      	bne.n	800d3e6 <__gethex+0x2a2>
 800d42a:	e7ee      	b.n	800d40a <__gethex+0x2c6>
 800d42c:	1e67      	subs	r7, r4, #1
 800d42e:	f1ba 0f00 	cmp.w	sl, #0
 800d432:	d132      	bne.n	800d49a <__gethex+0x356>
 800d434:	b127      	cbz	r7, 800d440 <__gethex+0x2fc>
 800d436:	4639      	mov	r1, r7
 800d438:	4628      	mov	r0, r5
 800d43a:	f000 fd4a 	bl	800ded2 <__any_on>
 800d43e:	4682      	mov	sl, r0
 800d440:	2301      	movs	r3, #1
 800d442:	117a      	asrs	r2, r7, #5
 800d444:	f007 071f 	and.w	r7, r7, #31
 800d448:	fa03 f707 	lsl.w	r7, r3, r7
 800d44c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d450:	4621      	mov	r1, r4
 800d452:	421f      	tst	r7, r3
 800d454:	f04f 0702 	mov.w	r7, #2
 800d458:	4628      	mov	r0, r5
 800d45a:	bf18      	it	ne
 800d45c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d460:	1b36      	subs	r6, r6, r4
 800d462:	f7ff fe1f 	bl	800d0a4 <rshift>
 800d466:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d46a:	f1ba 0f00 	cmp.w	sl, #0
 800d46e:	d048      	beq.n	800d502 <__gethex+0x3be>
 800d470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d474:	2b02      	cmp	r3, #2
 800d476:	d015      	beq.n	800d4a4 <__gethex+0x360>
 800d478:	2b03      	cmp	r3, #3
 800d47a:	d017      	beq.n	800d4ac <__gethex+0x368>
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d109      	bne.n	800d494 <__gethex+0x350>
 800d480:	f01a 0f02 	tst.w	sl, #2
 800d484:	d006      	beq.n	800d494 <__gethex+0x350>
 800d486:	f8d9 3000 	ldr.w	r3, [r9]
 800d48a:	ea4a 0a03 	orr.w	sl, sl, r3
 800d48e:	f01a 0f01 	tst.w	sl, #1
 800d492:	d10e      	bne.n	800d4b2 <__gethex+0x36e>
 800d494:	f047 0710 	orr.w	r7, r7, #16
 800d498:	e033      	b.n	800d502 <__gethex+0x3be>
 800d49a:	f04f 0a01 	mov.w	sl, #1
 800d49e:	e7cf      	b.n	800d440 <__gethex+0x2fc>
 800d4a0:	2701      	movs	r7, #1
 800d4a2:	e7e2      	b.n	800d46a <__gethex+0x326>
 800d4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4a6:	f1c3 0301 	rsb	r3, r3, #1
 800d4aa:	9315      	str	r3, [sp, #84]	; 0x54
 800d4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d0f0      	beq.n	800d494 <__gethex+0x350>
 800d4b2:	f04f 0c00 	mov.w	ip, #0
 800d4b6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d4ba:	f105 0314 	add.w	r3, r5, #20
 800d4be:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d4c2:	eb03 010a 	add.w	r1, r3, sl
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d4d0:	d01c      	beq.n	800d50c <__gethex+0x3c8>
 800d4d2:	3201      	adds	r2, #1
 800d4d4:	6002      	str	r2, [r0, #0]
 800d4d6:	2f02      	cmp	r7, #2
 800d4d8:	f105 0314 	add.w	r3, r5, #20
 800d4dc:	d138      	bne.n	800d550 <__gethex+0x40c>
 800d4de:	f8d8 2000 	ldr.w	r2, [r8]
 800d4e2:	3a01      	subs	r2, #1
 800d4e4:	42b2      	cmp	r2, r6
 800d4e6:	d10a      	bne.n	800d4fe <__gethex+0x3ba>
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	1171      	asrs	r1, r6, #5
 800d4ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4f0:	f006 061f 	and.w	r6, r6, #31
 800d4f4:	fa02 f606 	lsl.w	r6, r2, r6
 800d4f8:	421e      	tst	r6, r3
 800d4fa:	bf18      	it	ne
 800d4fc:	4617      	movne	r7, r2
 800d4fe:	f047 0720 	orr.w	r7, r7, #32
 800d502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d504:	601d      	str	r5, [r3, #0]
 800d506:	9b06      	ldr	r3, [sp, #24]
 800d508:	601c      	str	r4, [r3, #0]
 800d50a:	e6a3      	b.n	800d254 <__gethex+0x110>
 800d50c:	4299      	cmp	r1, r3
 800d50e:	f843 cc04 	str.w	ip, [r3, #-4]
 800d512:	d8d8      	bhi.n	800d4c6 <__gethex+0x382>
 800d514:	68ab      	ldr	r3, [r5, #8]
 800d516:	4599      	cmp	r9, r3
 800d518:	db12      	blt.n	800d540 <__gethex+0x3fc>
 800d51a:	6869      	ldr	r1, [r5, #4]
 800d51c:	9802      	ldr	r0, [sp, #8]
 800d51e:	3101      	adds	r1, #1
 800d520:	f000 f8ff 	bl	800d722 <_Balloc>
 800d524:	4683      	mov	fp, r0
 800d526:	692a      	ldr	r2, [r5, #16]
 800d528:	f105 010c 	add.w	r1, r5, #12
 800d52c:	3202      	adds	r2, #2
 800d52e:	0092      	lsls	r2, r2, #2
 800d530:	300c      	adds	r0, #12
 800d532:	f7fe fe63 	bl	800c1fc <memcpy>
 800d536:	4629      	mov	r1, r5
 800d538:	9802      	ldr	r0, [sp, #8]
 800d53a:	f000 f926 	bl	800d78a <_Bfree>
 800d53e:	465d      	mov	r5, fp
 800d540:	692b      	ldr	r3, [r5, #16]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	612a      	str	r2, [r5, #16]
 800d546:	2201      	movs	r2, #1
 800d548:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d54c:	615a      	str	r2, [r3, #20]
 800d54e:	e7c2      	b.n	800d4d6 <__gethex+0x392>
 800d550:	692a      	ldr	r2, [r5, #16]
 800d552:	454a      	cmp	r2, r9
 800d554:	dd0b      	ble.n	800d56e <__gethex+0x42a>
 800d556:	2101      	movs	r1, #1
 800d558:	4628      	mov	r0, r5
 800d55a:	f7ff fda3 	bl	800d0a4 <rshift>
 800d55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d562:	3401      	adds	r4, #1
 800d564:	42a3      	cmp	r3, r4
 800d566:	f6ff aed8 	blt.w	800d31a <__gethex+0x1d6>
 800d56a:	2701      	movs	r7, #1
 800d56c:	e7c7      	b.n	800d4fe <__gethex+0x3ba>
 800d56e:	f016 061f 	ands.w	r6, r6, #31
 800d572:	d0fa      	beq.n	800d56a <__gethex+0x426>
 800d574:	449a      	add	sl, r3
 800d576:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d57a:	f000 f996 	bl	800d8aa <__hi0bits>
 800d57e:	f1c6 0620 	rsb	r6, r6, #32
 800d582:	42b0      	cmp	r0, r6
 800d584:	dbe7      	blt.n	800d556 <__gethex+0x412>
 800d586:	e7f0      	b.n	800d56a <__gethex+0x426>

0800d588 <L_shift>:
 800d588:	f1c2 0208 	rsb	r2, r2, #8
 800d58c:	0092      	lsls	r2, r2, #2
 800d58e:	b570      	push	{r4, r5, r6, lr}
 800d590:	f1c2 0620 	rsb	r6, r2, #32
 800d594:	6843      	ldr	r3, [r0, #4]
 800d596:	6804      	ldr	r4, [r0, #0]
 800d598:	fa03 f506 	lsl.w	r5, r3, r6
 800d59c:	432c      	orrs	r4, r5
 800d59e:	40d3      	lsrs	r3, r2
 800d5a0:	6004      	str	r4, [r0, #0]
 800d5a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d5a6:	4288      	cmp	r0, r1
 800d5a8:	d3f4      	bcc.n	800d594 <L_shift+0xc>
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}

0800d5ac <__match>:
 800d5ac:	b530      	push	{r4, r5, lr}
 800d5ae:	6803      	ldr	r3, [r0, #0]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5b6:	b914      	cbnz	r4, 800d5be <__match+0x12>
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	bd30      	pop	{r4, r5, pc}
 800d5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d5c6:	2d19      	cmp	r5, #25
 800d5c8:	bf98      	it	ls
 800d5ca:	3220      	addls	r2, #32
 800d5cc:	42a2      	cmp	r2, r4
 800d5ce:	d0f0      	beq.n	800d5b2 <__match+0x6>
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e7f3      	b.n	800d5bc <__match+0x10>

0800d5d4 <__hexnan>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	2500      	movs	r5, #0
 800d5da:	680b      	ldr	r3, [r1, #0]
 800d5dc:	4682      	mov	sl, r0
 800d5de:	115f      	asrs	r7, r3, #5
 800d5e0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d5e4:	f013 031f 	ands.w	r3, r3, #31
 800d5e8:	bf18      	it	ne
 800d5ea:	3704      	addne	r7, #4
 800d5ec:	1f3e      	subs	r6, r7, #4
 800d5ee:	4690      	mov	r8, r2
 800d5f0:	46b1      	mov	r9, r6
 800d5f2:	4634      	mov	r4, r6
 800d5f4:	46ab      	mov	fp, r5
 800d5f6:	b087      	sub	sp, #28
 800d5f8:	6801      	ldr	r1, [r0, #0]
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	f847 5c04 	str.w	r5, [r7, #-4]
 800d600:	9502      	str	r5, [sp, #8]
 800d602:	784a      	ldrb	r2, [r1, #1]
 800d604:	1c4b      	adds	r3, r1, #1
 800d606:	9303      	str	r3, [sp, #12]
 800d608:	b342      	cbz	r2, 800d65c <__hexnan+0x88>
 800d60a:	4610      	mov	r0, r2
 800d60c:	9105      	str	r1, [sp, #20]
 800d60e:	9204      	str	r2, [sp, #16]
 800d610:	f7ff fd83 	bl	800d11a <__hexdig_fun>
 800d614:	2800      	cmp	r0, #0
 800d616:	d143      	bne.n	800d6a0 <__hexnan+0xcc>
 800d618:	9a04      	ldr	r2, [sp, #16]
 800d61a:	9905      	ldr	r1, [sp, #20]
 800d61c:	2a20      	cmp	r2, #32
 800d61e:	d818      	bhi.n	800d652 <__hexnan+0x7e>
 800d620:	9b02      	ldr	r3, [sp, #8]
 800d622:	459b      	cmp	fp, r3
 800d624:	dd13      	ble.n	800d64e <__hexnan+0x7a>
 800d626:	454c      	cmp	r4, r9
 800d628:	d206      	bcs.n	800d638 <__hexnan+0x64>
 800d62a:	2d07      	cmp	r5, #7
 800d62c:	dc04      	bgt.n	800d638 <__hexnan+0x64>
 800d62e:	462a      	mov	r2, r5
 800d630:	4649      	mov	r1, r9
 800d632:	4620      	mov	r0, r4
 800d634:	f7ff ffa8 	bl	800d588 <L_shift>
 800d638:	4544      	cmp	r4, r8
 800d63a:	d944      	bls.n	800d6c6 <__hexnan+0xf2>
 800d63c:	2300      	movs	r3, #0
 800d63e:	f1a4 0904 	sub.w	r9, r4, #4
 800d642:	f844 3c04 	str.w	r3, [r4, #-4]
 800d646:	461d      	mov	r5, r3
 800d648:	464c      	mov	r4, r9
 800d64a:	f8cd b008 	str.w	fp, [sp, #8]
 800d64e:	9903      	ldr	r1, [sp, #12]
 800d650:	e7d7      	b.n	800d602 <__hexnan+0x2e>
 800d652:	2a29      	cmp	r2, #41	; 0x29
 800d654:	d14a      	bne.n	800d6ec <__hexnan+0x118>
 800d656:	3102      	adds	r1, #2
 800d658:	f8ca 1000 	str.w	r1, [sl]
 800d65c:	f1bb 0f00 	cmp.w	fp, #0
 800d660:	d044      	beq.n	800d6ec <__hexnan+0x118>
 800d662:	454c      	cmp	r4, r9
 800d664:	d206      	bcs.n	800d674 <__hexnan+0xa0>
 800d666:	2d07      	cmp	r5, #7
 800d668:	dc04      	bgt.n	800d674 <__hexnan+0xa0>
 800d66a:	462a      	mov	r2, r5
 800d66c:	4649      	mov	r1, r9
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff ff8a 	bl	800d588 <L_shift>
 800d674:	4544      	cmp	r4, r8
 800d676:	d928      	bls.n	800d6ca <__hexnan+0xf6>
 800d678:	4643      	mov	r3, r8
 800d67a:	f854 2b04 	ldr.w	r2, [r4], #4
 800d67e:	42a6      	cmp	r6, r4
 800d680:	f843 2b04 	str.w	r2, [r3], #4
 800d684:	d2f9      	bcs.n	800d67a <__hexnan+0xa6>
 800d686:	2200      	movs	r2, #0
 800d688:	f843 2b04 	str.w	r2, [r3], #4
 800d68c:	429e      	cmp	r6, r3
 800d68e:	d2fb      	bcs.n	800d688 <__hexnan+0xb4>
 800d690:	6833      	ldr	r3, [r6, #0]
 800d692:	b91b      	cbnz	r3, 800d69c <__hexnan+0xc8>
 800d694:	4546      	cmp	r6, r8
 800d696:	d127      	bne.n	800d6e8 <__hexnan+0x114>
 800d698:	2301      	movs	r3, #1
 800d69a:	6033      	str	r3, [r6, #0]
 800d69c:	2005      	movs	r0, #5
 800d69e:	e026      	b.n	800d6ee <__hexnan+0x11a>
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	2d08      	cmp	r5, #8
 800d6a4:	f10b 0b01 	add.w	fp, fp, #1
 800d6a8:	dd06      	ble.n	800d6b8 <__hexnan+0xe4>
 800d6aa:	4544      	cmp	r4, r8
 800d6ac:	d9cf      	bls.n	800d64e <__hexnan+0x7a>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2501      	movs	r5, #1
 800d6b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6b6:	3c04      	subs	r4, #4
 800d6b8:	6822      	ldr	r2, [r4, #0]
 800d6ba:	f000 000f 	and.w	r0, r0, #15
 800d6be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6c2:	6020      	str	r0, [r4, #0]
 800d6c4:	e7c3      	b.n	800d64e <__hexnan+0x7a>
 800d6c6:	2508      	movs	r5, #8
 800d6c8:	e7c1      	b.n	800d64e <__hexnan+0x7a>
 800d6ca:	9b01      	ldr	r3, [sp, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d0df      	beq.n	800d690 <__hexnan+0xbc>
 800d6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d4:	f1c3 0320 	rsb	r3, r3, #32
 800d6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d6dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d6e0:	401a      	ands	r2, r3
 800d6e2:	f847 2c04 	str.w	r2, [r7, #-4]
 800d6e6:	e7d3      	b.n	800d690 <__hexnan+0xbc>
 800d6e8:	3e04      	subs	r6, #4
 800d6ea:	e7d1      	b.n	800d690 <__hexnan+0xbc>
 800d6ec:	2004      	movs	r0, #4
 800d6ee:	b007      	add	sp, #28
 800d6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6f4 <__locale_ctype_ptr_l>:
 800d6f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d6f8:	4770      	bx	lr

0800d6fa <__localeconv_l>:
 800d6fa:	30f0      	adds	r0, #240	; 0xf0
 800d6fc:	4770      	bx	lr

0800d6fe <__ascii_mbtowc>:
 800d6fe:	b082      	sub	sp, #8
 800d700:	b901      	cbnz	r1, 800d704 <__ascii_mbtowc+0x6>
 800d702:	a901      	add	r1, sp, #4
 800d704:	b142      	cbz	r2, 800d718 <__ascii_mbtowc+0x1a>
 800d706:	b14b      	cbz	r3, 800d71c <__ascii_mbtowc+0x1e>
 800d708:	7813      	ldrb	r3, [r2, #0]
 800d70a:	600b      	str	r3, [r1, #0]
 800d70c:	7812      	ldrb	r2, [r2, #0]
 800d70e:	1c10      	adds	r0, r2, #0
 800d710:	bf18      	it	ne
 800d712:	2001      	movne	r0, #1
 800d714:	b002      	add	sp, #8
 800d716:	4770      	bx	lr
 800d718:	4610      	mov	r0, r2
 800d71a:	e7fb      	b.n	800d714 <__ascii_mbtowc+0x16>
 800d71c:	f06f 0001 	mvn.w	r0, #1
 800d720:	e7f8      	b.n	800d714 <__ascii_mbtowc+0x16>

0800d722 <_Balloc>:
 800d722:	b570      	push	{r4, r5, r6, lr}
 800d724:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d726:	4604      	mov	r4, r0
 800d728:	460e      	mov	r6, r1
 800d72a:	b93d      	cbnz	r5, 800d73c <_Balloc+0x1a>
 800d72c:	2010      	movs	r0, #16
 800d72e:	f000 fc8d 	bl	800e04c <malloc>
 800d732:	6260      	str	r0, [r4, #36]	; 0x24
 800d734:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d738:	6005      	str	r5, [r0, #0]
 800d73a:	60c5      	str	r5, [r0, #12]
 800d73c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d73e:	68eb      	ldr	r3, [r5, #12]
 800d740:	b183      	cbz	r3, 800d764 <_Balloc+0x42>
 800d742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d74a:	b9b8      	cbnz	r0, 800d77c <_Balloc+0x5a>
 800d74c:	2101      	movs	r1, #1
 800d74e:	fa01 f506 	lsl.w	r5, r1, r6
 800d752:	1d6a      	adds	r2, r5, #5
 800d754:	0092      	lsls	r2, r2, #2
 800d756:	4620      	mov	r0, r4
 800d758:	f000 fbdc 	bl	800df14 <_calloc_r>
 800d75c:	b160      	cbz	r0, 800d778 <_Balloc+0x56>
 800d75e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d762:	e00e      	b.n	800d782 <_Balloc+0x60>
 800d764:	2221      	movs	r2, #33	; 0x21
 800d766:	2104      	movs	r1, #4
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 fbd3 	bl	800df14 <_calloc_r>
 800d76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d770:	60e8      	str	r0, [r5, #12]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1e4      	bne.n	800d742 <_Balloc+0x20>
 800d778:	2000      	movs	r0, #0
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	6802      	ldr	r2, [r0, #0]
 800d77e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d782:	2300      	movs	r3, #0
 800d784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d788:	e7f7      	b.n	800d77a <_Balloc+0x58>

0800d78a <_Bfree>:
 800d78a:	b570      	push	{r4, r5, r6, lr}
 800d78c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d78e:	4606      	mov	r6, r0
 800d790:	460d      	mov	r5, r1
 800d792:	b93c      	cbnz	r4, 800d7a4 <_Bfree+0x1a>
 800d794:	2010      	movs	r0, #16
 800d796:	f000 fc59 	bl	800e04c <malloc>
 800d79a:	6270      	str	r0, [r6, #36]	; 0x24
 800d79c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7a0:	6004      	str	r4, [r0, #0]
 800d7a2:	60c4      	str	r4, [r0, #12]
 800d7a4:	b13d      	cbz	r5, 800d7b6 <_Bfree+0x2c>
 800d7a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d7a8:	686a      	ldr	r2, [r5, #4]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b0:	6029      	str	r1, [r5, #0]
 800d7b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}

0800d7b8 <__multadd>:
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	461f      	mov	r7, r3
 800d7be:	4606      	mov	r6, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	690d      	ldr	r5, [r1, #16]
 800d7c6:	f101 0c14 	add.w	ip, r1, #20
 800d7ca:	f8dc 0000 	ldr.w	r0, [ip]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	b281      	uxth	r1, r0
 800d7d2:	fb02 7101 	mla	r1, r2, r1, r7
 800d7d6:	0c00      	lsrs	r0, r0, #16
 800d7d8:	0c0f      	lsrs	r7, r1, #16
 800d7da:	fb02 7000 	mla	r0, r2, r0, r7
 800d7de:	b289      	uxth	r1, r1
 800d7e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d7e4:	429d      	cmp	r5, r3
 800d7e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d7ea:	f84c 1b04 	str.w	r1, [ip], #4
 800d7ee:	dcec      	bgt.n	800d7ca <__multadd+0x12>
 800d7f0:	b1d7      	cbz	r7, 800d828 <__multadd+0x70>
 800d7f2:	68a3      	ldr	r3, [r4, #8]
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dc12      	bgt.n	800d81e <__multadd+0x66>
 800d7f8:	6861      	ldr	r1, [r4, #4]
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	3101      	adds	r1, #1
 800d7fe:	f7ff ff90 	bl	800d722 <_Balloc>
 800d802:	4680      	mov	r8, r0
 800d804:	6922      	ldr	r2, [r4, #16]
 800d806:	f104 010c 	add.w	r1, r4, #12
 800d80a:	3202      	adds	r2, #2
 800d80c:	0092      	lsls	r2, r2, #2
 800d80e:	300c      	adds	r0, #12
 800d810:	f7fe fcf4 	bl	800c1fc <memcpy>
 800d814:	4621      	mov	r1, r4
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ffb7 	bl	800d78a <_Bfree>
 800d81c:	4644      	mov	r4, r8
 800d81e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d822:	3501      	adds	r5, #1
 800d824:	615f      	str	r7, [r3, #20]
 800d826:	6125      	str	r5, [r4, #16]
 800d828:	4620      	mov	r0, r4
 800d82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d82e <__s2b>:
 800d82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d832:	4615      	mov	r5, r2
 800d834:	2209      	movs	r2, #9
 800d836:	461f      	mov	r7, r3
 800d838:	3308      	adds	r3, #8
 800d83a:	460c      	mov	r4, r1
 800d83c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d840:	4606      	mov	r6, r0
 800d842:	2201      	movs	r2, #1
 800d844:	2100      	movs	r1, #0
 800d846:	429a      	cmp	r2, r3
 800d848:	db20      	blt.n	800d88c <__s2b+0x5e>
 800d84a:	4630      	mov	r0, r6
 800d84c:	f7ff ff69 	bl	800d722 <_Balloc>
 800d850:	9b08      	ldr	r3, [sp, #32]
 800d852:	2d09      	cmp	r5, #9
 800d854:	6143      	str	r3, [r0, #20]
 800d856:	f04f 0301 	mov.w	r3, #1
 800d85a:	6103      	str	r3, [r0, #16]
 800d85c:	dd19      	ble.n	800d892 <__s2b+0x64>
 800d85e:	f104 0809 	add.w	r8, r4, #9
 800d862:	46c1      	mov	r9, r8
 800d864:	442c      	add	r4, r5
 800d866:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d86a:	4601      	mov	r1, r0
 800d86c:	3b30      	subs	r3, #48	; 0x30
 800d86e:	220a      	movs	r2, #10
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff ffa1 	bl	800d7b8 <__multadd>
 800d876:	45a1      	cmp	r9, r4
 800d878:	d1f5      	bne.n	800d866 <__s2b+0x38>
 800d87a:	eb08 0405 	add.w	r4, r8, r5
 800d87e:	3c08      	subs	r4, #8
 800d880:	1b2d      	subs	r5, r5, r4
 800d882:	1963      	adds	r3, r4, r5
 800d884:	42bb      	cmp	r3, r7
 800d886:	db07      	blt.n	800d898 <__s2b+0x6a>
 800d888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d88c:	0052      	lsls	r2, r2, #1
 800d88e:	3101      	adds	r1, #1
 800d890:	e7d9      	b.n	800d846 <__s2b+0x18>
 800d892:	340a      	adds	r4, #10
 800d894:	2509      	movs	r5, #9
 800d896:	e7f3      	b.n	800d880 <__s2b+0x52>
 800d898:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d89c:	4601      	mov	r1, r0
 800d89e:	3b30      	subs	r3, #48	; 0x30
 800d8a0:	220a      	movs	r2, #10
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ff88 	bl	800d7b8 <__multadd>
 800d8a8:	e7eb      	b.n	800d882 <__s2b+0x54>

0800d8aa <__hi0bits>:
 800d8aa:	0c02      	lsrs	r2, r0, #16
 800d8ac:	0412      	lsls	r2, r2, #16
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	b9b2      	cbnz	r2, 800d8e0 <__hi0bits+0x36>
 800d8b2:	0403      	lsls	r3, r0, #16
 800d8b4:	2010      	movs	r0, #16
 800d8b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d8ba:	bf04      	itt	eq
 800d8bc:	021b      	lsleq	r3, r3, #8
 800d8be:	3008      	addeq	r0, #8
 800d8c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d8c4:	bf04      	itt	eq
 800d8c6:	011b      	lsleq	r3, r3, #4
 800d8c8:	3004      	addeq	r0, #4
 800d8ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d8ce:	bf04      	itt	eq
 800d8d0:	009b      	lsleq	r3, r3, #2
 800d8d2:	3002      	addeq	r0, #2
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	db06      	blt.n	800d8e6 <__hi0bits+0x3c>
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	d503      	bpl.n	800d8e4 <__hi0bits+0x3a>
 800d8dc:	3001      	adds	r0, #1
 800d8de:	4770      	bx	lr
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	e7e8      	b.n	800d8b6 <__hi0bits+0xc>
 800d8e4:	2020      	movs	r0, #32
 800d8e6:	4770      	bx	lr

0800d8e8 <__lo0bits>:
 800d8e8:	6803      	ldr	r3, [r0, #0]
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	f013 0207 	ands.w	r2, r3, #7
 800d8f0:	d00b      	beq.n	800d90a <__lo0bits+0x22>
 800d8f2:	07da      	lsls	r2, r3, #31
 800d8f4:	d423      	bmi.n	800d93e <__lo0bits+0x56>
 800d8f6:	0798      	lsls	r0, r3, #30
 800d8f8:	bf49      	itett	mi
 800d8fa:	085b      	lsrmi	r3, r3, #1
 800d8fc:	089b      	lsrpl	r3, r3, #2
 800d8fe:	2001      	movmi	r0, #1
 800d900:	600b      	strmi	r3, [r1, #0]
 800d902:	bf5c      	itt	pl
 800d904:	600b      	strpl	r3, [r1, #0]
 800d906:	2002      	movpl	r0, #2
 800d908:	4770      	bx	lr
 800d90a:	b298      	uxth	r0, r3
 800d90c:	b9a8      	cbnz	r0, 800d93a <__lo0bits+0x52>
 800d90e:	2010      	movs	r0, #16
 800d910:	0c1b      	lsrs	r3, r3, #16
 800d912:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d916:	bf04      	itt	eq
 800d918:	0a1b      	lsreq	r3, r3, #8
 800d91a:	3008      	addeq	r0, #8
 800d91c:	071a      	lsls	r2, r3, #28
 800d91e:	bf04      	itt	eq
 800d920:	091b      	lsreq	r3, r3, #4
 800d922:	3004      	addeq	r0, #4
 800d924:	079a      	lsls	r2, r3, #30
 800d926:	bf04      	itt	eq
 800d928:	089b      	lsreq	r3, r3, #2
 800d92a:	3002      	addeq	r0, #2
 800d92c:	07da      	lsls	r2, r3, #31
 800d92e:	d402      	bmi.n	800d936 <__lo0bits+0x4e>
 800d930:	085b      	lsrs	r3, r3, #1
 800d932:	d006      	beq.n	800d942 <__lo0bits+0x5a>
 800d934:	3001      	adds	r0, #1
 800d936:	600b      	str	r3, [r1, #0]
 800d938:	4770      	bx	lr
 800d93a:	4610      	mov	r0, r2
 800d93c:	e7e9      	b.n	800d912 <__lo0bits+0x2a>
 800d93e:	2000      	movs	r0, #0
 800d940:	4770      	bx	lr
 800d942:	2020      	movs	r0, #32
 800d944:	4770      	bx	lr

0800d946 <__i2b>:
 800d946:	b510      	push	{r4, lr}
 800d948:	460c      	mov	r4, r1
 800d94a:	2101      	movs	r1, #1
 800d94c:	f7ff fee9 	bl	800d722 <_Balloc>
 800d950:	2201      	movs	r2, #1
 800d952:	6144      	str	r4, [r0, #20]
 800d954:	6102      	str	r2, [r0, #16]
 800d956:	bd10      	pop	{r4, pc}

0800d958 <__multiply>:
 800d958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	4614      	mov	r4, r2
 800d95e:	690a      	ldr	r2, [r1, #16]
 800d960:	6923      	ldr	r3, [r4, #16]
 800d962:	4688      	mov	r8, r1
 800d964:	429a      	cmp	r2, r3
 800d966:	bfbe      	ittt	lt
 800d968:	460b      	movlt	r3, r1
 800d96a:	46a0      	movlt	r8, r4
 800d96c:	461c      	movlt	r4, r3
 800d96e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d972:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d97a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d97e:	eb07 0609 	add.w	r6, r7, r9
 800d982:	42b3      	cmp	r3, r6
 800d984:	bfb8      	it	lt
 800d986:	3101      	addlt	r1, #1
 800d988:	f7ff fecb 	bl	800d722 <_Balloc>
 800d98c:	f100 0514 	add.w	r5, r0, #20
 800d990:	462b      	mov	r3, r5
 800d992:	2200      	movs	r2, #0
 800d994:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d998:	4573      	cmp	r3, lr
 800d99a:	d316      	bcc.n	800d9ca <__multiply+0x72>
 800d99c:	f104 0214 	add.w	r2, r4, #20
 800d9a0:	f108 0114 	add.w	r1, r8, #20
 800d9a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d9a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	9b00      	ldr	r3, [sp, #0]
 800d9b0:	9201      	str	r2, [sp, #4]
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d80c      	bhi.n	800d9d0 <__multiply+0x78>
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	dd03      	ble.n	800d9c2 <__multiply+0x6a>
 800d9ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d05d      	beq.n	800da7e <__multiply+0x126>
 800d9c2:	6106      	str	r6, [r0, #16]
 800d9c4:	b003      	add	sp, #12
 800d9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ca:	f843 2b04 	str.w	r2, [r3], #4
 800d9ce:	e7e3      	b.n	800d998 <__multiply+0x40>
 800d9d0:	f8b2 b000 	ldrh.w	fp, [r2]
 800d9d4:	f1bb 0f00 	cmp.w	fp, #0
 800d9d8:	d023      	beq.n	800da22 <__multiply+0xca>
 800d9da:	4689      	mov	r9, r1
 800d9dc:	46ac      	mov	ip, r5
 800d9de:	f04f 0800 	mov.w	r8, #0
 800d9e2:	f859 4b04 	ldr.w	r4, [r9], #4
 800d9e6:	f8dc a000 	ldr.w	sl, [ip]
 800d9ea:	b2a3      	uxth	r3, r4
 800d9ec:	fa1f fa8a 	uxth.w	sl, sl
 800d9f0:	fb0b a303 	mla	r3, fp, r3, sl
 800d9f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9f8:	f8dc 4000 	ldr.w	r4, [ip]
 800d9fc:	4443      	add	r3, r8
 800d9fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800da02:	fb0b 840a 	mla	r4, fp, sl, r8
 800da06:	46e2      	mov	sl, ip
 800da08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800da12:	454f      	cmp	r7, r9
 800da14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800da18:	f84a 3b04 	str.w	r3, [sl], #4
 800da1c:	d82b      	bhi.n	800da76 <__multiply+0x11e>
 800da1e:	f8cc 8004 	str.w	r8, [ip, #4]
 800da22:	9b01      	ldr	r3, [sp, #4]
 800da24:	3204      	adds	r2, #4
 800da26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800da2a:	f1ba 0f00 	cmp.w	sl, #0
 800da2e:	d020      	beq.n	800da72 <__multiply+0x11a>
 800da30:	4689      	mov	r9, r1
 800da32:	46a8      	mov	r8, r5
 800da34:	f04f 0b00 	mov.w	fp, #0
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	f8b9 c000 	ldrh.w	ip, [r9]
 800da3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800da42:	b29b      	uxth	r3, r3
 800da44:	fb0a 440c 	mla	r4, sl, ip, r4
 800da48:	46c4      	mov	ip, r8
 800da4a:	445c      	add	r4, fp
 800da4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800da50:	f84c 3b04 	str.w	r3, [ip], #4
 800da54:	f859 3b04 	ldr.w	r3, [r9], #4
 800da58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800da5c:	0c1b      	lsrs	r3, r3, #16
 800da5e:	fb0a b303 	mla	r3, sl, r3, fp
 800da62:	454f      	cmp	r7, r9
 800da64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800da68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800da6c:	d805      	bhi.n	800da7a <__multiply+0x122>
 800da6e:	f8c8 3004 	str.w	r3, [r8, #4]
 800da72:	3504      	adds	r5, #4
 800da74:	e79b      	b.n	800d9ae <__multiply+0x56>
 800da76:	46d4      	mov	ip, sl
 800da78:	e7b3      	b.n	800d9e2 <__multiply+0x8a>
 800da7a:	46e0      	mov	r8, ip
 800da7c:	e7dd      	b.n	800da3a <__multiply+0xe2>
 800da7e:	3e01      	subs	r6, #1
 800da80:	e799      	b.n	800d9b6 <__multiply+0x5e>
	...

0800da84 <__pow5mult>:
 800da84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da88:	4615      	mov	r5, r2
 800da8a:	f012 0203 	ands.w	r2, r2, #3
 800da8e:	4606      	mov	r6, r0
 800da90:	460f      	mov	r7, r1
 800da92:	d007      	beq.n	800daa4 <__pow5mult+0x20>
 800da94:	4c21      	ldr	r4, [pc, #132]	; (800db1c <__pow5mult+0x98>)
 800da96:	3a01      	subs	r2, #1
 800da98:	2300      	movs	r3, #0
 800da9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da9e:	f7ff fe8b 	bl	800d7b8 <__multadd>
 800daa2:	4607      	mov	r7, r0
 800daa4:	10ad      	asrs	r5, r5, #2
 800daa6:	d035      	beq.n	800db14 <__pow5mult+0x90>
 800daa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800daaa:	b93c      	cbnz	r4, 800dabc <__pow5mult+0x38>
 800daac:	2010      	movs	r0, #16
 800daae:	f000 facd 	bl	800e04c <malloc>
 800dab2:	6270      	str	r0, [r6, #36]	; 0x24
 800dab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dab8:	6004      	str	r4, [r0, #0]
 800daba:	60c4      	str	r4, [r0, #12]
 800dabc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dac4:	b94c      	cbnz	r4, 800dada <__pow5mult+0x56>
 800dac6:	f240 2171 	movw	r1, #625	; 0x271
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ff3b 	bl	800d946 <__i2b>
 800dad0:	2300      	movs	r3, #0
 800dad2:	4604      	mov	r4, r0
 800dad4:	f8c8 0008 	str.w	r0, [r8, #8]
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	07eb      	lsls	r3, r5, #31
 800dae0:	d50a      	bpl.n	800daf8 <__pow5mult+0x74>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4622      	mov	r2, r4
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ff36 	bl	800d958 <__multiply>
 800daec:	4681      	mov	r9, r0
 800daee:	4639      	mov	r1, r7
 800daf0:	4630      	mov	r0, r6
 800daf2:	f7ff fe4a 	bl	800d78a <_Bfree>
 800daf6:	464f      	mov	r7, r9
 800daf8:	106d      	asrs	r5, r5, #1
 800dafa:	d00b      	beq.n	800db14 <__pow5mult+0x90>
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	b938      	cbnz	r0, 800db10 <__pow5mult+0x8c>
 800db00:	4622      	mov	r2, r4
 800db02:	4621      	mov	r1, r4
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff ff27 	bl	800d958 <__multiply>
 800db0a:	6020      	str	r0, [r4, #0]
 800db0c:	f8c0 8000 	str.w	r8, [r0]
 800db10:	4604      	mov	r4, r0
 800db12:	e7e4      	b.n	800dade <__pow5mult+0x5a>
 800db14:	4638      	mov	r0, r7
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	bf00      	nop
 800db1c:	0800e3c0 	.word	0x0800e3c0

0800db20 <__lshift>:
 800db20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db24:	460c      	mov	r4, r1
 800db26:	4607      	mov	r7, r0
 800db28:	4616      	mov	r6, r2
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db30:	eb0a 0903 	add.w	r9, sl, r3
 800db34:	6849      	ldr	r1, [r1, #4]
 800db36:	68a3      	ldr	r3, [r4, #8]
 800db38:	f109 0501 	add.w	r5, r9, #1
 800db3c:	42ab      	cmp	r3, r5
 800db3e:	db32      	blt.n	800dba6 <__lshift+0x86>
 800db40:	4638      	mov	r0, r7
 800db42:	f7ff fdee 	bl	800d722 <_Balloc>
 800db46:	2300      	movs	r3, #0
 800db48:	4680      	mov	r8, r0
 800db4a:	461a      	mov	r2, r3
 800db4c:	f100 0114 	add.w	r1, r0, #20
 800db50:	4553      	cmp	r3, sl
 800db52:	db2b      	blt.n	800dbac <__lshift+0x8c>
 800db54:	6920      	ldr	r0, [r4, #16]
 800db56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db5a:	f104 0314 	add.w	r3, r4, #20
 800db5e:	f016 021f 	ands.w	r2, r6, #31
 800db62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db6a:	d025      	beq.n	800dbb8 <__lshift+0x98>
 800db6c:	2000      	movs	r0, #0
 800db6e:	f1c2 0e20 	rsb	lr, r2, #32
 800db72:	468a      	mov	sl, r1
 800db74:	681e      	ldr	r6, [r3, #0]
 800db76:	4096      	lsls	r6, r2
 800db78:	4330      	orrs	r0, r6
 800db7a:	f84a 0b04 	str.w	r0, [sl], #4
 800db7e:	f853 0b04 	ldr.w	r0, [r3], #4
 800db82:	459c      	cmp	ip, r3
 800db84:	fa20 f00e 	lsr.w	r0, r0, lr
 800db88:	d814      	bhi.n	800dbb4 <__lshift+0x94>
 800db8a:	6048      	str	r0, [r1, #4]
 800db8c:	b108      	cbz	r0, 800db92 <__lshift+0x72>
 800db8e:	f109 0502 	add.w	r5, r9, #2
 800db92:	3d01      	subs	r5, #1
 800db94:	4638      	mov	r0, r7
 800db96:	f8c8 5010 	str.w	r5, [r8, #16]
 800db9a:	4621      	mov	r1, r4
 800db9c:	f7ff fdf5 	bl	800d78a <_Bfree>
 800dba0:	4640      	mov	r0, r8
 800dba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba6:	3101      	adds	r1, #1
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	e7c7      	b.n	800db3c <__lshift+0x1c>
 800dbac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	e7cd      	b.n	800db50 <__lshift+0x30>
 800dbb4:	4651      	mov	r1, sl
 800dbb6:	e7dc      	b.n	800db72 <__lshift+0x52>
 800dbb8:	3904      	subs	r1, #4
 800dbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbbe:	459c      	cmp	ip, r3
 800dbc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbc4:	d8f9      	bhi.n	800dbba <__lshift+0x9a>
 800dbc6:	e7e4      	b.n	800db92 <__lshift+0x72>

0800dbc8 <__mcmp>:
 800dbc8:	6903      	ldr	r3, [r0, #16]
 800dbca:	690a      	ldr	r2, [r1, #16]
 800dbcc:	b530      	push	{r4, r5, lr}
 800dbce:	1a9b      	subs	r3, r3, r2
 800dbd0:	d10c      	bne.n	800dbec <__mcmp+0x24>
 800dbd2:	0092      	lsls	r2, r2, #2
 800dbd4:	3014      	adds	r0, #20
 800dbd6:	3114      	adds	r1, #20
 800dbd8:	1884      	adds	r4, r0, r2
 800dbda:	4411      	add	r1, r2
 800dbdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbe4:	4295      	cmp	r5, r2
 800dbe6:	d003      	beq.n	800dbf0 <__mcmp+0x28>
 800dbe8:	d305      	bcc.n	800dbf6 <__mcmp+0x2e>
 800dbea:	2301      	movs	r3, #1
 800dbec:	4618      	mov	r0, r3
 800dbee:	bd30      	pop	{r4, r5, pc}
 800dbf0:	42a0      	cmp	r0, r4
 800dbf2:	d3f3      	bcc.n	800dbdc <__mcmp+0x14>
 800dbf4:	e7fa      	b.n	800dbec <__mcmp+0x24>
 800dbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbfa:	e7f7      	b.n	800dbec <__mcmp+0x24>

0800dbfc <__mdiff>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	460d      	mov	r5, r1
 800dc02:	4607      	mov	r7, r0
 800dc04:	4611      	mov	r1, r2
 800dc06:	4628      	mov	r0, r5
 800dc08:	4614      	mov	r4, r2
 800dc0a:	f7ff ffdd 	bl	800dbc8 <__mcmp>
 800dc0e:	1e06      	subs	r6, r0, #0
 800dc10:	d108      	bne.n	800dc24 <__mdiff+0x28>
 800dc12:	4631      	mov	r1, r6
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7ff fd84 	bl	800d722 <_Balloc>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc24:	bfa4      	itt	ge
 800dc26:	4623      	movge	r3, r4
 800dc28:	462c      	movge	r4, r5
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	6861      	ldr	r1, [r4, #4]
 800dc2e:	bfa6      	itte	ge
 800dc30:	461d      	movge	r5, r3
 800dc32:	2600      	movge	r6, #0
 800dc34:	2601      	movlt	r6, #1
 800dc36:	f7ff fd74 	bl	800d722 <_Balloc>
 800dc3a:	f04f 0e00 	mov.w	lr, #0
 800dc3e:	60c6      	str	r6, [r0, #12]
 800dc40:	692b      	ldr	r3, [r5, #16]
 800dc42:	6926      	ldr	r6, [r4, #16]
 800dc44:	f104 0214 	add.w	r2, r4, #20
 800dc48:	f105 0914 	add.w	r9, r5, #20
 800dc4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800dc50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800dc54:	f100 0114 	add.w	r1, r0, #20
 800dc58:	f852 ab04 	ldr.w	sl, [r2], #4
 800dc5c:	f859 5b04 	ldr.w	r5, [r9], #4
 800dc60:	fa1f f38a 	uxth.w	r3, sl
 800dc64:	4473      	add	r3, lr
 800dc66:	b2ac      	uxth	r4, r5
 800dc68:	1b1b      	subs	r3, r3, r4
 800dc6a:	0c2c      	lsrs	r4, r5, #16
 800dc6c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800dc70:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800dc7a:	45c8      	cmp	r8, r9
 800dc7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800dc80:	4694      	mov	ip, r2
 800dc82:	f841 4b04 	str.w	r4, [r1], #4
 800dc86:	d8e7      	bhi.n	800dc58 <__mdiff+0x5c>
 800dc88:	45bc      	cmp	ip, r7
 800dc8a:	d304      	bcc.n	800dc96 <__mdiff+0x9a>
 800dc8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dc90:	b183      	cbz	r3, 800dcb4 <__mdiff+0xb8>
 800dc92:	6106      	str	r6, [r0, #16]
 800dc94:	e7c4      	b.n	800dc20 <__mdiff+0x24>
 800dc96:	f85c 4b04 	ldr.w	r4, [ip], #4
 800dc9a:	b2a2      	uxth	r2, r4
 800dc9c:	4472      	add	r2, lr
 800dc9e:	1413      	asrs	r3, r2, #16
 800dca0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dca4:	b292      	uxth	r2, r2
 800dca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcaa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dcae:	f841 2b04 	str.w	r2, [r1], #4
 800dcb2:	e7e9      	b.n	800dc88 <__mdiff+0x8c>
 800dcb4:	3e01      	subs	r6, #1
 800dcb6:	e7e9      	b.n	800dc8c <__mdiff+0x90>

0800dcb8 <__ulp>:
 800dcb8:	4b10      	ldr	r3, [pc, #64]	; (800dcfc <__ulp+0x44>)
 800dcba:	400b      	ands	r3, r1
 800dcbc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dd02      	ble.n	800dcca <__ulp+0x12>
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4770      	bx	lr
 800dcca:	425b      	negs	r3, r3
 800dccc:	151b      	asrs	r3, r3, #20
 800dcce:	2b13      	cmp	r3, #19
 800dcd0:	f04f 0000 	mov.w	r0, #0
 800dcd4:	f04f 0100 	mov.w	r1, #0
 800dcd8:	dc04      	bgt.n	800dce4 <__ulp+0x2c>
 800dcda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dcde:	fa42 f103 	asr.w	r1, r2, r3
 800dce2:	4770      	bx	lr
 800dce4:	2201      	movs	r2, #1
 800dce6:	3b14      	subs	r3, #20
 800dce8:	2b1e      	cmp	r3, #30
 800dcea:	bfce      	itee	gt
 800dcec:	4613      	movgt	r3, r2
 800dcee:	f1c3 031f 	rsble	r3, r3, #31
 800dcf2:	fa02 f303 	lslle.w	r3, r2, r3
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	7ff00000 	.word	0x7ff00000

0800dd00 <__b2d>:
 800dd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd04:	6907      	ldr	r7, [r0, #16]
 800dd06:	f100 0914 	add.w	r9, r0, #20
 800dd0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800dd0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800dd12:	f1a7 0804 	sub.w	r8, r7, #4
 800dd16:	4630      	mov	r0, r6
 800dd18:	f7ff fdc7 	bl	800d8aa <__hi0bits>
 800dd1c:	f1c0 0320 	rsb	r3, r0, #32
 800dd20:	280a      	cmp	r0, #10
 800dd22:	600b      	str	r3, [r1, #0]
 800dd24:	491e      	ldr	r1, [pc, #120]	; (800dda0 <__b2d+0xa0>)
 800dd26:	dc17      	bgt.n	800dd58 <__b2d+0x58>
 800dd28:	45c1      	cmp	r9, r8
 800dd2a:	bf28      	it	cs
 800dd2c:	2200      	movcs	r2, #0
 800dd2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800dd32:	fa26 f30c 	lsr.w	r3, r6, ip
 800dd36:	bf38      	it	cc
 800dd38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800dd3c:	ea43 0501 	orr.w	r5, r3, r1
 800dd40:	f100 0315 	add.w	r3, r0, #21
 800dd44:	fa06 f303 	lsl.w	r3, r6, r3
 800dd48:	fa22 f20c 	lsr.w	r2, r2, ip
 800dd4c:	ea43 0402 	orr.w	r4, r3, r2
 800dd50:	4620      	mov	r0, r4
 800dd52:	4629      	mov	r1, r5
 800dd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd58:	45c1      	cmp	r9, r8
 800dd5a:	bf3a      	itte	cc
 800dd5c:	f1a7 0808 	subcc.w	r8, r7, #8
 800dd60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800dd64:	2200      	movcs	r2, #0
 800dd66:	f1b0 030b 	subs.w	r3, r0, #11
 800dd6a:	d015      	beq.n	800dd98 <__b2d+0x98>
 800dd6c:	409e      	lsls	r6, r3
 800dd6e:	f1c3 0720 	rsb	r7, r3, #32
 800dd72:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800dd76:	fa22 f107 	lsr.w	r1, r2, r7
 800dd7a:	45c8      	cmp	r8, r9
 800dd7c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800dd80:	ea46 0501 	orr.w	r5, r6, r1
 800dd84:	bf94      	ite	ls
 800dd86:	2100      	movls	r1, #0
 800dd88:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800dd8c:	fa02 f003 	lsl.w	r0, r2, r3
 800dd90:	40f9      	lsrs	r1, r7
 800dd92:	ea40 0401 	orr.w	r4, r0, r1
 800dd96:	e7db      	b.n	800dd50 <__b2d+0x50>
 800dd98:	ea46 0501 	orr.w	r5, r6, r1
 800dd9c:	4614      	mov	r4, r2
 800dd9e:	e7d7      	b.n	800dd50 <__b2d+0x50>
 800dda0:	3ff00000 	.word	0x3ff00000

0800dda4 <__d2b>:
 800dda4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dda8:	461c      	mov	r4, r3
 800ddaa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4690      	mov	r8, r2
 800ddb2:	f7ff fcb6 	bl	800d722 <_Balloc>
 800ddb6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ddba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	bb34      	cbnz	r4, 800de10 <__d2b+0x6c>
 800ddc2:	9201      	str	r2, [sp, #4]
 800ddc4:	f1b8 0200 	subs.w	r2, r8, #0
 800ddc8:	d027      	beq.n	800de1a <__d2b+0x76>
 800ddca:	a802      	add	r0, sp, #8
 800ddcc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ddd0:	f7ff fd8a 	bl	800d8e8 <__lo0bits>
 800ddd4:	9900      	ldr	r1, [sp, #0]
 800ddd6:	b1f0      	cbz	r0, 800de16 <__d2b+0x72>
 800ddd8:	9a01      	ldr	r2, [sp, #4]
 800ddda:	f1c0 0320 	rsb	r3, r0, #32
 800ddde:	fa02 f303 	lsl.w	r3, r2, r3
 800dde2:	430b      	orrs	r3, r1
 800dde4:	40c2      	lsrs	r2, r0
 800dde6:	617b      	str	r3, [r7, #20]
 800dde8:	9201      	str	r2, [sp, #4]
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bf14      	ite	ne
 800ddf0:	2102      	movne	r1, #2
 800ddf2:	2101      	moveq	r1, #1
 800ddf4:	61bb      	str	r3, [r7, #24]
 800ddf6:	6139      	str	r1, [r7, #16]
 800ddf8:	b1c4      	cbz	r4, 800de2c <__d2b+0x88>
 800ddfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ddfe:	4404      	add	r4, r0
 800de00:	6034      	str	r4, [r6, #0]
 800de02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de06:	6028      	str	r0, [r5, #0]
 800de08:	4638      	mov	r0, r7
 800de0a:	b002      	add	sp, #8
 800de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800de14:	e7d5      	b.n	800ddc2 <__d2b+0x1e>
 800de16:	6179      	str	r1, [r7, #20]
 800de18:	e7e7      	b.n	800ddea <__d2b+0x46>
 800de1a:	a801      	add	r0, sp, #4
 800de1c:	f7ff fd64 	bl	800d8e8 <__lo0bits>
 800de20:	2101      	movs	r1, #1
 800de22:	9b01      	ldr	r3, [sp, #4]
 800de24:	6139      	str	r1, [r7, #16]
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	3020      	adds	r0, #32
 800de2a:	e7e5      	b.n	800ddf8 <__d2b+0x54>
 800de2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800de34:	6030      	str	r0, [r6, #0]
 800de36:	6918      	ldr	r0, [r3, #16]
 800de38:	f7ff fd37 	bl	800d8aa <__hi0bits>
 800de3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800de40:	e7e1      	b.n	800de06 <__d2b+0x62>

0800de42 <__ratio>:
 800de42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de46:	4688      	mov	r8, r1
 800de48:	4669      	mov	r1, sp
 800de4a:	4681      	mov	r9, r0
 800de4c:	f7ff ff58 	bl	800dd00 <__b2d>
 800de50:	468b      	mov	fp, r1
 800de52:	4606      	mov	r6, r0
 800de54:	460f      	mov	r7, r1
 800de56:	4640      	mov	r0, r8
 800de58:	a901      	add	r1, sp, #4
 800de5a:	f7ff ff51 	bl	800dd00 <__b2d>
 800de5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de66:	460d      	mov	r5, r1
 800de68:	eba3 0c02 	sub.w	ip, r3, r2
 800de6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de70:	1a9b      	subs	r3, r3, r2
 800de72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de76:	2b00      	cmp	r3, #0
 800de78:	bfd5      	itete	le
 800de7a:	460a      	movle	r2, r1
 800de7c:	463a      	movgt	r2, r7
 800de7e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de82:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800de86:	bfd8      	it	le
 800de88:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800de8c:	462b      	mov	r3, r5
 800de8e:	4602      	mov	r2, r0
 800de90:	4659      	mov	r1, fp
 800de92:	4630      	mov	r0, r6
 800de94:	f7f2 fc6c 	bl	8000770 <__aeabi_ddiv>
 800de98:	b003      	add	sp, #12
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de9e <__copybits>:
 800de9e:	3901      	subs	r1, #1
 800dea0:	b510      	push	{r4, lr}
 800dea2:	1149      	asrs	r1, r1, #5
 800dea4:	6914      	ldr	r4, [r2, #16]
 800dea6:	3101      	adds	r1, #1
 800dea8:	f102 0314 	add.w	r3, r2, #20
 800deac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800deb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	4602      	mov	r2, r0
 800deb8:	d303      	bcc.n	800dec2 <__copybits+0x24>
 800deba:	2300      	movs	r3, #0
 800debc:	428a      	cmp	r2, r1
 800debe:	d305      	bcc.n	800decc <__copybits+0x2e>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec6:	f840 2b04 	str.w	r2, [r0], #4
 800deca:	e7f3      	b.n	800deb4 <__copybits+0x16>
 800decc:	f842 3b04 	str.w	r3, [r2], #4
 800ded0:	e7f4      	b.n	800debc <__copybits+0x1e>

0800ded2 <__any_on>:
 800ded2:	f100 0214 	add.w	r2, r0, #20
 800ded6:	6900      	ldr	r0, [r0, #16]
 800ded8:	114b      	asrs	r3, r1, #5
 800deda:	4298      	cmp	r0, r3
 800dedc:	b510      	push	{r4, lr}
 800dede:	db11      	blt.n	800df04 <__any_on+0x32>
 800dee0:	dd0a      	ble.n	800def8 <__any_on+0x26>
 800dee2:	f011 011f 	ands.w	r1, r1, #31
 800dee6:	d007      	beq.n	800def8 <__any_on+0x26>
 800dee8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800deec:	fa24 f001 	lsr.w	r0, r4, r1
 800def0:	fa00 f101 	lsl.w	r1, r0, r1
 800def4:	428c      	cmp	r4, r1
 800def6:	d10b      	bne.n	800df10 <__any_on+0x3e>
 800def8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800defc:	4293      	cmp	r3, r2
 800defe:	d803      	bhi.n	800df08 <__any_on+0x36>
 800df00:	2000      	movs	r0, #0
 800df02:	bd10      	pop	{r4, pc}
 800df04:	4603      	mov	r3, r0
 800df06:	e7f7      	b.n	800def8 <__any_on+0x26>
 800df08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df0c:	2900      	cmp	r1, #0
 800df0e:	d0f5      	beq.n	800defc <__any_on+0x2a>
 800df10:	2001      	movs	r0, #1
 800df12:	e7f6      	b.n	800df02 <__any_on+0x30>

0800df14 <_calloc_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	fb02 f401 	mul.w	r4, r2, r1
 800df1a:	4621      	mov	r1, r4
 800df1c:	f000 f808 	bl	800df30 <_malloc_r>
 800df20:	4605      	mov	r5, r0
 800df22:	b118      	cbz	r0, 800df2c <_calloc_r+0x18>
 800df24:	4622      	mov	r2, r4
 800df26:	2100      	movs	r1, #0
 800df28:	f7fe f973 	bl	800c212 <memset>
 800df2c:	4628      	mov	r0, r5
 800df2e:	bd38      	pop	{r3, r4, r5, pc}

0800df30 <_malloc_r>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	1ccd      	adds	r5, r1, #3
 800df34:	f025 0503 	bic.w	r5, r5, #3
 800df38:	3508      	adds	r5, #8
 800df3a:	2d0c      	cmp	r5, #12
 800df3c:	bf38      	it	cc
 800df3e:	250c      	movcc	r5, #12
 800df40:	2d00      	cmp	r5, #0
 800df42:	4606      	mov	r6, r0
 800df44:	db01      	blt.n	800df4a <_malloc_r+0x1a>
 800df46:	42a9      	cmp	r1, r5
 800df48:	d903      	bls.n	800df52 <_malloc_r+0x22>
 800df4a:	230c      	movs	r3, #12
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	2000      	movs	r0, #0
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	f000 f883 	bl	800e05c <__malloc_lock>
 800df56:	4a21      	ldr	r2, [pc, #132]	; (800dfdc <_malloc_r+0xac>)
 800df58:	6814      	ldr	r4, [r2, #0]
 800df5a:	4621      	mov	r1, r4
 800df5c:	b991      	cbnz	r1, 800df84 <_malloc_r+0x54>
 800df5e:	4c20      	ldr	r4, [pc, #128]	; (800dfe0 <_malloc_r+0xb0>)
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	b91b      	cbnz	r3, 800df6c <_malloc_r+0x3c>
 800df64:	4630      	mov	r0, r6
 800df66:	f000 f83d 	bl	800dfe4 <_sbrk_r>
 800df6a:	6020      	str	r0, [r4, #0]
 800df6c:	4629      	mov	r1, r5
 800df6e:	4630      	mov	r0, r6
 800df70:	f000 f838 	bl	800dfe4 <_sbrk_r>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d124      	bne.n	800dfc2 <_malloc_r+0x92>
 800df78:	230c      	movs	r3, #12
 800df7a:	4630      	mov	r0, r6
 800df7c:	6033      	str	r3, [r6, #0]
 800df7e:	f000 f86e 	bl	800e05e <__malloc_unlock>
 800df82:	e7e4      	b.n	800df4e <_malloc_r+0x1e>
 800df84:	680b      	ldr	r3, [r1, #0]
 800df86:	1b5b      	subs	r3, r3, r5
 800df88:	d418      	bmi.n	800dfbc <_malloc_r+0x8c>
 800df8a:	2b0b      	cmp	r3, #11
 800df8c:	d90f      	bls.n	800dfae <_malloc_r+0x7e>
 800df8e:	600b      	str	r3, [r1, #0]
 800df90:	18cc      	adds	r4, r1, r3
 800df92:	50cd      	str	r5, [r1, r3]
 800df94:	4630      	mov	r0, r6
 800df96:	f000 f862 	bl	800e05e <__malloc_unlock>
 800df9a:	f104 000b 	add.w	r0, r4, #11
 800df9e:	1d23      	adds	r3, r4, #4
 800dfa0:	f020 0007 	bic.w	r0, r0, #7
 800dfa4:	1ac3      	subs	r3, r0, r3
 800dfa6:	d0d3      	beq.n	800df50 <_malloc_r+0x20>
 800dfa8:	425a      	negs	r2, r3
 800dfaa:	50e2      	str	r2, [r4, r3]
 800dfac:	e7d0      	b.n	800df50 <_malloc_r+0x20>
 800dfae:	684b      	ldr	r3, [r1, #4]
 800dfb0:	428c      	cmp	r4, r1
 800dfb2:	bf16      	itet	ne
 800dfb4:	6063      	strne	r3, [r4, #4]
 800dfb6:	6013      	streq	r3, [r2, #0]
 800dfb8:	460c      	movne	r4, r1
 800dfba:	e7eb      	b.n	800df94 <_malloc_r+0x64>
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	6849      	ldr	r1, [r1, #4]
 800dfc0:	e7cc      	b.n	800df5c <_malloc_r+0x2c>
 800dfc2:	1cc4      	adds	r4, r0, #3
 800dfc4:	f024 0403 	bic.w	r4, r4, #3
 800dfc8:	42a0      	cmp	r0, r4
 800dfca:	d005      	beq.n	800dfd8 <_malloc_r+0xa8>
 800dfcc:	1a21      	subs	r1, r4, r0
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f000 f808 	bl	800dfe4 <_sbrk_r>
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	d0cf      	beq.n	800df78 <_malloc_r+0x48>
 800dfd8:	6025      	str	r5, [r4, #0]
 800dfda:	e7db      	b.n	800df94 <_malloc_r+0x64>
 800dfdc:	2000191c 	.word	0x2000191c
 800dfe0:	20001920 	.word	0x20001920

0800dfe4 <_sbrk_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4c05      	ldr	r4, [pc, #20]	; (800e000 <_sbrk_r+0x1c>)
 800dfea:	4605      	mov	r5, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	6023      	str	r3, [r4, #0]
 800dff0:	f7f3 fc68 	bl	80018c4 <_sbrk>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_sbrk_r+0x1a>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_sbrk_r+0x1a>
 800dffc:	602b      	str	r3, [r5, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	20001f90 	.word	0x20001f90

0800e004 <nanf>:
 800e004:	4800      	ldr	r0, [pc, #0]	; (800e008 <nanf+0x4>)
 800e006:	4770      	bx	lr
 800e008:	7fc00000 	.word	0x7fc00000

0800e00c <strncmp>:
 800e00c:	b510      	push	{r4, lr}
 800e00e:	b16a      	cbz	r2, 800e02c <strncmp+0x20>
 800e010:	3901      	subs	r1, #1
 800e012:	1884      	adds	r4, r0, r2
 800e014:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e018:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d103      	bne.n	800e028 <strncmp+0x1c>
 800e020:	42a0      	cmp	r0, r4
 800e022:	d001      	beq.n	800e028 <strncmp+0x1c>
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1f5      	bne.n	800e014 <strncmp+0x8>
 800e028:	1a98      	subs	r0, r3, r2
 800e02a:	bd10      	pop	{r4, pc}
 800e02c:	4610      	mov	r0, r2
 800e02e:	e7fc      	b.n	800e02a <strncmp+0x1e>

0800e030 <__ascii_wctomb>:
 800e030:	b149      	cbz	r1, 800e046 <__ascii_wctomb+0x16>
 800e032:	2aff      	cmp	r2, #255	; 0xff
 800e034:	bf8b      	itete	hi
 800e036:	238a      	movhi	r3, #138	; 0x8a
 800e038:	700a      	strbls	r2, [r1, #0]
 800e03a:	6003      	strhi	r3, [r0, #0]
 800e03c:	2001      	movls	r0, #1
 800e03e:	bf88      	it	hi
 800e040:	f04f 30ff 	movhi.w	r0, #4294967295
 800e044:	4770      	bx	lr
 800e046:	4608      	mov	r0, r1
 800e048:	4770      	bx	lr
	...

0800e04c <malloc>:
 800e04c:	4b02      	ldr	r3, [pc, #8]	; (800e058 <malloc+0xc>)
 800e04e:	4601      	mov	r1, r0
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	f7ff bf6d 	b.w	800df30 <_malloc_r>
 800e056:	bf00      	nop
 800e058:	20000078 	.word	0x20000078

0800e05c <__malloc_lock>:
 800e05c:	4770      	bx	lr

0800e05e <__malloc_unlock>:
 800e05e:	4770      	bx	lr

0800e060 <_init>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	bf00      	nop
 800e064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e066:	bc08      	pop	{r3}
 800e068:	469e      	mov	lr, r3
 800e06a:	4770      	bx	lr

0800e06c <_fini>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	bf00      	nop
 800e070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e072:	bc08      	pop	{r3}
 800e074:	469e      	mov	lr, r3
 800e076:	4770      	bx	lr
