
STM32L162-SDIO-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b8c  08006b8c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006b8c  08006b8c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b8c  08006b8c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  20000080  08006c14  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000ca0  08006c14  00020ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f25d  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c4  00000000  00000000  0002f306  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00032220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188c1  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac75  00000000  00000000  0004b519  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091d96  00000000  00000000  0005618e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000e7fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000080 	.word	0x20000080
 8000158:	00000000 	.word	0x00000000
 800015c:	08006a74 	.word	0x08006a74

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000084 	.word	0x20000084
 8000178:	08006a74 	.word	0x08006a74

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 faad 	bl	80006de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f85c 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8e6 	bl	8000358 <MX_GPIO_Init>
  MX_DMA_Init();
 800018c:	f000 f8c6 	bl	800031c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000190:	f000 f8a4 	bl	80002dc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000194:	f003 fdfe 	bl	8003d94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // 1. Register a work area
        res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
 8000198:	2200      	movs	r2, #0
 800019a:	4921      	ldr	r1, [pc, #132]	; (8000220 <main+0xa4>)
 800019c:	4821      	ldr	r0, [pc, #132]	; (8000224 <main+0xa8>)
 800019e:	f005 ff85 	bl	80060ac <f_mount>
 80001a2:	4603      	mov	r3, r0
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xac>)
 80001a8:	701a      	strb	r2, [r3, #0]
        if (res == FR_OK){
 80001aa:	4b1f      	ldr	r3, [pc, #124]	; (8000228 <main+0xac>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d135      	bne.n	800021e <main+0xa2>
        	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2120      	movs	r1, #32
 80001b6:	481d      	ldr	r0, [pc, #116]	; (800022c <main+0xb0>)
 80001b8:	f001 f85c 	bl	8001274 <HAL_GPIO_WritePin>
        	// 2. Creating a new file for writing/reading later
        	res = f_open(&SDFile, "again.txt", FA_CREATE_ALWAYS | FA_WRITE); //Writing
 80001bc:	220a      	movs	r2, #10
 80001be:	491c      	ldr	r1, [pc, #112]	; (8000230 <main+0xb4>)
 80001c0:	481c      	ldr	r0, [pc, #112]	; (8000234 <main+0xb8>)
 80001c2:	f005 ffb9 	bl	8006138 <f_open>
 80001c6:	4603      	mov	r3, r0
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b17      	ldr	r3, [pc, #92]	; (8000228 <main+0xac>)
 80001cc:	701a      	strb	r2, [r3, #0]
        	if(res == FR_OK){
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0xac>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d120      	bne.n	8000218 <main+0x9c>
        		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2110      	movs	r1, #16
 80001da:	4814      	ldr	r0, [pc, #80]	; (800022c <main+0xb0>)
 80001dc:	f001 f84a 	bl	8001274 <HAL_GPIO_WritePin>
        		res = f_write(&SDFile, wtext, sizeof(wtext), (void *) &byteswritten);
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <main+0xbc>)
 80001e2:	226d      	movs	r2, #109	; 0x6d
 80001e4:	4915      	ldr	r1, [pc, #84]	; (800023c <main+0xc0>)
 80001e6:	4813      	ldr	r0, [pc, #76]	; (8000234 <main+0xb8>)
 80001e8:	f006 f974 	bl	80064d4 <f_write>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0xac>)
 80001f2:	701a      	strb	r2, [r3, #0]

        		if((res != FR_OK) || (byteswritten == 0)){
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <main+0xac>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d103      	bne.n	8000204 <main+0x88>
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <main+0xbc>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d109      	bne.n	8000218 <main+0x9c>
        			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2120      	movs	r1, #32
 8000208:	4808      	ldr	r0, [pc, #32]	; (800022c <main+0xb0>)
 800020a:	f001 f833 	bl	8001274 <HAL_GPIO_WritePin>
        		    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2110      	movs	r1, #16
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0xb0>)
 8000214:	f001 f82e 	bl	8001274 <HAL_GPIO_WritePin>
        		}
        	}
        	f_close(&SDFile);
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0xb8>)
 800021a:	f006 fb6f 	bl	80068fc <f_close>
        }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	e7fe      	b.n	800021e <main+0xa2>
 8000220:	200003a8 	.word	0x200003a8
 8000224:	20000864 	.word	0x20000864
 8000228:	20000860 	.word	0x20000860
 800022c:	40020400 	.word	0x40020400
 8000230:	08006a8c 	.word	0x08006a8c
 8000234:	20000430 	.word	0x20000430
 8000238:	20000360 	.word	0x20000360
 800023c:	20000000 	.word	0x20000000

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b092      	sub	sp, #72	; 0x48
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2234      	movs	r2, #52	; 0x34
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f006 fc07 	bl	8006a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <SystemClock_Config+0x98>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <SystemClock_Config+0x98>)
 800026c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000270:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000286:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800028a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800028c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	4618      	mov	r0, r3
 8000298:	f001 f804 	bl	80012a4 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a2:	f000 f8a3 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2303      	movs	r3, #3
 80002ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ba:	463b      	mov	r3, r7
 80002bc:	2101      	movs	r1, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fb20 	bl	8001904 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ca:	f000 f88f 	bl	80003ec <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3748      	adds	r7, #72	; 0x48
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40007000 	.word	0x40007000

080002dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002e2:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <MX_SDIO_SD_Init+0x3c>)
 80002e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	200003ac 	.word	0x200003ac
 8000318:	40012c00 	.word	0x40012c00

0800031c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_DMA_Init+0x38>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <MX_DMA_Init+0x38>)
 8000328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_DMA_Init+0x38>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2105      	movs	r1, #5
 800033e:	2035      	movs	r0, #53	; 0x35
 8000340:	f000 fb35 	bl	80009ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000344:	2035      	movs	r0, #53	; 0x35
 8000346:	f000 fb4e 	bl	80009e6 <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_GPIO_Init+0x8c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <MX_GPIO_Init+0x8c>)
 800038c:	f043 0308 	orr.w	r3, r3, #8
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 0308 	and.w	r3, r3, #8
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2130      	movs	r1, #48	; 0x30
 80003ba:	480b      	ldr	r0, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x90>)
 80003bc:	f000 ff5a 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80003c0:	2330      	movs	r3, #48	; 0x30
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_GPIO_Init+0x90>)
 80003d8:	f000 fdbe 	bl	8000f58 <HAL_GPIO_Init>

}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020400 	.word	0x40020400

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_MspInit+0x58>)
 8000400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000402:	4a13      	ldr	r2, [pc, #76]	; (8000450 <HAL_MspInit+0x58>)
 8000404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000408:	6253      	str	r3, [r2, #36]	; 0x24
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_MspInit+0x58>)
 800040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x58>)
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <HAL_MspInit+0x58>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6213      	str	r3, [r2, #32]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_MspInit+0x58>)
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x58>)
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	4a07      	ldr	r2, [pc, #28]	; (8000450 <HAL_MspInit+0x58>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	6253      	str	r3, [r2, #36]	; 0x24
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_MspInit+0x58>)
 800043c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40023800 	.word	0x40023800

08000454 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a40      	ldr	r2, [pc, #256]	; (8000574 <HAL_SD_MspInit+0x120>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d17a      	bne.n	800056c <HAL_SD_MspInit+0x118>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000478:	6a1b      	ldr	r3, [r3, #32]
 800047a:	4a3f      	ldr	r2, [pc, #252]	; (8000578 <HAL_SD_MspInit+0x124>)
 800047c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000480:	6213      	str	r3, [r2, #32]
 8000482:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000484:	6a1b      	ldr	r3, [r3, #32]
 8000486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a39      	ldr	r2, [pc, #228]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <HAL_SD_MspInit+0x124>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a33      	ldr	r2, [pc, #204]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0308 	and.w	r3, r3, #8
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80004be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80004c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80004d0:	230c      	movs	r3, #12
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	4828      	ldr	r0, [pc, #160]	; (800057c <HAL_SD_MspInit+0x128>)
 80004dc:	f000 fd3c 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004e0:	2304      	movs	r3, #4
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80004f0:	230c      	movs	r3, #12
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	4821      	ldr	r0, [pc, #132]	; (8000580 <HAL_SD_MspInit+0x12c>)
 80004fc:	f000 fd2c 	bl	8000f58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SD_MMC Init */
    hdma_sd_mmc.Instance = DMA2_Channel4;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000502:	4a21      	ldr	r2, [pc, #132]	; (8000588 <HAL_SD_MspInit+0x134>)
 8000504:	601a      	str	r2, [r3, #0]
    hdma_sd_mmc.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000508:	2210      	movs	r2, #16
 800050a:	605a      	str	r2, [r3, #4]
    hdma_sd_mmc.Init.PeriphInc = DMA_PINC_DISABLE;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <HAL_SD_MspInit+0x130>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
    hdma_sd_mmc.Init.MemInc = DMA_MINC_ENABLE;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	60da      	str	r2, [r3, #12]
    hdma_sd_mmc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_SD_MspInit+0x130>)
 800051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051e:	611a      	str	r2, [r3, #16]
    hdma_sd_mmc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000526:	615a      	str	r2, [r3, #20]
    hdma_sd_mmc.Init.Mode = DMA_NORMAL;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_SD_MspInit+0x130>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
    hdma_sd_mmc.Init.Priority = DMA_PRIORITY_LOW;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000530:	2200      	movs	r2, #0
 8000532:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sd_mmc) != HAL_OK)
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000536:	f000 fa71 	bl	8000a1c <HAL_DMA_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <HAL_SD_MspInit+0xf0>
    {
      Error_Handler();
 8000540:	f7ff ff54 	bl	80003ec <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sd_mmc);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000548:	641a      	str	r2, [r3, #64]	; 0x40
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_SD_MspInit+0x130>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(hsd,hdmatx,hdma_sd_mmc);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000554:	63da      	str	r2, [r3, #60]	; 0x3c
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2105      	movs	r1, #5
 8000560:	202d      	movs	r0, #45	; 0x2d
 8000562:	f000 fa24 	bl	80009ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000566:	202d      	movs	r0, #45	; 0x2d
 8000568:	f000 fa3d 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40012c00 	.word	0x40012c00
 8000578:	40023800 	.word	0x40023800
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00
 8000584:	20000364 	.word	0x20000364
 8000588:	40026444 	.word	0x40026444

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <HardFault_Handler+0x4>

0800059e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <BusFault_Handler+0x4>

080005aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <UsageFault_Handler+0x4>

080005b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f8d4 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <SDIO_IRQHandler+0x10>)
 80005e6:	f001 fded 	bl	80021c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200003ac 	.word	0x200003ac

080005f4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
	if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <DMA2_Channel4_IRQHandler+0x34>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	2b81      	cmp	r3, #129	; 0x81
 80005fe:	d003      	beq.n	8000608 <DMA2_Channel4_IRQHandler+0x14>
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <DMA2_Channel4_IRQHandler+0x34>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	2b82      	cmp	r3, #130	; 0x82
 8000606:	d103      	bne.n	8000610 <DMA2_Channel4_IRQHandler+0x1c>
		BSP_SD_DMA_Rx_IRQHandler();
 8000608:	f003 fcb2 	bl	8003f70 <BSP_SD_DMA_Rx_IRQHandler>
	if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 800060c:	bf00      	nop
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sd_mmc);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800060e:	e009      	b.n	8000624 <DMA2_Channel4_IRQHandler+0x30>
	else if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) || (hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK))){
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <DMA2_Channel4_IRQHandler+0x34>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	2b90      	cmp	r3, #144	; 0x90
 8000616:	d003      	beq.n	8000620 <DMA2_Channel4_IRQHandler+0x2c>
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <DMA2_Channel4_IRQHandler+0x34>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	2ba0      	cmp	r3, #160	; 0xa0
 800061e:	d101      	bne.n	8000624 <DMA2_Channel4_IRQHandler+0x30>
	       BSP_SD_DMA_Tx_IRQHandler();
 8000620:	f003 fc9a 	bl	8003f58 <BSP_SD_DMA_Tx_IRQHandler>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200003ac 	.word	0x200003ac

0800062c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <SystemInit+0x5c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <SystemInit+0x5c>)
 8000636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <SystemInit+0x5c>)
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	4911      	ldr	r1, [pc, #68]	; (8000688 <SystemInit+0x5c>)
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <SystemInit+0x60>)
 8000644:	4013      	ands	r3, r2
 8000646:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <SystemInit+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <SystemInit+0x5c>)
 800064e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000652:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000656:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <SystemInit+0x5c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <SystemInit+0x5c>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SystemInit+0x5c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemInit+0x5c>)
 800066a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800066e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SystemInit+0x5c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x64>)
 8000678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800067c:	609a      	str	r2, [r3, #8]
#endif
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	88ffc00c 	.word	0x88ffc00c
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffb7 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f006 f9a1 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd5b 	bl	800017c <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r3, =_sidata
 80006c8:	08006b94 	.word	0x08006b94
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d0:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80006d4:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80006d8:	20000ca0 	.word	0x20000ca0

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>

080006de <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f955 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f80e 	bl	8000710 <HAL_InitTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e001      	b.n	8000704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000700:	f7ff fe7a 	bl	80003f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_InitTick+0x68>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d022      	beq.n	800076a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_InitTick+0x6c>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <HAL_InitTick+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000730:	fbb1 f3f3 	udiv	r3, r1, r3
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f962 	bl	8000a02 <HAL_SYSTICK_Config>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10f      	bne.n	8000764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b0f      	cmp	r3, #15
 8000748:	d809      	bhi.n	800075e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	2200      	movs	r2, #0
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	f04f 30ff 	mov.w	r0, #4294967295
 8000752:	f000 f92c 	bl	80009ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_InitTick+0x70>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e007      	b.n	800076e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e004      	b.n	800076e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e001      	b.n	800076e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000078 	.word	0x20000078
 800077c:	20000070 	.word	0x20000070
 8000780:	20000074 	.word	0x20000074

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4413      	add	r3, r2
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x1c>)
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000c98 	.word	0x20000c98
 80007a4:	20000078 	.word	0x20000078

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000c98 	.word	0x20000c98

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d004      	beq.n	80007e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007e0:	bf00      	nop
 80007e2:	f7ff ffe1 	bl	80007a8 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f7      	bhi.n	80007e2 <HAL_Delay+0x26>
  {
  }
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000078 	.word	0x20000078

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <__NVIC_EnableIRQ+0x34>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff90 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff2d 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff42 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff90 	bl	80008f0 <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5f 	bl	800089c <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff35 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffa2 	bl	8000954 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e059      	b.n	8000ae2 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_DMA_Init+0xd0>)
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d80f      	bhi.n	8000a5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <HAL_DMA_Init+0xd4>)
 8000a42:	4413      	add	r3, r2
 8000a44:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <HAL_DMA_Init+0xd8>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	009a      	lsls	r2, r3, #2
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <HAL_DMA_Init+0xdc>)
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a58:	e00e      	b.n	8000a78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_DMA_Init+0xe0>)
 8000a62:	4413      	add	r3, r2
 8000a64:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <HAL_DMA_Init+0xd8>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	009a      	lsls	r2, r3, #2
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <HAL_DMA_Init+0xe4>)
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40026407 	.word	0x40026407
 8000af0:	bffd9ff8 	.word	0xbffd9ff8
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	40026000 	.word	0x40026000
 8000afc:	bffd9bf8 	.word	0xbffd9bf8
 8000b00:	40026400 	.word	0x40026400

08000b04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e052      	b.n	8000bbc <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0201 	bic.w	r2, r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_DMA_DeInit+0xc4>)
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d80f      	bhi.n	8000b52 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_DMA_DeInit+0xc8>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_DMA_DeInit+0xcc>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	009a      	lsls	r2, r3, #2
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_DMA_DeInit+0xd0>)
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b50:	e00e      	b.n	8000b70 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_DMA_DeInit+0xd4>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_DMA_DeInit+0xcc>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	009a      	lsls	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <HAL_DMA_DeInit+0xd8>)
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 021c 	and.w	r2, r3, #28
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40026407 	.word	0x40026407
 8000bcc:	bffd9ff8 	.word	0xbffd9ff8
 8000bd0:	cccccccd 	.word	0xcccccccd
 8000bd4:	40026000 	.word	0x40026000
 8000bd8:	bffd9bf8 	.word	0xbffd9bf8
 8000bdc:	40026400 	.word	0x40026400

08000be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <HAL_DMA_Start_IT+0x20>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e04b      	b.n	8000c98 <HAL_DMA_Start_IT+0xb8>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d13a      	bne.n	8000c8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2202      	movs	r2, #2
 8000c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0201 	bic.w	r2, r2, #1
 8000c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f95e 	bl	8000efa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d008      	beq.n	8000c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f042 020e 	orr.w	r2, r2, #14
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e00f      	b.n	8000c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 020a 	orr.w	r2, r2, #10
 8000c76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e005      	b.n	8000c96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c92:	2302      	movs	r3, #2
 8000c94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d008      	beq.n	8000cca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e022      	b.n	8000d10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 021c 	and.w	r2, r3, #28
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d005      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e029      	b.n	8000d92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020e 	bic.w	r2, r2, #14
 8000d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 021c 	and.w	r2, r3, #28
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
    }
  }
  return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 031c 	and.w	r3, r3, #28
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d026      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x7a>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d021      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 021c 	and.w	r2, r3, #28
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d071      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e14:	e06c      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 031c 	and.w	r3, r3, #28
 8000e1e:	2202      	movs	r2, #2
 8000e20:	409a      	lsls	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d02e      	beq.n	8000e88 <HAL_DMA_IRQHandler+0xec>
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d029      	beq.n	8000e88 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10b      	bne.n	8000e5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 020a 	bic.w	r2, r2, #10
 8000e50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 021c 	and.w	r2, r3, #28
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e66:	2102      	movs	r1, #2
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d038      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e86:	e033      	b.n	8000ef0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 031c 	and.w	r3, r3, #28
 8000e90:	2208      	movs	r2, #8
 8000e92:	409a      	lsls	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d02a      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x156>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d025      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 020e 	bic.w	r2, r2, #14
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 021c 	and.w	r2, r3, #28
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
}
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 021c 	and.w	r2, r3, #28
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	d108      	bne.n	8000f3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f3c:	e007      	b.n	8000f4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	60da      	str	r2, [r3, #12]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f6e:	e160      	b.n	8001232 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8152 	beq.w	800122c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b12      	cmp	r3, #18
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	6939      	ldr	r1, [r7, #16]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00b      	beq.n	8001034 <HAL_GPIO_Init+0xdc>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	2b11      	cmp	r3, #17
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80ac 	beq.w	800122c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_GPIO_Init+0x2f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a5c      	ldr	r2, [pc, #368]	; (800124c <HAL_GPIO_Init+0x2f4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b5a      	ldr	r3, [pc, #360]	; (800124c <HAL_GPIO_Init+0x2f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x2fc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d025      	beq.n	8001164 <HAL_GPIO_Init+0x20c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x300>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d01f      	beq.n	8001160 <HAL_GPIO_Init+0x208>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x304>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d019      	beq.n	800115c <HAL_GPIO_Init+0x204>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x308>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d013      	beq.n	8001158 <HAL_GPIO_Init+0x200>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x30c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d00d      	beq.n	8001154 <HAL_GPIO_Init+0x1fc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <HAL_GPIO_Init+0x310>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0x1f8>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4a      	ldr	r2, [pc, #296]	; (800126c <HAL_GPIO_Init+0x314>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_GPIO_Init+0x1f4>
 8001148:	2306      	movs	r3, #6
 800114a:	e00c      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 800114c:	2307      	movs	r3, #7
 800114e:	e00a      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 8001150:	2305      	movs	r3, #5
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x20e>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001176:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <HAL_GPIO_Init+0x318>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011a8:	4a31      	ldr	r2, [pc, #196]	; (8001270 <HAL_GPIO_Init+0x318>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_GPIO_Init+0x318>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_GPIO_Init+0x318>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_GPIO_Init+0x318>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_GPIO_Init+0x318>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x318>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <HAL_GPIO_Init+0x318>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f ae97 	bne.w	8000f70 <HAL_GPIO_Init+0x18>
  } 
}
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800
 8001250:	40010000 	.word	0x40010000
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e31d      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c0:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d07b      	beq.n	80013ce <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d006      	beq.n	80012ea <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d10b      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4b87      	ldr	r3, [pc, #540]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d06a      	beq.n	80013cc <HAL_RCC_OscConfig+0x128>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d166      	bne.n	80013cc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e2f7      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b7f      	ldr	r3, [pc, #508]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7e      	ldr	r2, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e02d      	b.n	8001374 <HAL_RCC_OscConfig+0xd0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x96>
 8001320:	4b79      	ldr	r3, [pc, #484]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a78      	ldr	r2, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e01c      	b.n	8001374 <HAL_RCC_OscConfig+0xd0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xb8>
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a70      	ldr	r2, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6e      	ldr	r3, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6d      	ldr	r2, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd0>
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fa14 	bl	80007a8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fa10 	bl	80007a8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e2ad      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fa00 	bl	80007a8 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff f9fc 	bl	80007a8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e299      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d05a      	beq.n	8001490 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d119      	bne.n	800141a <HAL_RCC_OscConfig+0x176>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d116      	bne.n	800141a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x160>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e276      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	493d      	ldr	r1, [pc, #244]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001418:	e03a      	b.n	8001490 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d020      	beq.n	8001464 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_RCC_OscConfig+0x268>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff f9be 	bl	80007a8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff f9ba 	bl	80007a8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e257      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	492a      	ldr	r1, [pc, #168]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x268>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff f99d 	bl	80007a8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff f999 	bl	80007a8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e236      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80b8 	beq.w	800160e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d170      	bne.n	8001586 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x218>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e21a      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d921      	bls.n	8001510 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fba3 	bl	8001c1c <RCC_SetFlashLatencyFromMSIRange>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e208      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4906      	ldr	r1, [pc, #24]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	4901      	ldr	r1, [pc, #4]	; (8001508 <HAL_RCC_OscConfig+0x264>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e020      	b.n	800154a <HAL_RCC_OscConfig+0x2a6>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001510:	4ba4      	ldr	r3, [pc, #656]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	49a1      	ldr	r1, [pc, #644]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001522:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	499c      	ldr	r1, [pc, #624]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fb6e 	bl	8001c1c <RCC_SetFlashLatencyFromMSIRange>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1d3      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	0b5b      	lsrs	r3, r3, #13
 8001550:	3301      	adds	r3, #1
 8001552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800155a:	4a92      	ldr	r2, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800155c:	6892      	ldr	r2, [r2, #8]
 800155e:	0912      	lsrs	r2, r2, #4
 8001560:	f002 020f 	and.w	r2, r2, #15
 8001564:	4990      	ldr	r1, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001566:	5c8a      	ldrb	r2, [r1, r2]
 8001568:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800156a:	4a90      	ldr	r2, [pc, #576]	; (80017ac <HAL_RCC_OscConfig+0x508>)
 800156c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800156e:	4b90      	ldr	r3, [pc, #576]	; (80017b0 <HAL_RCC_OscConfig+0x50c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f8cc 	bl	8000710 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d045      	beq.n	800160e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	e1b5      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d029      	beq.n	80015e2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158e:	4b89      	ldr	r3, [pc, #548]	; (80017b4 <HAL_RCC_OscConfig+0x510>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff f908 	bl	80007a8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff f904 	bl	80007a8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1a1      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ba:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4977      	ldr	r1, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	4972      	ldr	r1, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x510>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff f8de 	bl	80007a8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f0:	f7ff f8da 	bl	80007a8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e177      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001602:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d030      	beq.n	800167c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_OscConfig+0x514>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff f8be 	bl	80007a8 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff f8ba 	bl	80007a8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e157      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x38c>
 800164e:	e015      	b.n	800167c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_OscConfig+0x514>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff f8a7 	bl	80007a8 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff f8a3 	bl	80007a8 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e140      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80b5 	beq.w	80017f4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	4a41      	ldr	r2, [pc, #260]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6253      	str	r3, [r2, #36]	; 0x24
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x518>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x518>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x518>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f86b 	bl	80007a8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff f867 	bl	80007a8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e104      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x518>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x466>
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6353      	str	r3, [r2, #52]	; 0x34
 8001708:	e02d      	b.n	8001766 <HAL_RCC_OscConfig+0x4c2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x488>
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800171c:	6353      	str	r3, [r2, #52]	; 0x34
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001728:	6353      	str	r3, [r2, #52]	; 0x34
 800172a:	e01c      	b.n	8001766 <HAL_RCC_OscConfig+0x4c2>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x4aa>
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6353      	str	r3, [r2, #52]	; 0x34
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6353      	str	r3, [r2, #52]	; 0x34
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0x4c2>
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	6353      	str	r3, [r2, #52]	; 0x34
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001764:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff f81b 	bl	80007a8 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f817 	bl	80007a8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0b2      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_OscConfig+0x500>)
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ee      	beq.n	8001776 <HAL_RCC_OscConfig+0x4d2>
 8001798:	e023      	b.n	80017e2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f805 	bl	80007a8 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017a0:	e019      	b.n	80017d6 <HAL_RCC_OscConfig+0x532>
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08006ae8 	.word	0x08006ae8
 80017ac:	20000070 	.word	0x20000070
 80017b0:	20000074 	.word	0x20000074
 80017b4:	42470020 	.word	0x42470020
 80017b8:	42470680 	.word	0x42470680
 80017bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7fe fff2 	bl	80007a8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e08d      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ee      	bne.n	80017c0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	4a43      	ldr	r2, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d079      	beq.n	80018f0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d056      	beq.n	80018b0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	2b02      	cmp	r3, #2
 8001808:	d13b      	bne.n	8001882 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x65c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7fe ffca 	bl	80007a8 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001818:	f7fe ffc6 	bl	80007a8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e063      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	4319      	orrs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	430b      	orrs	r3, r1
 800184e:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x65c>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7fe ffa5 	bl	80007a8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001862:	f7fe ffa1 	bl	80007a8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e03e      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x5be>
 8001880:	e036      	b.n	80018f0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_RCC_OscConfig+0x65c>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7fe ff8e 	bl	80007a8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7fe ff8a 	bl	80007a8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e027      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x5ec>
 80018ae:	e01f      	b.n	80018f0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e01a      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_OscConfig+0x658>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	42470060 	.word	0x42470060

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e11a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d919      	bls.n	800195a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_ClockConfig+0x34>
 800192c:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a89      	ldr	r2, [pc, #548]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0201 	bic.w	r2, r3, #1
 8001940:	4985      	ldr	r1, [pc, #532]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001948:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0f9      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001966:	4b7d      	ldr	r3, [pc, #500]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	497a      	ldr	r1, [pc, #488]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 808e 	beq.w	8001aa2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800198e:	4b73      	ldr	r3, [pc, #460]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d121      	bne.n	80019de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0d7      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a6:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0cb      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0bf      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0b7      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	495c      	ldr	r1, [pc, #368]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7fe feda 	bl	80007a8 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d112      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7fe fed2 	bl	80007a8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e09b      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a16:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d1ee      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xfc>
 8001a22:	e03e      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7fe febb 	bl	80007a8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e084      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x12a>
 8001a50:	e027      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d11d      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7fe fea4 	bl	80007a8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e06d      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x158>
 8001a7e:	e010      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7fe fe92 	bl	80007a8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e05b      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d219      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x1be>
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0201 	bic.w	r2, r3, #1
 8001aca:	4923      	ldr	r1, [pc, #140]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_RCC_ClockConfig+0x254>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e034      	b.n	8001b4e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4917      	ldr	r1, [pc, #92]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490f      	ldr	r1, [pc, #60]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f823 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b26:	4601      	mov	r1, r0
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_RCC_ClockConfig+0x258>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x25c>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	fa21 f303 	lsr.w	r3, r1, r3
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fde4 	bl	8000710 <HAL_InitTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08006ae8 	.word	0x08006ae8
 8001b64:	20000070 	.word	0x20000070
 8001b68:	20000074 	.word	0x20000074

08001b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d006      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x24>
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d007      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x2a>
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d12c      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b8c:	613b      	str	r3, [r7, #16]
      break;
 8001b8e:	e037      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b92:	613b      	str	r3, [r7, #16]
      break;
 8001b94:	e034      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	0d9b      	lsrs	r3, r3, #22
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001bc0:	fb02 f203 	mul.w	r2, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e007      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bd2:	fb02 f203 	mul.w	r2, r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	613b      	str	r3, [r7, #16]
      break;
 8001be2:	e00d      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0b5b      	lsrs	r3, r3, #13
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	613b      	str	r3, [r7, #16]
      break;
 8001bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c00:	693b      	ldr	r3, [r7, #16]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	016e3600 	.word	0x016e3600
 8001c18:	08006adc 	.word	0x08006adc

08001c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d12c      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e016      	b.n	8001c7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6253      	str	r3, [r2, #36]	; 0x24
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001c80:	d105      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c88:	d101      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 0201 	bic.w	r2, r3, #1
 8001ca8:	490b      	ldr	r1, [pc, #44]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e022      	b.n	8001d34 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7fe fba7 	bl	8000454 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f814 	bl	8001d3c <HAL_SD_InitCard>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00a      	b.n	8001d34 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001d58:	2376      	movs	r3, #118	; 0x76
 8001d5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681d      	ldr	r5, [r3, #0]
 8001d60:	466c      	mov	r4, sp
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	4628      	mov	r0, r5
 8001d76:	f001 fab1 	bl	80032dc <SDIO_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e03a      	b.n	8001e02 <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_SD_InitCard+0xd0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fae6 	bl	8003368 <SDIO_PowerState_ON>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e029      	b.n	8001e02 <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_SD_InitCard+0xd0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 ffd5 	bl	8002d64 <SD_PowerON>
 8001dba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e013      	b.n	8001e02 <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fef4 	bl	8002bc8 <SD_InitCard>
 8001de0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	422580a0 	.word	0x422580a0

08001e10 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0c9      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 80c2 	bne.w	8001fca <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	441a      	add	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d907      	bls.n	8001e6a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0b0      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3380      	adds	r3, #128	; 0x80
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	f7fe fe91 	bl	8000be0 <HAL_DMA_Start_IT>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e06b      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001ef4:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d002      	beq.n	8001f08 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	025b      	lsls	r3, r3, #9
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fab7 	bl	8003484 <SDMMC_CmdBlockLength>
 8001f16:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00f      	beq.n	8001f3e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001f24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e046      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f4a:	2390      	movs	r3, #144	; 0x90
 8001f4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f107 0210 	add.w	r2, r7, #16
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fa62 	bl	800342e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d90a      	bls.n	8001f86 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2282      	movs	r2, #130	; 0x82
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 fac5 	bl	800350c <SDMMC_CmdReadMultiBlock>
 8001f82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f84:	e009      	b.n	8001f9a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2281      	movs	r2, #129	; 0x81
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fa98 	bl	80034c8 <SDMMC_CmdReadSingleBlock>
 8001f98:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e002      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3730      	adds	r7, #48	; 0x30
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080029e5 	.word	0x080029e5
 8001fd8:	08002a55 	.word	0x08002a55
 8001fdc:	004005ff 	.word	0x004005ff
 8001fe0:	4225858c 	.word	0x4225858c

08001fe4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ce      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	f040 80c7 	bne.w	80021a8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	441a      	add	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	429a      	cmp	r2, r3
 800202c:	d907      	bls.n	800203e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0b5      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2203      	movs	r2, #3
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002068:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002070:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	; 0x34

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	025b      	lsls	r3, r3, #9
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002090:	4618      	mov	r0, r3
 8002092:	f001 f9f7 	bl	8003484 <SDMMC_CmdBlockLength>
 8002096:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00f      	beq.n	80020be <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e075      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d90a      	bls.n	80020da <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	22a0      	movs	r2, #160	; 0xa0
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fa5f 	bl	8003594 <SDMMC_CmdWriteMultiBlock>
 80020d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020d8:	e009      	b.n	80020ee <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2290      	movs	r2, #144	; 0x90
 80020de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 fa32 	bl	8003550 <SDMMC_CmdWriteSingleBlock>
 80020ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	431a      	orrs	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e047      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3380      	adds	r3, #128	; 0x80
 800212c:	461a      	mov	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	f7fe fd54 	bl	8000be0 <HAL_DMA_Start_IT>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01c      	beq.n	8002178 <HAL_SD_WriteBlocks_DMA+0x194>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800214c:	f023 0302 	bic.w	r3, r3, #2
 8002150:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e018      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002184:	2390      	movs	r3, #144	; 0x90
 8002186:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002190:	2301      	movs	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f107 0210 	add.w	r2, r7, #16
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f945 	bl	800342e <SDIO_ConfigData>

      return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3730      	adds	r7, #48	; 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	080029bd 	.word	0x080029bd
 80021b8:	08002a55 	.word	0x08002a55
 80021bc:	004005ff 	.word	0x004005ff
 80021c0:	4225858c 	.word	0x4225858c

080021c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_SD_IRQHandler+0x2e>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 ffd0 	bl	8003190 <SD_Read_IT>
 80021f0:	e165      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 808f 	beq.w	8002320 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800221a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800221e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d039      	beq.n	80022ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_SD_IRQHandler+0x8a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f9c0 	bl	80035d8 <SDMMC_CmdStopTransfer>
 8002258:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f92f 	bl	80024d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f240 523a 	movw	r2, #1338	; 0x53a
 800227a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <HAL_SD_IRQHandler+0xda>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f001 fe3e 	bl	8003f20 <HAL_SD_RxCpltCallback>
 80022a4:	e10b      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f001 fe30 	bl	8003f0c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022ac:	e107      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8102 	beq.w	80024be <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d011      	beq.n	80022e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 f985 	bl	80035d8 <SDMMC_CmdStopTransfer>
 80022ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8f4 	bl	80024d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80e5 	bne.w	80024be <HAL_SD_IRQHandler+0x2fa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80df 	bne.w	80024be <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f001 fdf7 	bl	8003f0c <HAL_SD_TxCpltCallback>
}
 800231e:	e0ce      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_SD_IRQHandler+0x17c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 ff7a 	bl	8003232 <SD_Write_IT>
 800233e:	e0be      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002346:	f240 233a 	movw	r3, #570	; 0x23a
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80b6 	beq.w	80024be <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	f043 0202 	orr.w	r2, r3, #2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	f043 0208 	orr.w	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f043 0208 	orr.w	r2, r3, #8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f240 723a 	movw	r2, #1850	; 0x73a
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80023ec:	f023 0302 	bic.w	r3, r3, #2
 80023f0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f8ee 	bl	80035d8 <SDMMC_CmdStopTransfer>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f855 	bl	80024d0 <HAL_SD_ErrorCallback>
}
 8002426:	e04a      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d045      	beq.n	80024be <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_SD_IRQHandler+0x282>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d011      	beq.n	800246a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <HAL_SD_IRQHandler+0x304>)
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc61 	bl	8000d1a <HAL_DMA_Abort_IT>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d02f      	beq.n	80024be <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb42 	bl	8002aec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002468:	e029      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_SD_IRQHandler+0x2ba>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d011      	beq.n	80024a2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_SD_IRQHandler+0x308>)
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fc45 	bl	8000d1a <HAL_DMA_Abort_IT>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fb5d 	bl	8002b5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80024a0:	e00d      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f001 fd1e 	bl	8003ef8 <HAL_SD_AbortCallback>
}
 80024bc:	e7ff      	b.n	80024be <HAL_SD_IRQHandler+0x2fa>
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	08002aed 	.word	0x08002aed
 80024cc:	08002b5b 	.word	0x08002b5b

080024d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f2:	0f9b      	lsrs	r3, r3, #30
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	b2da      	uxtb	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002510:	0e1b      	lsrs	r3, r3, #24
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	b2da      	uxtb	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	b2da      	uxtb	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b2da      	uxtb	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253a:	b2da      	uxtb	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002544:	0d1b      	lsrs	r3, r3, #20
 8002546:	b29a      	uxth	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	b2da      	uxtb	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002562:	0bdb      	lsrs	r3, r3, #15
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002574:	0b9b      	lsrs	r3, r3, #14
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002586:	0b5b      	lsrs	r3, r3, #13
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002598:	0b1b      	lsrs	r3, r3, #12
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d163      	bne.n	800267c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80025c4:	0f92      	lsrs	r2, r2, #30
 80025c6:	431a      	orrs	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d0:	0edb      	lsrs	r3, r3, #27
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	0e1b      	lsrs	r3, r3, #24
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f4:	0d5b      	lsrs	r3, r3, #21
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	b2da      	uxtb	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002618:	0bdb      	lsrs	r3, r3, #15
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	b2da      	uxtb	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	3302      	adds	r3, #2
 800263c:	2201      	movs	r2, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002646:	fb02 f203 	mul.w	r2, r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	7a1b      	ldrb	r3, [r3, #8]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	2201      	movs	r2, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002668:	0a52      	lsrs	r2, r2, #9
 800266a:	fb02 f203 	mul.w	r2, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002678:	661a      	str	r2, [r3, #96]	; 0x60
 800267a:	e031      	b.n	80026e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	2b01      	cmp	r3, #1
 8002682:	d11d      	bne.n	80026c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	3301      	adds	r3, #1
 80026a0:	029a      	lsls	r2, r3, #10
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	661a      	str	r2, [r3, #96]	; 0x60
 80026be:	e00f      	b.n	80026e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_SD_GetCardCSD+0x344>)
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e09d      	b.n	800281c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e4:	0b9b      	lsrs	r3, r3, #14
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270e:	b2da      	uxtb	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	0fdb      	lsrs	r3, r3, #31
 800271a:	b2da      	uxtb	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	0f5b      	lsrs	r3, r3, #29
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	0e9b      	lsrs	r3, r3, #26
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	b2da      	uxtb	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	0d9b      	lsrs	r3, r3, #22
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	0d5b      	lsrs	r3, r3, #21
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	0bdb      	lsrs	r3, r3, #15
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	0b9b      	lsrs	r3, r3, #14
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	0b1b      	lsrs	r3, r3, #12
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280a:	b2da      	uxtb	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	004005ff 	.word	0x004005ff

0800282c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af04      	add	r7, sp, #16
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	2b03      	cmp	r3, #3
 800289c:	d02e      	beq.n	80028fc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d106      	bne.n	80028b4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
 80028b2:	e029      	b.n	8002908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d10a      	bne.n	80028d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb07 	bl	8002ed0 <SD_WideBus_Enable>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
 80028d0:	e01a      	b.n	8002908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fb44 	bl	8002f66 <SD_WideBus_Disable>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
 80028ec:	e00c      	b.n	8002908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
 80028fa:	e005      	b.n	8002908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e024      	b.n	800296e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681d      	ldr	r5, [r3, #0]
 800294a:	466c      	mov	r4, sp
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295e:	4628      	mov	r0, r5
 8002960:	f000 fcbc 	bl	80032dc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3728      	adds	r7, #40	; 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	004005ff 	.word	0x004005ff

0800297c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa76 	bl	8002e80 <SD_SendStatus>
 8002994:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80029b2:	693b      	ldr	r3, [r7, #16]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2b82      	cmp	r3, #130	; 0x82
 80029f8:	d111      	bne.n	8002a1e <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fdea 	bl	80035d8 <SDMMC_CmdStopTransfer>
 8002a04:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fd59 	bl	80024d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0208 	bic.w	r2, r2, #8
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f001 fa6a 	bl	8003f20 <HAL_SD_RxCpltCallback>
#endif
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <SD_DMAError+0x2a>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d12d      	bne.n	8002ada <SD_DMAError+0x86>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <SD_DMAError+0x94>)
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff6a 	bl	800297c <HAL_SD_GetCardState>
 8002aa8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d002      	beq.n	8002ab6 <SD_DMAError+0x62>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d10a      	bne.n	8002acc <SD_DMAError+0x78>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd8c 	bl	80035d8 <SDMMC_CmdStopTransfer>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff fcf8 	bl	80024d0 <HAL_SD_ErrorCallback>
#endif
}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	004005ff 	.word	0x004005ff

08002aec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff ff39 	bl	800297c <HAL_SD_GetCardState>
 8002b0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d002      	beq.n	8002b26 <SD_DMATxAbort+0x3a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10a      	bne.n	8002b3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd54 	bl	80035d8 <SDMMC_CmdStopTransfer>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f001 f9d7 	bl	8003ef8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002b4a:	e002      	b.n	8002b52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff fcbf 	bl	80024d0 <HAL_SD_ErrorCallback>
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff ff02 	bl	800297c <HAL_SD_GetCardState>
 8002b78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d002      	beq.n	8002b94 <SD_DMARxAbort+0x3a>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10a      	bne.n	8002baa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fd1d 	bl	80035d8 <SDMMC_CmdStopTransfer>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f001 f9a0 	bl	8003ef8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002bb8:	e002      	b.n	8002bc0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff fc88 	bl	80024d0 <HAL_SD_ErrorCallback>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b094      	sub	sp, #80	; 0x50
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fbd4 	bl	8003386 <SDIO_GetPowerState>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002be4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002be8:	e0b7      	b.n	8002d5a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d02f      	beq.n	8002c52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fdf8 	bl	80037ec <SDMMC_CmdSendCID>
 8002bfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	e0a8      	b.n	8002d5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fbfb 	bl	800340a <SDIO_GetResponse>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2104      	movs	r1, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fbf2 	bl	800340a <SDIO_GetResponse>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2108      	movs	r1, #8
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fbe9 	bl	800340a <SDIO_GetResponse>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	210c      	movs	r1, #12
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fbe0 	bl	800340a <SDIO_GetResponse>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d00d      	beq.n	8002c76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f107 020e 	add.w	r2, r7, #14
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fdfe 	bl	8003866 <SDMMC_CmdSetRelAdd>
 8002c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <SD_InitCard+0xae>
    {
      return errorstate;
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	e071      	b.n	8002d5a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d036      	beq.n	8002cec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fdc8 	bl	8003828 <SDMMC_CmdSendCSD>
 8002c98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	e05a      	b.n	8002d5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fbad 	bl	800340a <SDIO_GetResponse>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2104      	movs	r1, #4
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fba4 	bl	800340a <SDIO_GetResponse>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2108      	movs	r1, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fb9b 	bl	800340a <SDIO_GetResponse>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	210c      	movs	r1, #12
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fb92 	bl	800340a <SDIO_GetResponse>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fb89 	bl	800340a <SDIO_GetResponse>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	0d1a      	lsrs	r2, r3, #20
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fbec 	bl	80024e4 <HAL_SD_GetCardCSD>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d16:	e020      	b.n	8002d5a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	f04f 0400 	mov.w	r4, #0
 8002d26:	461a      	mov	r2, r3
 8002d28:	4623      	mov	r3, r4
 8002d2a:	4608      	mov	r0, r1
 8002d2c:	f000 fc76 	bl	800361c <SDMMC_CmdSelDesel>
 8002d30:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SD_InitCard+0x174>
  {
    return errorstate;
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	e00e      	b.n	8002d5a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681d      	ldr	r5, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	466c      	mov	r4, sp
 8002d44:	f103 0210 	add.w	r2, r3, #16
 8002d48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d4e:	3304      	adds	r3, #4
 8002d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 fac2 	bl	80032dc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3740      	adds	r7, #64	; 0x40
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fc70 	bl	8003662 <SDMMC_CmdGoIdleState>
 8002d82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	e072      	b.n	8002e74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fc83 	bl	800369e <SDMMC_CmdOperCond>
 8002d98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fc59 	bl	8003662 <SDMMC_CmdGoIdleState>
 8002db0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	e05b      	b.n	8002e74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d137      	bne.n	8002e3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fc83 	bl	80036dc <SDMMC_CmdAppCommand>
 8002dd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d02d      	beq.n	8002e3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002de2:	e047      	b.n	8002e74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fc76 	bl	80036dc <SDMMC_CmdAppCommand>
 8002df0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <SD_PowerON+0x98>
    {
      return errorstate;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	e03b      	b.n	8002e74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	491e      	ldr	r1, [pc, #120]	; (8002e7c <SD_PowerON+0x118>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc8c 	bl	8003720 <SDMMC_CmdAppOperCommand>
 8002e08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e14:	e02e      	b.n	8002e74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 faf4 	bl	800340a <SDIO_GetResponse>
 8002e22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	0fdb      	lsrs	r3, r3, #31
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <SD_PowerON+0xcc>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <SD_PowerON+0xce>
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

    count++;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d802      	bhi.n	8002e4a <SD_PowerON+0xe6>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0cc      	beq.n	8002de4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d902      	bls.n	8002e5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e58:	e00c      	b.n	8002e74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
 8002e6a:	e002      	b.n	8002e72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	c1100000 	.word	0xc1100000

08002e80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002e90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e94:	e018      	b.n	8002ec8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 fd00 	bl	80038a8 <SDMMC_CmdSendStatus>
 8002ea8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	e009      	b.n	8002ec8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faa5 	bl	800340a <SDIO_GetResponse>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa8f 	bl	800340a <SDIO_GetResponse>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef6:	d102      	bne.n	8002efe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002efc:	e02f      	b.n	8002f5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f879 	bl	8002ffc <SD_FindSCR>
 8002f0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	e023      	b.n	8002f5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fbd5 	bl	80036dc <SDMMC_CmdAppCommand>
 8002f32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e00f      	b.n	8002f5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fc0e 	bl	8003766 <SDMMC_CmdBusWidth>
 8002f4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	e003      	b.n	8002f5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e001      	b.n	8002f5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa44 	bl	800340a <SDIO_GetResponse>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f8c:	d102      	bne.n	8002f94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f92:	e02f      	b.n	8002ff4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f82e 	bl	8002ffc <SD_FindSCR>
 8002fa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	e023      	b.n	8002ff4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01c      	beq.n	8002ff0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f000 fb8a 	bl	80036dc <SDMMC_CmdAppCommand>
 8002fc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	e00f      	b.n	8002ff4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fbc3 	bl	8003766 <SDMMC_CmdBusWidth>
 8002fe0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	e003      	b.n	8002ff4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e001      	b.n	8002ff4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ff0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b08f      	sub	sp, #60	; 0x3c
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7fd fbcf 	bl	80007a8 <HAL_GetTick>
 800300a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2108      	movs	r1, #8
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa2e 	bl	8003484 <SDMMC_CmdBlockLength>
 8003028:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	e0a9      	b.n	8003188 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f000 fb4b 	bl	80036dc <SDMMC_CmdAppCommand>
 8003046:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <SD_FindSCR+0x56>
  {
    return errorstate;
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	e09a      	b.n	8003188 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003058:	2308      	movs	r3, #8
 800305a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800305c:	2330      	movs	r3, #48	; 0x30
 800305e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003060:	2302      	movs	r3, #2
 8003062:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003068:	2301      	movs	r3, #1
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f107 0210 	add.w	r2, r7, #16
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f9d9 	bl	800342e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fb92 	bl	80037aa <SDMMC_CmdSendSCR>
 8003086:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	e07a      	b.n	8003188 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f107 0208 	add.w	r2, r7, #8
 80030ac:	18d4      	adds	r4, r2, r3
 80030ae:	4608      	mov	r0, r1
 80030b0:	f000 f93e 	bl	8003330 <SDIO_ReadFIFO>
 80030b4:	4603      	mov	r3, r0
 80030b6:	6023      	str	r3, [r4, #0]
      index++;
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	3301      	adds	r3, #1
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80030be:	f7fd fb73 	bl	80007a8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d102      	bne.n	80030d4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80030ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030d2:	e059      	b.n	8003188 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	f240 432a 	movw	r3, #1066	; 0x42a
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0d6      	beq.n	8003092 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80030fa:	2308      	movs	r3, #8
 80030fc:	e044      	b.n	8003188 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003114:	2302      	movs	r3, #2
 8003116:	e037      	b.n	8003188 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2220      	movs	r2, #32
 800312c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800312e:	2320      	movs	r3, #32
 8003130:	e02a      	b.n	8003188 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f240 523a 	movw	r2, #1338	; 0x53a
 800313a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	061a      	lsls	r2, r3, #24
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003148:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003152:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0e1b      	lsrs	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	601a      	str	r2, [r3, #0]
    scr++;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	3304      	adds	r3, #4
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	061a      	lsls	r2, r3, #24
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003170:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800317a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0e1b      	lsrs	r3, r3, #24
 8003180:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	373c      	adds	r7, #60	; 0x3c
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}

08003190 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03f      	beq.n	800322a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e033      	b.n	8003218 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f8bb 	bl	8003330 <SDIO_ReadFIFO>
 80031ba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3301      	adds	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	0e1b      	lsrs	r3, r3, #24
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3b01      	subs	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3301      	adds	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b07      	cmp	r3, #7
 800321c:	d9c8      	bls.n	80031b0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d043      	beq.n	80032d4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e037      	b.n	80032c2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3b01      	subs	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3b01      	subs	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	3b01      	subs	r3, #1
 8003292:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	061a      	lsls	r2, r3, #24
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4313      	orrs	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f107 0208 	add.w	r2, r7, #8
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f846 	bl	8003348 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	d9c4      	bls.n	8003252 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80032dc:	b084      	sub	sp, #16
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	f107 001c 	add.w	r0, r7, #28
 80032ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80032f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80032f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80032f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80032fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80032fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003302:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003306:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003316:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	b004      	add	sp, #16
 800332e:	4770      	bx	lr

08003330 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003376:	2002      	movs	r0, #2
 8003378:	f7fd fa20 	bl	80007bc <HAL_Delay>
  
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0303 	and.w	r3, r3, #3
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80033c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80033ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3314      	adds	r3, #20
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
}  
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003454:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800345a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003460:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003478:	2300      	movs	r3, #0

}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003492:	2310      	movs	r3, #16
 8003494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800349e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff78 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	2110      	movs	r1, #16
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa40 	bl	800393c <SDMMC_GetCmdResp1>
 80034bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034be:	69fb      	ldr	r3, [r7, #28]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80034d6:	2311      	movs	r3, #17
 80034d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034da:	2340      	movs	r3, #64	; 0x40
 80034dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ff56 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	2111      	movs	r1, #17
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa1e 	bl	800393c <SDMMC_GetCmdResp1>
 8003500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003502:	69fb      	ldr	r3, [r7, #28]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800351a:	2312      	movs	r3, #18
 800351c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800351e:	2340      	movs	r3, #64	; 0x40
 8003520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800352c:	f107 0308 	add.w	r3, r7, #8
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff34 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	2112      	movs	r1, #18
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9fc 	bl	800393c <SDMMC_GetCmdResp1>
 8003544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003546:	69fb      	ldr	r3, [r7, #28]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800355e:	2318      	movs	r3, #24
 8003560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003562:	2340      	movs	r3, #64	; 0x40
 8003564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800356a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff12 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	2118      	movs	r1, #24
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9da 	bl	800393c <SDMMC_GetCmdResp1>
 8003588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800358a:	69fb      	ldr	r3, [r7, #28]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80035a2:	2319      	movs	r3, #25
 80035a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fef0 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	2119      	movs	r1, #25
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9b8 	bl	800393c <SDMMC_GetCmdResp1>
 80035cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035ce:	69fb      	ldr	r3, [r7, #28]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80035e4:	230c      	movs	r3, #12
 80035e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035e8:	2340      	movs	r3, #64	; 0x40
 80035ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fecf 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <SDMMC_CmdStopTransfer+0x40>)
 8003604:	210c      	movs	r1, #12
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f998 	bl	800393c <SDMMC_GetCmdResp1>
 800360c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800360e:	69fb      	ldr	r3, [r7, #28]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	05f5e100 	.word	0x05f5e100

0800361c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800362c:	2307      	movs	r3, #7
 800362e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	4619      	mov	r1, r3
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff feab 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	2107      	movs	r1, #7
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f973 	bl	800393c <SDMMC_GetCmdResp1>
 8003656:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	; 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800367a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003680:	f107 0308 	add.w	r3, r7, #8
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fe8a 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f92d 	bl	80038ec <SDMMC_GetCmdError>
 8003692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003694:	69fb      	ldr	r3, [r7, #28]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b088      	sub	sp, #32
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80036a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80036aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80036ac:	2308      	movs	r3, #8
 80036ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fe6b 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fb16 	bl	8003cfc <SDMMC_GetCmdResp7>
 80036d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036d2:	69fb      	ldr	r3, [r7, #28]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80036ea:	2337      	movs	r3, #55	; 0x37
 80036ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fe4c 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	2137      	movs	r1, #55	; 0x37
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f914 	bl	800393c <SDMMC_GetCmdResp1>
 8003714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003716:	69fb      	ldr	r3, [r7, #28]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003736:	2329      	movs	r3, #41	; 0x29
 8003738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fe26 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa23 	bl	8003ba0 <SDMMC_GetCmdResp3>
 800375a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800375c:	69fb      	ldr	r3, [r7, #28]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b088      	sub	sp, #32
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003774:	2306      	movs	r3, #6
 8003776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003778:	2340      	movs	r3, #64	; 0x40
 800377a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003784:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fe07 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	2106      	movs	r1, #6
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8cf 	bl	800393c <SDMMC_GetCmdResp1>
 800379e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037a0:	69fb      	ldr	r3, [r7, #28]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b088      	sub	sp, #32
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80037b6:	2333      	movs	r3, #51	; 0x33
 80037b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037ba:	2340      	movs	r3, #64	; 0x40
 80037bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fde6 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	2133      	movs	r1, #51	; 0x33
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8ae 	bl	800393c <SDMMC_GetCmdResp1>
 80037e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037e2:	69fb      	ldr	r3, [r7, #28]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80037f8:	2302      	movs	r3, #2
 80037fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80037fc:	23c0      	movs	r3, #192	; 0xc0
 80037fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fdc5 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f97c 	bl	8003b14 <SDMMC_GetCmdResp2>
 800381c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003836:	2309      	movs	r3, #9
 8003838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003846:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003848:	f107 0308 	add.w	r3, r7, #8
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fda6 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f95d 	bl	8003b14 <SDMMC_GetCmdResp2>
 800385a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800385c:	69fb      	ldr	r3, [r7, #28]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b088      	sub	sp, #32
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003874:	2303      	movs	r3, #3
 8003876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003878:	2340      	movs	r3, #64	; 0x40
 800387a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003884:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fd87 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	2103      	movs	r1, #3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9bc 	bl	8003c14 <SDMMC_GetCmdResp6>
 800389c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800389e:	69fb      	ldr	r3, [r7, #28]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80038b6:	230d      	movs	r3, #13
 80038b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fd66 	bl	80033a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	210d      	movs	r1, #13
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f82e 	bl	800393c <SDMMC_GetCmdResp1>
 80038e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038e2:	69fb      	ldr	r3, [r7, #28]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80038ec:	b490      	push	{r4, r7}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <SDMMC_GetCmdError+0x48>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <SDMMC_GetCmdError+0x4c>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003908:	4623      	mov	r3, r4
 800390a:	1e5c      	subs	r4, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003914:	e009      	b.n	800392a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f2      	beq.n	8003908 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	22c5      	movs	r2, #197	; 0xc5
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bc90      	pop	{r4, r7}
 8003932:	4770      	bx	lr
 8003934:	20000070 	.word	0x20000070
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	460b      	mov	r3, r1
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <SDMMC_GetCmdResp1+0x1cc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6f      	ldr	r2, [pc, #444]	; (8003b0c <SDMMC_GetCmdResp1+0x1d0>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0a5b      	lsrs	r3, r3, #9
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800395c:	4623      	mov	r3, r4
 800395e:	1e5c      	subs	r4, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003968:	e0c9      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <SDMMC_GetCmdResp1+0x20>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1eb      	bne.n	800395c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2204      	movs	r2, #4
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003996:	2304      	movs	r3, #4
 8003998:	e0b1      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0a6      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	22c5      	movs	r2, #197	; 0xc5
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff fd1b 	bl	80033f2 <SDIO_GetCommandResponse>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d001      	beq.n	80039ca <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e099      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80039ca:	2100      	movs	r1, #0
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fd1c 	bl	800340a <SDIO_GetResponse>
 80039d2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <SDMMC_GetCmdResp1+0x1d4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80039de:	2300      	movs	r3, #0
 80039e0:	e08d      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da02      	bge.n	80039ee <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80039e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ec:	e087      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80039f8:	2340      	movs	r3, #64	; 0x40
 80039fa:	e080      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	e079      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a18:	e071      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a28:	e069      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a38:	e061      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a48:	e059      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a58:	e051      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	e049      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a78:	e041      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8003a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a88:	e039      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a98:	e031      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003aa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003aa8:	e029      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ab8:	e021      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ac8:	e019      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003ad4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ad8:	e011      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003ae4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ae8:	e009      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003af4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003af8:	e001      	b.n	8003afe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd90      	pop	{r4, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000070 	.word	0x20000070
 8003b0c:	10624dd3 	.word	0x10624dd3
 8003b10:	fdffe008 	.word	0xfdffe008

08003b14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003b14:	b490      	push	{r4, r7}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <SDMMC_GetCmdResp2+0x84>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <SDMMC_GetCmdResp2+0x88>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0a5b      	lsrs	r3, r3, #9
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b30:	4623      	mov	r3, r4
 8003b32:	1e5c      	subs	r4, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b3c:	e026      	b.n	8003b8c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <SDMMC_GetCmdResp2+0x1c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1eb      	bne.n	8003b30 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2204      	movs	r2, #4
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e00e      	b.n	8003b8c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e003      	b.n	8003b8c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	22c5      	movs	r2, #197	; 0xc5
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc90      	pop	{r4, r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000070 	.word	0x20000070
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ba0:	b490      	push	{r4, r7}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <SDMMC_GetCmdResp3+0x6c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <SDMMC_GetCmdResp3+0x70>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0a5b      	lsrs	r3, r3, #9
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	1e5c      	subs	r4, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bc8:	e01b      	b.n	8003c02 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <SDMMC_GetCmdResp3+0x1c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1eb      	bne.n	8003bbc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	e003      	b.n	8003c02 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	22c5      	movs	r2, #197	; 0xc5
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc90      	pop	{r4, r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	20000070 	.word	0x20000070
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c22:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <SDMMC_GetCmdResp6+0xe0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a34      	ldr	r2, [pc, #208]	; (8003cf8 <SDMMC_GetCmdResp6+0xe4>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	0a5b      	lsrs	r3, r3, #9
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003c36:	4623      	mov	r3, r4
 8003c38:	1e5c      	subs	r4, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c42:	e052      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <SDMMC_GetCmdResp6+0x22>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1eb      	bne.n	8003c36 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c70:	2304      	movs	r3, #4
 8003c72:	e03a      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02f      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fbb1 	bl	80033f2 <SDIO_GetCommandResponse>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d001      	beq.n	8003c9e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e025      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22c5      	movs	r2, #197	; 0xc5
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fbaf 	bl	800340a <SDIO_GetResponse>
 8003cac:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e011      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cd4:	e009      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce4:	e001      	b.n	8003cea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd90      	pop	{r4, r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000070 	.word	0x20000070
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003cfc:	b490      	push	{r4, r7}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <SDMMC_GetCmdResp7+0x90>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <SDMMC_GetCmdResp7+0x94>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a5b      	lsrs	r3, r3, #9
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003d18:	4623      	mov	r3, r4
 8003d1a:	1e5c      	subs	r4, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d24:	e02c      	b.n	8003d80 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <SDMMC_GetCmdResp7+0x1c>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1eb      	bne.n	8003d18 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d52:	2304      	movs	r3, #4
 8003d54:	e014      	b.n	8003d80 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e009      	b.n	8003d80 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003d7e:	2300      	movs	r3, #0
  
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc90      	pop	{r4, r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000070 	.word	0x20000070
 8003d90:	10624dd3 	.word	0x10624dd3

08003d94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003d98:	4904      	ldr	r1, [pc, #16]	; (8003dac <MX_FATFS_Init+0x18>)
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <MX_FATFS_Init+0x1c>)
 8003d9c:	f002 fe22 	bl	80069e4 <FATFS_LinkDriver>
 8003da0:	4603      	mov	r3, r0
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <MX_FATFS_Init+0x20>)
 8003da6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200003a8 	.word	0x200003a8
 8003db0:	08006af8 	.word	0x08006af8
 8003db4:	20000c9c 	.word	0x20000c9c

08003db8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003dc2:	f000 f8bd 	bl	8003f40 <BSP_SD_IsDetected>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e011      	b.n	8003df4 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003dd0:	480a      	ldr	r0, [pc, #40]	; (8003dfc <BSP_SD_Init+0x44>)
 8003dd2:	f7fd ff83 	bl	8001cdc <HAL_SD_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d108      	bne.n	8003df2 <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 8003de0:	2100      	movs	r1, #0
 8003de2:	4806      	ldr	r0, [pc, #24]	; (8003dfc <BSP_SD_Init+0x44>)
 8003de4:	f7fe fd4e 	bl	8002884 <HAL_SD_ConfigWideBusOperation>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200003ac 	.word	0x200003ac

08003e00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read  
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  hsd.hdmatx = NULL;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigRx(&hsd);
 8003e16:	480d      	ldr	r0, [pc, #52]	; (8003e4c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e18:	f000 f8b6 	bl	8003f88 <SD_DMAConfigRx>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    state = HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	4807      	ldr	r0, [pc, #28]	; (8003e4c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e2e:	f7fd ffef 	bl	8001e10 <HAL_SD_ReadBlocks_DMA>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <BSP_SD_ReadBlocks_DMA+0x42>
  }    
  else
  {
    return MSD_ERROR;
 8003e40:	2301      	movs	r3, #1
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200003ac 	.word	0x200003ac

08003e50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written  
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  hsd.hdmarx = NULL;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigTx(&hsd);
 8003e66:	480d      	ldr	r0, [pc, #52]	; (8003e9c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e68:	f000 f8d6 	bl	8004018 <SD_DMAConfigTx>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <BSP_SD_WriteBlocks_DMA+0x36>
  { 
    /* Write block(s) in DMA transfer mode */
    state = HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	4807      	ldr	r0, [pc, #28]	; (8003e9c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e7e:	f7fe f8b1 	bl	8001fe4 <HAL_SD_WriteBlocks_DMA>
 8003e82:	4603      	mov	r3, r0
 8003e84:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8003e90:	2301      	movs	r3, #1
  } 
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200003ac 	.word	0x200003ac

08003ea0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 8003ea6:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <BSP_SD_GetCardState+0x38>)
 8003ea8:	f7fe fd68 	bl	800297c <HAL_SD_GetCardState>
 8003eac:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d101      	bne.n	8003eb8 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e00b      	b.n	8003ed0 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d005      	beq.n	8003eca <BSP_SD_GetCardState+0x2a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d002      	beq.n	8003eca <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d101      	bne.n	8003ece <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200003ac 	.word	0x200003ac

08003edc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <BSP_SD_GetCardInfo+0x18>)
 8003ee8:	f7fe fca0 	bl	800282c <HAL_SD_GetCardInfo>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200003ac 	.word	0x200003ac

08003ef8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8003f00:	f000 f818 	bl	8003f34 <BSP_SD_AbortCallback>
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8003f14:	f000 fad2 	bl	80044bc <BSP_SD_WriteCpltCallback>
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8003f28:	f000 fad4 	bl	80044d4 <BSP_SD_ReadCpltCallback>
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003f46:	2301      	movs	r3, #1
 8003f48:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	b2db      	uxtb	r3, r3
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <BSP_SD_DMA_Tx_IRQHandler>:

/* USER CODE BEGIN DMAConfigCode */

void BSP_SD_DMA_Tx_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hsd.hdmatx);
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <BSP_SD_DMA_Tx_IRQHandler+0x14>)
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc ff1b 	bl	8000d9c <HAL_DMA_IRQHandler>
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200003ac 	.word	0x200003ac

08003f70 <BSP_SD_DMA_Rx_IRQHandler>:
/**
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hsd.hdmarx);
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <BSP_SD_DMA_Rx_IRQHandler+0x14>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc ff0f 	bl	8000d9c <HAL_DMA_IRQHandler>
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200003ac 	.word	0x200003ac

08003f88 <SD_DMAConfigRx>:



HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	static DMA_HandleTypeDef hdma_rx;
	HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]

	HAL_DMA_DeInit(hsd->hdmatx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fdb3 	bl	8000b04 <HAL_DMA_DeInit>

	/* Configure the DMA Rx parameters */
	hdma_rx.Instance = DMA2_Channel4;
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <SD_DMAConfigRx+0x8c>)
 8003fa2:	601a      	str	r2, [r3, #0]
	hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	605a      	str	r2, [r3, #4]
	hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
	hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	60da      	str	r2, [r3, #12]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	611a      	str	r2, [r3, #16]
	hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	615a      	str	r2, [r3, #20]
	hdma_rx.Init.Mode = DMA_NORMAL;
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
	hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003fd2:	61da      	str	r2, [r3, #28]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsd,hdmarx,hdma_rx);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6253      	str	r3, [r2, #36]	; 0x24

	/* Stop any ongoing transfer and reset the state*/
	  HAL_DMA_Abort(&hdma_rx);
 8003fe0:	480b      	ldr	r0, [pc, #44]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fe2:	f7fc fe5d 	bl	8000ca0 <HAL_DMA_Abort>

	/* Deinitialize the Channel for new transfer */
	  HAL_DMA_DeInit(&hdma_rx);
 8003fe6:	480a      	ldr	r0, [pc, #40]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fe8:	f7fc fd8c 	bl	8000b04 <HAL_DMA_DeInit>

	/* Configure the DMA Channel */
	  status = HAL_DMA_Init(&hdma_rx);
 8003fec:	4808      	ldr	r0, [pc, #32]	; (8004010 <SD_DMAConfigRx+0x88>)
 8003fee:	f7fc fd15 	bl	8000a1c <HAL_DMA_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]

	/* NVIC configuration for DMA transfer complete interrupt */
	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2105      	movs	r1, #5
 8003ffa:	2035      	movs	r0, #53	; 0x35
 8003ffc:	f7fc fcd7 	bl	80009ae <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004000:	2035      	movs	r0, #53	; 0x35
 8004002:	f7fc fcf0 	bl	80009e6 <HAL_NVIC_EnableIRQ>

	  return status;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	2000009c 	.word	0x2000009c
 8004014:	40026444 	.word	0x40026444

08004018 <SD_DMAConfigTx>:


HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the DMA Tx parameters */
  	hdma_tx.Instance = DMA2_Channel4;
 8004024:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <SD_DMAConfigTx+0x84>)
 8004028:	601a      	str	r2, [r3, #0]
  	hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <SD_DMAConfigTx+0x80>)
 800402c:	2210      	movs	r2, #16
 800402e:	605a      	str	r2, [r3, #4]
  	hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  	hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	60da      	str	r2, [r3, #12]
  	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <SD_DMAConfigTx+0x80>)
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004042:	611a      	str	r2, [r3, #16]
  	hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404a:	615a      	str	r2, [r3, #20]
  	hdma_tx.Init.Mode = DMA_NORMAL;
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <SD_DMAConfigTx+0x80>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]
  	hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004054:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004058:	61da      	str	r2, [r3, #28]

  	/* Associate the DMA handle */
  	__HAL_LINKDMA(hsd,hdmatx,hdma_tx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <SD_DMAConfigTx+0x80>)
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6253      	str	r3, [r2, #36]	; 0x24

  	/* Stop any ongoing transfer and reset the state*/
  	  HAL_DMA_Abort(&hdma_tx);
 8004066:	480c      	ldr	r0, [pc, #48]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004068:	f7fc fe1a 	bl	8000ca0 <HAL_DMA_Abort>

  	/* Deinitialize the Channel for new transfer */
  	  HAL_DMA_DeInit(&hdma_tx);
 800406c:	480a      	ldr	r0, [pc, #40]	; (8004098 <SD_DMAConfigTx+0x80>)
 800406e:	f7fc fd49 	bl	8000b04 <HAL_DMA_DeInit>

  	/* Configure the DMA Channel */
  	  status = HAL_DMA_Init(&hdma_tx);
 8004072:	4809      	ldr	r0, [pc, #36]	; (8004098 <SD_DMAConfigTx+0x80>)
 8004074:	f7fc fcd2 	bl	8000a1c <HAL_DMA_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]

  	 /* NVIC configuration for DMA transfer complete interrupt */
  	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800407c:	2200      	movs	r2, #0
 800407e:	2105      	movs	r1, #5
 8004080:	2035      	movs	r0, #53	; 0x35
 8004082:	f7fc fc94 	bl	80009ae <HAL_NVIC_SetPriority>
  	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004086:	2035      	movs	r0, #53	; 0x35
 8004088:	f7fc fcad 	bl	80009e6 <HAL_NVIC_EnableIRQ>

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000e0 	.word	0x200000e0
 800409c:	40026444 	.word	0x40026444

080040a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80040a8:	f7fc fb7e 	bl	80007a8 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80040ae:	e006      	b.n	80040be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80040b0:	f7ff fef6 	bl	8003ea0 <BSP_SD_GetCardState>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e009      	b.n	80040d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80040be:	f7fc fb73 	bl	80007a8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d8f0      	bhi.n	80040b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <SD_CheckStatus+0x38>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80040ec:	f7ff fed8 	bl	8003ea0 <BSP_SD_GetCardState>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <SD_CheckStatus+0x38>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <SD_CheckStatus+0x38>)
 8004104:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004106:	4b03      	ldr	r3, [pc, #12]	; (8004114 <SD_CheckStatus+0x38>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b2db      	uxtb	r3, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	2000007c 	.word	0x2000007c

08004118 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004122:	f7ff fe49 	bl	8003db8 <BSP_SD_Init>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ffd4 	bl	80040dc <SD_CheckStatus>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <SD_initialize+0x34>)
 800413a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <SD_initialize+0x34>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	2000007c 	.word	0x2000007c

08004150 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ffbd 	bl	80040dc <SD_CheckStatus>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004180:	f247 5030 	movw	r0, #30000	; 0x7530
 8004184:	f7ff ff8c 	bl	80040a0 <SD_CheckStatusWithTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	da01      	bge.n	8004192 <SD_read+0x26>
  {
    return res;
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	e08b      	b.n	80042aa <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8085 	bne.w	80042a8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	68b8      	ldr	r0, [r7, #8]
 80041a4:	f7ff fe2c 	bl	8003e00 <BSP_SD_ReadBlocks_DMA>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d133      	bne.n	8004216 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <SD_read+0x148>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80041b4:	f7fc faf8 	bl	80007a8 <HAL_GetTick>
 80041b8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80041ba:	bf00      	nop
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <SD_read+0x148>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <SD_read+0x6a>
 80041c4:	f7fc faf0 	bl	80007a8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d9f2      	bls.n	80041bc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <SD_read+0x148>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <SD_read+0x78>
      {
        res = RES_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e061      	b.n	80042a8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <SD_read+0x148>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80041ea:	f7fc fadd 	bl	80007a8 <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80041f0:	e007      	b.n	8004202 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80041f2:	f7ff fe55 	bl	8003ea0 <BSP_SD_GetCardState>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <SD_read+0x96>
          {
            res = RES_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004200:	e052      	b.n	80042a8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004202:	f7fc fad1 	bl	80007a8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004210:	4293      	cmp	r3, r2
 8004212:	d9ee      	bls.n	80041f2 <SD_read+0x86>
 8004214:	e048      	b.n	80042a8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	e034      	b.n	8004286 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	4619      	mov	r1, r3
 8004226:	4824      	ldr	r0, [pc, #144]	; (80042b8 <SD_read+0x14c>)
 8004228:	f7ff fdea 	bl	8003e00 <BSP_SD_ReadBlocks_DMA>
 800422c:	4603      	mov	r3, r0
 800422e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8004230:	7fbb      	ldrb	r3, [r7, #30]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12c      	bne.n	8004290 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <SD_read+0x148>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800423c:	f7fc fab4 	bl	80007a8 <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004242:	bf00      	nop
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <SD_read+0x148>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <SD_read+0xf2>
 800424c:	f7fc faac 	bl	80007a8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f247 522f 	movw	r2, #29999	; 0x752f
 800425a:	4293      	cmp	r3, r2
 800425c:	d9f2      	bls.n	8004244 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <SD_read+0x148>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <SD_read+0x14c>)
 800426a:	4618      	mov	r0, r3
 800426c:	4611      	mov	r1, r2
 800426e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004272:	461a      	mov	r2, r3
 8004274:	f002 fbea 	bl	8006a4c <memcpy>
          buff += BLOCKSIZE;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800427e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	3301      	adds	r3, #1
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d8c6      	bhi.n	800421c <SD_read+0xb0>
 800428e:	e002      	b.n	8004296 <SD_read+0x12a>
        }
        else
        {
          break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <SD_read+0x12a>
            break;
 8004294:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d104      	bne.n	80042a8 <SD_read+0x13c>
 800429e:	7fbb      	ldrb	r3, [r7, #30]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <SD_read+0x13c>
        res = RES_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000328 	.word	0x20000328
 80042b8:	20000124 	.word	0x20000124

080042bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <SD_write+0x148>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80042d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80042da:	f7ff fee1 	bl	80040a0 <SD_CheckStatusWithTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da01      	bge.n	80042e8 <SD_write+0x2c>
  {
    return res;
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
 80042e6:	e088      	b.n	80043fa <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8082 	bne.w	80043f8 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f7ff fda9 	bl	8003e50 <BSP_SD_WriteBlocks_DMA>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d130      	bne.n	8004366 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004304:	f7fc fa50 	bl	80007a8 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800430a:	bf00      	nop
 800430c:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <SD_write+0x148>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <SD_write+0x6a>
 8004314:	f7fc fa48 	bl	80007a8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004322:	4293      	cmp	r3, r2
 8004324:	d9f2      	bls.n	800430c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <SD_write+0x148>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <SD_write+0x78>
      {
        res = RES_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e061      	b.n	80043f8 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8004334:	4b33      	ldr	r3, [pc, #204]	; (8004404 <SD_write+0x148>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800433a:	f7fc fa35 	bl	80007a8 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004340:	e007      	b.n	8004352 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004342:	f7ff fdad 	bl	8003ea0 <BSP_SD_GetCardState>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <SD_write+0x96>
          {
            res = RES_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	77fb      	strb	r3, [r7, #31]
            break;
 8004350:	e052      	b.n	80043f8 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004352:	f7fc fa29 	bl	80007a8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004360:	4293      	cmp	r3, r2
 8004362:	d9ee      	bls.n	8004342 <SD_write+0x86>
 8004364:	e048      	b.n	80043f8 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e034      	b.n	80043d6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <SD_write+0x148>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	4619      	mov	r1, r3
 800437c:	4822      	ldr	r0, [pc, #136]	; (8004408 <SD_write+0x14c>)
 800437e:	f7ff fd67 	bl	8003e50 <BSP_SD_WriteBlocks_DMA>
 8004382:	4603      	mov	r3, r0
 8004384:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8004386:	7fbb      	ldrb	r3, [r7, #30]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d129      	bne.n	80043e0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800438c:	f7fc fa0c 	bl	80007a8 <HAL_GetTick>
 8004390:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004392:	bf00      	nop
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <SD_write+0x148>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <SD_write+0xf2>
 800439c:	f7fc fa04 	bl	80007a8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d9f2      	bls.n	8004394 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80043ae:	4b15      	ldr	r3, [pc, #84]	; (8004404 <SD_write+0x148>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <SD_write+0x14c>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	4611      	mov	r1, r2
 80043be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043c2:	461a      	mov	r2, r3
 80043c4:	f002 fb42 	bl	8006a4c <memcpy>
          buff += BLOCKSIZE;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80043ce:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d8c6      	bhi.n	800436c <SD_write+0xb0>
 80043de:	e002      	b.n	80043e6 <SD_write+0x12a>
        }
        else
        {
          break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <SD_write+0x12a>
            break;
 80043e4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d104      	bne.n	80043f8 <SD_write+0x13c>
 80043ee:	7fbb      	ldrb	r3, [r7, #30]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <SD_write+0x13c>
        res = RES_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 80043f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000324 	.word	0x20000324
 8004408:	20000124 	.word	0x20000124

0800440c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	603a      	str	r2, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	460b      	mov	r3, r1
 800441a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <SD_ioctl+0xac>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <SD_ioctl+0x28>
 8004430:	2303      	movs	r3, #3
 8004432:	e03c      	b.n	80044ae <SD_ioctl+0xa2>

  switch (cmd)
 8004434:	79bb      	ldrb	r3, [r7, #6]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d834      	bhi.n	80044a4 <SD_ioctl+0x98>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <SD_ioctl+0x34>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	08004459 	.word	0x08004459
 8004448:	08004471 	.word	0x08004471
 800444c:	0800448b 	.word	0x0800448b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004456:	e028      	b.n	80044aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fd3d 	bl	8003edc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800446e:	e01c      	b.n	80044aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fd31 	bl	8003edc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	b29a      	uxth	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004488:	e00f      	b.n	80044aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fd24 	bl	8003edc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	0a5a      	lsrs	r2, r3, #9
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044a2:	e002      	b.n	80044aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80044aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3730      	adds	r7, #48	; 0x30
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	2000007c 	.word	0x2000007c

080044bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <BSP_SD_WriteCpltCallback+0x14>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000324 	.word	0x20000324

080044d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <BSP_SD_ReadCpltCallback+0x14>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	bf00      	nop
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000328 	.word	0x20000328

080044ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <disk_status+0x30>)
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	79fa      	ldrb	r2, [r7, #7]
 8004504:	4905      	ldr	r1, [pc, #20]	; (800451c <disk_status+0x30>)
 8004506:	440a      	add	r2, r1
 8004508:	7a12      	ldrb	r2, [r2, #8]
 800450a:	4610      	mov	r0, r2
 800450c:	4798      	blx	r3
 800450e:	4603      	mov	r3, r0
 8004510:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000354 	.word	0x20000354

08004520 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <disk_initialize+0x48>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d111      	bne.n	800455c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <disk_initialize+0x48>)
 800453c:	2101      	movs	r1, #1
 800453e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <disk_initialize+0x48>)
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	79fa      	ldrb	r2, [r7, #7]
 800454e:	4906      	ldr	r1, [pc, #24]	; (8004568 <disk_initialize+0x48>)
 8004550:	440a      	add	r2, r1
 8004552:	7a12      	ldrb	r2, [r2, #8]
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000354 	.word	0x20000354

0800456c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <disk_read+0x3c>)
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	689c      	ldr	r4, [r3, #8]
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <disk_read+0x3c>)
 800458c:	4413      	add	r3, r2
 800458e:	7a18      	ldrb	r0, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	47a0      	blx	r4
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
  return res;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000354 	.word	0x20000354

080045ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <disk_write+0x3c>)
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68dc      	ldr	r4, [r3, #12]
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <disk_write+0x3c>)
 80045cc:	4413      	add	r3, r2
 80045ce:	7a18      	ldrb	r0, [r3, #8]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	47a0      	blx	r4
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]
  return res;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000354 	.word	0x20000354

080045ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	603a      	str	r2, [r7, #0]
 80045f6:	71fb      	strb	r3, [r7, #7]
 80045f8:	460b      	mov	r3, r1
 80045fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <disk_ioctl+0x38>)
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	79fa      	ldrb	r2, [r7, #7]
 800460a:	4906      	ldr	r1, [pc, #24]	; (8004624 <disk_ioctl+0x38>)
 800460c:	440a      	add	r2, r1
 800460e:	7a10      	ldrb	r0, [r2, #8]
 8004610:	79b9      	ldrb	r1, [r7, #6]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4798      	blx	r3
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
  return res;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000354 	.word	0x20000354

08004628 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3301      	adds	r3, #1
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	b21a      	sxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b21b      	sxth	r3, r3
 8004644:	4313      	orrs	r3, r2
 8004646:	b21b      	sxth	r3, r3
 8004648:	81fb      	strh	r3, [r7, #14]
	return rv;
 800464a:	89fb      	ldrh	r3, [r7, #14]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3303      	adds	r3, #3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	3202      	adds	r2, #2
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	3201      	adds	r2, #1
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
	return rv;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	887a      	ldrh	r2, [r7, #2]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	0a1b      	lsrs	r3, r3, #8
 80046fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	1c53      	adds	r3, r2, #1
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	6179      	str	r1, [r7, #20]
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3b01      	subs	r3, #1
 8004752:	607b      	str	r3, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f1      	bne.n	800473e <mem_cpy+0x1a>
	}
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	617a      	str	r2, [r7, #20]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f3      	bne.n	8004774 <mem_set+0x10>
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004796:	b480      	push	{r7}
 8004798:	b089      	sub	sp, #36	; 0x24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	61fa      	str	r2, [r7, #28]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	4619      	mov	r1, r3
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	61ba      	str	r2, [r7, #24]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	1acb      	subs	r3, r1, r3
 80047c2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <mem_cmp+0x40>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0eb      	beq.n	80047ae <mem_cmp+0x18>

	return r;
 80047d6:	697b      	ldr	r3, [r7, #20]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3724      	adds	r7, #36	; 0x24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80047ec:	e002      	b.n	80047f4 <chk_chr+0x12>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3301      	adds	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <chk_chr+0x26>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4293      	cmp	r3, r2
 8004806:	d1f2      	bne.n	80047ee <chk_chr+0xc>
	return *str;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
	...

08004818 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e029      	b.n	8004880 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <chk_lock+0xb0>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	4413      	add	r3, r2
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01d      	beq.n	8004876 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800483a:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <chk_lock+0xb0>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	4413      	add	r3, r2
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d116      	bne.n	800487a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <chk_lock+0xb0>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	4413      	add	r3, r2
 8004854:	3304      	adds	r3, #4
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800485c:	429a      	cmp	r2, r3
 800485e:	d10c      	bne.n	800487a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <chk_lock+0xb0>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4413      	add	r3, r2
 8004868:	3308      	adds	r3, #8
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004870:	429a      	cmp	r2, r3
 8004872:	d102      	bne.n	800487a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004874:	e007      	b.n	8004886 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d9d2      	bls.n	800482c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d109      	bne.n	80048a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <chk_lock+0x80>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d101      	bne.n	800489c <chk_lock+0x84>
 8004898:	2300      	movs	r3, #0
 800489a:	e010      	b.n	80048be <chk_lock+0xa6>
 800489c:	2312      	movs	r3, #18
 800489e:	e00e      	b.n	80048be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d108      	bne.n	80048b8 <chk_lock+0xa0>
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <chk_lock+0xb0>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	4413      	add	r3, r2
 80048ae:	330c      	adds	r3, #12
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d101      	bne.n	80048bc <chk_lock+0xa4>
 80048b8:	2310      	movs	r3, #16
 80048ba:	e000      	b.n	80048be <chk_lock+0xa6>
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	20000334 	.word	0x20000334

080048cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	e002      	b.n	80048de <enq_lock+0x12>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d806      	bhi.n	80048f2 <enq_lock+0x26>
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <enq_lock+0x3c>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f2      	bne.n	80048d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	20000334 	.word	0x20000334

0800490c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e01f      	b.n	800495c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800491c:	4a41      	ldr	r2, [pc, #260]	; (8004a24 <inc_lock+0x118>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d113      	bne.n	8004956 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800492e:	4a3d      	ldr	r2, [pc, #244]	; (8004a24 <inc_lock+0x118>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800493e:	429a      	cmp	r2, r3
 8004940:	d109      	bne.n	8004956 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004942:	4a38      	ldr	r2, [pc, #224]	; (8004a24 <inc_lock+0x118>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	4413      	add	r3, r2
 800494a:	3308      	adds	r3, #8
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004952:	429a      	cmp	r2, r3
 8004954:	d006      	beq.n	8004964 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d9dc      	bls.n	800491c <inc_lock+0x10>
 8004962:	e000      	b.n	8004966 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004964:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d132      	bne.n	80049d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e002      	b.n	8004978 <inc_lock+0x6c>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d806      	bhi.n	800498c <inc_lock+0x80>
 800497e:	4a29      	ldr	r2, [pc, #164]	; (8004a24 <inc_lock+0x118>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f2      	bne.n	8004972 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d101      	bne.n	8004996 <inc_lock+0x8a>
 8004992:	2300      	movs	r3, #0
 8004994:	e040      	b.n	8004a18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4922      	ldr	r1, [pc, #136]	; (8004a24 <inc_lock+0x118>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	440b      	add	r3, r1
 80049a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	491e      	ldr	r1, [pc, #120]	; (8004a24 <inc_lock+0x118>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	440b      	add	r3, r1
 80049b0:	3304      	adds	r3, #4
 80049b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	491a      	ldr	r1, [pc, #104]	; (8004a24 <inc_lock+0x118>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	440b      	add	r3, r1
 80049c0:	3308      	adds	r3, #8
 80049c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <inc_lock+0x118>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	330c      	adds	r3, #12
 80049ce:	2200      	movs	r2, #0
 80049d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <inc_lock+0xe0>
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <inc_lock+0x118>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	330c      	adds	r3, #12
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <inc_lock+0xe0>
 80049e8:	2300      	movs	r3, #0
 80049ea:	e015      	b.n	8004a18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <inc_lock+0xf8>
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <inc_lock+0x118>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	330c      	adds	r3, #12
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	e001      	b.n	8004a08 <inc_lock+0xfc>
 8004a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a08:	4906      	ldr	r1, [pc, #24]	; (8004a24 <inc_lock+0x118>)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	440b      	add	r3, r1
 8004a10:	330c      	adds	r3, #12
 8004a12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000334 	.word	0x20000334

08004a28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d825      	bhi.n	8004a88 <dec_lock+0x60>
		n = Files[i].ctr;
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <dec_lock+0x70>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	330c      	adds	r3, #12
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a50:	d101      	bne.n	8004a56 <dec_lock+0x2e>
 8004a52:	2300      	movs	r3, #0
 8004a54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a56:	89fb      	ldrh	r3, [r7, #14]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <dec_lock+0x3a>
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a62:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <dec_lock+0x70>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	4413      	add	r3, r2
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	89fa      	ldrh	r2, [r7, #14]
 8004a6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a70:	89fb      	ldrh	r3, [r7, #14]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <dec_lock+0x5a>
 8004a76:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <dec_lock+0x70>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	737b      	strb	r3, [r7, #13]
 8004a86:	e001      	b.n	8004a8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004a88:	2302      	movs	r3, #2
 8004a8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004a8c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20000334 	.word	0x20000334

08004a9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e010      	b.n	8004acc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <clear_lock+0x40>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d105      	bne.n	8004ac6 <clear_lock+0x2a>
 8004aba:	4a08      	ldr	r2, [pc, #32]	; (8004adc <clear_lock+0x40>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	4413      	add	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d9eb      	bls.n	8004aaa <clear_lock+0xe>
	}
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	20000334 	.word	0x20000334

08004ae0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d034      	beq.n	8004b5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7858      	ldrb	r0, [r3, #1]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b04:	2301      	movs	r3, #1
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	f7ff fd50 	bl	80045ac <disk_write>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
 8004b16:	e022      	b.n	8004b5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	1ad2      	subs	r2, r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d217      	bcs.n	8004b5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e010      	b.n	8004b58 <sync_window+0x78>
					wsect += fs->fsize;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7858      	ldrb	r0, [r3, #1]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	f7ff fd2d 	bl	80045ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d8eb      	bhi.n	8004b36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d01b      	beq.n	8004bb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ffad 	bl	8004ae0 <sync_window>
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d113      	bne.n	8004bb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7858      	ldrb	r0, [r3, #1]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	f7ff fce5 	bl	800456c <disk_read>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d004      	beq.n	8004bb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff87 	bl	8004ae0 <sync_window>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d159      	bne.n	8004c90 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d149      	bne.n	8004c78 <sync_fs+0xb4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d145      	bne.n	8004c78 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	899b      	ldrh	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f7ff fdb3 	bl	8004764 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3334      	adds	r3, #52	; 0x34
 8004c02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c06:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fd45 	bl	800469a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3334      	adds	r3, #52	; 0x34
 8004c14:	4921      	ldr	r1, [pc, #132]	; (8004c9c <sync_fs+0xd8>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fd59 	bl	80046ce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3334      	adds	r3, #52	; 0x34
 8004c20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c24:	491e      	ldr	r1, [pc, #120]	; (8004ca0 <sync_fs+0xdc>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fd51 	bl	80046ce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3334      	adds	r3, #52	; 0x34
 8004c30:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f7ff fd47 	bl	80046ce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3334      	adds	r3, #52	; 0x34
 8004c44:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7ff fd3d 	bl	80046ce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7858      	ldrb	r0, [r3, #1]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f7ff fc9d 	bl	80045ac <disk_write>
			fs->fsi_flag = 0;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fcb3 	bl	80045ec <disk_ioctl>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <sync_fs+0xcc>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	41615252 	.word	0x41615252
 8004ca0:	61417272 	.word	0x61417272

08004ca4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	3b02      	subs	r3, #2
 8004cb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	3b02      	subs	r3, #2
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d301      	bcc.n	8004cc4 <clust2sect+0x20>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e008      	b.n	8004cd6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	895b      	ldrh	r3, [r3, #10]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	fb03 f202 	mul.w	r2, r3, r2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4413      	add	r3, r2
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d904      	bls.n	8004d00 <get_fat+0x20>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e0b7      	b.n	8004e76 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d05a      	beq.n	8004dca <get_fat+0xea>
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d07d      	beq.n	8004e14 <get_fat+0x134>
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 80a2 	bne.w	8004e62 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	899b      	ldrh	r3, [r3, #12]
 8004d34:	4619      	mov	r1, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6938      	ldr	r0, [r7, #16]
 8004d42:	f7ff ff11 	bl	8004b68 <move_window>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 808d 	bne.w	8004e68 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	60fa      	str	r2, [r7, #12]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	8992      	ldrh	r2, [r2, #12]
 8004d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d5c:	fb02 f201 	mul.w	r2, r2, r1
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4413      	add	r3, r2
 8004d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d6a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	899b      	ldrh	r3, [r3, #12]
 8004d74:	4619      	mov	r1, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6938      	ldr	r0, [r7, #16]
 8004d82:	f7ff fef1 	bl	8004b68 <move_window>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d16f      	bne.n	8004e6c <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	899b      	ldrh	r3, [r3, #12]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d98:	fb02 f201 	mul.w	r2, r2, r1
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <get_fat+0xe0>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	e002      	b.n	8004dc6 <get_fat+0xe6>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc6:	617b      	str	r3, [r7, #20]
			break;
 8004dc8:	e055      	b.n	8004e76 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	899b      	ldrh	r3, [r3, #12]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dde:	4413      	add	r3, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	6938      	ldr	r0, [r7, #16]
 8004de4:	f7ff fec0 	bl	8004b68 <move_window>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d140      	bne.n	8004e70 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	8992      	ldrh	r2, [r2, #12]
 8004dfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e00:	fb02 f200 	mul.w	r2, r2, r0
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	440b      	add	r3, r1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fc0d 	bl	8004628 <ld_word>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	617b      	str	r3, [r7, #20]
			break;
 8004e12:	e030      	b.n	8004e76 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	899b      	ldrh	r3, [r3, #12]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e28:	4413      	add	r3, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6938      	ldr	r0, [r7, #16]
 8004e2e:	f7ff fe9b 	bl	8004b68 <move_window>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	8992      	ldrh	r2, [r2, #12]
 8004e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e4a:	fb02 f200 	mul.w	r2, r2, r0
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	440b      	add	r3, r1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fbff 	bl	8004656 <ld_dword>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e5e:	617b      	str	r3, [r7, #20]
			break;
 8004e60:	e009      	b.n	8004e76 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004e62:	2301      	movs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e006      	b.n	8004e76 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e68:	bf00      	nop
 8004e6a:	e004      	b.n	8004e76 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e6c:	bf00      	nop
 8004e6e:	e002      	b.n	8004e76 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e74:	bf00      	nop
		}
	}

	return val;
 8004e76:	697b      	ldr	r3, [r7, #20]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b089      	sub	sp, #36	; 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	f240 8106 	bls.w	80050a4 <put_fat+0x224>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f080 8100 	bcs.w	80050a4 <put_fat+0x224>
		switch (fs->fs_type) {
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f000 8088 	beq.w	8004fbe <put_fat+0x13e>
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	f000 80b0 	beq.w	8005014 <put_fat+0x194>
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 80f5 	bne.w	80050a4 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	899b      	ldrh	r3, [r3, #12]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed8:	4413      	add	r3, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fe43 	bl	8004b68 <move_window>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f040 80d4 	bne.w	8005096 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	61ba      	str	r2, [r7, #24]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	8992      	ldrh	r2, [r2, #12]
 8004efe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f02:	fb02 f200 	mul.w	r2, r2, r0
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	440b      	add	r3, r1
 8004f0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <put_fat+0xb2>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e001      	b.n	8004f36 <put_fat+0xb6>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	899b      	ldrh	r3, [r3, #12]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f50:	4413      	add	r3, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fe07 	bl	8004b68 <move_window>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 809a 	bne.w	800509a <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	899b      	ldrh	r3, [r3, #12]
 8004f70:	461a      	mov	r2, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f78:	fb02 f200 	mul.w	r2, r2, r0
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	440b      	add	r3, r1
 8004f80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <put_fat+0x114>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e00e      	b.n	8004fb2 <put_fat+0x132>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f023 030f 	bic.w	r3, r3, #15
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	70da      	strb	r2, [r3, #3]
			break;
 8004fbc:	e072      	b.n	80050a4 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	899b      	ldrh	r3, [r3, #12]
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff fdc6 	bl	8004b68 <move_window>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fe0:	7ffb      	ldrb	r3, [r7, #31]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d15b      	bne.n	800509e <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	8992      	ldrh	r2, [r2, #12]
 8004ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ff8:	fb02 f200 	mul.w	r2, r2, r0
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	440b      	add	r3, r1
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	b292      	uxth	r2, r2
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fb47 	bl	800469a <st_word>
			fs->wflag = 1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	70da      	strb	r2, [r3, #3]
			break;
 8005012:	e047      	b.n	80050a4 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	899b      	ldrh	r3, [r3, #12]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	b29b      	uxth	r3, r3
 8005020:	4619      	mov	r1, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	fbb3 f3f1 	udiv	r3, r3, r1
 8005028:	4413      	add	r3, r2
 800502a:	4619      	mov	r1, r3
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fd9b 	bl	8004b68 <move_window>
 8005032:	4603      	mov	r3, r0
 8005034:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005036:	7ffb      	ldrb	r3, [r7, #31]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d132      	bne.n	80050a2 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	8992      	ldrh	r2, [r2, #12]
 8005050:	fbb3 f0f2 	udiv	r0, r3, r2
 8005054:	fb02 f200 	mul.w	r2, r2, r0
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	440b      	add	r3, r1
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fafa 	bl	8004656 <ld_dword>
 8005062:	4603      	mov	r3, r0
 8005064:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005068:	4323      	orrs	r3, r4
 800506a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	8992      	ldrh	r2, [r2, #12]
 800507a:	fbb3 f0f2 	udiv	r0, r3, r2
 800507e:	fb02 f200 	mul.w	r2, r2, r0
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	440b      	add	r3, r1
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fb20 	bl	80046ce <st_dword>
			fs->wflag = 1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	70da      	strb	r2, [r3, #3]
			break;
 8005094:	e006      	b.n	80050a4 <put_fat+0x224>
			if (res != FR_OK) break;
 8005096:	bf00      	nop
 8005098:	e004      	b.n	80050a4 <put_fat+0x224>
			if (res != FR_OK) break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <put_fat+0x224>
			if (res != FR_OK) break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <put_fat+0x224>
			if (res != FR_OK) break;
 80050a2:	bf00      	nop
		}
	}
	return res;
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}

080050ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b088      	sub	sp, #32
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d904      	bls.n	80050d4 <remove_chain+0x26>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d301      	bcc.n	80050d8 <remove_chain+0x2a>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e04b      	b.n	8005170 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80050de:	f04f 32ff 	mov.w	r2, #4294967295
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	69b8      	ldr	r0, [r7, #24]
 80050e6:	f7ff fecb 	bl	8004e80 <put_fat>
 80050ea:	4603      	mov	r3, r0
 80050ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <remove_chain+0x4a>
 80050f4:	7ffb      	ldrb	r3, [r7, #31]
 80050f6:	e03b      	b.n	8005170 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff fdf0 	bl	8004ce0 <get_fat>
 8005100:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d031      	beq.n	800516c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <remove_chain+0x64>
 800510e:	2302      	movs	r3, #2
 8005110:	e02e      	b.n	8005170 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d101      	bne.n	800511e <remove_chain+0x70>
 800511a:	2301      	movs	r3, #1
 800511c:	e028      	b.n	8005170 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800511e:	2200      	movs	r2, #0
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	69b8      	ldr	r0, [r7, #24]
 8005124:	f7ff feac 	bl	8004e80 <put_fat>
 8005128:	4603      	mov	r3, r0
 800512a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <remove_chain+0x88>
 8005132:	7ffb      	ldrb	r3, [r7, #31]
 8005134:	e01c      	b.n	8005170 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	3b02      	subs	r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d20b      	bcs.n	800515c <remove_chain+0xae>
			fs->free_clst++;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	d3c6      	bcc.n	80050f8 <remove_chain+0x4a>
 800516a:	e000      	b.n	800516e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800516c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <create_chain+0x2c>
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d31b      	bcc.n	80051dc <create_chain+0x64>
 80051a4:	2301      	movs	r3, #1
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e018      	b.n	80051dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff fd97 	bl	8004ce0 <get_fat>
 80051b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d801      	bhi.n	80051be <create_chain+0x46>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e070      	b.n	80052a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d101      	bne.n	80051ca <create_chain+0x52>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	e06a      	b.n	80052a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d201      	bcs.n	80051d8 <create_chain+0x60>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	e063      	b.n	80052a0 <create_chain+0x128>
		scl = clst;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d307      	bcc.n	8005200 <create_chain+0x88>
				ncl = 2;
 80051f0:	2302      	movs	r3, #2
 80051f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d901      	bls.n	8005200 <create_chain+0x88>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e04f      	b.n	80052a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fd6c 	bl	8004ce0 <get_fat>
 8005208:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00e      	beq.n	800522e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d003      	beq.n	800521e <create_chain+0xa6>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d101      	bne.n	8005222 <create_chain+0xaa>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	e03e      	b.n	80052a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d1da      	bne.n	80051e0 <create_chain+0x68>
 800522a:	2300      	movs	r3, #0
 800522c:	e038      	b.n	80052a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800522e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005230:	f04f 32ff 	mov.w	r2, #4294967295
 8005234:	69f9      	ldr	r1, [r7, #28]
 8005236:	6938      	ldr	r0, [r7, #16]
 8005238:	f7ff fe22 	bl	8004e80 <put_fat>
 800523c:	4603      	mov	r3, r0
 800523e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005240:	7dfb      	ldrb	r3, [r7, #23]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <create_chain+0xe2>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d006      	beq.n	800525a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	6938      	ldr	r0, [r7, #16]
 8005252:	f7ff fe15 	bl	8004e80 <put_fat>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <create_chain+0x116>
		fs->last_clst = ncl;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	3b02      	subs	r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d804      	bhi.n	800527e <create_chain+0x106>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	791b      	ldrb	r3, [r3, #4]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	711a      	strb	r2, [r3, #4]
 800528c:	e007      	b.n	800529e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d102      	bne.n	800529a <create_chain+0x122>
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e000      	b.n	800529c <create_chain+0x124>
 800529a:	2301      	movs	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800529e:	69fb      	ldr	r3, [r7, #28]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	3304      	adds	r3, #4
 80052be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	899b      	ldrh	r3, [r3, #12]
 80052c4:	461a      	mov	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	8952      	ldrh	r2, [r2, #10]
 80052d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	613a      	str	r2, [r7, #16]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <clmt_clust+0x42>
 80052e6:	2300      	movs	r3, #0
 80052e8:	e010      	b.n	800530c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d307      	bcc.n	8005302 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3304      	adds	r3, #4
 80052fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005300:	e7e9      	b.n	80052d6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005302:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
}
 800530c:	4618      	mov	r0, r3
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532c:	d204      	bcs.n	8005338 <dir_sdi+0x22>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005338:	2302      	movs	r3, #2
 800533a:	e071      	b.n	8005420 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <dir_sdi+0x46>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d902      	bls.n	800535c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10c      	bne.n	800537c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	8912      	ldrh	r2, [r2, #8]
 800536a:	4293      	cmp	r3, r2
 800536c:	d301      	bcc.n	8005372 <dir_sdi+0x5c>
 800536e:	2302      	movs	r3, #2
 8005370:	e056      	b.n	8005420 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	61da      	str	r2, [r3, #28]
 800537a:	e02d      	b.n	80053d8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	895b      	ldrh	r3, [r3, #10]
 8005380:	461a      	mov	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	899b      	ldrh	r3, [r3, #12]
 8005386:	fb03 f302 	mul.w	r3, r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800538c:	e019      	b.n	80053c2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6979      	ldr	r1, [r7, #20]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fca4 	bl	8004ce0 <get_fat>
 8005398:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d101      	bne.n	80053a6 <dir_sdi+0x90>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e03c      	b.n	8005420 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d904      	bls.n	80053b6 <dir_sdi+0xa0>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d301      	bcc.n	80053ba <dir_sdi+0xa4>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e032      	b.n	8005420 <dir_sdi+0x10a>
			ofs -= csz;
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d2e1      	bcs.n	800538e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	6938      	ldr	r0, [r7, #16]
 80053ce:	f7ff fc69 	bl	8004ca4 <clust2sect>
 80053d2:	4602      	mov	r2, r0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <dir_sdi+0xd4>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e01a      	b.n	8005420 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	899b      	ldrh	r3, [r3, #12]
 80053f2:	4619      	mov	r1, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	899b      	ldrh	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005412:	fb02 f200 	mul.w	r2, r2, r0
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	18ca      	adds	r2, r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	3320      	adds	r3, #32
 800543e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <dir_next+0x28>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544e:	d301      	bcc.n	8005454 <dir_next+0x2c>
 8005450:	2304      	movs	r3, #4
 8005452:	e0bb      	b.n	80055cc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	899b      	ldrh	r3, [r3, #12]
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005460:	fb02 f201 	mul.w	r2, r2, r1
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 809d 	bne.w	80055a6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	8912      	ldrh	r2, [r2, #8]
 8005486:	4293      	cmp	r3, r2
 8005488:	f0c0 808d 	bcc.w	80055a6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	2304      	movs	r3, #4
 8005494:	e09a      	b.n	80055cc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	899b      	ldrh	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	8952      	ldrh	r2, [r2, #10]
 80054a6:	3a01      	subs	r2, #1
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d17b      	bne.n	80055a6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7ff fc12 	bl	8004ce0 <get_fat>
 80054bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d801      	bhi.n	80054c8 <dir_next+0xa0>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e081      	b.n	80055cc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d101      	bne.n	80054d4 <dir_next+0xac>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e07b      	b.n	80055cc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d359      	bcc.n	8005592 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	2304      	movs	r3, #4
 80054ec:	e06e      	b.n	80055cc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7ff fe3e 	bl	8005178 <create_chain>
 80054fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <dir_next+0xe0>
 8005504:	2307      	movs	r3, #7
 8005506:	e061      	b.n	80055cc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <dir_next+0xea>
 800550e:	2302      	movs	r3, #2
 8005510:	e05c      	b.n	80055cc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d101      	bne.n	800551e <dir_next+0xf6>
 800551a:	2301      	movs	r3, #1
 800551c:	e056      	b.n	80055cc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff fade 	bl	8004ae0 <sync_window>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <dir_next+0x106>
 800552a:	2301      	movs	r3, #1
 800552c:	e04e      	b.n	80055cc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	899b      	ldrh	r3, [r3, #12]
 8005538:	461a      	mov	r2, r3
 800553a:	2100      	movs	r1, #0
 800553c:	f7ff f912 	bl	8004764 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fbac 	bl	8004ca4 <clust2sect>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
 8005552:	e012      	b.n	800557a <dir_next+0x152>
						fs->wflag = 1;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fac0 	bl	8004ae0 <sync_window>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <dir_next+0x142>
 8005566:	2301      	movs	r3, #1
 8005568:	e030      	b.n	80055cc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	3301      	adds	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	895b      	ldrh	r3, [r3, #10]
 800557e:	461a      	mov	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4293      	cmp	r3, r2
 8005584:	d3e6      	bcc.n	8005554 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005598:	6979      	ldr	r1, [r7, #20]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fb82 	bl	8004ca4 <clust2sect>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	899b      	ldrh	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80055be:	fb02 f200 	mul.w	r2, r2, r0
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	18ca      	adds	r2, r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80055e4:	2100      	movs	r1, #0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe95 	bl	8005316 <dir_sdi>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d12b      	bne.n	800564e <dir_alloc+0x7a>
		n = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4619      	mov	r1, r3
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fab1 	bl	8004b68 <move_window>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11d      	bne.n	800564c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2be5      	cmp	r3, #229	; 0xe5
 8005618:	d004      	beq.n	8005624 <dir_alloc+0x50>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3301      	adds	r3, #1
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d102      	bne.n	8005638 <dir_alloc+0x64>
 8005632:	e00c      	b.n	800564e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005638:	2101      	movs	r1, #1
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff fef4 	bl	8005428 <dir_next>
 8005640:	4603      	mov	r3, r0
 8005642:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0d7      	beq.n	80055fa <dir_alloc+0x26>
 800564a:	e000      	b.n	800564e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800564c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b04      	cmp	r3, #4
 8005652:	d101      	bne.n	8005658 <dir_alloc+0x84>
 8005654:	2307      	movs	r3, #7
 8005656:	75fb      	strb	r3, [r7, #23]
	return res;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	331a      	adds	r3, #26
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe ffd9 	bl	8004628 <ld_word>
 8005676:	4603      	mov	r3, r0
 8005678:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d109      	bne.n	8005696 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	3314      	adds	r3, #20
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe ffce 	bl	8004628 <ld_word>
 800568c:	4603      	mov	r3, r0
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	331a      	adds	r3, #26
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	b292      	uxth	r2, r2
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe ffef 	bl	800469a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d109      	bne.n	80056d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f103 0214 	add.w	r2, r3, #20
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7fe ffe1 	bl	800469a <st_word>
	}
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056ee:	2100      	movs	r1, #0
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fe10 	bl	8005316 <dir_sdi>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <dir_find+0x24>
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	e03e      	b.n	8005782 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	4619      	mov	r1, r3
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7ff fa2c 	bl	8004b68 <move_window>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d12f      	bne.n	800577a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <dir_find+0x4e>
 8005728:	2304      	movs	r3, #4
 800572a:	75fb      	strb	r3, [r7, #23]
 800572c:	e028      	b.n	8005780 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	330b      	adds	r3, #11
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	330b      	adds	r3, #11
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <dir_find+0x86>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a18      	ldr	r0, [r3, #32]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3324      	adds	r3, #36	; 0x24
 8005758:	220b      	movs	r2, #11
 800575a:	4619      	mov	r1, r3
 800575c:	f7ff f81b 	bl	8004796 <mem_cmp>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005766:	2100      	movs	r1, #0
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fe5d 	bl	8005428 <dir_next>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0c5      	beq.n	8005704 <dir_find+0x24>
 8005778:	e002      	b.n	8005780 <dir_find+0xa0>
		if (res != FR_OK) break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800577e:	bf00      	nop

	return res;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005798:	2101      	movs	r1, #1
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ff1a 	bl	80055d4 <dir_alloc>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11c      	bne.n	80057e4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	4619      	mov	r1, r3
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f7ff f9d9 	bl	8004b68 <move_window>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d111      	bne.n	80057e4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	2220      	movs	r2, #32
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe ffcb 	bl	8004764 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a18      	ldr	r0, [r3, #32]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	220b      	movs	r2, #11
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fe ffa3 	bl	8004724 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2201      	movs	r2, #1
 80057e2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005806:	220b      	movs	r2, #11
 8005808:	2120      	movs	r1, #32
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7fe ffaa 	bl	8004764 <mem_set>
	si = i = 0; ni = 8;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	2308      	movs	r3, #8
 800581a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	617a      	str	r2, [r7, #20]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	2b20      	cmp	r3, #32
 800582e:	d94e      	bls.n	80058ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	2b2f      	cmp	r3, #47	; 0x2f
 8005834:	d006      	beq.n	8005844 <create_name+0x54>
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	2b5c      	cmp	r3, #92	; 0x5c
 800583a:	d110      	bne.n	800585e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800583c:	e002      	b.n	8005844 <create_name+0x54>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b2f      	cmp	r3, #47	; 0x2f
 800584e:	d0f6      	beq.n	800583e <create_name+0x4e>
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b5c      	cmp	r3, #92	; 0x5c
 800585a:	d0f0      	beq.n	800583e <create_name+0x4e>
			break;
 800585c:	e038      	b.n	80058d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800585e:	7ffb      	ldrb	r3, [r7, #31]
 8005860:	2b2e      	cmp	r3, #46	; 0x2e
 8005862:	d003      	beq.n	800586c <create_name+0x7c>
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d30c      	bcc.n	8005886 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b0b      	cmp	r3, #11
 8005870:	d002      	beq.n	8005878 <create_name+0x88>
 8005872:	7ffb      	ldrb	r3, [r7, #31]
 8005874:	2b2e      	cmp	r3, #46	; 0x2e
 8005876:	d001      	beq.n	800587c <create_name+0x8c>
 8005878:	2306      	movs	r3, #6
 800587a:	e044      	b.n	8005906 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800587c:	2308      	movs	r3, #8
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	230b      	movs	r3, #11
 8005882:	61bb      	str	r3, [r7, #24]
			continue;
 8005884:	e022      	b.n	80058cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005886:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da04      	bge.n	8005898 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	3b80      	subs	r3, #128	; 0x80
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <create_name+0x120>)
 8005894:	5cd3      	ldrb	r3, [r2, r3]
 8005896:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005898:	7ffb      	ldrb	r3, [r7, #31]
 800589a:	4619      	mov	r1, r3
 800589c:	481d      	ldr	r0, [pc, #116]	; (8005914 <create_name+0x124>)
 800589e:	f7fe ffa0 	bl	80047e2 <chk_chr>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <create_name+0xbc>
 80058a8:	2306      	movs	r3, #6
 80058aa:	e02c      	b.n	8005906 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
 80058ae:	2b60      	cmp	r3, #96	; 0x60
 80058b0:	d905      	bls.n	80058be <create_name+0xce>
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b7a      	cmp	r3, #122	; 0x7a
 80058b6:	d802      	bhi.n	80058be <create_name+0xce>
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	3b20      	subs	r3, #32
 80058bc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	613a      	str	r2, [r7, #16]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	4413      	add	r3, r2
 80058c8:	7ffa      	ldrb	r2, [r7, #31]
 80058ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80058cc:	e7a6      	b.n	800581c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80058ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	441a      	add	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <create_name+0xf4>
 80058e0:	2306      	movs	r3, #6
 80058e2:	e010      	b.n	8005906 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2be5      	cmp	r3, #229	; 0xe5
 80058ea:	d102      	bne.n	80058f2 <create_name+0x102>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2205      	movs	r2, #5
 80058f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d801      	bhi.n	80058fc <create_name+0x10c>
 80058f8:	2204      	movs	r2, #4
 80058fa:	e000      	b.n	80058fe <create_name+0x10e>
 80058fc:	2200      	movs	r2, #0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	330b      	adds	r3, #11
 8005902:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005904:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08006b0c 	.word	0x08006b0c
 8005914:	08006a98 	.word	0x08006a98

08005918 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800592c:	e002      	b.n	8005934 <follow_path+0x1c>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b2f      	cmp	r3, #47	; 0x2f
 800593a:	d0f8      	beq.n	800592e <follow_path+0x16>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b5c      	cmp	r3, #92	; 0x5c
 8005942:	d0f4      	beq.n	800592e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b1f      	cmp	r3, #31
 8005950:	d80a      	bhi.n	8005968 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fcda 	bl	8005316 <dir_sdi>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
 8005966:	e048      	b.n	80059fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005968:	463b      	mov	r3, r7
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ff3f 	bl	80057f0 <create_name>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d139      	bne.n	80059f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff feaf 	bl	80056e0 <dir_find>
 8005982:	4603      	mov	r3, r0
 8005984:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800598c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b04      	cmp	r3, #4
 8005998:	d12c      	bne.n	80059f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d127      	bne.n	80059f4 <follow_path+0xdc>
 80059a4:	2305      	movs	r3, #5
 80059a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80059a8:	e024      	b.n	80059f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d121      	bne.n	80059f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	799b      	ldrb	r3, [r3, #6]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80059c0:	2305      	movs	r3, #5
 80059c2:	75fb      	strb	r3, [r7, #23]
 80059c4:	e019      	b.n	80059fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	8992      	ldrh	r2, [r2, #12]
 80059d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80059d8:	fb02 f200 	mul.w	r2, r2, r0
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	440b      	add	r3, r1
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fe3d 	bl	8005662 <ld_clust>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059ee:	e7bb      	b.n	8005968 <follow_path+0x50>
			if (res != FR_OK) break;
 80059f0:	bf00      	nop
 80059f2:	e002      	b.n	80059fa <follow_path+0xe2>
				break;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059f8:	bf00      	nop
			}
		}
	}

	return res;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a10:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d031      	beq.n	8005a7e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e002      	b.n	8005a28 <get_ldnumber+0x24>
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	3301      	adds	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d903      	bls.n	8005a38 <get_ldnumber+0x34>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b3a      	cmp	r3, #58	; 0x3a
 8005a36:	d1f4      	bne.n	8005a22 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b3a      	cmp	r3, #58	; 0x3a
 8005a3e:	d11c      	bne.n	8005a7a <get_ldnumber+0x76>
			tp = *path;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	60fa      	str	r2, [r7, #12]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	3b30      	subs	r3, #48	; 0x30
 8005a50:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d80e      	bhi.n	8005a76 <get_ldnumber+0x72>
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d10a      	bne.n	8005a76 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <get_ldnumber+0x72>
					vol = (int)i;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	e002      	b.n	8005a80 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a7e:	693b      	ldr	r3, [r7, #16]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
	...

08005a8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	70da      	strb	r2, [r3, #3]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff f85e 	bl	8004b68 <move_window>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <check_fs+0x2a>
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	e038      	b.n	8005b28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3334      	adds	r3, #52	; 0x34
 8005aba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fdb2 	bl	8004628 <ld_word>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <check_fs+0x48>
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e029      	b.n	8005b28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ada:	2be9      	cmp	r3, #233	; 0xe9
 8005adc:	d009      	beq.n	8005af2 <check_fs+0x66>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ae4:	2beb      	cmp	r3, #235	; 0xeb
 8005ae6:	d11e      	bne.n	8005b26 <check_fs+0x9a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005aee:	2b90      	cmp	r3, #144	; 0x90
 8005af0:	d119      	bne.n	8005b26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3334      	adds	r3, #52	; 0x34
 8005af6:	3336      	adds	r3, #54	; 0x36
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe fdac 	bl	8004656 <ld_dword>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	4a0a      	ldr	r2, [pc, #40]	; (8005b30 <check_fs+0xa4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <check_fs+0x82>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e00c      	b.n	8005b28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3334      	adds	r3, #52	; 0x34
 8005b12:	3352      	adds	r3, #82	; 0x52
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fd9e 	bl	8004656 <ld_dword>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <check_fs+0xa8>)
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d101      	bne.n	8005b26 <check_fs+0x9a>
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005b26:	2302      	movs	r3, #2
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	00544146 	.word	0x00544146
 8005b34:	33544146 	.word	0x33544146

08005b38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b096      	sub	sp, #88	; 0x58
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff59 	bl	8005a04 <get_ldnumber>
 8005b52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	da01      	bge.n	8005b5e <find_volume+0x26>
 8005b5a:	230b      	movs	r3, #11
 8005b5c:	e265      	b.n	800602a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b5e:	4ab0      	ldr	r2, [pc, #704]	; (8005e20 <find_volume+0x2e8>)
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <find_volume+0x3a>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	e25b      	b.n	800602a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01a      	beq.n	8005bbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fcad 	bl	80044ec <disk_status>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <find_volume+0x82>
 8005baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	e237      	b.n	800602a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e235      	b.n	800602a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fca5 	bl	8004520 <disk_initialize>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005be8:	2303      	movs	r3, #3
 8005bea:	e21e      	b.n	800602a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <find_volume+0xca>
 8005bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e213      	b.n	800602a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	7858      	ldrb	r0, [r3, #1]
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	330c      	adds	r3, #12
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	f7fe fced 	bl	80045ec <disk_ioctl>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <find_volume+0xe4>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e206      	b.n	800602a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	899b      	ldrh	r3, [r3, #12]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d80d      	bhi.n	8005c42 <find_volume+0x10a>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	899b      	ldrh	r3, [r3, #12]
 8005c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2e:	d308      	bcc.n	8005c42 <find_volume+0x10a>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	899b      	ldrh	r3, [r3, #12]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	899b      	ldrh	r3, [r3, #12]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <find_volume+0x10e>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e1f1      	b.n	800602a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005c4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c4e:	f7ff ff1d 	bl	8005a8c <check_fs>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d14b      	bne.n	8005cf8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c60:	2300      	movs	r3, #0
 8005c62:	643b      	str	r3, [r7, #64]	; 0x40
 8005c64:	e01f      	b.n	8005ca6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005c74:	4413      	add	r3, r2
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <find_volume+0x158>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	3308      	adds	r3, #8
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fce5 	bl	8004656 <ld_dword>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	e000      	b.n	8005c92 <find_volume+0x15a>
 8005c90:	2200      	movs	r2, #0
 8005c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d9dc      	bls.n	8005c66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005cac:	2300      	movs	r3, #0
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <find_volume+0x184>
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <find_volume+0x1a6>
 8005cd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cd6:	f7ff fed9 	bl	8005a8c <check_fs>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e000      	b.n	8005ce0 <find_volume+0x1a8>
 8005cde:	2303      	movs	r3, #3
 8005ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d905      	bls.n	8005cf8 <find_volume+0x1c0>
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	3301      	adds	r3, #1
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d9e1      	bls.n	8005cbc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d101      	bne.n	8005d04 <find_volume+0x1cc>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e192      	b.n	800602a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d901      	bls.n	8005d10 <find_volume+0x1d8>
 8005d0c:	230d      	movs	r3, #13
 8005d0e:	e18c      	b.n	800602a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	3334      	adds	r3, #52	; 0x34
 8005d14:	330b      	adds	r3, #11
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fc86 	bl	8004628 <ld_word>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	899b      	ldrh	r3, [r3, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <find_volume+0x1f4>
 8005d28:	230d      	movs	r3, #13
 8005d2a:	e17e      	b.n	800602a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	3334      	adds	r3, #52	; 0x34
 8005d30:	3316      	adds	r3, #22
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fc78 	bl	8004628 <ld_word>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <find_volume+0x218>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	3334      	adds	r3, #52	; 0x34
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe fc84 	bl	8004656 <ld_dword>
 8005d4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d005      	beq.n	8005d74 <find_volume+0x23c>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	789b      	ldrb	r3, [r3, #2]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d001      	beq.n	8005d74 <find_volume+0x23c>
 8005d70:	230d      	movs	r3, #13
 8005d72:	e15a      	b.n	800602a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	789b      	ldrb	r3, [r3, #2]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	895b      	ldrh	r3, [r3, #10]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <find_volume+0x270>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	895b      	ldrh	r3, [r3, #10]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	895b      	ldrh	r3, [r3, #10]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <find_volume+0x274>
 8005da8:	230d      	movs	r3, #13
 8005daa:	e13e      	b.n	800602a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	3334      	adds	r3, #52	; 0x34
 8005db0:	3311      	adds	r3, #17
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fc38 	bl	8004628 <ld_word>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	891b      	ldrh	r3, [r3, #8]
 8005dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc6:	8992      	ldrh	r2, [r2, #12]
 8005dc8:	0952      	lsrs	r2, r2, #5
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd0:	fb02 f201 	mul.w	r2, r2, r1
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <find_volume+0x2a8>
 8005ddc:	230d      	movs	r3, #13
 8005dde:	e124      	b.n	800602a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	3334      	adds	r3, #52	; 0x34
 8005de4:	3313      	adds	r3, #19
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc1e 	bl	8004628 <ld_word>
 8005dec:	4603      	mov	r3, r0
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <find_volume+0x2cc>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	3334      	adds	r3, #52	; 0x34
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fc2a 	bl	8004656 <ld_dword>
 8005e02:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	3334      	adds	r3, #52	; 0x34
 8005e08:	330e      	adds	r3, #14
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fc0c 	bl	8004628 <ld_word>
 8005e10:	4603      	mov	r3, r0
 8005e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <find_volume+0x2ec>
 8005e1a:	230d      	movs	r3, #13
 8005e1c:	e105      	b.n	800602a <find_volume+0x4f2>
 8005e1e:	bf00      	nop
 8005e20:	2000032c 	.word	0x2000032c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005e24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	4413      	add	r3, r2
 8005e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e2c:	8911      	ldrh	r1, [r2, #8]
 8005e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e30:	8992      	ldrh	r2, [r2, #12]
 8005e32:	0952      	lsrs	r2, r2, #5
 8005e34:	b292      	uxth	r2, r2
 8005e36:	fbb1 f2f2 	udiv	r2, r1, r2
 8005e3a:	b292      	uxth	r2, r2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d201      	bcs.n	8005e4c <find_volume+0x314>
 8005e48:	230d      	movs	r3, #13
 8005e4a:	e0ee      	b.n	800602a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e54:	8952      	ldrh	r2, [r2, #10]
 8005e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <find_volume+0x32e>
 8005e62:	230d      	movs	r3, #13
 8005e64:	e0e1      	b.n	800602a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005e66:	2303      	movs	r3, #3
 8005e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d802      	bhi.n	8005e7c <find_volume+0x344>
 8005e76:	2302      	movs	r3, #2
 8005e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d802      	bhi.n	8005e8c <find_volume+0x354>
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e98:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005e9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	441a      	add	r2, r3
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	441a      	add	r2, r3
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005eae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d11e      	bne.n	8005ef4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	3334      	adds	r3, #52	; 0x34
 8005eba:	332a      	adds	r3, #42	; 0x2a
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe fbb3 	bl	8004628 <ld_word>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <find_volume+0x394>
 8005ec8:	230d      	movs	r3, #13
 8005eca:	e0ae      	b.n	800602a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	891b      	ldrh	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <find_volume+0x3a0>
 8005ed4:	230d      	movs	r3, #13
 8005ed6:	e0a8      	b.n	800602a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	3334      	adds	r3, #52	; 0x34
 8005edc:	332c      	adds	r3, #44	; 0x2c
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fbb9 	bl	8004656 <ld_dword>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef2:	e01f      	b.n	8005f34 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	891b      	ldrh	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <find_volume+0x3c8>
 8005efc:	230d      	movs	r3, #13
 8005efe:	e094      	b.n	800602a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	441a      	add	r2, r3
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d103      	bne.n	8005f1c <find_volume+0x3e4>
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	e00a      	b.n	8005f32 <find_volume+0x3fa>
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	085a      	lsrs	r2, r3, #1
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	899b      	ldrh	r3, [r3, #12]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	440b      	add	r3, r1
 8005f42:	3b01      	subs	r3, #1
 8005f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f46:	8989      	ldrh	r1, [r1, #12]
 8005f48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d201      	bcs.n	8005f54 <find_volume+0x41c>
 8005f50:	230d      	movs	r3, #13
 8005f52:	e06a      	b.n	800602a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	615a      	str	r2, [r3, #20]
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005f6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d149      	bne.n	8006006 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	3334      	adds	r3, #52	; 0x34
 8005f76:	3330      	adds	r3, #48	; 0x30
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe fb55 	bl	8004628 <ld_word>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d140      	bne.n	8006006 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	3301      	adds	r3, #1
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f8c:	f7fe fdec 	bl	8004b68 <move_window>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d137      	bne.n	8006006 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2200      	movs	r2, #0
 8005f9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	3334      	adds	r3, #52	; 0x34
 8005fa0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fb3f 	bl	8004628 <ld_word>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d127      	bne.n	8006006 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	3334      	adds	r3, #52	; 0x34
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fb4b 	bl	8004656 <ld_dword>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <find_volume+0x4fc>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d11e      	bne.n	8006006 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3334      	adds	r3, #52	; 0x34
 8005fcc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe fb40 	bl	8004656 <ld_dword>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b17      	ldr	r3, [pc, #92]	; (8006038 <find_volume+0x500>)
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d113      	bne.n	8006006 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	3334      	adds	r3, #52	; 0x34
 8005fe2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fb35 	bl	8004656 <ld_dword>
 8005fec:	4602      	mov	r2, r0
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	3334      	adds	r3, #52	; 0x34
 8005ff6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fb2b 	bl	8004656 <ld_dword>
 8006000:	4602      	mov	r2, r0
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800600c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <find_volume+0x504>)
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <find_volume+0x504>)
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <find_volume+0x504>)
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006022:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006024:	f7fe fd3a 	bl	8004a9c <clear_lock>
#endif
	return FR_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3758      	adds	r7, #88	; 0x58
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	41615252 	.word	0x41615252
 8006038:	61417272 	.word	0x61417272
 800603c:	20000330 	.word	0x20000330

08006040 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800604a:	2309      	movs	r3, #9
 800604c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01c      	beq.n	800608e <validate+0x4e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <validate+0x4e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <validate+0x4e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	889a      	ldrh	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	88db      	ldrh	r3, [r3, #6]
 8006070:	429a      	cmp	r2, r3
 8006072:	d10c      	bne.n	800608e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fa36 	bl	80044ec <disk_status>
 8006080:	4603      	mov	r3, r0
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <validate+0x4e>
			res = FR_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <validate+0x5a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	e000      	b.n	800609c <validate+0x5c>
 800609a:	2300      	movs	r3, #0
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	6013      	str	r3, [r2, #0]
	return res;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80060be:	f107 0310 	add.w	r3, r7, #16
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fc9e 	bl	8005a04 <get_ldnumber>
 80060c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	da01      	bge.n	80060d4 <f_mount+0x28>
 80060d0:	230b      	movs	r3, #11
 80060d2:	e02b      	b.n	800612c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <f_mount+0x88>)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f7fe fcd9 	bl	8004a9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	490d      	ldr	r1, [pc, #52]	; (8006134 <f_mount+0x88>)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <f_mount+0x66>
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d001      	beq.n	8006116 <f_mount+0x6a>
 8006112:	2300      	movs	r3, #0
 8006114:	e00a      	b.n	800612c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006116:	f107 010c 	add.w	r1, r7, #12
 800611a:	f107 0308 	add.w	r3, r7, #8
 800611e:	2200      	movs	r2, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fd09 	bl	8005b38 <find_volume>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800612a:	7dfb      	ldrb	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	2000032c 	.word	0x2000032c

08006138 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b098      	sub	sp, #96	; 0x60
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <f_open+0x18>
 800614c:	2309      	movs	r3, #9
 800614e:	e1ba      	b.n	80064c6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006156:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006158:	79fa      	ldrb	r2, [r7, #7]
 800615a:	f107 0110 	add.w	r1, r7, #16
 800615e:	f107 0308 	add.w	r3, r7, #8
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fce8 	bl	8005b38 <find_volume>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800616e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 819e 	bne.w	80064b4 <f_open+0x37c>
		dj.obj.fs = fs;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fbc7 	bl	8005918 <follow_path>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11a      	bne.n	80061ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006198:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800619c:	b25b      	sxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da03      	bge.n	80061aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80061a2:	2306      	movs	r3, #6
 80061a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061a8:	e011      	b.n	80061ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fb28 	bl	8004818 <chk_lock>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	f003 031c 	and.w	r3, r3, #28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d07e      	beq.n	80062d6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80061d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80061e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d10e      	bne.n	8006206 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061e8:	f7fe fb70 	bl	80048cc <enq_lock>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <f_open+0xc8>
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fac7 	bl	800578a <dir_register>
 80061fc:	4603      	mov	r3, r0
 80061fe:	e000      	b.n	8006202 <f_open+0xca>
 8006200:	2312      	movs	r3, #18
 8006202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	f043 0308 	orr.w	r3, r3, #8
 800620c:	71fb      	strb	r3, [r7, #7]
 800620e:	e010      	b.n	8006232 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006210:	7ebb      	ldrb	r3, [r7, #26]
 8006212:	f003 0311 	and.w	r3, r3, #17
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <f_open+0xea>
					res = FR_DENIED;
 800621a:	2307      	movs	r3, #7
 800621c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006220:	e007      	b.n	8006232 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <f_open+0xfa>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006236:	2b00      	cmp	r3, #0
 8006238:	d167      	bne.n	800630a <f_open+0x1d2>
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d062      	beq.n	800630a <f_open+0x1d2>
				dw = GET_FATTIME();
 8006244:	4ba2      	ldr	r3, [pc, #648]	; (80064d0 <f_open+0x398>)
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	330e      	adds	r3, #14
 800624c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fa3d 	bl	80046ce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	3316      	adds	r3, #22
 8006258:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fa37 	bl	80046ce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	330b      	adds	r3, #11
 8006264:	2220      	movs	r2, #32
 8006266:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f9f7 	bl	8005662 <ld_clust>
 8006274:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800627a:	2200      	movs	r2, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fa0f 	bl	80056a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	331c      	adds	r3, #28
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fa20 	bl	80046ce <st_dword>
					fs->wflag = 1;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2201      	movs	r2, #1
 8006292:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d037      	beq.n	800630a <f_open+0x1d2>
						dw = fs->winsect;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	2200      	movs	r2, #0
 80062a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe ff00 	bl	80050ae <remove_chain>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80062b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d126      	bne.n	800630a <f_open+0x1d2>
							res = move_window(fs, dw);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fc51 	bl	8004b68 <move_window>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d0:	3a01      	subs	r2, #1
 80062d2:	611a      	str	r2, [r3, #16]
 80062d4:	e019      	b.n	800630a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80062d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d115      	bne.n	800630a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80062de:	7ebb      	ldrb	r3, [r7, #26]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062ee:	e00c      	b.n	800630a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <f_open+0x1d2>
 80062fa:	7ebb      	ldrb	r3, [r7, #26]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <f_open+0x1d2>
						res = FR_DENIED;
 8006304:	2307      	movs	r3, #7
 8006306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800630a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800630e:	2b00      	cmp	r3, #0
 8006310:	d128      	bne.n	8006364 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006322:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800632c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fade 	bl	800490c <inc_lock>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <f_open+0x22c>
 800635e:	2302      	movs	r3, #2
 8006360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 80a3 	bne.w	80064b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff f974 	bl	8005662 <ld_clust>
 800637a:	4602      	mov	r2, r0
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	331c      	adds	r3, #28
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe f966 	bl	8004656 <ld_dword>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	88da      	ldrh	r2, [r3, #6]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	79fa      	ldrb	r2, [r7, #7]
 80063a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3330      	adds	r3, #48	; 0x30
 80063c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe f9cc 	bl	8004764 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d06e      	beq.n	80064b4 <f_open+0x37c>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d06a      	beq.n	80064b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	895b      	ldrh	r3, [r3, #10]
 80063ea:	461a      	mov	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	899b      	ldrh	r3, [r3, #12]
 80063f0:	fb03 f302 	mul.w	r3, r3, r2
 80063f4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	657b      	str	r3, [r7, #84]	; 0x54
 8006402:	e016      	b.n	8006432 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fc69 	bl	8004ce0 <get_fat>
 800640e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006412:	2b01      	cmp	r3, #1
 8006414:	d802      	bhi.n	800641c <f_open+0x2e4>
 8006416:	2302      	movs	r3, #2
 8006418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800641c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d102      	bne.n	800642a <f_open+0x2f2>
 8006424:	2301      	movs	r3, #1
 8006426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800642a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800642c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	657b      	str	r3, [r7, #84]	; 0x54
 8006432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <f_open+0x30a>
 800643a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800643c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643e:	429a      	cmp	r2, r3
 8006440:	d8e0      	bhi.n	8006404 <f_open+0x2cc>
				}
				fp->clust = clst;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006446:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800644c:	2b00      	cmp	r3, #0
 800644e:	d131      	bne.n	80064b4 <f_open+0x37c>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	899b      	ldrh	r3, [r3, #12]
 8006454:	461a      	mov	r2, r3
 8006456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006458:	fbb3 f1f2 	udiv	r1, r3, r2
 800645c:	fb02 f201 	mul.w	r2, r2, r1
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d026      	beq.n	80064b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fc1a 	bl	8004ca4 <clust2sect>
 8006470:	6478      	str	r0, [r7, #68]	; 0x44
 8006472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <f_open+0x348>
						res = FR_INT_ERR;
 8006478:	2302      	movs	r3, #2
 800647a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800647e:	e019      	b.n	80064b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	899b      	ldrh	r3, [r3, #12]
 8006484:	461a      	mov	r2, r3
 8006486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006488:	fbb3 f2f2 	udiv	r2, r3, r2
 800648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	7858      	ldrb	r0, [r3, #1]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	2301      	movs	r3, #1
 80064a4:	f7fe f862 	bl	800456c <disk_read>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <f_open+0x37c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80064b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <f_open+0x38a>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80064c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3760      	adds	r7, #96	; 0x60
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	4f930000 	.word	0x4f930000

080064d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f107 0210 	add.w	r2, r7, #16
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fda3 	bl	8006040 <validate>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <f_write+0x44>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	7d5b      	ldrb	r3, [r3, #21]
 800650c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <f_write+0x4a>
 8006518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800651c:	e16a      	b.n	80067f4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	7d1b      	ldrb	r3, [r3, #20]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <f_write+0x5a>
 800652a:	2307      	movs	r3, #7
 800652c:	e162      	b.n	80067f4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	429a      	cmp	r2, r3
 800653c:	f080 814c 	bcs.w	80067d8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	43db      	mvns	r3, r3
 8006546:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006548:	e146      	b.n	80067d8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	8992      	ldrh	r2, [r2, #12]
 8006552:	fbb3 f1f2 	udiv	r1, r3, r2
 8006556:	fb02 f201 	mul.w	r2, r2, r1
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 80f1 	bne.w	8006744 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	8992      	ldrh	r2, [r2, #12]
 800656a:	fbb3 f3f2 	udiv	r3, r3, r2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	8952      	ldrh	r2, [r2, #10]
 8006572:	3a01      	subs	r2, #1
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d143      	bne.n	8006606 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11a      	bne.n	80065c8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fdee 	bl	8005178 <create_chain>
 800659c:	62b8      	str	r0, [r7, #40]	; 0x28
 800659e:	e013      	b.n	80065c8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7fe fe7a 	bl	80052a8 <clmt_clust>
 80065b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80065b6:	e007      	b.n	80065c8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe fdd9 	bl	8005178 <create_chain>
 80065c6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8109 	beq.w	80067e2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d104      	bne.n	80065e0 <f_write+0x10c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	755a      	strb	r2, [r3, #21]
 80065dc:	2302      	movs	r3, #2
 80065de:	e109      	b.n	80067f4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d104      	bne.n	80065f2 <f_write+0x11e>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	755a      	strb	r2, [r3, #21]
 80065ee:	2301      	movs	r3, #1
 80065f0:	e100      	b.n	80067f4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <f_write+0x132>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006604:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	7d1b      	ldrb	r3, [r3, #20]
 800660a:	b25b      	sxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	da18      	bge.n	8006642 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	7858      	ldrb	r0, [r3, #1]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	2301      	movs	r3, #1
 8006620:	f7fd ffc4 	bl	80045ac <disk_write>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <f_write+0x160>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	755a      	strb	r2, [r3, #21]
 8006630:	2301      	movs	r3, #1
 8006632:	e0df      	b.n	80067f4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7d1b      	ldrb	r3, [r3, #20]
 8006638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe fb2a 	bl	8004ca4 <clust2sect>
 8006650:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <f_write+0x18e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2202      	movs	r2, #2
 800665c:	755a      	strb	r2, [r3, #21]
 800665e:	2302      	movs	r3, #2
 8006660:	e0c8      	b.n	80067f4 <f_write+0x320>
			sect += csect;
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	899b      	ldrh	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	fbb3 f3f2 	udiv	r3, r3, r2
 8006676:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d043      	beq.n	8006706 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	4413      	add	r3, r2
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	8952      	ldrh	r2, [r2, #10]
 8006688:	4293      	cmp	r3, r2
 800668a:	d905      	bls.n	8006698 <f_write+0x1c4>
					cc = fs->csize - csect;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	895b      	ldrh	r3, [r3, #10]
 8006690:	461a      	mov	r2, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	7858      	ldrb	r0, [r3, #1]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	f7fd ff83 	bl	80045ac <disk_write>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <f_write+0x1e2>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	755a      	strb	r2, [r3, #21]
 80066b2:	2301      	movs	r3, #1
 80066b4:	e09e      	b.n	80067f4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d918      	bls.n	80066f6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	8992      	ldrh	r2, [r2, #12]
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	18d1      	adds	r1, r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	899b      	ldrh	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fe f81e 	bl	8004724 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	7d1b      	ldrb	r3, [r3, #20]
 80066ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	899b      	ldrh	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006704:	e04b      	b.n	800679e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	429a      	cmp	r2, r3
 800670e:	d016      	beq.n	800673e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006718:	429a      	cmp	r2, r3
 800671a:	d210      	bcs.n	800673e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	7858      	ldrb	r0, [r3, #1]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006726:	2301      	movs	r3, #1
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	f7fd ff1f 	bl	800456c <disk_read>
 800672e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	755a      	strb	r2, [r3, #21]
 800673a:	2301      	movs	r3, #1
 800673c:	e05a      	b.n	80067f4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	899b      	ldrh	r3, [r3, #12]
 8006748:	4618      	mov	r0, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	8992      	ldrh	r2, [r2, #12]
 8006752:	fbb3 f1f2 	udiv	r1, r3, r2
 8006756:	fb02 f201 	mul.w	r2, r2, r1
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	1ac3      	subs	r3, r0, r3
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d901      	bls.n	800676c <f_write+0x298>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	8992      	ldrh	r2, [r2, #12]
 800677a:	fbb3 f0f2 	udiv	r0, r3, r2
 800677e:	fb02 f200 	mul.w	r2, r2, r0
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	440b      	add	r3, r1
 8006786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd ffca 	bl	8004724 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	7d1b      	ldrb	r3, [r3, #20]
 8006794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	4413      	add	r3, r2
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	441a      	add	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	619a      	str	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	bf38      	it	cc
 80067be:	461a      	movcc	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	441a      	add	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f47f aeb5 	bne.w	800654a <f_write+0x76>
 80067e0:	e000      	b.n	80067e4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	7d1b      	ldrb	r3, [r3, #20]
 80067e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3730      	adds	r7, #48	; 0x30
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f107 0208 	add.w	r2, r7, #8
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fc17 	bl	8006040 <validate>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d167      	bne.n	80068ec <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7d1b      	ldrb	r3, [r3, #20]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d061      	beq.n	80068ec <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7d1b      	ldrb	r3, [r3, #20]
 800682c:	b25b      	sxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	da15      	bge.n	800685e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	7858      	ldrb	r0, [r3, #1]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1a      	ldr	r2, [r3, #32]
 8006840:	2301      	movs	r3, #1
 8006842:	f7fd feb3 	bl	80045ac <disk_write>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <f_sync+0x54>
 800684c:	2301      	movs	r3, #1
 800684e:	e04e      	b.n	80068ee <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7d1b      	ldrb	r3, [r3, #20]
 8006854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <f_sync+0xfc>)
 8006860:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f7fe f97c 	bl	8004b68 <move_window>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d138      	bne.n	80068ec <f_sync+0xf0>
					dir = fp->dir_ptr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	330b      	adds	r3, #11
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	330b      	adds	r3, #11
 800688a:	f042 0220 	orr.w	r2, r2, #32
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	461a      	mov	r2, r3
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	f7fe feff 	bl	80056a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f103 021c 	add.w	r2, r3, #28
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fd ff0d 	bl	80046ce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3316      	adds	r3, #22
 80068b8:	6939      	ldr	r1, [r7, #16]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd ff07 	bl	80046ce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3312      	adds	r3, #18
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fee7 	bl	800469a <st_word>
					fs->wflag = 1;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2201      	movs	r2, #1
 80068d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe f975 	bl	8004bc4 <sync_fs>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7d1b      	ldrb	r3, [r3, #20]
 80068e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	4f930000 	.word	0x4f930000

080068fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff79 	bl	80067fc <f_sync>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d118      	bne.n	8006946 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f107 0208 	add.w	r2, r7, #8
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fb8f 	bl	8006040 <validate>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10c      	bne.n	8006946 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f879 	bl	8004a28 <dec_lock>
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006968:	7a5b      	ldrb	r3, [r3, #9]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d131      	bne.n	80069d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006972:	7a5b      	ldrb	r3, [r3, #9]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 800697a:	2100      	movs	r1, #0
 800697c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800697e:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006980:	7a5b      	ldrb	r3, [r3, #9]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006990:	7a5b      	ldrb	r3, [r3, #9]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 8006998:	4413      	add	r3, r2
 800699a:	79fa      	ldrb	r2, [r7, #7]
 800699c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 80069a0:	7a5b      	ldrb	r3, [r3, #9]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	b2d1      	uxtb	r1, r2
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <FATFS_LinkDriverEx+0x90>)
 80069aa:	7251      	strb	r1, [r2, #9]
 80069ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069ae:	7dbb      	ldrb	r3, [r7, #22]
 80069b0:	3330      	adds	r3, #48	; 0x30
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	3301      	adds	r3, #1
 80069bc:	223a      	movs	r2, #58	; 0x3a
 80069be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3302      	adds	r3, #2
 80069c4:	222f      	movs	r2, #47	; 0x2f
 80069c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3303      	adds	r3, #3
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	20000354 	.word	0x20000354

080069e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ffac 	bl	8006950 <FATFS_LinkDriverEx>
 80069f8:	4603      	mov	r3, r0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	2500      	movs	r5, #0
 8006a08:	4e0c      	ldr	r6, [pc, #48]	; (8006a3c <__libc_init_array+0x38>)
 8006a0a:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0c:	1ba4      	subs	r4, r4, r6
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	42a5      	cmp	r5, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	f000 f82e 	bl	8006a74 <_init>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	4e0a      	ldr	r6, [pc, #40]	; (8006a44 <__libc_init_array+0x40>)
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <__libc_init_array+0x44>)
 8006a1e:	1ba4      	subs	r4, r4, r6
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	42a5      	cmp	r5, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a2c:	4798      	blx	r3
 8006a2e:	3501      	adds	r5, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a36:	4798      	blx	r3
 8006a38:	3501      	adds	r5, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08006b8c 	.word	0x08006b8c
 8006a40:	08006b8c 	.word	0x08006b8c
 8006a44:	08006b8c 	.word	0x08006b8c
 8006a48:	08006b90 	.word	0x08006b90

08006a4c <memcpy>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	1e43      	subs	r3, r0, #1
 8006a50:	440a      	add	r2, r1
 8006a52:	4291      	cmp	r1, r2
 8006a54:	d100      	bne.n	8006a58 <memcpy+0xc>
 8006a56:	bd10      	pop	{r4, pc}
 8006a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a60:	e7f7      	b.n	8006a52 <memcpy+0x6>

08006a62 <memset>:
 8006a62:	4603      	mov	r3, r0
 8006a64:	4402      	add	r2, r0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d100      	bne.n	8006a6c <memset+0xa>
 8006a6a:	4770      	bx	lr
 8006a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a70:	e7f9      	b.n	8006a66 <memset+0x4>
	...

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
