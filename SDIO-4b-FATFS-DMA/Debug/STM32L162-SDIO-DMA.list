
STM32L162-SDIO-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000692c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006b68  08006b68  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b68  08006b68  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  200000a0  08006c10  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000cc0  08006c10  00020cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f202  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002368  00000000  00000000  0002f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188c1  00000000  00000000  00032ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac50  00000000  00000000  0004b461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091d64  00000000  00000000  000560b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc8  00000000  00000000  000e7e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006a50 	.word	0x08006a50

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	08006a50 	.word	0x08006a50

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fab3 	bl	80006ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f85c 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8e6 	bl	8000358 <MX_GPIO_Init>
  MX_DMA_Init();
 800018c:	f000 f8c6 	bl	800031c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000190:	f000 f8a4 	bl	80002dc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000194:	f003 fe04 	bl	8003da0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // 1. Register a work area
        res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
 8000198:	2200      	movs	r2, #0
 800019a:	4921      	ldr	r1, [pc, #132]	; (8000220 <main+0xa4>)
 800019c:	4821      	ldr	r0, [pc, #132]	; (8000224 <main+0xa8>)
 800019e:	f005 ff73 	bl	8006088 <f_mount>
 80001a2:	4603      	mov	r3, r0
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xac>)
 80001a8:	701a      	strb	r2, [r3, #0]
        if (res == FR_OK){
 80001aa:	4b1f      	ldr	r3, [pc, #124]	; (8000228 <main+0xac>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d135      	bne.n	800021e <main+0xa2>
        	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2120      	movs	r1, #32
 80001b6:	481d      	ldr	r0, [pc, #116]	; (800022c <main+0xb0>)
 80001b8:	f001 f862 	bl	8001280 <HAL_GPIO_WritePin>
        	// 2. Creating a new file for writing/reading later
        	res = f_open(&SDFile, "test8.txt", FA_CREATE_ALWAYS | FA_WRITE); //Writing
 80001bc:	220a      	movs	r2, #10
 80001be:	491c      	ldr	r1, [pc, #112]	; (8000230 <main+0xb4>)
 80001c0:	481c      	ldr	r0, [pc, #112]	; (8000234 <main+0xb8>)
 80001c2:	f005 ffa7 	bl	8006114 <f_open>
 80001c6:	4603      	mov	r3, r0
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b17      	ldr	r3, [pc, #92]	; (8000228 <main+0xac>)
 80001cc:	701a      	strb	r2, [r3, #0]
        	if(res == FR_OK){
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0xac>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d120      	bne.n	8000218 <main+0x9c>
        		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2110      	movs	r1, #16
 80001da:	4814      	ldr	r0, [pc, #80]	; (800022c <main+0xb0>)
 80001dc:	f001 f850 	bl	8001280 <HAL_GPIO_WritePin>
        		res = f_write(&SDFile, wtext, sizeof(wtext), (void *) &byteswritten);
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <main+0xbc>)
 80001e2:	228e      	movs	r2, #142	; 0x8e
 80001e4:	4915      	ldr	r1, [pc, #84]	; (800023c <main+0xc0>)
 80001e6:	4813      	ldr	r0, [pc, #76]	; (8000234 <main+0xb8>)
 80001e8:	f006 f962 	bl	80064b0 <f_write>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0xac>)
 80001f2:	701a      	strb	r2, [r3, #0]

        		if((res != FR_OK) || (byteswritten == 0)){
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <main+0xac>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d103      	bne.n	8000204 <main+0x88>
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <main+0xbc>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d109      	bne.n	8000218 <main+0x9c>
        			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2120      	movs	r1, #32
 8000208:	4808      	ldr	r0, [pc, #32]	; (800022c <main+0xb0>)
 800020a:	f001 f839 	bl	8001280 <HAL_GPIO_WritePin>
        		    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2110      	movs	r1, #16
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0xb0>)
 8000214:	f001 f834 	bl	8001280 <HAL_GPIO_WritePin>
        		}
        	}
        	f_close(&SDFile);
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0xb8>)
 800021a:	f006 fb5d 	bl	80068d8 <f_close>
        }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	e7fe      	b.n	800021e <main+0xa2>
 8000220:	200003c8 	.word	0x200003c8
 8000224:	20000884 	.word	0x20000884
 8000228:	20000880 	.word	0x20000880
 800022c:	40020400 	.word	0x40020400
 8000230:	08006a68 	.word	0x08006a68
 8000234:	20000450 	.word	0x20000450
 8000238:	20000380 	.word	0x20000380
 800023c:	20000000 	.word	0x20000000

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b092      	sub	sp, #72	; 0x48
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2234      	movs	r2, #52	; 0x34
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f006 fbf5 	bl	8006a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <SystemClock_Config+0x98>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <SystemClock_Config+0x98>)
 800026c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000270:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000286:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800028a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800028c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	4618      	mov	r0, r3
 8000298:	f001 f80a 	bl	80012b0 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a2:	f000 f8a3 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2303      	movs	r3, #3
 80002ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ba:	463b      	mov	r3, r7
 80002bc:	2101      	movs	r1, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fb26 	bl	8001910 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ca:	f000 f88f 	bl	80003ec <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3748      	adds	r7, #72	; 0x48
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40007000 	.word	0x40007000

080002dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002e2:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <MX_SDIO_SD_Init+0x3c>)
 80002e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <MX_SDIO_SD_Init+0x38>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	200003cc 	.word	0x200003cc
 8000318:	40012c00 	.word	0x40012c00

0800031c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_DMA_Init+0x38>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <MX_DMA_Init+0x38>)
 8000328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_DMA_Init+0x38>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2105      	movs	r1, #5
 800033e:	2035      	movs	r0, #53	; 0x35
 8000340:	f000 fb3b 	bl	80009ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000344:	2035      	movs	r0, #53	; 0x35
 8000346:	f000 fb54 	bl	80009f2 <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_GPIO_Init+0x8c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <MX_GPIO_Init+0x8c>)
 800038c:	f043 0308 	orr.w	r3, r3, #8
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_GPIO_Init+0x8c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 0308 	and.w	r3, r3, #8
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_GPIO_Init+0x8c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2130      	movs	r1, #48	; 0x30
 80003ba:	480b      	ldr	r0, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x90>)
 80003bc:	f000 ff60 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80003c0:	2330      	movs	r3, #48	; 0x30
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_GPIO_Init+0x90>)
 80003d8:	f000 fdc4 	bl	8000f64 <HAL_GPIO_Init>

}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020400 	.word	0x40020400

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_MspInit+0x58>)
 8000400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000402:	4a13      	ldr	r2, [pc, #76]	; (8000450 <HAL_MspInit+0x58>)
 8000404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000408:	6253      	str	r3, [r2, #36]	; 0x24
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_MspInit+0x58>)
 800040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x58>)
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <HAL_MspInit+0x58>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6213      	str	r3, [r2, #32]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_MspInit+0x58>)
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x58>)
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	4a07      	ldr	r2, [pc, #28]	; (8000450 <HAL_MspInit+0x58>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	6253      	str	r3, [r2, #36]	; 0x24
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_MspInit+0x58>)
 800043c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40023800 	.word	0x40023800

08000454 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a40      	ldr	r2, [pc, #256]	; (8000574 <HAL_SD_MspInit+0x120>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d17a      	bne.n	800056c <HAL_SD_MspInit+0x118>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000476:	4b40      	ldr	r3, [pc, #256]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000478:	6a1b      	ldr	r3, [r3, #32]
 800047a:	4a3f      	ldr	r2, [pc, #252]	; (8000578 <HAL_SD_MspInit+0x124>)
 800047c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000480:	6213      	str	r3, [r2, #32]
 8000482:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000484:	6a1b      	ldr	r3, [r3, #32]
 8000486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b3a      	ldr	r3, [pc, #232]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a39      	ldr	r2, [pc, #228]	; (8000578 <HAL_SD_MspInit+0x124>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <HAL_SD_MspInit+0x124>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a33      	ldr	r2, [pc, #204]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <HAL_SD_MspInit+0x124>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0308 	and.w	r3, r3, #8
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80004be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80004c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80004d0:	230c      	movs	r3, #12
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	4828      	ldr	r0, [pc, #160]	; (800057c <HAL_SD_MspInit+0x128>)
 80004dc:	f000 fd42 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004e0:	2304      	movs	r3, #4
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80004f0:	230c      	movs	r3, #12
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	4821      	ldr	r0, [pc, #132]	; (8000580 <HAL_SD_MspInit+0x12c>)
 80004fc:	f000 fd32 	bl	8000f64 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SD_MMC Init */
    hdma_sd_mmc.Instance = DMA2_Channel4;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000502:	4a21      	ldr	r2, [pc, #132]	; (8000588 <HAL_SD_MspInit+0x134>)
 8000504:	601a      	str	r2, [r3, #0]
    hdma_sd_mmc.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000508:	2210      	movs	r2, #16
 800050a:	605a      	str	r2, [r3, #4]
    hdma_sd_mmc.Init.PeriphInc = DMA_PINC_DISABLE;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <HAL_SD_MspInit+0x130>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
    hdma_sd_mmc.Init.MemInc = DMA_MINC_ENABLE;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	60da      	str	r2, [r3, #12]
    hdma_sd_mmc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_SD_MspInit+0x130>)
 800051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051e:	611a      	str	r2, [r3, #16]
    hdma_sd_mmc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000526:	615a      	str	r2, [r3, #20]
    hdma_sd_mmc.Init.Mode = DMA_NORMAL;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_SD_MspInit+0x130>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
    hdma_sd_mmc.Init.Priority = DMA_PRIORITY_LOW;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000530:	2200      	movs	r2, #0
 8000532:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sd_mmc) != HAL_OK)
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000536:	f000 fa77 	bl	8000a28 <HAL_DMA_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <HAL_SD_MspInit+0xf0>
    {
      Error_Handler();
 8000540:	f7ff ff54 	bl	80003ec <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sd_mmc);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000548:	641a      	str	r2, [r3, #64]	; 0x40
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_SD_MspInit+0x130>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(hsd,hdmatx,hdma_sd_mmc);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000554:	63da      	str	r2, [r3, #60]	; 0x3c
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <HAL_SD_MspInit+0x130>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2105      	movs	r1, #5
 8000560:	202d      	movs	r0, #45	; 0x2d
 8000562:	f000 fa2a 	bl	80009ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000566:	202d      	movs	r0, #45	; 0x2d
 8000568:	f000 fa43 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40012c00 	.word	0x40012c00
 8000578:	40023800 	.word	0x40023800
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00
 8000584:	20000384 	.word	0x20000384
 8000588:	40026444 	.word	0x40026444

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <HardFault_Handler+0x4>

0800059e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <BusFault_Handler+0x4>

080005aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <UsageFault_Handler+0x4>

080005b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f8da 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <SDIO_IRQHandler+0x10>)
 80005e6:	f001 fdf3 	bl	80021d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200003cc 	.word	0x200003cc

080005f4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
	if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	2b81      	cmp	r3, #129	; 0x81
 80005fe:	d003      	beq.n	8000608 <DMA2_Channel4_IRQHandler+0x14>
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	2b82      	cmp	r3, #130	; 0x82
 8000606:	d105      	bne.n	8000614 <DMA2_Channel4_IRQHandler+0x20>
		 HAL_DMA_IRQHandler(hsd.hdmarx);
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fbcb 	bl	8000da8 <HAL_DMA_IRQHandler>
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sd_mmc);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000612:	e00c      	b.n	800062e <DMA2_Channel4_IRQHandler+0x3a>
	else if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) || (hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK))){
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	2b90      	cmp	r3, #144	; 0x90
 800061a:	d003      	beq.n	8000624 <DMA2_Channel4_IRQHandler+0x30>
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	2ba0      	cmp	r3, #160	; 0xa0
 8000622:	d104      	bne.n	800062e <DMA2_Channel4_IRQHandler+0x3a>
		 HAL_DMA_IRQHandler(hsd.hdmatx);
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <DMA2_Channel4_IRQHandler+0x40>)
 8000626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fbbd 	bl	8000da8 <HAL_DMA_IRQHandler>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200003cc 	.word	0x200003cc

08000638 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SystemInit+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <SystemInit+0x5c>)
 8000642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000646:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <SystemInit+0x5c>)
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	4911      	ldr	r1, [pc, #68]	; (8000694 <SystemInit+0x5c>)
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <SystemInit+0x60>)
 8000650:	4013      	ands	r3, r2
 8000652:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <SystemInit+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <SystemInit+0x5c>)
 800065a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800065e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000662:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <SystemInit+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <SystemInit+0x5c>)
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SystemInit+0x5c>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SystemInit+0x5c>)
 8000676:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800067a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SystemInit+0x5c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <SystemInit+0x64>)
 8000684:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000688:	609a      	str	r2, [r3, #8]
#endif
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	88ffc00c 	.word	0x88ffc00c
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ffb7 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f006 f989 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd55 	bl	800017c <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r3, =_sidata
 80006d4:	08006b70 	.word	0x08006b70
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006dc:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 80006e0:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 80006e4:	20000cc0 	.word	0x20000cc0

080006e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_IRQHandler>

080006ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f955 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f80e 	bl	800071c <HAL_InitTick>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	e001      	b.n	8000710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800070c:	f7ff fe74 	bl	80003f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000710:	79fb      	ldrb	r3, [r7, #7]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_InitTick+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d022      	beq.n	8000776 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_InitTick+0x6c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <HAL_InitTick+0x68>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800073c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000740:	fbb2 f3f3 	udiv	r3, r2, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f962 	bl	8000a0e <HAL_SYSTICK_Config>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10f      	bne.n	8000770 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b0f      	cmp	r3, #15
 8000754:	d809      	bhi.n	800076a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000756:	2200      	movs	r2, #0
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	f04f 30ff 	mov.w	r0, #4294967295
 800075e:	f000 f92c 	bl	80009ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_InitTick+0x70>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	e007      	b.n	800077a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e004      	b.n	800077a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e001      	b.n	800077a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000098 	.word	0x20000098
 8000788:	20000090 	.word	0x20000090
 800078c:	20000094 	.word	0x20000094

08000790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4413      	add	r3, r2
 800079e:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_IncTick+0x1c>)
 80007a0:	6013      	str	r3, [r2, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000cb8 	.word	0x20000cb8
 80007b0:	20000098 	.word	0x20000098

080007b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000cb8 	.word	0x20000cb8

080007c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff fff0 	bl	80007b4 <HAL_GetTick>
 80007d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e0:	d004      	beq.n	80007ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_Delay+0x40>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ec:	bf00      	nop
 80007ee:	f7ff ffe1 	bl	80007b4 <HAL_GetTick>
 80007f2:	4602      	mov	r2, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d8f7      	bhi.n	80007ee <HAL_Delay+0x26>
  {
  }
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000098 	.word	0x20000098

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <__NVIC_EnableIRQ+0x34>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff90 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff2d 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff42 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff35 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffa2 	bl	8000960 <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e059      	b.n	8000aee <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <HAL_DMA_Init+0xd0>)
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d80f      	bhi.n	8000a66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_DMA_Init+0xd4>)
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a2b      	ldr	r2, [pc, #172]	; (8000b00 <HAL_DMA_Init+0xd8>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	091b      	lsrs	r3, r3, #4
 8000a58:	009a      	lsls	r2, r3, #2
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <HAL_DMA_Init+0xdc>)
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a64:	e00e      	b.n	8000a84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_DMA_Init+0xe0>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_DMA_Init+0xd8>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	009a      	lsls	r2, r3, #2
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <HAL_DMA_Init+0xe4>)
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2202      	movs	r2, #2
 8000a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40026407 	.word	0x40026407
 8000afc:	bffd9ff8 	.word	0xbffd9ff8
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	40026000 	.word	0x40026000
 8000b08:	bffd9bf8 	.word	0xbffd9bf8
 8000b0c:	40026400 	.word	0x40026400

08000b10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e052      	b.n	8000bc8 <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_DMA_DeInit+0xc4>)
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d80f      	bhi.n	8000b5e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_DMA_DeInit+0xc8>)
 8000b46:	4413      	add	r3, r2
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <HAL_DMA_DeInit+0xcc>)
 8000b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	009a      	lsls	r2, r3, #2
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_DMA_DeInit+0xd0>)
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b5c:	e00e      	b.n	8000b7c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_DMA_DeInit+0xd4>)
 8000b66:	4413      	add	r3, r2
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <HAL_DMA_DeInit+0xcc>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_DMA_DeInit+0xd8>)
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 021c 	and.w	r2, r3, #28
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b90:	2101      	movs	r1, #1
 8000b92:	fa01 f202 	lsl.w	r2, r1, r2
 8000b96:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40026407 	.word	0x40026407
 8000bd8:	bffd9ff8 	.word	0xbffd9ff8
 8000bdc:	cccccccd 	.word	0xcccccccd
 8000be0:	40026000 	.word	0x40026000
 8000be4:	bffd9bf8 	.word	0xbffd9bf8
 8000be8:	40026400 	.word	0x40026400

08000bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <HAL_DMA_Start_IT+0x20>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e04b      	b.n	8000ca4 <HAL_DMA_Start_IT+0xb8>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d13a      	bne.n	8000c96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2202      	movs	r2, #2
 8000c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f95e 	bl	8000f06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d008      	beq.n	8000c64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 020e 	orr.w	r2, r2, #14
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e00f      	b.n	8000c84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0204 	bic.w	r2, r2, #4
 8000c72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 020a 	orr.w	r2, r2, #10
 8000c82:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e005      	b.n	8000ca2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d008      	beq.n	8000cd6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e022      	b.n	8000d1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 020e 	bic.w	r2, r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 021c 	and.w	r2, r3, #28
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e029      	b.n	8000d9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 021c 	and.w	r2, r3, #28
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4798      	blx	r3
    }
  }
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 031c 	and.w	r3, r3, #28
 8000dc8:	2204      	movs	r2, #4
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d026      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x7a>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d021      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d107      	bne.n	8000dfc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0204 	bic.w	r2, r2, #4
 8000dfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 021c 	and.w	r2, r3, #28
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e08:	2104      	movs	r1, #4
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d071      	beq.n	8000efc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e20:	e06c      	b.n	8000efc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 031c 	and.w	r3, r3, #28
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d02e      	beq.n	8000e94 <HAL_DMA_IRQHandler+0xec>
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d029      	beq.n	8000e94 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10b      	bne.n	8000e66 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 020a 	bic.w	r2, r2, #10
 8000e5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 021c 	and.w	r2, r3, #28
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2102      	movs	r1, #2
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d038      	beq.n	8000efc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e92:	e033      	b.n	8000efc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 031c 	and.w	r3, r3, #28
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02a      	beq.n	8000efe <HAL_DMA_IRQHandler+0x156>
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d025      	beq.n	8000efe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 020e 	bic.w	r2, r2, #14
 8000ec0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 021c 	and.w	r2, r3, #28
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
}
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 021c 	and.w	r2, r3, #28
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b10      	cmp	r3, #16
 8000f36:	d108      	bne.n	8000f4a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f48:	e007      	b.n	8000f5a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	60da      	str	r2, [r3, #12]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f7a:	e160      	b.n	800123e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8152 	beq.w	8001238 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x40>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b12      	cmp	r3, #18
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	6939      	ldr	r1, [r7, #16]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d00b      	beq.n	8001040 <HAL_GPIO_Init+0xdc>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001034:	2b11      	cmp	r3, #17
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d130      	bne.n	80010a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001076:	2201      	movs	r2, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	f003 0201 	and.w	r2, r3, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80ac 	beq.w	8001238 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a5c      	ldr	r2, [pc, #368]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_GPIO_Init+0x2f8>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a50      	ldr	r2, [pc, #320]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d025      	beq.n	8001170 <HAL_GPIO_Init+0x20c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4f      	ldr	r2, [pc, #316]	; (8001264 <HAL_GPIO_Init+0x300>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d01f      	beq.n	800116c <HAL_GPIO_Init+0x208>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d019      	beq.n	8001168 <HAL_GPIO_Init+0x204>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4d      	ldr	r2, [pc, #308]	; (800126c <HAL_GPIO_Init+0x308>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x200>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x30c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1fc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <HAL_GPIO_Init+0x310>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <HAL_GPIO_Init+0x314>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1f4>
 8001154:	2306      	movs	r3, #6
 8001156:	e00c      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 8001158:	2307      	movs	r3, #7
 800115a:	e00a      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 800115c:	2305      	movs	r3, #5
 800115e:	e008      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 8001160:	2304      	movs	r3, #4
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 8001164:	2303      	movs	r3, #3
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x20e>
 8001170:	2300      	movs	r3, #0
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001182:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_GPIO_Init+0x2f8>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_GPIO_Init+0x318>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011b4:	4a31      	ldr	r2, [pc, #196]	; (800127c <HAL_GPIO_Init+0x318>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x318>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x318>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_GPIO_Init+0x318>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_GPIO_Init+0x318>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x318>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x318>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae97 	bne.w	8000f7c <HAL_GPIO_Init+0x18>
  } 
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40023800 	.word	0x40023800
 800125c:	40010000 	.word	0x40010000
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e31d      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c2:	4b94      	ldr	r3, [pc, #592]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	4b91      	ldr	r3, [pc, #580]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d07b      	beq.n	80013da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d006      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06a      	beq.n	80013d8 <HAL_RCC_OscConfig+0x128>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d166      	bne.n	80013d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e2f7      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x74>
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7e      	ldr	r2, [pc, #504]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e02d      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x96>
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a78      	ldr	r2, [pc, #480]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b76      	ldr	r3, [pc, #472]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0xb8>
 800134e:	4b71      	ldr	r3, [pc, #452]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a70      	ldr	r2, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6e      	ldr	r3, [pc, #440]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fa14 	bl	80007b4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fa10 	bl	80007b4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e2ad      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xe0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa00 	bl	80007b4 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff f9fc 	bl	80007b4 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e299      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x108>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d05a      	beq.n	800149c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d119      	bne.n	8001426 <HAL_RCC_OscConfig+0x176>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d001      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e276      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	493d      	ldr	r1, [pc, #244]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001424:	e03a      	b.n	800149c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d020      	beq.n	8001470 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x268>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff f9be 	bl	80007b4 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff f9ba 	bl	80007b4 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e257      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	492a      	ldr	r1, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x268>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff f99d 	bl	80007b4 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff f999 	bl	80007b4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e236      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80b8 	beq.w	800161a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d170      	bne.n	8001592 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x218>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e21a      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d921      	bls.n	800151c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fba3 	bl	8001c28 <RCC_SetFlashLatencyFromMSIRange>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e208      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	061b      	lsls	r3, r3, #24
 800150c:	4901      	ldr	r1, [pc, #4]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e020      	b.n	8001556 <HAL_RCC_OscConfig+0x2a6>
 8001514:	40023800 	.word	0x40023800
 8001518:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151c:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	49a1      	ldr	r1, [pc, #644]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152e:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	499c      	ldr	r1, [pc, #624]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fb6e 	bl	8001c28 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1d3      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	0b5b      	lsrs	r3, r3, #13
 800155c:	3301      	adds	r3, #1
 800155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001566:	4a92      	ldr	r2, [pc, #584]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	0912      	lsrs	r2, r2, #4
 800156c:	f002 020f 	and.w	r2, r2, #15
 8001570:	4990      	ldr	r1, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x504>)
 8001572:	5c8a      	ldrb	r2, [r1, r2]
 8001574:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001576:	4a90      	ldr	r2, [pc, #576]	; (80017b8 <HAL_RCC_OscConfig+0x508>)
 8001578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800157a:	4b90      	ldr	r3, [pc, #576]	; (80017bc <HAL_RCC_OscConfig+0x50c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8cc 	bl	800071c <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d045      	beq.n	800161a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	e1b5      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d029      	beq.n	80015ee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x510>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f908 	bl	80007b4 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff f904 	bl	80007b4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1a1      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ba:	4b7d      	ldr	r3, [pc, #500]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4977      	ldr	r1, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	4972      	ldr	r1, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x510>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff f8de 	bl	80007b4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff f8da 	bl	80007b4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e177      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800160e:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d030      	beq.n	8001688 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x514>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff f8be 	bl	80007b4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f8ba 	bl	80007b4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e157      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x38c>
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_OscConfig+0x514>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f8a7 	bl	80007b4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff f8a3 	bl	80007b4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e140      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80b5 	beq.w	8001800 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	4a41      	ldr	r2, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6253      	str	r3, [r2, #36]	; 0x24
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff f86b 	bl	80007b4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff f867 	bl	80007b4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e104      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x466>
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6353      	str	r3, [r2, #52]	; 0x34
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x488>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001728:	6353      	str	r3, [r2, #52]	; 0x34
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001734:	6353      	str	r3, [r2, #52]	; 0x34
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x4aa>
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6353      	str	r3, [r2, #52]	; 0x34
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6353      	str	r3, [r2, #52]	; 0x34
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001764:	6353      	str	r3, [r2, #52]	; 0x34
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800176c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001770:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff f81b 	bl	80007b4 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff f817 	bl	80007b4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0b2      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x4d2>
 80017a4:	e023      	b.n	80017ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff f805 	bl	80007b4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ac:	e019      	b.n	80017e2 <HAL_RCC_OscConfig+0x532>
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08006ac4 	.word	0x08006ac4
 80017b8:	20000090 	.word	0x20000090
 80017bc:	20000094 	.word	0x20000094
 80017c0:	42470020 	.word	0x42470020
 80017c4:	42470680 	.word	0x42470680
 80017c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7fe fff2 	bl	80007b4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e08d      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e2:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ee      	bne.n	80017cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	4a43      	ldr	r2, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	2b00      	cmp	r3, #0
 8001806:	d079      	beq.n	80018fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d056      	beq.n	80018bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2b02      	cmp	r3, #2
 8001814:	d13b      	bne.n	800188e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7fe ffca 	bl	80007b4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7fe ffc6 	bl	80007b4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e063      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	4319      	orrs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	430b      	orrs	r3, r1
 800185a:	492b      	ldr	r1, [pc, #172]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7fe ffa5 	bl	80007b4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186e:	f7fe ffa1 	bl	80007b4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e03e      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x5be>
 800188c:	e036      	b.n	80018fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe ff8e 	bl	80007b4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7fe ff8a 	bl	80007b4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e027      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x5ec>
 80018ba:	e01f      	b.n	80018fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01a      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	42470060 	.word	0x42470060

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e11a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d919      	bls.n	8001966 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_ClockConfig+0x34>
 8001938:	4b8a      	ldr	r3, [pc, #552]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a89      	ldr	r2, [pc, #548]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b87      	ldr	r3, [pc, #540]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0201 	bic.w	r2, r3, #1
 800194c:	4985      	ldr	r1, [pc, #532]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0f9      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4b7d      	ldr	r3, [pc, #500]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	497a      	ldr	r1, [pc, #488]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 808e 	beq.w	8001aae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0d7      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0cb      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0bf      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0b7      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	495c      	ldr	r1, [pc, #368]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7fe feda 	bl	80007b4 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7fe fed2 	bl	80007b4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e09b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
 8001a2e:	e03e      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7fe febb 	bl	80007b4 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e084      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
 8001a5c:	e027      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11d      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7fe fea4 	bl	80007b4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e06d      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d1ee      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x158>
 8001a8a:	e010      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7fe fe92 	bl	80007b4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e05b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d219      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1be>
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0201 	bic.w	r2, r3, #1
 8001ad6:	4923      	ldr	r1, [pc, #140]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e034      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4917      	ldr	r1, [pc, #92]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f823 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	fa21 f303 	lsr.w	r3, r1, r3
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fde4 	bl	800071c <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b58:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08006ac4 	.word	0x08006ac4
 8001b70:	20000090 	.word	0x20000090
 8001b74:	20000094 	.word	0x20000094

08001b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d006      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x24>
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d007      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x2a>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d12c      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b98:	613b      	str	r3, [r7, #16]
      break;
 8001b9a:	e037      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b9e:	613b      	str	r3, [r7, #16]
      break;
 8001ba0:	e034      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	0d9b      	lsrs	r3, r3, #22
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001bcc:	fb02 f203 	mul.w	r2, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e007      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bde:	fb02 f203 	mul.w	r2, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	613b      	str	r3, [r7, #16]
      break;
 8001bee:	e00d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0b5b      	lsrs	r3, r3, #13
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	613b      	str	r3, [r7, #16]
      break;
 8001c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0c:	693b      	ldr	r3, [r7, #16]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	016e3600 	.word	0x016e3600
 8001c24:	08006ab8 	.word	0x08006ab8

08001c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d12c      	bne.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e016      	b.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c62:	6253      	str	r3, [r2, #36]	; 0x24
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c78:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001c8c:	d105      	bne.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c94:	d101      	bne.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c96:	2301      	movs	r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 0201 	bic.w	r2, r3, #1
 8001cb4:	490b      	ldr	r1, [pc, #44]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e022      	b.n	8001d40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7fe fba1 	bl	8000454 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f814 	bl	8001d48 <HAL_SD_InitCard>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00a      	b.n	8001d40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af04      	add	r7, sp, #16
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001d64:	2376      	movs	r3, #118	; 0x76
 8001d66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681d      	ldr	r5, [r3, #0]
 8001d6c:	466c      	mov	r4, sp
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d80:	4628      	mov	r0, r5
 8001d82:	f001 fab1 	bl	80032e8 <SDIO_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e03a      	b.n	8001e0e <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <HAL_SD_InitCard+0xd0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fae6 	bl	8003374 <SDIO_PowerState_ON>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e029      	b.n	8001e0e <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_SD_InitCard+0xd0>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 ffd5 	bl	8002d70 <SD_PowerON>
 8001dc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e013      	b.n	8001e0e <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fef4 	bl	8002bd4 <SD_InitCard>
 8001dec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdb0      	pop	{r4, r5, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	422580a0 	.word	0x422580a0

08001e1c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0c9      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	f040 80c2 	bne.w	8001fd6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d907      	bls.n	8001e76 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0b0      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2200      	movs	r2, #0
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3380      	adds	r3, #128	; 0x80
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	f7fe fe91 	bl	8000bec <HAL_DMA_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d017      	beq.n	8001f00 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e06b      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d002      	beq.n	8001f14 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	025b      	lsls	r3, r3, #9
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fab7 	bl	8003490 <SDMMC_CmdBlockLength>
 8001f22:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00f      	beq.n	8001f4a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e046      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f56:	2390      	movs	r3, #144	; 0x90
 8001f58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f107 0210 	add.w	r2, r7, #16
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 fa62 	bl	800343a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d90a      	bls.n	8001f92 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2282      	movs	r2, #130	; 0x82
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 fac5 	bl	8003518 <SDMMC_CmdReadMultiBlock>
 8001f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f90:	e009      	b.n	8001fa6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2281      	movs	r2, #129	; 0x81
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fa98 	bl	80034d4 <SDMMC_CmdReadSingleBlock>
 8001fa4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e002      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3730      	adds	r7, #48	; 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	080029f1 	.word	0x080029f1
 8001fe4:	08002a61 	.word	0x08002a61
 8001fe8:	004005ff 	.word	0x004005ff
 8001fec:	4225858c 	.word	0x4225858c

08001ff0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0ce      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	f040 80c7 	bne.w	80021b4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800202c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	441a      	add	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	429a      	cmp	r2, r3
 8002038:	d907      	bls.n	800204a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0b5      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	4a53      	ldr	r2, [pc, #332]	; (80021c0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002074:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800207c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2200      	movs	r2, #0
 8002084:	635a      	str	r2, [r3, #52]	; 0x34

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	2b01      	cmp	r3, #1
 800208c:	d002      	beq.n	8002094 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	025b      	lsls	r3, r3, #9
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4618      	mov	r0, r3
 800209e:	f001 f9f7 	bl	8003490 <SDMMC_CmdBlockLength>
 80020a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00f      	beq.n	80020ca <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a46      	ldr	r2, [pc, #280]	; (80021c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e075      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d90a      	bls.n	80020e6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	22a0      	movs	r2, #160	; 0xa0
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 fa5f 	bl	80035a0 <SDMMC_CmdWriteMultiBlock>
 80020e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020e4:	e009      	b.n	80020fa <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2290      	movs	r2, #144	; 0x90
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fa32 	bl	800355c <SDMMC_CmdWriteSingleBlock>
 80020f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d012      	beq.n	8002126 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e047      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3380      	adds	r3, #128	; 0x80
 8002138:	461a      	mov	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	f7fe fd54 	bl	8000bec <HAL_DMA_Start_IT>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01c      	beq.n	8002184 <HAL_SD_WriteBlocks_DMA+0x194>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e018      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002190:	2390      	movs	r3, #144	; 0x90
 8002192:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f107 0210 	add.w	r2, r7, #16
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 f945 	bl	800343a <SDIO_ConfigData>

      return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3730      	adds	r7, #48	; 0x30
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	080029c9 	.word	0x080029c9
 80021c4:	08002a61 	.word	0x08002a61
 80021c8:	004005ff 	.word	0x004005ff
 80021cc:	4225858c 	.word	0x4225858c

080021d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_SD_IRQHandler+0x2e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 ffd0 	bl	800319c <SD_Read_IT>
 80021fc:	e165      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 808f 	beq.w	800232c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002226:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800222a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d039      	beq.n	80022ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_SD_IRQHandler+0x8a>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d011      	beq.n	800227e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f9c0 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002264:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f92f 	bl	80024dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f240 523a 	movw	r2, #1338	; 0x53a
 8002286:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_SD_IRQHandler+0xda>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 fe3e 	bl	8003f2c <HAL_SD_RxCpltCallback>
 80022b0:	e10b      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f001 fe30 	bl	8003f18 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022b8:	e107      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8102 	beq.w	80024ca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d011      	beq.n	80022f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 f985 	bl	80035e4 <SDMMC_CmdStopTransfer>
 80022da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8f4 	bl	80024dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80e5 	bne.w	80024ca <HAL_SD_IRQHandler+0x2fa>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 80df 	bne.w	80024ca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0208 	bic.w	r2, r2, #8
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 fdf7 	bl	8003f18 <HAL_SD_TxCpltCallback>
}
 800232a:	e0ce      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_SD_IRQHandler+0x17c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 ff7a 	bl	800323e <SD_Write_IT>
 800234a:	e0be      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	f240 233a 	movw	r3, #570	; 0x23a
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80b6 	beq.w	80024ca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	f043 0202 	orr.w	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	f043 0208 	orr.w	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	f043 0208 	orr.w	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f240 723a 	movw	r2, #1850	; 0x73a
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80023f8:	f023 0302 	bic.w	r3, r3, #2
 80023fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f001 f8ee 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002408:	4602      	mov	r2, r0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f855 	bl	80024dc <HAL_SD_ErrorCallback>
}
 8002432:	e04a      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d045      	beq.n	80024ca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_SD_IRQHandler+0x282>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d011      	beq.n	8002476 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_SD_IRQHandler+0x304>)
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fc61 	bl	8000d26 <HAL_DMA_Abort_IT>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02f      	beq.n	80024ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fb42 	bl	8002af8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002474:	e029      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <HAL_SD_IRQHandler+0x2ba>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <HAL_SD_IRQHandler+0x308>)
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc45 	bl	8000d26 <HAL_DMA_Abort_IT>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d013      	beq.n	80024ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fb5d 	bl	8002b66 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80024ac:	e00d      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f001 fd1e 	bl	8003f04 <HAL_SD_AbortCallback>
}
 80024c8:	e7ff      	b.n	80024ca <HAL_SD_IRQHandler+0x2fa>
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	08002af9 	.word	0x08002af9
 80024d8:	08002b67 	.word	0x08002b67

080024dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fe:	0f9b      	lsrs	r3, r3, #30
 8002500:	b2da      	uxtb	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	b2da      	uxtb	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251c:	0e1b      	lsrs	r3, r3, #24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	b2da      	uxtb	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b2da      	uxtb	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b2da      	uxtb	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002546:	b2da      	uxtb	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002550:	0d1b      	lsrs	r3, r3, #20
 8002552:	b29a      	uxth	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	b2da      	uxtb	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256e:	0bdb      	lsrs	r3, r3, #15
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002580:	0b9b      	lsrs	r3, r3, #14
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002592:	0b5b      	lsrs	r3, r3, #13
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a4:	0b1b      	lsrs	r3, r3, #12
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d163      	bne.n	8002688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c4:	009a      	lsls	r2, r3, #2
 80025c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80025d0:	0f92      	lsrs	r2, r2, #30
 80025d2:	431a      	orrs	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025dc:	0edb      	lsrs	r3, r3, #27
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002600:	0d5b      	lsrs	r3, r3, #21
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	b2da      	uxtb	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	b2da      	uxtb	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002624:	0bdb      	lsrs	r3, r3, #15
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	b2da      	uxtb	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	3302      	adds	r3, #2
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002652:	fb02 f203 	mul.w	r2, r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	7a1b      	ldrb	r3, [r3, #8]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002674:	0a52      	lsrs	r2, r2, #9
 8002676:	fb02 f203 	mul.w	r2, r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002684:	661a      	str	r2, [r3, #96]	; 0x60
 8002686:	e031      	b.n	80026ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11d      	bne.n	80026cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	0c1b      	lsrs	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	3301      	adds	r3, #1
 80026ac:	029a      	lsls	r2, r3, #10
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	661a      	str	r2, [r3, #96]	; 0x60
 80026ca:	e00f      	b.n	80026ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_SD_GetCardCSD+0x344>)
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e09d      	b.n	8002828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f0:	0b9b      	lsrs	r3, r3, #14
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002702:	09db      	lsrs	r3, r3, #7
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270a:	b2da      	uxtb	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271a:	b2da      	uxtb	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	0fdb      	lsrs	r3, r3, #31
 8002726:	b2da      	uxtb	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	0f5b      	lsrs	r3, r3, #29
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	b2da      	uxtb	r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	b2da      	uxtb	r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	0d9b      	lsrs	r3, r3, #22
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	0d5b      	lsrs	r3, r3, #21
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	0bdb      	lsrs	r3, r3, #15
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	0b9b      	lsrs	r3, r3, #14
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	0b1b      	lsrs	r3, r3, #12
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	0a9b      	lsrs	r3, r3, #10
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002816:	b2da      	uxtb	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	004005ff 	.word	0x004005ff

08002838 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af04      	add	r7, sp, #16
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d02e      	beq.n	8002908 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b0:	d106      	bne.n	80028c0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
 80028be:	e029      	b.n	8002914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c6:	d10a      	bne.n	80028de <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fb07 	bl	8002edc <SD_WideBus_Enable>
 80028ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	639a      	str	r2, [r3, #56]	; 0x38
 80028dc:	e01a      	b.n	8002914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb44 	bl	8002f72 <SD_WideBus_Disable>
 80028ea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
 80028f8:	e00c      	b.n	8002914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
 8002906:	e005      	b.n	8002914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e024      	b.n	800297a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681d      	ldr	r5, [r3, #0]
 8002956:	466c      	mov	r4, sp
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296a:	4628      	mov	r0, r5
 800296c:	f000 fcbc 	bl	80032e8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	bf00      	nop
 8002984:	004005ff 	.word	0x004005ff

08002988 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa76 	bl	8002e8c <SD_SendStatus>
 80029a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0a5b      	lsrs	r3, r3, #9
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80029be:	693b      	ldr	r3, [r7, #16]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	2b82      	cmp	r3, #130	; 0x82
 8002a04:	d111      	bne.n	8002a2a <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fdea 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002a10:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fd59 	bl	80024dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f001 fa6a 	bl	8003f2c <HAL_SD_RxCpltCallback>
#endif
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d002      	beq.n	8002a8a <SD_DMAError+0x2a>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d12d      	bne.n	8002ae6 <SD_DMAError+0x86>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <SD_DMAError+0x94>)
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff6a 	bl	8002988 <HAL_SD_GetCardState>
 8002ab4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d002      	beq.n	8002ac2 <SD_DMAError+0x62>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10a      	bne.n	8002ad8 <SD_DMAError+0x78>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd8c 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff fcf8 	bl	80024dc <HAL_SD_ErrorCallback>
#endif
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	004005ff 	.word	0x004005ff

08002af8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ff39 	bl	8002988 <HAL_SD_GetCardState>
 8002b16:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d002      	beq.n	8002b32 <SD_DMATxAbort+0x3a>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10a      	bne.n	8002b48 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fd54 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f001 f9d7 	bl	8003f04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002b56:	e002      	b.n	8002b5e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff fcbf 	bl	80024dc <HAL_SD_ErrorCallback>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff02 	bl	8002988 <HAL_SD_GetCardState>
 8002b84:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d002      	beq.n	8002ba0 <SD_DMARxAbort+0x3a>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10a      	bne.n	8002bb6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fd1d 	bl	80035e4 <SDMMC_CmdStopTransfer>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f001 f9a0 	bl	8003f04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002bc4:	e002      	b.n	8002bcc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fc88 	bl	80024dc <HAL_SD_ErrorCallback>
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b094      	sub	sp, #80	; 0x50
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fbd4 	bl	8003392 <SDIO_GetPowerState>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002bf0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bf4:	e0b7      	b.n	8002d66 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d02f      	beq.n	8002c5e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fdf8 	bl	80037f8 <SDMMC_CmdSendCID>
 8002c08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	e0a8      	b.n	8002d66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fbfb 	bl	8003416 <SDIO_GetResponse>
 8002c20:	4602      	mov	r2, r0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fbf2 	bl	8003416 <SDIO_GetResponse>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fbe9 	bl	8003416 <SDIO_GetResponse>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	210c      	movs	r1, #12
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fbe0 	bl	8003416 <SDIO_GetResponse>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d00d      	beq.n	8002c82 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f107 020e 	add.w	r2, r7, #14
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fdfe 	bl	8003872 <SDMMC_CmdSetRelAdd>
 8002c76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SD_InitCard+0xae>
    {
      return errorstate;
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	e071      	b.n	8002d66 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d036      	beq.n	8002cf8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fdc8 	bl	8003834 <SDMMC_CmdSendCSD>
 8002ca4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	e05a      	b.n	8002d66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fbad 	bl	8003416 <SDIO_GetResponse>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fba4 	bl	8003416 <SDIO_GetResponse>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2108      	movs	r1, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fb9b 	bl	8003416 <SDIO_GetResponse>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	210c      	movs	r1, #12
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fb92 	bl	8003416 <SDIO_GetResponse>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fb89 	bl	8003416 <SDIO_GetResponse>
 8002d04:	4603      	mov	r3, r0
 8002d06:	0d1a      	lsrs	r2, r3, #20
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fbec 	bl	80024f0 <HAL_SD_GetCardCSD>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d22:	e020      	b.n	8002d66 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4623      	mov	r3, r4
 8002d36:	4608      	mov	r0, r1
 8002d38:	f000 fc76 	bl	8003628 <SDMMC_CmdSelDesel>
 8002d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SD_InitCard+0x174>
  {
    return errorstate;
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	e00e      	b.n	8002d66 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681d      	ldr	r5, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	466c      	mov	r4, sp
 8002d50:	f103 0210 	add.w	r2, r3, #16
 8002d54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f000 fac2 	bl	80032e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3740      	adds	r7, #64	; 0x40
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc70 	bl	800366e <SDMMC_CmdGoIdleState>
 8002d8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	e072      	b.n	8002e80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fc83 	bl	80036aa <SDMMC_CmdOperCond>
 8002da4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fc59 	bl	800366e <SDMMC_CmdGoIdleState>
 8002dbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <SD_PowerON+0x5e>
    {
      return errorstate;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	e05b      	b.n	8002e80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d137      	bne.n	8002e46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fc83 	bl	80036e8 <SDMMC_CmdAppCommand>
 8002de2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02d      	beq.n	8002e46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dee:	e047      	b.n	8002e80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fc76 	bl	80036e8 <SDMMC_CmdAppCommand>
 8002dfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	e03b      	b.n	8002e80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	491e      	ldr	r1, [pc, #120]	; (8002e88 <SD_PowerON+0x118>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc8c 	bl	800372c <SDMMC_CmdAppOperCommand>
 8002e14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e20:	e02e      	b.n	8002e80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 faf4 	bl	8003416 <SDIO_GetResponse>
 8002e2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	0fdb      	lsrs	r3, r3, #31
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <SD_PowerON+0xcc>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <SD_PowerON+0xce>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]

    count++;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d802      	bhi.n	8002e56 <SD_PowerON+0xe6>
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0cc      	beq.n	8002df0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d902      	bls.n	8002e66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	e00c      	b.n	8002e80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
 8002e76:	e002      	b.n	8002e7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	c1100000 	.word	0xc1100000

08002e8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ea0:	e018      	b.n	8002ed4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f000 fd00 	bl	80038b4 <SDMMC_CmdSendStatus>
 8002eb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	e009      	b.n	8002ed4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 faa5 	bl	8003416 <SDIO_GetResponse>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fa8f 	bl	8003416 <SDIO_GetResponse>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f02:	d102      	bne.n	8002f0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f08:	e02f      	b.n	8002f6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f879 	bl	8003008 <SD_FindSCR>
 8002f16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	e023      	b.n	8002f6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f000 fbd5 	bl	80036e8 <SDMMC_CmdAppCommand>
 8002f3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e00f      	b.n	8002f6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc0e 	bl	8003772 <SDMMC_CmdBusWidth>
 8002f56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	e003      	b.n	8002f6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e001      	b.n	8002f6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa44 	bl	8003416 <SDIO_GetResponse>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f98:	d102      	bne.n	8002fa0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9e:	e02f      	b.n	8003000 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f82e 	bl	8003008 <SD_FindSCR>
 8002fac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	e023      	b.n	8003000 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01c      	beq.n	8002ffc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 fb8a 	bl	80036e8 <SDMMC_CmdAppCommand>
 8002fd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	e00f      	b.n	8003000 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fbc3 	bl	8003772 <SDMMC_CmdBusWidth>
 8002fec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	e003      	b.n	8003000 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e001      	b.n	8003000 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ffc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b08f      	sub	sp, #60	; 0x3c
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7fd fbcf 	bl	80007b4 <HAL_GetTick>
 8003016:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2108      	movs	r1, #8
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fa2e 	bl	8003490 <SDMMC_CmdBlockLength>
 8003034:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <SD_FindSCR+0x38>
  {
    return errorstate;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	e0a9      	b.n	8003194 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f000 fb4b 	bl	80036e8 <SDMMC_CmdAppCommand>
 8003052:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SD_FindSCR+0x56>
  {
    return errorstate;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	e09a      	b.n	8003194 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003064:	2308      	movs	r3, #8
 8003066:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003068:	2330      	movs	r3, #48	; 0x30
 800306a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800306c:	2302      	movs	r3, #2
 800306e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f107 0210 	add.w	r2, r7, #16
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f9d9 	bl	800343a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fb92 	bl	80037b6 <SDMMC_CmdSendSCR>
 8003092:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d022      	beq.n	80030e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	e07a      	b.n	8003194 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f107 0208 	add.w	r2, r7, #8
 80030b8:	18d4      	adds	r4, r2, r3
 80030ba:	4608      	mov	r0, r1
 80030bc:	f000 f93e 	bl	800333c <SDIO_ReadFIFO>
 80030c0:	4603      	mov	r3, r0
 80030c2:	6023      	str	r3, [r4, #0]
      index++;
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	3301      	adds	r3, #1
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80030ca:	f7fd fb73 	bl	80007b4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d102      	bne.n	80030e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80030da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030de:	e059      	b.n	8003194 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	f240 432a 	movw	r3, #1066	; 0x42a
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0d6      	beq.n	800309e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2208      	movs	r2, #8
 8003104:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003106:	2308      	movs	r3, #8
 8003108:	e044      	b.n	8003194 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2202      	movs	r2, #2
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003120:	2302      	movs	r3, #2
 8003122:	e037      	b.n	8003194 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2220      	movs	r2, #32
 8003138:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800313a:	2320      	movs	r3, #32
 800313c:	e02a      	b.n	8003194 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f240 523a 	movw	r2, #1338	; 0x53a
 8003146:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	061a      	lsls	r2, r3, #24
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003154:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800315e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	0e1b      	lsrs	r3, r3, #24
 8003164:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	601a      	str	r2, [r3, #0]
    scr++;
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	3304      	adds	r3, #4
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	061a      	lsls	r2, r3, #24
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800317c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003186:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0e1b      	lsrs	r3, r3, #24
 800318c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	373c      	adds	r7, #60	; 0x3c
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}

0800319c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03f      	beq.n	8003236 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e033      	b.n	8003224 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f8bb 	bl	800333c <SDIO_ReadFIFO>
 80031c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3b01      	subs	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3b01      	subs	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0e1b      	lsrs	r3, r3, #24
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	3b01      	subs	r3, #1
 800321c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b07      	cmp	r3, #7
 8003228:	d9c8      	bls.n	80031bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d043      	beq.n	80032e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e037      	b.n	80032ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3b01      	subs	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4313      	orrs	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3b01      	subs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	3b01      	subs	r3, #1
 800329e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	061a      	lsls	r2, r3, #24
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f107 0208 	add.w	r2, r7, #8
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f846 	bl	8003354 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b07      	cmp	r3, #7
 80032d2:	d9c4      	bls.n	800325e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80032e8:	b084      	sub	sp, #16
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	f107 001c 	add.w	r0, r7, #28
 80032f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80032fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003300:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003302:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003306:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800330a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800330e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003312:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	b004      	add	sp, #16
 800333a:	4770      	bx	lr

0800333c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003382:	2002      	movs	r0, #2
 8003384:	f7fd fa20 	bl	80007c8 <HAL_Delay>
  
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0303 	and.w	r3, r3, #3
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80033d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80033d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3314      	adds	r3, #20
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
}  
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003460:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003466:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800346c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003484:	2300      	movs	r3, #0

}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800349e:	2310      	movs	r3, #16
 80034a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034a2:	2340      	movs	r3, #64	; 0x40
 80034a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ff78 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	2110      	movs	r1, #16
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa40 	bl	8003948 <SDMMC_GetCmdResp1>
 80034c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034ca:	69fb      	ldr	r3, [r7, #28]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80034e2:	2311      	movs	r3, #17
 80034e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034e6:	2340      	movs	r3, #64	; 0x40
 80034e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff56 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	2111      	movs	r1, #17
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa1e 	bl	8003948 <SDMMC_GetCmdResp1>
 800350c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800350e:	69fb      	ldr	r3, [r7, #28]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003526:	2312      	movs	r3, #18
 8003528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003538:	f107 0308 	add.w	r3, r7, #8
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff34 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	2112      	movs	r1, #18
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9fc 	bl	8003948 <SDMMC_GetCmdResp1>
 8003550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003552:	69fb      	ldr	r3, [r7, #28]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800356a:	2318      	movs	r3, #24
 800356c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800356e:	2340      	movs	r3, #64	; 0x40
 8003570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff12 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	2118      	movs	r1, #24
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9da 	bl	8003948 <SDMMC_GetCmdResp1>
 8003594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003596:	69fb      	ldr	r3, [r7, #28]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80035ae:	2319      	movs	r3, #25
 80035b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035b2:	2340      	movs	r3, #64	; 0x40
 80035b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fef0 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	2119      	movs	r1, #25
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9b8 	bl	8003948 <SDMMC_GetCmdResp1>
 80035d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035da:	69fb      	ldr	r3, [r7, #28]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80035f0:	230c      	movs	r3, #12
 80035f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035f4:	2340      	movs	r3, #64	; 0x40
 80035f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fecf 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <SDMMC_CmdStopTransfer+0x40>)
 8003610:	210c      	movs	r1, #12
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f998 	bl	8003948 <SDMMC_GetCmdResp1>
 8003618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800361a:	69fb      	ldr	r3, [r7, #28]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	05f5e100 	.word	0x05f5e100

08003628 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003638:	2307      	movs	r3, #7
 800363a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003648:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	4619      	mov	r1, r3
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff feab 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	2107      	movs	r1, #7
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f973 	bl	8003948 <SDMMC_GetCmdResp1>
 8003662:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003666:	4618      	mov	r0, r3
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b088      	sub	sp, #32
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe8a 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f92d 	bl	80038f8 <SDMMC_GetCmdError>
 800369e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036a0:	69fb      	ldr	r3, [r7, #28]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80036b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80036b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80036b8:	2308      	movs	r3, #8
 80036ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe6b 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb16 	bl	8003d08 <SDMMC_GetCmdResp7>
 80036dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036de:	69fb      	ldr	r3, [r7, #28]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80036f6:	2337      	movs	r3, #55	; 0x37
 80036f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe4c 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	2137      	movs	r1, #55	; 0x37
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f914 	bl	8003948 <SDMMC_GetCmdResp1>
 8003720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003722:	69fb      	ldr	r3, [r7, #28]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003742:	2329      	movs	r3, #41	; 0x29
 8003744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800374e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe26 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fa23 	bl	8003bac <SDMMC_GetCmdResp3>
 8003766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003768:	69fb      	ldr	r3, [r7, #28]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003780:	2306      	movs	r3, #6
 8003782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800378c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003790:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003792:	f107 0308 	add.w	r3, r7, #8
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fe07 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	2106      	movs	r1, #6
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8cf 	bl	8003948 <SDMMC_GetCmdResp1>
 80037aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037ac:	69fb      	ldr	r3, [r7, #28]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80037c2:	2333      	movs	r3, #51	; 0x33
 80037c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037c6:	2340      	movs	r3, #64	; 0x40
 80037c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fde6 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	2133      	movs	r1, #51	; 0x33
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8ae 	bl	8003948 <SDMMC_GetCmdResp1>
 80037ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037ee:	69fb      	ldr	r3, [r7, #28]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003804:	2302      	movs	r3, #2
 8003806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003808:	23c0      	movs	r3, #192	; 0xc0
 800380a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fdc5 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f97c 	bl	8003b20 <SDMMC_GetCmdResp2>
 8003828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800382a:	69fb      	ldr	r3, [r7, #28]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003842:	2309      	movs	r3, #9
 8003844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003846:	23c0      	movs	r3, #192	; 0xc0
 8003848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800384e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fda6 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f95d 	bl	8003b20 <SDMMC_GetCmdResp2>
 8003866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003868:	69fb      	ldr	r3, [r7, #28]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b088      	sub	sp, #32
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003880:	2303      	movs	r3, #3
 8003882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003884:	2340      	movs	r3, #64	; 0x40
 8003886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fd87 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	2103      	movs	r1, #3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9bc 	bl	8003c20 <SDMMC_GetCmdResp6>
 80038a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038aa:	69fb      	ldr	r3, [r7, #28]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80038c2:	230d      	movs	r3, #13
 80038c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fd66 	bl	80033ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	210d      	movs	r1, #13
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f82e 	bl	8003948 <SDMMC_GetCmdResp1>
 80038ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ee:	69fb      	ldr	r3, [r7, #28]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80038f8:	b490      	push	{r4, r7}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <SDMMC_GetCmdError+0x48>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <SDMMC_GetCmdError+0x4c>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0a5b      	lsrs	r3, r3, #9
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003914:	4623      	mov	r3, r4
 8003916:	1e5c      	subs	r4, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800391c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003920:	e009      	b.n	8003936 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f2      	beq.n	8003914 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	22c5      	movs	r2, #197	; 0xc5
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bc90      	pop	{r4, r7}
 800393e:	4770      	bx	lr
 8003940:	20000090 	.word	0x20000090
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	460b      	mov	r3, r1
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <SDMMC_GetCmdResp1+0x1cc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6f      	ldr	r2, [pc, #444]	; (8003b18 <SDMMC_GetCmdResp1+0x1d0>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	0a5b      	lsrs	r3, r3, #9
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003968:	4623      	mov	r3, r4
 800396a:	1e5c      	subs	r4, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003974:	e0c9      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <SDMMC_GetCmdResp1+0x20>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1eb      	bne.n	8003968 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2204      	movs	r2, #4
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80039a2:	2304      	movs	r3, #4
 80039a4:	e0b1      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0a6      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	22c5      	movs	r2, #197	; 0xc5
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fd1b 	bl	80033fe <SDIO_GetCommandResponse>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d001      	beq.n	80039d6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e099      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80039d6:	2100      	movs	r1, #0
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fd1c 	bl	8003416 <SDIO_GetResponse>
 80039de:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4b4e      	ldr	r3, [pc, #312]	; (8003b1c <SDMMC_GetCmdResp1+0x1d4>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e08d      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	da02      	bge.n	80039fa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80039f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f8:	e087      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	e080      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	e079      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a24:	e071      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a34:	e069      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a44:	e061      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a54:	e059      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a64:	e051      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a74:	e049      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a84:	e041      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	e039      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa4:	e031      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ab0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ab4:	e029      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ac0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ac4:	e021      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ad0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ad4:	e019      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003ae0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ae4:	e011      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003af4:	e009      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003b00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003b04:	e001      	b.n	8003b0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000090 	.word	0x20000090
 8003b18:	10624dd3 	.word	0x10624dd3
 8003b1c:	fdffe008 	.word	0xfdffe008

08003b20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003b20:	b490      	push	{r4, r7}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <SDMMC_GetCmdResp2+0x84>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <SDMMC_GetCmdResp2+0x88>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0a5b      	lsrs	r3, r3, #9
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	1e5c      	subs	r4, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b48:	e026      	b.n	8003b98 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <SDMMC_GetCmdResp2+0x1c>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1eb      	bne.n	8003b3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b76:	2304      	movs	r3, #4
 8003b78:	e00e      	b.n	8003b98 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e003      	b.n	8003b98 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	22c5      	movs	r2, #197	; 0xc5
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc90      	pop	{r4, r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000090 	.word	0x20000090
 8003ba8:	10624dd3 	.word	0x10624dd3

08003bac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003bac:	b490      	push	{r4, r7}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <SDMMC_GetCmdResp3+0x6c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <SDMMC_GetCmdResp3+0x70>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0a5b      	lsrs	r3, r3, #9
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003bc8:	4623      	mov	r3, r4
 8003bca:	1e5c      	subs	r4, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bd4:	e01b      	b.n	8003c0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <SDMMC_GetCmdResp3+0x1c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1eb      	bne.n	8003bc8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c02:	2304      	movs	r3, #4
 8003c04:	e003      	b.n	8003c0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	22c5      	movs	r2, #197	; 0xc5
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc90      	pop	{r4, r7}
 8003c16:	4770      	bx	lr
 8003c18:	20000090 	.word	0x20000090
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c2e:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <SDMMC_GetCmdResp6+0xe0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <SDMMC_GetCmdResp6+0xe4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0a5b      	lsrs	r3, r3, #9
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003c42:	4623      	mov	r3, r4
 8003c44:	1e5c      	subs	r4, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c4e:	e052      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <SDMMC_GetCmdResp6+0x22>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1eb      	bne.n	8003c42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e03a      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e02f      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff fbb1 	bl	80033fe <SDIO_GetCommandResponse>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	7afb      	ldrb	r3, [r7, #11]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d001      	beq.n	8003caa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e025      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22c5      	movs	r2, #197	; 0xc5
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fbaf 	bl	8003416 <SDIO_GetResponse>
 8003cb8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e011      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce0:	e009      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf0:	e001      	b.n	8003cf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000090 	.word	0x20000090
 8003d04:	10624dd3 	.word	0x10624dd3

08003d08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003d08:	b490      	push	{r4, r7}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <SDMMC_GetCmdResp7+0x90>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <SDMMC_GetCmdResp7+0x94>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0a5b      	lsrs	r3, r3, #9
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003d24:	4623      	mov	r3, r4
 8003d26:	1e5c      	subs	r4, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d30:	e02c      	b.n	8003d8c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <SDMMC_GetCmdResp7+0x1c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1eb      	bne.n	8003d24 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e014      	b.n	8003d8c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e009      	b.n	8003d8c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003d8a:	2300      	movs	r3, #0
  
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc90      	pop	{r4, r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000090 	.word	0x20000090
 8003d9c:	10624dd3 	.word	0x10624dd3

08003da0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <MX_FATFS_Init+0x18>)
 8003da6:	4805      	ldr	r0, [pc, #20]	; (8003dbc <MX_FATFS_Init+0x1c>)
 8003da8:	f002 fe0a 	bl	80069c0 <FATFS_LinkDriver>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <MX_FATFS_Init+0x20>)
 8003db2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200003c8 	.word	0x200003c8
 8003dbc:	08006ad4 	.word	0x08006ad4
 8003dc0:	20000cbc 	.word	0x20000cbc

08003dc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003dce:	f000 f8bd 	bl	8003f4c <BSP_SD_IsDetected>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e011      	b.n	8003e00 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003ddc:	480a      	ldr	r0, [pc, #40]	; (8003e08 <BSP_SD_Init+0x44>)
 8003dde:	f7fd ff83 	bl	8001ce8 <HAL_SD_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	4806      	ldr	r0, [pc, #24]	; (8003e08 <BSP_SD_Init+0x44>)
 8003df0:	f7fe fd4e 	bl	8002890 <HAL_SD_ConfigWideBusOperation>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200003cc 	.word	0x200003cc

08003e0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read  
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  hsd.hdmatx = NULL;
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigRx(&hsd);
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e24:	f000 f89e 	bl	8003f64 <SD_DMAConfigRx>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    state = HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	4807      	ldr	r0, [pc, #28]	; (8003e58 <BSP_SD_ReadBlocks_DMA+0x4c>)
 8003e3a:	f7fd ffef 	bl	8001e1c <HAL_SD_ReadBlocks_DMA>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <BSP_SD_ReadBlocks_DMA+0x42>
  }    
  else
  {
    return MSD_ERROR;
 8003e4c:	2301      	movs	r3, #1
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200003cc 	.word	0x200003cc

08003e5c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written  
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  hsd.hdmarx = NULL;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigTx(&hsd);
 8003e72:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e74:	f000 f8be 	bl	8003ff4 <SD_DMAConfigTx>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <BSP_SD_WriteBlocks_DMA+0x36>
  { 
    /* Write block(s) in DMA transfer mode */
    state = HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8003e8a:	f7fe f8b1 	bl	8001ff0 <HAL_SD_WriteBlocks_DMA>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8003e9c:	2301      	movs	r3, #1
  } 
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200003cc 	.word	0x200003cc

08003eac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 8003eb2:	480c      	ldr	r0, [pc, #48]	; (8003ee4 <BSP_SD_GetCardState+0x38>)
 8003eb4:	f7fe fd68 	bl	8002988 <HAL_SD_GetCardState>
 8003eb8:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d101      	bne.n	8003ec4 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e00b      	b.n	8003edc <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d005      	beq.n	8003ed6 <BSP_SD_GetCardState+0x2a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d002      	beq.n	8003ed6 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b07      	cmp	r3, #7
 8003ed4:	d101      	bne.n	8003eda <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200003cc 	.word	0x200003cc

08003ee8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4803      	ldr	r0, [pc, #12]	; (8003f00 <BSP_SD_GetCardInfo+0x18>)
 8003ef4:	f7fe fca0 	bl	8002838 <HAL_SD_GetCardInfo>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200003cc 	.word	0x200003cc

08003f04 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8003f0c:	f000 f818 	bl	8003f40 <BSP_SD_AbortCallback>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8003f20:	f000 faba 	bl	8004498 <BSP_SD_WriteCpltCallback>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8003f34:	f000 fabc 	bl	80044b0 <BSP_SD_ReadCpltCallback>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0

}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003f52:	2301      	movs	r3, #1
 8003f54:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	b2db      	uxtb	r3, r3
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <SD_DMAConfigRx>:

/* USER CODE BEGIN DMAConfigCode */

HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	static DMA_HandleTypeDef hdma_rx;
	HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

	HAL_DMA_DeInit(hsd->hdmatx);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fdcb 	bl	8000b10 <HAL_DMA_DeInit>

	/* Configure the DMA Rx parameters */
	hdma_rx.Instance = DMA2_Channel4;
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <SD_DMAConfigRx+0x8c>)
 8003f7e:	601a      	str	r2, [r3, #0]
	hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
	hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f86:	4b19      	ldr	r3, [pc, #100]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
	hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	60da      	str	r2, [r3, #12]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f98:	611a      	str	r2, [r3, #16]
	hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa0:	615a      	str	r2, [r3, #20]
	hdma_rx.Init.Mode = DMA_NORMAL;
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
	hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003faa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003fae:	61da      	str	r2, [r3, #28]

	/* Associate the DMA handle */
	__HAL_LINKDMA(hsd,hdmarx,hdma_rx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6253      	str	r3, [r2, #36]	; 0x24

	/* Stop any ongoing transfer and reset the state*/
	  HAL_DMA_Abort(&hdma_rx);
 8003fbc:	480b      	ldr	r0, [pc, #44]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fbe:	f7fc fe75 	bl	8000cac <HAL_DMA_Abort>

	/* Deinitialize the Channel for new transfer */
	  HAL_DMA_DeInit(&hdma_rx);
 8003fc2:	480a      	ldr	r0, [pc, #40]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fc4:	f7fc fda4 	bl	8000b10 <HAL_DMA_DeInit>

	/* Configure the DMA Channel */
	  status = HAL_DMA_Init(&hdma_rx);
 8003fc8:	4808      	ldr	r0, [pc, #32]	; (8003fec <SD_DMAConfigRx+0x88>)
 8003fca:	f7fc fd2d 	bl	8000a28 <HAL_DMA_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]

	/* NVIC configuration for DMA transfer complete interrupt */
	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2105      	movs	r1, #5
 8003fd6:	2035      	movs	r0, #53	; 0x35
 8003fd8:	f7fc fcef 	bl	80009ba <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003fdc:	2035      	movs	r0, #53	; 0x35
 8003fde:	f7fc fd08 	bl	80009f2 <HAL_NVIC_EnableIRQ>

	  return status;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200000bc 	.word	0x200000bc
 8003ff0:	40026444 	.word	0x40026444

08003ff4 <SD_DMAConfigTx>:


HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the DMA Tx parameters */
  	hdma_tx.Instance = DMA2_Channel4;
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <SD_DMAConfigTx+0x84>)
 8004004:	601a      	str	r2, [r3, #0]
  	hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004008:	2210      	movs	r2, #16
 800400a:	605a      	str	r2, [r3, #4]
  	hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <SD_DMAConfigTx+0x80>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  	hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	60da      	str	r2, [r3, #12]
  	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <SD_DMAConfigTx+0x80>)
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	611a      	str	r2, [r3, #16]
  	hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004026:	615a      	str	r2, [r3, #20]
  	hdma_tx.Init.Mode = DMA_NORMAL;
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <SD_DMAConfigTx+0x80>)
 800402a:	2200      	movs	r2, #0
 800402c:	619a      	str	r2, [r3, #24]
  	hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004030:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004034:	61da      	str	r2, [r3, #28]

  	/* Associate the DMA handle */
  	__HAL_LINKDMA(hsd,hdmatx,hdma_tx);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <SD_DMAConfigTx+0x80>)
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <SD_DMAConfigTx+0x80>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6253      	str	r3, [r2, #36]	; 0x24

  	/* Stop any ongoing transfer and reset the state*/
  	  HAL_DMA_Abort(&hdma_tx);
 8004042:	480c      	ldr	r0, [pc, #48]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004044:	f7fc fe32 	bl	8000cac <HAL_DMA_Abort>

  	/* Deinitialize the Channel for new transfer */
  	  HAL_DMA_DeInit(&hdma_tx);
 8004048:	480a      	ldr	r0, [pc, #40]	; (8004074 <SD_DMAConfigTx+0x80>)
 800404a:	f7fc fd61 	bl	8000b10 <HAL_DMA_DeInit>

  	/* Configure the DMA Channel */
  	  status = HAL_DMA_Init(&hdma_tx);
 800404e:	4809      	ldr	r0, [pc, #36]	; (8004074 <SD_DMAConfigTx+0x80>)
 8004050:	f7fc fcea 	bl	8000a28 <HAL_DMA_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]

  	 /* NVIC configuration for DMA transfer complete interrupt */
  	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2105      	movs	r1, #5
 800405c:	2035      	movs	r0, #53	; 0x35
 800405e:	f7fc fcac 	bl	80009ba <HAL_NVIC_SetPriority>
  	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004062:	2035      	movs	r0, #53	; 0x35
 8004064:	f7fc fcc5 	bl	80009f2 <HAL_NVIC_EnableIRQ>

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000100 	.word	0x20000100
 8004078:	40026444 	.word	0x40026444

0800407c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004084:	f7fc fb96 	bl	80007b4 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800408a:	e006      	b.n	800409a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800408c:	f7ff ff0e 	bl	8003eac <BSP_SD_GetCardState>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004096:	2300      	movs	r3, #0
 8004098:	e009      	b.n	80040ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800409a:	f7fc fb8b 	bl	80007b4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d8f0      	bhi.n	800408c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <SD_CheckStatus+0x38>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80040c8:	f7ff fef0 	bl	8003eac <BSP_SD_GetCardState>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <SD_CheckStatus+0x38>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <SD_CheckStatus+0x38>)
 80040e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80040e2:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <SD_CheckStatus+0x38>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2000009c 	.word	0x2000009c

080040f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80040fe:	f7ff fe61 	bl	8003dc4 <BSP_SD_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ffd4 	bl	80040b8 <SD_CheckStatus>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <SD_initialize+0x34>)
 8004116:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <SD_initialize+0x34>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000009c 	.word	0x2000009c

0800412c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ffbd 	bl	80040b8 <SD_CheckStatus>
 800413e:	4603      	mov	r3, r0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800415c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004160:	f7ff ff8c 	bl	800407c <SD_CheckStatusWithTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	da01      	bge.n	800416e <SD_read+0x26>
  {
    return res;
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	e08b      	b.n	8004286 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 8085 	bne.w	8004284 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68b8      	ldr	r0, [r7, #8]
 8004180:	f7ff fe44 	bl	8003e0c <BSP_SD_ReadBlocks_DMA>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d133      	bne.n	80041f2 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <SD_read+0x148>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004190:	f7fc fb10 	bl	80007b4 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004196:	bf00      	nop
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <SD_read+0x148>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d108      	bne.n	80041b2 <SD_read+0x6a>
 80041a0:	f7fc fb08 	bl	80007b4 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d9f2      	bls.n	8004198 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <SD_read+0x148>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <SD_read+0x78>
      {
        res = RES_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e061      	b.n	8004284 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <SD_read+0x148>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80041c6:	f7fc faf5 	bl	80007b4 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80041cc:	e007      	b.n	80041de <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80041ce:	f7ff fe6d 	bl	8003eac <BSP_SD_GetCardState>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <SD_read+0x96>
          {
            res = RES_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80041dc:	e052      	b.n	8004284 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80041de:	f7fc fae9 	bl	80007b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d9ee      	bls.n	80041ce <SD_read+0x86>
 80041f0:	e048      	b.n	8004284 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e034      	b.n	8004262 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	4619      	mov	r1, r3
 8004202:	4824      	ldr	r0, [pc, #144]	; (8004294 <SD_read+0x14c>)
 8004204:	f7ff fe02 	bl	8003e0c <BSP_SD_ReadBlocks_DMA>
 8004208:	4603      	mov	r3, r0
 800420a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800420c:	7fbb      	ldrb	r3, [r7, #30]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d12c      	bne.n	800426c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8004212:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <SD_read+0x148>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8004218:	f7fc facc 	bl	80007b4 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800421e:	bf00      	nop
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <SD_read+0x148>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <SD_read+0xf2>
 8004228:	f7fc fac4 	bl	80007b4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f247 522f 	movw	r2, #29999	; 0x752f
 8004236:	4293      	cmp	r3, r2
 8004238:	d9f2      	bls.n	8004220 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <SD_read+0x148>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <SD_read+0x14c>)
 8004246:	4618      	mov	r0, r3
 8004248:	4611      	mov	r1, r2
 800424a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800424e:	461a      	mov	r2, r3
 8004250:	f002 fbea 	bl	8006a28 <memcpy>
          buff += BLOCKSIZE;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800425a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	3301      	adds	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d8c6      	bhi.n	80041f8 <SD_read+0xb0>
 800426a:	e002      	b.n	8004272 <SD_read+0x12a>
        }
        else
        {
          break;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <SD_read+0x12a>
            break;
 8004270:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d104      	bne.n	8004284 <SD_read+0x13c>
 800427a:	7fbb      	ldrb	r3, [r7, #30]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <SD_read+0x13c>
        res = RES_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000348 	.word	0x20000348
 8004294:	20000144 	.word	0x20000144

08004298 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <SD_write+0x148>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80042b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80042b6:	f7ff fee1 	bl	800407c <SD_CheckStatusWithTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da01      	bge.n	80042c4 <SD_write+0x2c>
  {
    return res;
 80042c0:	7ffb      	ldrb	r3, [r7, #31]
 80042c2:	e088      	b.n	80043d6 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 8082 	bne.w	80043d4 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	68b8      	ldr	r0, [r7, #8]
 80042d6:	f7ff fdc1 	bl	8003e5c <BSP_SD_WriteBlocks_DMA>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d130      	bne.n	8004342 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80042e0:	f7fc fa68 	bl	80007b4 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80042e6:	bf00      	nop
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <SD_write+0x148>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d108      	bne.n	8004302 <SD_write+0x6a>
 80042f0:	f7fc fa60 	bl	80007b4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f247 522f 	movw	r2, #29999	; 0x752f
 80042fe:	4293      	cmp	r3, r2
 8004300:	d9f2      	bls.n	80042e8 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <SD_write+0x148>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <SD_write+0x78>
      {
        res = RES_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e061      	b.n	80043d4 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <SD_write+0x148>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004316:	f7fc fa4d 	bl	80007b4 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800431c:	e007      	b.n	800432e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800431e:	f7ff fdc5 	bl	8003eac <BSP_SD_GetCardState>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <SD_write+0x96>
          {
            res = RES_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
            break;
 800432c:	e052      	b.n	80043d4 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800432e:	f7fc fa41 	bl	80007b4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f247 522f 	movw	r2, #29999	; 0x752f
 800433c:	4293      	cmp	r3, r2
 800433e:	d9ee      	bls.n	800431e <SD_write+0x86>
 8004340:	e048      	b.n	80043d4 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e034      	b.n	80043b2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <SD_write+0x148>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	4619      	mov	r1, r3
 8004358:	4822      	ldr	r0, [pc, #136]	; (80043e4 <SD_write+0x14c>)
 800435a:	f7ff fd7f 	bl	8003e5c <BSP_SD_WriteBlocks_DMA>
 800435e:	4603      	mov	r3, r0
 8004360:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8004362:	7fbb      	ldrb	r3, [r7, #30]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d129      	bne.n	80043bc <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8004368:	f7fc fa24 	bl	80007b4 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800436e:	bf00      	nop
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <SD_write+0x148>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <SD_write+0xf2>
 8004378:	f7fc fa1c 	bl	80007b4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f247 522f 	movw	r2, #29999	; 0x752f
 8004386:	4293      	cmp	r3, r2
 8004388:	d9f2      	bls.n	8004370 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <SD_write+0x148>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <SD_write+0x14c>)
 8004396:	4618      	mov	r0, r3
 8004398:	4611      	mov	r1, r2
 800439a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800439e:	461a      	mov	r2, r3
 80043a0:	f002 fb42 	bl	8006a28 <memcpy>
          buff += BLOCKSIZE;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80043aa:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d8c6      	bhi.n	8004348 <SD_write+0xb0>
 80043ba:	e002      	b.n	80043c2 <SD_write+0x12a>
        }
        else
        {
          break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <SD_write+0x12a>
            break;
 80043c0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d104      	bne.n	80043d4 <SD_write+0x13c>
 80043ca:	7fbb      	ldrb	r3, [r7, #30]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <SD_write+0x13c>
        res = RES_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000344 	.word	0x20000344
 80043e4:	20000144 	.word	0x20000144

080043e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	603a      	str	r2, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
 80043f4:	460b      	mov	r3, r1
 80043f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <SD_ioctl+0xac>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <SD_ioctl+0x28>
 800440c:	2303      	movs	r3, #3
 800440e:	e03c      	b.n	800448a <SD_ioctl+0xa2>

  switch (cmd)
 8004410:	79bb      	ldrb	r3, [r7, #6]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d834      	bhi.n	8004480 <SD_ioctl+0x98>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <SD_ioctl+0x34>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004435 	.word	0x08004435
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004467 	.word	0x08004467
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004432:	e028      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fd55 	bl	8003ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800444a:	e01c      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fd49 	bl	8003ee8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	b29a      	uxth	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004464:	e00f      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fd3c 	bl	8003ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	0a5a      	lsrs	r2, r3, #9
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800447e:	e002      	b.n	8004486 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004480:	2304      	movs	r3, #4
 8004482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800448a:	4618      	mov	r0, r3
 800448c:	3730      	adds	r7, #48	; 0x30
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000009c 	.word	0x2000009c

08004498 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <BSP_SD_WriteCpltCallback+0x14>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000344 	.word	0x20000344

080044b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <BSP_SD_ReadCpltCallback+0x14>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000348 	.word	0x20000348

080044c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <disk_status+0x30>)
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	79fa      	ldrb	r2, [r7, #7]
 80044e0:	4905      	ldr	r1, [pc, #20]	; (80044f8 <disk_status+0x30>)
 80044e2:	440a      	add	r2, r1
 80044e4:	7a12      	ldrb	r2, [r2, #8]
 80044e6:	4610      	mov	r0, r2
 80044e8:	4798      	blx	r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000374 	.word	0x20000374

080044fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <disk_initialize+0x48>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d111      	bne.n	8004538 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <disk_initialize+0x48>)
 8004518:	2101      	movs	r1, #1
 800451a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <disk_initialize+0x48>)
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	79fa      	ldrb	r2, [r7, #7]
 800452a:	4906      	ldr	r1, [pc, #24]	; (8004544 <disk_initialize+0x48>)
 800452c:	440a      	add	r2, r1
 800452e:	7a12      	ldrb	r2, [r2, #8]
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000374 	.word	0x20000374

08004548 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <disk_read+0x3c>)
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	689c      	ldr	r4, [r3, #8]
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	4a07      	ldr	r2, [pc, #28]	; (8004584 <disk_read+0x3c>)
 8004568:	4413      	add	r3, r2
 800456a:	7a18      	ldrb	r0, [r3, #8]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	47a0      	blx	r4
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]
  return res;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop
 8004584:	20000374 	.word	0x20000374

08004588 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <disk_write+0x3c>)
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68dc      	ldr	r4, [r3, #12]
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <disk_write+0x3c>)
 80045a8:	4413      	add	r3, r2
 80045aa:	7a18      	ldrb	r0, [r3, #8]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	47a0      	blx	r4
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000374 	.word	0x20000374

080045c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	603a      	str	r2, [r7, #0]
 80045d2:	71fb      	strb	r3, [r7, #7]
 80045d4:	460b      	mov	r3, r1
 80045d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <disk_ioctl+0x38>)
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	79fa      	ldrb	r2, [r7, #7]
 80045e6:	4906      	ldr	r1, [pc, #24]	; (8004600 <disk_ioctl+0x38>)
 80045e8:	440a      	add	r2, r1
 80045ea:	7a10      	ldrb	r0, [r2, #8]
 80045ec:	79b9      	ldrb	r1, [r7, #6]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4798      	blx	r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000374 	.word	0x20000374

08004604 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	b21a      	sxth	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b21b      	sxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b21b      	sxth	r3, r3
 8004624:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004626:	89fb      	ldrh	r3, [r7, #14]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3303      	adds	r3, #3
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	3202      	adds	r2, #2
 800464a:	7812      	ldrb	r2, [r2, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	3201      	adds	r2, #1
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
	return rv;
 800466a:	68fb      	ldr	r3, [r7, #12]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	1c53      	adds	r3, r2, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	6179      	str	r1, [r7, #20]
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f1      	bne.n	800471a <mem_cpy+0x1a>
	}
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	617a      	str	r2, [r7, #20]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f3      	bne.n	8004750 <mem_set+0x10>
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004772:	b480      	push	{r7}
 8004774:	b089      	sub	sp, #36	; 0x24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	61fa      	str	r2, [r7, #28]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	61ba      	str	r2, [r7, #24]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	1acb      	subs	r3, r1, r3
 800479e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <mem_cmp+0x40>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0eb      	beq.n	800478a <mem_cmp+0x18>

	return r;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3724      	adds	r7, #36	; 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80047c8:	e002      	b.n	80047d0 <chk_chr+0x12>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3301      	adds	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <chk_chr+0x26>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d1f2      	bne.n	80047ca <chk_chr+0xc>
	return *str;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	781b      	ldrb	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
	...

080047f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e029      	b.n	800485c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004808:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <chk_lock+0xb0>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01d      	beq.n	8004852 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004816:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <chk_lock+0xb0>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d116      	bne.n	8004856 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <chk_lock+0xb0>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004838:	429a      	cmp	r2, r3
 800483a:	d10c      	bne.n	8004856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <chk_lock+0xb0>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4413      	add	r3, r2
 8004844:	3308      	adds	r3, #8
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800484c:	429a      	cmp	r2, r3
 800484e:	d102      	bne.n	8004856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004850:	e007      	b.n	8004862 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d9d2      	bls.n	8004808 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d109      	bne.n	800487c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <chk_lock+0x80>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d101      	bne.n	8004878 <chk_lock+0x84>
 8004874:	2300      	movs	r3, #0
 8004876:	e010      	b.n	800489a <chk_lock+0xa6>
 8004878:	2312      	movs	r3, #18
 800487a:	e00e      	b.n	800489a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <chk_lock+0xa0>
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <chk_lock+0xb0>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	330c      	adds	r3, #12
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d101      	bne.n	8004898 <chk_lock+0xa4>
 8004894:	2310      	movs	r3, #16
 8004896:	e000      	b.n	800489a <chk_lock+0xa6>
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	20000354 	.word	0x20000354

080048a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	e002      	b.n	80048ba <enq_lock+0x12>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d806      	bhi.n	80048ce <enq_lock+0x26>
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <enq_lock+0x3c>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4413      	add	r3, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f2      	bne.n	80048b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	20000354 	.word	0x20000354

080048e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e01f      	b.n	8004938 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80048f8:	4a41      	ldr	r2, [pc, #260]	; (8004a00 <inc_lock+0x118>)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	4413      	add	r3, r2
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d113      	bne.n	8004932 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <inc_lock+0x118>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4413      	add	r3, r2
 8004912:	3304      	adds	r3, #4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800491a:	429a      	cmp	r2, r3
 800491c:	d109      	bne.n	8004932 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800491e:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <inc_lock+0x118>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	3308      	adds	r3, #8
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800492e:	429a      	cmp	r2, r3
 8004930:	d006      	beq.n	8004940 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d9dc      	bls.n	80048f8 <inc_lock+0x10>
 800493e:	e000      	b.n	8004942 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004940:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d132      	bne.n	80049ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e002      	b.n	8004954 <inc_lock+0x6c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d806      	bhi.n	8004968 <inc_lock+0x80>
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <inc_lock+0x118>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	4413      	add	r3, r2
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f2      	bne.n	800494e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d101      	bne.n	8004972 <inc_lock+0x8a>
 800496e:	2300      	movs	r3, #0
 8004970:	e040      	b.n	80049f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4922      	ldr	r1, [pc, #136]	; (8004a00 <inc_lock+0x118>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	440b      	add	r3, r1
 800497e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	491e      	ldr	r1, [pc, #120]	; (8004a00 <inc_lock+0x118>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	440b      	add	r3, r1
 800498c:	3304      	adds	r3, #4
 800498e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	491a      	ldr	r1, [pc, #104]	; (8004a00 <inc_lock+0x118>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	440b      	add	r3, r1
 800499c:	3308      	adds	r3, #8
 800499e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <inc_lock+0x118>)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	330c      	adds	r3, #12
 80049aa:	2200      	movs	r2, #0
 80049ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <inc_lock+0xe0>
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <inc_lock+0x118>)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	4413      	add	r3, r2
 80049bc:	330c      	adds	r3, #12
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <inc_lock+0xe0>
 80049c4:	2300      	movs	r3, #0
 80049c6:	e015      	b.n	80049f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d108      	bne.n	80049e0 <inc_lock+0xf8>
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <inc_lock+0x118>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	330c      	adds	r3, #12
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	e001      	b.n	80049e4 <inc_lock+0xfc>
 80049e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049e4:	4906      	ldr	r1, [pc, #24]	; (8004a00 <inc_lock+0x118>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	440b      	add	r3, r1
 80049ec:	330c      	adds	r3, #12
 80049ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000354 	.word	0x20000354

08004a04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d825      	bhi.n	8004a64 <dec_lock+0x60>
		n = Files[i].ctr;
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <dec_lock+0x70>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4413      	add	r3, r2
 8004a20:	330c      	adds	r3, #12
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d101      	bne.n	8004a32 <dec_lock+0x2e>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a32:	89fb      	ldrh	r3, [r7, #14]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <dec_lock+0x3a>
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <dec_lock+0x70>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	4413      	add	r3, r2
 8004a46:	330c      	adds	r3, #12
 8004a48:	89fa      	ldrh	r2, [r7, #14]
 8004a4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a4c:	89fb      	ldrh	r3, [r7, #14]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <dec_lock+0x5a>
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <dec_lock+0x70>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	4413      	add	r3, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	737b      	strb	r3, [r7, #13]
 8004a62:	e001      	b.n	8004a68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004a64:	2302      	movs	r3, #2
 8004a66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004a68:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	20000354 	.word	0x20000354

08004a78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e010      	b.n	8004aa8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <clear_lock+0x40>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4413      	add	r3, r2
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d105      	bne.n	8004aa2 <clear_lock+0x2a>
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <clear_lock+0x40>)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	4413      	add	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d9eb      	bls.n	8004a86 <clear_lock+0xe>
	}
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000354 	.word	0x20000354

08004abc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	78db      	ldrb	r3, [r3, #3]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d034      	beq.n	8004b3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7858      	ldrb	r0, [r3, #1]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	f7ff fd50 	bl	8004588 <disk_write>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e022      	b.n	8004b3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	1ad2      	subs	r2, r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d217      	bcs.n	8004b3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e010      	b.n	8004b34 <sync_window+0x78>
					wsect += fs->fsize;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4413      	add	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7858      	ldrb	r0, [r3, #1]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b26:	2301      	movs	r3, #1
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	f7ff fd2d 	bl	8004588 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d8eb      	bhi.n	8004b12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d01b      	beq.n	8004b94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffad 	bl	8004abc <sync_window>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7858      	ldrb	r0, [r3, #1]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b76:	2301      	movs	r3, #1
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	f7ff fce5 	bl	8004548 <disk_read>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295
 8004b88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff87 	bl	8004abc <sync_window>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d159      	bne.n	8004c6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d149      	bne.n	8004c54 <sync_fs+0xb4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	791b      	ldrb	r3, [r3, #4]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d145      	bne.n	8004c54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	899b      	ldrh	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f7ff fdb3 	bl	8004740 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3334      	adds	r3, #52	; 0x34
 8004bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004be2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fd45 	bl	8004676 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3334      	adds	r3, #52	; 0x34
 8004bf0:	4921      	ldr	r1, [pc, #132]	; (8004c78 <sync_fs+0xd8>)
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fd59 	bl	80046aa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3334      	adds	r3, #52	; 0x34
 8004bfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c00:	491e      	ldr	r1, [pc, #120]	; (8004c7c <sync_fs+0xdc>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd51 	bl	80046aa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3334      	adds	r3, #52	; 0x34
 8004c0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff fd47 	bl	80046aa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3334      	adds	r3, #52	; 0x34
 8004c20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f7ff fd3d 	bl	80046aa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7858      	ldrb	r0, [r3, #1]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f7ff fc9d 	bl	8004588 <disk_write>
			fs->fsi_flag = 0;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fcb3 	bl	80045c8 <disk_ioctl>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <sync_fs+0xcc>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	41615252 	.word	0x41615252
 8004c7c:	61417272 	.word	0x61417272

08004c80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	3b02      	subs	r3, #2
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d301      	bcc.n	8004ca0 <clust2sect+0x20>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e008      	b.n	8004cb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	895b      	ldrh	r3, [r3, #10]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	fb03 f202 	mul.w	r2, r3, r2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4413      	add	r3, r2
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d904      	bls.n	8004cdc <get_fat+0x20>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e0b7      	b.n	8004e52 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d05a      	beq.n	8004da6 <get_fat+0xea>
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d07d      	beq.n	8004df0 <get_fat+0x134>
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 80a2 	bne.w	8004e3e <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	899b      	ldrh	r3, [r3, #12]
 8004d10:	4619      	mov	r1, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d18:	4413      	add	r3, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6938      	ldr	r0, [r7, #16]
 8004d1e:	f7ff ff11 	bl	8004b44 <move_window>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 808d 	bne.w	8004e44 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	60fa      	str	r2, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	8992      	ldrh	r2, [r2, #12]
 8004d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d38:	fb02 f201 	mul.w	r2, r2, r1
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d46:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	899b      	ldrh	r3, [r3, #12]
 8004d50:	4619      	mov	r1, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d58:	4413      	add	r3, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6938      	ldr	r0, [r7, #16]
 8004d5e:	f7ff fef1 	bl	8004b44 <move_window>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d16f      	bne.n	8004e48 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	899b      	ldrh	r3, [r3, #12]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d74:	fb02 f201 	mul.w	r2, r2, r1
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	461a      	mov	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <get_fat+0xe0>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	e002      	b.n	8004da2 <get_fat+0xe6>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	617b      	str	r3, [r7, #20]
			break;
 8004da4:	e055      	b.n	8004e52 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	899b      	ldrh	r3, [r3, #12]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4619      	mov	r1, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dba:	4413      	add	r3, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6938      	ldr	r0, [r7, #16]
 8004dc0:	f7ff fec0 	bl	8004b44 <move_window>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d140      	bne.n	8004e4c <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	8992      	ldrh	r2, [r2, #12]
 8004dd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ddc:	fb02 f200 	mul.w	r2, r2, r0
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	440b      	add	r3, r1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fc0d 	bl	8004604 <ld_word>
 8004dea:	4603      	mov	r3, r0
 8004dec:	617b      	str	r3, [r7, #20]
			break;
 8004dee:	e030      	b.n	8004e52 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	899b      	ldrh	r3, [r3, #12]
 8004df8:	089b      	lsrs	r3, r3, #2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e04:	4413      	add	r3, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f7ff fe9b 	bl	8004b44 <move_window>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11d      	bne.n	8004e50 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	8992      	ldrh	r2, [r2, #12]
 8004e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e26:	fb02 f200 	mul.w	r2, r2, r0
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fbff 	bl	8004632 <ld_dword>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e3a:	617b      	str	r3, [r7, #20]
			break;
 8004e3c:	e009      	b.n	8004e52 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004e3e:	2301      	movs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e006      	b.n	8004e52 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e44:	bf00      	nop
 8004e46:	e004      	b.n	8004e52 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e50:	bf00      	nop
		}
	}

	return val;
 8004e52:	697b      	ldr	r3, [r7, #20]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	f240 8106 	bls.w	8005080 <put_fat+0x224>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f080 8100 	bcs.w	8005080 <put_fat+0x224>
		switch (fs->fs_type) {
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	f000 8088 	beq.w	8004f9a <put_fat+0x13e>
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	f000 80b0 	beq.w	8004ff0 <put_fat+0x194>
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	f040 80f5 	bne.w	8005080 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	899b      	ldrh	r3, [r3, #12]
 8004eac:	4619      	mov	r1, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fe43 	bl	8004b44 <move_window>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ec2:	7ffb      	ldrb	r3, [r7, #31]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 80d4 	bne.w	8005072 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	61ba      	str	r2, [r7, #24]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	8992      	ldrh	r2, [r2, #12]
 8004eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ede:	fb02 f200 	mul.w	r2, r2, r0
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <put_fat+0xb2>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	b25a      	sxtb	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e001      	b.n	8004f12 <put_fat+0xb6>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	899b      	ldrh	r3, [r3, #12]
 8004f24:	4619      	mov	r1, r3
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fe07 	bl	8004b44 <move_window>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 809a 	bne.w	8005076 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	899b      	ldrh	r3, [r3, #12]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f54:	fb02 f200 	mul.w	r2, r2, r0
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <put_fat+0x114>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e00e      	b.n	8004f8e <put_fat+0x132>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f023 030f 	bic.w	r3, r3, #15
 8004f7a:	b25a      	sxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	70da      	strb	r2, [r3, #3]
			break;
 8004f98:	e072      	b.n	8005080 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	899b      	ldrh	r3, [r3, #12]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fae:	4413      	add	r3, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fdc6 	bl	8004b44 <move_window>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d15b      	bne.n	800507a <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	8992      	ldrh	r2, [r2, #12]
 8004fd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fd4:	fb02 f200 	mul.w	r2, r2, r0
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fb47 	bl	8004676 <st_word>
			fs->wflag = 1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	70da      	strb	r2, [r3, #3]
			break;
 8004fee:	e047      	b.n	8005080 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	899b      	ldrh	r3, [r3, #12]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	fbb3 f3f1 	udiv	r3, r3, r1
 8005004:	4413      	add	r3, r2
 8005006:	4619      	mov	r1, r3
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff fd9b 	bl	8004b44 <move_window>
 800500e:	4603      	mov	r3, r0
 8005010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005012:	7ffb      	ldrb	r3, [r7, #31]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d132      	bne.n	800507e <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	8992      	ldrh	r2, [r2, #12]
 800502c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005030:	fb02 f200 	mul.w	r2, r2, r0
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	440b      	add	r3, r1
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fafa 	bl	8004632 <ld_dword>
 800503e:	4603      	mov	r3, r0
 8005040:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005044:	4323      	orrs	r3, r4
 8005046:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	8992      	ldrh	r2, [r2, #12]
 8005056:	fbb3 f0f2 	udiv	r0, r3, r2
 800505a:	fb02 f200 	mul.w	r2, r2, r0
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	440b      	add	r3, r1
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fb20 	bl	80046aa <st_dword>
			fs->wflag = 1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	70da      	strb	r2, [r3, #3]
			break;
 8005070:	e006      	b.n	8005080 <put_fat+0x224>
			if (res != FR_OK) break;
 8005072:	bf00      	nop
 8005074:	e004      	b.n	8005080 <put_fat+0x224>
			if (res != FR_OK) break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <put_fat+0x224>
			if (res != FR_OK) break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <put_fat+0x224>
			if (res != FR_OK) break;
 800507e:	bf00      	nop
		}
	}
	return res;
 8005080:	7ffb      	ldrb	r3, [r7, #31]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}

0800508a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d904      	bls.n	80050b0 <remove_chain+0x26>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d301      	bcc.n	80050b4 <remove_chain+0x2a>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e04b      	b.n	800514c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	69b8      	ldr	r0, [r7, #24]
 80050c2:	f7ff fecb 	bl	8004e5c <put_fat>
 80050c6:	4603      	mov	r3, r0
 80050c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <remove_chain+0x4a>
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	e03b      	b.n	800514c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fdf0 	bl	8004cbc <get_fat>
 80050dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d031      	beq.n	8005148 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <remove_chain+0x64>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e02e      	b.n	800514c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d101      	bne.n	80050fa <remove_chain+0x70>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e028      	b.n	800514c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80050fa:	2200      	movs	r2, #0
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f7ff feac 	bl	8004e5c <put_fat>
 8005104:	4603      	mov	r3, r0
 8005106:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005108:	7ffb      	ldrb	r3, [r7, #31]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <remove_chain+0x88>
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	e01c      	b.n	800514c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	3b02      	subs	r3, #2
 800511c:	429a      	cmp	r2, r3
 800511e:	d20b      	bcs.n	8005138 <remove_chain+0xae>
			fs->free_clst++;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	791b      	ldrb	r3, [r3, #4]
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3c6      	bcc.n	80050d4 <remove_chain+0x4a>
 8005146:	e000      	b.n	800514a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005148:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <create_chain+0x2c>
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d31b      	bcc.n	80051b8 <create_chain+0x64>
 8005180:	2301      	movs	r3, #1
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e018      	b.n	80051b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fd97 	bl	8004cbc <get_fat>
 800518e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d801      	bhi.n	800519a <create_chain+0x46>
 8005196:	2301      	movs	r3, #1
 8005198:	e070      	b.n	800527c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d101      	bne.n	80051a6 <create_chain+0x52>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	e06a      	b.n	800527c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d201      	bcs.n	80051b4 <create_chain+0x60>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	e063      	b.n	800527c <create_chain+0x128>
		scl = clst;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d307      	bcc.n	80051dc <create_chain+0x88>
				ncl = 2;
 80051cc:	2302      	movs	r3, #2
 80051ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d901      	bls.n	80051dc <create_chain+0x88>
 80051d8:	2300      	movs	r3, #0
 80051da:	e04f      	b.n	800527c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fd6c 	bl	8004cbc <get_fat>
 80051e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d003      	beq.n	80051fa <create_chain+0xa6>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d101      	bne.n	80051fe <create_chain+0xaa>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	e03e      	b.n	800527c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	429a      	cmp	r2, r3
 8005204:	d1da      	bne.n	80051bc <create_chain+0x68>
 8005206:	2300      	movs	r3, #0
 8005208:	e038      	b.n	800527c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800520a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800520c:	f04f 32ff 	mov.w	r2, #4294967295
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	6938      	ldr	r0, [r7, #16]
 8005214:	f7ff fe22 	bl	8004e5c <put_fat>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <create_chain+0xe2>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6938      	ldr	r0, [r7, #16]
 800522e:	f7ff fe15 	bl	8004e5c <put_fat>
 8005232:	4603      	mov	r3, r0
 8005234:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <create_chain+0x116>
		fs->last_clst = ncl;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	3b02      	subs	r3, #2
 800524c:	429a      	cmp	r2, r3
 800524e:	d804      	bhi.n	800525a <create_chain+0x106>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	711a      	strb	r2, [r3, #4]
 8005268:	e007      	b.n	800527a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d102      	bne.n	8005276 <create_chain+0x122>
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	e000      	b.n	8005278 <create_chain+0x124>
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	3304      	adds	r3, #4
 800529a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	899b      	ldrh	r3, [r3, #12]
 80052a0:	461a      	mov	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	8952      	ldrh	r2, [r2, #10]
 80052ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	613a      	str	r2, [r7, #16]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <clmt_clust+0x42>
 80052c2:	2300      	movs	r3, #0
 80052c4:	e010      	b.n	80052e8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d307      	bcc.n	80052de <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3304      	adds	r3, #4
 80052da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80052dc:	e7e9      	b.n	80052b2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80052de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005308:	d204      	bcs.n	8005314 <dir_sdi+0x22>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005314:	2302      	movs	r3, #2
 8005316:	e071      	b.n	80053fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <dir_sdi+0x46>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	8912      	ldrh	r2, [r2, #8]
 8005346:	4293      	cmp	r3, r2
 8005348:	d301      	bcc.n	800534e <dir_sdi+0x5c>
 800534a:	2302      	movs	r3, #2
 800534c:	e056      	b.n	80053fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	61da      	str	r2, [r3, #28]
 8005356:	e02d      	b.n	80053b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	895b      	ldrh	r3, [r3, #10]
 800535c:	461a      	mov	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	899b      	ldrh	r3, [r3, #12]
 8005362:	fb03 f302 	mul.w	r3, r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005368:	e019      	b.n	800539e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fca4 	bl	8004cbc <get_fat>
 8005374:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d101      	bne.n	8005382 <dir_sdi+0x90>
 800537e:	2301      	movs	r3, #1
 8005380:	e03c      	b.n	80053fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d904      	bls.n	8005392 <dir_sdi+0xa0>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	429a      	cmp	r2, r3
 8005390:	d301      	bcc.n	8005396 <dir_sdi+0xa4>
 8005392:	2302      	movs	r3, #2
 8005394:	e032      	b.n	80053fc <dir_sdi+0x10a>
			ofs -= csz;
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d2e1      	bcs.n	800536a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	6938      	ldr	r0, [r7, #16]
 80053aa:	f7ff fc69 	bl	8004c80 <clust2sect>
 80053ae:	4602      	mov	r2, r0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <dir_sdi+0xd4>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e01a      	b.n	80053fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	899b      	ldrh	r3, [r3, #12]
 80053ce:	4619      	mov	r1, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	899b      	ldrh	r3, [r3, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80053ee:	fb02 f200 	mul.w	r2, r2, r0
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	18ca      	adds	r2, r1, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	3320      	adds	r3, #32
 800541a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <dir_next+0x28>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542a:	d301      	bcc.n	8005430 <dir_next+0x2c>
 800542c:	2304      	movs	r3, #4
 800542e:	e0bb      	b.n	80055a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	899b      	ldrh	r3, [r3, #12]
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	fbb3 f1f2 	udiv	r1, r3, r2
 800543c:	fb02 f201 	mul.w	r2, r2, r1
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 809d 	bne.w	8005582 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	8912      	ldrh	r2, [r2, #8]
 8005462:	4293      	cmp	r3, r2
 8005464:	f0c0 808d 	bcc.w	8005582 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
 800546e:	2304      	movs	r3, #4
 8005470:	e09a      	b.n	80055a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	899b      	ldrh	r3, [r3, #12]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	fbb3 f3f2 	udiv	r3, r3, r2
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	8952      	ldrh	r2, [r2, #10]
 8005482:	3a01      	subs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d17b      	bne.n	8005582 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7ff fc12 	bl	8004cbc <get_fat>
 8005498:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d801      	bhi.n	80054a4 <dir_next+0xa0>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e081      	b.n	80055a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d101      	bne.n	80054b0 <dir_next+0xac>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e07b      	b.n	80055a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d359      	bcc.n	800556e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	61da      	str	r2, [r3, #28]
 80054c6:	2304      	movs	r3, #4
 80054c8:	e06e      	b.n	80055a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7ff fe3e 	bl	8005154 <create_chain>
 80054d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <dir_next+0xe0>
 80054e0:	2307      	movs	r3, #7
 80054e2:	e061      	b.n	80055a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <dir_next+0xea>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e05c      	b.n	80055a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d101      	bne.n	80054fa <dir_next+0xf6>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e056      	b.n	80055a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff fade 	bl	8004abc <sync_window>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <dir_next+0x106>
 8005506:	2301      	movs	r3, #1
 8005508:	e04e      	b.n	80055a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	899b      	ldrh	r3, [r3, #12]
 8005514:	461a      	mov	r2, r3
 8005516:	2100      	movs	r1, #0
 8005518:	f7ff f912 	bl	8004740 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fbac 	bl	8004c80 <clust2sect>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
 800552e:	e012      	b.n	8005556 <dir_next+0x152>
						fs->wflag = 1;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fac0 	bl	8004abc <sync_window>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <dir_next+0x142>
 8005542:	2301      	movs	r3, #1
 8005544:	e030      	b.n	80055a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3301      	adds	r3, #1
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	895b      	ldrh	r3, [r3, #10]
 800555a:	461a      	mov	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4293      	cmp	r3, r2
 8005560:	d3e6      	bcc.n	8005530 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fb82 	bl	8004c80 <clust2sect>
 800557c:	4602      	mov	r2, r0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	899b      	ldrh	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	fbb3 f0f2 	udiv	r0, r3, r2
 800559a:	fb02 f200 	mul.w	r2, r2, r0
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	18ca      	adds	r2, r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80055c0:	2100      	movs	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fe95 	bl	80052f2 <dir_sdi>
 80055c8:	4603      	mov	r3, r0
 80055ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d12b      	bne.n	800562a <dir_alloc+0x7a>
		n = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4619      	mov	r1, r3
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff fab1 	bl	8004b44 <move_window>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11d      	bne.n	8005628 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2be5      	cmp	r3, #229	; 0xe5
 80055f4:	d004      	beq.n	8005600 <dir_alloc+0x50>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3301      	adds	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d102      	bne.n	8005614 <dir_alloc+0x64>
 800560e:	e00c      	b.n	800562a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005614:	2101      	movs	r1, #1
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fef4 	bl	8005404 <dir_next>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0d7      	beq.n	80055d6 <dir_alloc+0x26>
 8005626:	e000      	b.n	800562a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005628:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d101      	bne.n	8005634 <dir_alloc+0x84>
 8005630:	2307      	movs	r3, #7
 8005632:	75fb      	strb	r3, [r7, #23]
	return res;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	331a      	adds	r3, #26
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe ffd9 	bl	8004604 <ld_word>
 8005652:	4603      	mov	r3, r0
 8005654:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d109      	bne.n	8005672 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe ffce 	bl	8004604 <ld_word>
 8005668:	4603      	mov	r3, r0
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	331a      	adds	r3, #26
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	b292      	uxth	r2, r2
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe ffef 	bl	8004676 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d109      	bne.n	80056b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f103 0214 	add.w	r2, r3, #20
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f7fe ffe1 	bl	8004676 <st_word>
	}
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056ca:	2100      	movs	r1, #0
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff fe10 	bl	80052f2 <dir_sdi>
 80056d2:	4603      	mov	r3, r0
 80056d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <dir_find+0x24>
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	e03e      	b.n	800575e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6938      	ldr	r0, [r7, #16]
 80056e8:	f7ff fa2c 	bl	8004b44 <move_window>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d12f      	bne.n	8005756 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <dir_find+0x4e>
 8005704:	2304      	movs	r3, #4
 8005706:	75fb      	strb	r3, [r7, #23]
 8005708:	e028      	b.n	800575c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	330b      	adds	r3, #11
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	330b      	adds	r3, #11
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <dir_find+0x86>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a18      	ldr	r0, [r3, #32]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	220b      	movs	r2, #11
 8005736:	4619      	mov	r1, r3
 8005738:	f7ff f81b 	bl	8004772 <mem_cmp>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005742:	2100      	movs	r1, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fe5d 	bl	8005404 <dir_next>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0c5      	beq.n	80056e0 <dir_find+0x24>
 8005754:	e002      	b.n	800575c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800575a:	bf00      	nop

	return res;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ff1a 	bl	80055b0 <dir_alloc>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11c      	bne.n	80057c0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	4619      	mov	r1, r3
 800578c:	68b8      	ldr	r0, [r7, #8]
 800578e:	f7ff f9d9 	bl	8004b44 <move_window>
 8005792:	4603      	mov	r3, r0
 8005794:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d111      	bne.n	80057c0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	2220      	movs	r2, #32
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe ffcb 	bl	8004740 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a18      	ldr	r0, [r3, #32]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3324      	adds	r3, #36	; 0x24
 80057b2:	220b      	movs	r2, #11
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fe ffa3 	bl	8004700 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2201      	movs	r2, #1
 80057be:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80057e2:	220b      	movs	r2, #11
 80057e4:	2120      	movs	r1, #32
 80057e6:	68b8      	ldr	r0, [r7, #8]
 80057e8:	f7fe ffaa 	bl	8004740 <mem_set>
	si = i = 0; ni = 8;
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	2308      	movs	r3, #8
 80057f6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	617a      	str	r2, [r7, #20]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005806:	7ffb      	ldrb	r3, [r7, #31]
 8005808:	2b20      	cmp	r3, #32
 800580a:	d94e      	bls.n	80058aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	2b2f      	cmp	r3, #47	; 0x2f
 8005810:	d006      	beq.n	8005820 <create_name+0x54>
 8005812:	7ffb      	ldrb	r3, [r7, #31]
 8005814:	2b5c      	cmp	r3, #92	; 0x5c
 8005816:	d110      	bne.n	800583a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005818:	e002      	b.n	8005820 <create_name+0x54>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b2f      	cmp	r3, #47	; 0x2f
 800582a:	d0f6      	beq.n	800581a <create_name+0x4e>
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4413      	add	r3, r2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b5c      	cmp	r3, #92	; 0x5c
 8005836:	d0f0      	beq.n	800581a <create_name+0x4e>
			break;
 8005838:	e038      	b.n	80058ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800583a:	7ffb      	ldrb	r3, [r7, #31]
 800583c:	2b2e      	cmp	r3, #46	; 0x2e
 800583e:	d003      	beq.n	8005848 <create_name+0x7c>
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	429a      	cmp	r2, r3
 8005846:	d30c      	bcc.n	8005862 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b0b      	cmp	r3, #11
 800584c:	d002      	beq.n	8005854 <create_name+0x88>
 800584e:	7ffb      	ldrb	r3, [r7, #31]
 8005850:	2b2e      	cmp	r3, #46	; 0x2e
 8005852:	d001      	beq.n	8005858 <create_name+0x8c>
 8005854:	2306      	movs	r3, #6
 8005856:	e044      	b.n	80058e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005858:	2308      	movs	r3, #8
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	230b      	movs	r3, #11
 800585e:	61bb      	str	r3, [r7, #24]
			continue;
 8005860:	e022      	b.n	80058a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005862:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da04      	bge.n	8005874 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800586a:	7ffb      	ldrb	r3, [r7, #31]
 800586c:	3b80      	subs	r3, #128	; 0x80
 800586e:	4a1f      	ldr	r2, [pc, #124]	; (80058ec <create_name+0x120>)
 8005870:	5cd3      	ldrb	r3, [r2, r3]
 8005872:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005874:	7ffb      	ldrb	r3, [r7, #31]
 8005876:	4619      	mov	r1, r3
 8005878:	481d      	ldr	r0, [pc, #116]	; (80058f0 <create_name+0x124>)
 800587a:	f7fe ffa0 	bl	80047be <chk_chr>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <create_name+0xbc>
 8005884:	2306      	movs	r3, #6
 8005886:	e02c      	b.n	80058e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005888:	7ffb      	ldrb	r3, [r7, #31]
 800588a:	2b60      	cmp	r3, #96	; 0x60
 800588c:	d905      	bls.n	800589a <create_name+0xce>
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b7a      	cmp	r3, #122	; 0x7a
 8005892:	d802      	bhi.n	800589a <create_name+0xce>
 8005894:	7ffb      	ldrb	r3, [r7, #31]
 8005896:	3b20      	subs	r3, #32
 8005898:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	613a      	str	r2, [r7, #16]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	4413      	add	r3, r2
 80058a4:	7ffa      	ldrb	r2, [r7, #31]
 80058a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80058a8:	e7a6      	b.n	80057f8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80058aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	441a      	add	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <create_name+0xf4>
 80058bc:	2306      	movs	r3, #6
 80058be:	e010      	b.n	80058e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2be5      	cmp	r3, #229	; 0xe5
 80058c6:	d102      	bne.n	80058ce <create_name+0x102>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2205      	movs	r2, #5
 80058cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80058ce:	7ffb      	ldrb	r3, [r7, #31]
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d801      	bhi.n	80058d8 <create_name+0x10c>
 80058d4:	2204      	movs	r2, #4
 80058d6:	e000      	b.n	80058da <create_name+0x10e>
 80058d8:	2200      	movs	r2, #0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	330b      	adds	r3, #11
 80058de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80058e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	08006ae8 	.word	0x08006ae8
 80058f0:	08006a74 	.word	0x08006a74

080058f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005908:	e002      	b.n	8005910 <follow_path+0x1c>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b2f      	cmp	r3, #47	; 0x2f
 8005916:	d0f8      	beq.n	800590a <follow_path+0x16>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b5c      	cmp	r3, #92	; 0x5c
 800591e:	d0f4      	beq.n	800590a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b1f      	cmp	r3, #31
 800592c:	d80a      	bhi.n	8005944 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005936:	2100      	movs	r1, #0
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fcda 	bl	80052f2 <dir_sdi>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]
 8005942:	e048      	b.n	80059d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005944:	463b      	mov	r3, r7
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff3f 	bl	80057cc <create_name>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d139      	bne.n	80059cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff feaf 	bl	80056bc <dir_find>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005968:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d12c      	bne.n	80059d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005976:	7afb      	ldrb	r3, [r7, #11]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d127      	bne.n	80059d0 <follow_path+0xdc>
 8005980:	2305      	movs	r3, #5
 8005982:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005984:	e024      	b.n	80059d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d121      	bne.n	80059d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	799b      	ldrb	r3, [r3, #6]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800599c:	2305      	movs	r3, #5
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e019      	b.n	80059d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	8992      	ldrh	r2, [r2, #12]
 80059b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80059b4:	fb02 f200 	mul.w	r2, r2, r0
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	440b      	add	r3, r1
 80059bc:	4619      	mov	r1, r3
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fe3d 	bl	800563e <ld_clust>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059ca:	e7bb      	b.n	8005944 <follow_path+0x50>
			if (res != FR_OK) break;
 80059cc:	bf00      	nop
 80059ce:	e002      	b.n	80059d6 <follow_path+0xe2>
				break;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059d4:	bf00      	nop
			}
		}
	}

	return res;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d031      	beq.n	8005a5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e002      	b.n	8005a04 <get_ldnumber+0x24>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d903      	bls.n	8005a14 <get_ldnumber+0x34>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b3a      	cmp	r3, #58	; 0x3a
 8005a12:	d1f4      	bne.n	80059fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b3a      	cmp	r3, #58	; 0x3a
 8005a1a:	d11c      	bne.n	8005a56 <get_ldnumber+0x76>
			tp = *path;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	60fa      	str	r2, [r7, #12]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	3b30      	subs	r3, #48	; 0x30
 8005a2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d80e      	bhi.n	8005a52 <get_ldnumber+0x72>
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d10a      	bne.n	8005a52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <get_ldnumber+0x72>
					vol = (int)i;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	e002      	b.n	8005a5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a5a:	693b      	ldr	r3, [r7, #16]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr
	...

08005a68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	70da      	strb	r2, [r3, #3]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff f85e 	bl	8004b44 <move_window>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <check_fs+0x2a>
 8005a8e:	2304      	movs	r3, #4
 8005a90:	e038      	b.n	8005b04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3334      	adds	r3, #52	; 0x34
 8005a96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fdb2 	bl	8004604 <ld_word>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <check_fs+0x48>
 8005aac:	2303      	movs	r3, #3
 8005aae:	e029      	b.n	8005b04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ab6:	2be9      	cmp	r3, #233	; 0xe9
 8005ab8:	d009      	beq.n	8005ace <check_fs+0x66>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ac0:	2beb      	cmp	r3, #235	; 0xeb
 8005ac2:	d11e      	bne.n	8005b02 <check_fs+0x9a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005aca:	2b90      	cmp	r3, #144	; 0x90
 8005acc:	d119      	bne.n	8005b02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3334      	adds	r3, #52	; 0x34
 8005ad2:	3336      	adds	r3, #54	; 0x36
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fdac 	bl	8004632 <ld_dword>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <check_fs+0xa4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <check_fs+0x82>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e00c      	b.n	8005b04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3334      	adds	r3, #52	; 0x34
 8005aee:	3352      	adds	r3, #82	; 0x52
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fd9e 	bl	8004632 <ld_dword>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <check_fs+0xa8>)
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d101      	bne.n	8005b02 <check_fs+0x9a>
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005b02:	2302      	movs	r3, #2
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	00544146 	.word	0x00544146
 8005b10:	33544146 	.word	0x33544146

08005b14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b096      	sub	sp, #88	; 0x58
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff59 	bl	80059e0 <get_ldnumber>
 8005b2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da01      	bge.n	8005b3a <find_volume+0x26>
 8005b36:	230b      	movs	r3, #11
 8005b38:	e265      	b.n	8006006 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b3a:	4ab0      	ldr	r2, [pc, #704]	; (8005dfc <find_volume+0x2e8>)
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <find_volume+0x3a>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	e25b      	b.n	8006006 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01a      	beq.n	8005b9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fcad 	bl	80044c8 <disk_status>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10c      	bne.n	8005b9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <find_volume+0x82>
 8005b86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005b92:	230a      	movs	r3, #10
 8005b94:	e237      	b.n	8006006 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005b96:	2300      	movs	r3, #0
 8005b98:	e235      	b.n	8006006 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe fca5 	bl	80044fc <disk_initialize>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e21e      	b.n	8006006 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <find_volume+0xca>
 8005bce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005bda:	230a      	movs	r3, #10
 8005bdc:	e213      	b.n	8006006 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	7858      	ldrb	r0, [r3, #1]
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	330c      	adds	r3, #12
 8005be6:	461a      	mov	r2, r3
 8005be8:	2102      	movs	r1, #2
 8005bea:	f7fe fced 	bl	80045c8 <disk_ioctl>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <find_volume+0xe4>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e206      	b.n	8006006 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	899b      	ldrh	r3, [r3, #12]
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c00:	d80d      	bhi.n	8005c1e <find_volume+0x10a>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	899b      	ldrh	r3, [r3, #12]
 8005c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0a:	d308      	bcc.n	8005c1e <find_volume+0x10a>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	899b      	ldrh	r3, [r3, #12]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	899b      	ldrh	r3, [r3, #12]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <find_volume+0x10e>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e1f1      	b.n	8006006 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005c26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c2a:	f7ff ff1d 	bl	8005a68 <check_fs>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d14b      	bne.n	8005cd4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c40:	e01f      	b.n	8005c82 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005c50:	4413      	add	r3, r2
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	3304      	adds	r3, #4
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <find_volume+0x158>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	3308      	adds	r3, #8
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fce5 	bl	8004632 <ld_dword>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	e000      	b.n	8005c6e <find_volume+0x15a>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c76:	440b      	add	r3, r1
 8005c78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7e:	3301      	adds	r3, #1
 8005c80:	643b      	str	r3, [r7, #64]	; 0x40
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d9dc      	bls.n	8005c42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005c88:	2300      	movs	r3, #0
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <find_volume+0x184>
 8005c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c94:	3b01      	subs	r3, #1
 8005c96:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ca6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <find_volume+0x1a6>
 8005cae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cb2:	f7ff fed9 	bl	8005a68 <check_fs>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	e000      	b.n	8005cbc <find_volume+0x1a8>
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d905      	bls.n	8005cd4 <find_volume+0x1c0>
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	3301      	adds	r3, #1
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d9e1      	bls.n	8005c98 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d101      	bne.n	8005ce0 <find_volume+0x1cc>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e192      	b.n	8006006 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d901      	bls.n	8005cec <find_volume+0x1d8>
 8005ce8:	230d      	movs	r3, #13
 8005cea:	e18c      	b.n	8006006 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	3334      	adds	r3, #52	; 0x34
 8005cf0:	330b      	adds	r3, #11
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fc86 	bl	8004604 <ld_word>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	899b      	ldrh	r3, [r3, #12]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <find_volume+0x1f4>
 8005d04:	230d      	movs	r3, #13
 8005d06:	e17e      	b.n	8006006 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	3334      	adds	r3, #52	; 0x34
 8005d0c:	3316      	adds	r3, #22
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fc78 	bl	8004604 <ld_word>
 8005d14:	4603      	mov	r3, r0
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <find_volume+0x218>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	3334      	adds	r3, #52	; 0x34
 8005d22:	3324      	adds	r3, #36	; 0x24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fc84 	bl	8004632 <ld_dword>
 8005d2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d30:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d005      	beq.n	8005d50 <find_volume+0x23c>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	789b      	ldrb	r3, [r3, #2]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d001      	beq.n	8005d50 <find_volume+0x23c>
 8005d4c:	230d      	movs	r3, #13
 8005d4e:	e15a      	b.n	8006006 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	789b      	ldrb	r3, [r3, #2]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	895b      	ldrh	r3, [r3, #10]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <find_volume+0x270>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	895b      	ldrh	r3, [r3, #10]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	895b      	ldrh	r3, [r3, #10]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <find_volume+0x274>
 8005d84:	230d      	movs	r3, #13
 8005d86:	e13e      	b.n	8006006 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	3334      	adds	r3, #52	; 0x34
 8005d8c:	3311      	adds	r3, #17
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fc38 	bl	8004604 <ld_word>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	891b      	ldrh	r3, [r3, #8]
 8005da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da2:	8992      	ldrh	r2, [r2, #12]
 8005da4:	0952      	lsrs	r2, r2, #5
 8005da6:	b292      	uxth	r2, r2
 8005da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dac:	fb02 f201 	mul.w	r2, r2, r1
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <find_volume+0x2a8>
 8005db8:	230d      	movs	r3, #13
 8005dba:	e124      	b.n	8006006 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	3334      	adds	r3, #52	; 0x34
 8005dc0:	3313      	adds	r3, #19
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fc1e 	bl	8004604 <ld_word>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <find_volume+0x2cc>
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	3334      	adds	r3, #52	; 0x34
 8005dd6:	3320      	adds	r3, #32
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fc2a 	bl	8004632 <ld_dword>
 8005dde:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	3334      	adds	r3, #52	; 0x34
 8005de4:	330e      	adds	r3, #14
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc0c 	bl	8004604 <ld_word>
 8005dec:	4603      	mov	r3, r0
 8005dee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <find_volume+0x2ec>
 8005df6:	230d      	movs	r3, #13
 8005df8:	e105      	b.n	8006006 <find_volume+0x4f2>
 8005dfa:	bf00      	nop
 8005dfc:	2000034c 	.word	0x2000034c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005e00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e04:	4413      	add	r3, r2
 8005e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e08:	8911      	ldrh	r1, [r2, #8]
 8005e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0c:	8992      	ldrh	r2, [r2, #12]
 8005e0e:	0952      	lsrs	r2, r2, #5
 8005e10:	b292      	uxth	r2, r2
 8005e12:	fbb1 f2f2 	udiv	r2, r1, r2
 8005e16:	b292      	uxth	r2, r2
 8005e18:	4413      	add	r3, r2
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d201      	bcs.n	8005e28 <find_volume+0x314>
 8005e24:	230d      	movs	r3, #13
 8005e26:	e0ee      	b.n	8006006 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e30:	8952      	ldrh	r2, [r2, #10]
 8005e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <find_volume+0x32e>
 8005e3e:	230d      	movs	r3, #13
 8005e40:	e0e1      	b.n	8006006 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005e42:	2303      	movs	r3, #3
 8005e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d802      	bhi.n	8005e58 <find_volume+0x344>
 8005e52:	2302      	movs	r3, #2
 8005e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d802      	bhi.n	8005e68 <find_volume+0x354>
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e74:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005e76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7a:	441a      	add	r2, r3
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	441a      	add	r2, r3
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d11e      	bne.n	8005ed0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	3334      	adds	r3, #52	; 0x34
 8005e96:	332a      	adds	r3, #42	; 0x2a
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe fbb3 	bl	8004604 <ld_word>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <find_volume+0x394>
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	e0ae      	b.n	8006006 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	891b      	ldrh	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <find_volume+0x3a0>
 8005eb0:	230d      	movs	r3, #13
 8005eb2:	e0a8      	b.n	8006006 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	3334      	adds	r3, #52	; 0x34
 8005eb8:	332c      	adds	r3, #44	; 0x2c
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fbb9 	bl	8004632 <ld_dword>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ece:	e01f      	b.n	8005f10 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	891b      	ldrh	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <find_volume+0x3c8>
 8005ed8:	230d      	movs	r3, #13
 8005eda:	e094      	b.n	8006006 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee2:	441a      	add	r2, r3
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d103      	bne.n	8005ef8 <find_volume+0x3e4>
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	e00a      	b.n	8005f0e <find_volume+0x3fa>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	085a      	lsrs	r2, r3, #1
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	899b      	ldrh	r3, [r3, #12]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f22:	8989      	ldrh	r1, [r1, #12]
 8005f24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d201      	bcs.n	8005f30 <find_volume+0x41c>
 8005f2c:	230d      	movs	r3, #13
 8005f2e:	e06a      	b.n	8006006 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	615a      	str	r2, [r3, #20]
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d149      	bne.n	8005fe2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	3334      	adds	r3, #52	; 0x34
 8005f52:	3330      	adds	r3, #48	; 0x30
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe fb55 	bl	8004604 <ld_word>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d140      	bne.n	8005fe2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f62:	3301      	adds	r3, #1
 8005f64:	4619      	mov	r1, r3
 8005f66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f68:	f7fe fdec 	bl	8004b44 <move_window>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d137      	bne.n	8005fe2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2200      	movs	r2, #0
 8005f76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	3334      	adds	r3, #52	; 0x34
 8005f7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fb3f 	bl	8004604 <ld_word>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d127      	bne.n	8005fe2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	3334      	adds	r3, #52	; 0x34
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fb4b 	bl	8004632 <ld_dword>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <find_volume+0x4fc>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d11e      	bne.n	8005fe2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	3334      	adds	r3, #52	; 0x34
 8005fa8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe fb40 	bl	8004632 <ld_dword>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b17      	ldr	r3, [pc, #92]	; (8006014 <find_volume+0x500>)
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d113      	bne.n	8005fe2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	3334      	adds	r3, #52	; 0x34
 8005fbe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fb35 	bl	8004632 <ld_dword>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	3334      	adds	r3, #52	; 0x34
 8005fd2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fb2b 	bl	8004632 <ld_dword>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fe8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <find_volume+0x504>)
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <find_volume+0x504>)
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <find_volume+0x504>)
 8005ff8:	881a      	ldrh	r2, [r3, #0]
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ffe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006000:	f7fe fd3a 	bl	8004a78 <clear_lock>
#endif
	return FR_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3758      	adds	r7, #88	; 0x58
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	41615252 	.word	0x41615252
 8006014:	61417272 	.word	0x61417272
 8006018:	20000350 	.word	0x20000350

0800601c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006026:	2309      	movs	r3, #9
 8006028:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01c      	beq.n	800606a <validate+0x4e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d018      	beq.n	800606a <validate+0x4e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <validate+0x4e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	889a      	ldrh	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	88db      	ldrh	r3, [r3, #6]
 800604c:	429a      	cmp	r2, r3
 800604e:	d10c      	bne.n	800606a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fa36 	bl	80044c8 <disk_status>
 800605c:	4603      	mov	r3, r0
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <validate+0x4e>
			res = FR_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <validate+0x5a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	e000      	b.n	8006078 <validate+0x5c>
 8006076:	2300      	movs	r3, #0
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	6013      	str	r3, [r2, #0]
	return res;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fc9e 	bl	80059e0 <get_ldnumber>
 80060a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da01      	bge.n	80060b0 <f_mount+0x28>
 80060ac:	230b      	movs	r3, #11
 80060ae:	e02b      	b.n	8006108 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80060b0:	4a17      	ldr	r2, [pc, #92]	; (8006110 <f_mount+0x88>)
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80060c0:	69b8      	ldr	r0, [r7, #24]
 80060c2:	f7fe fcd9 	bl	8004a78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	490d      	ldr	r1, [pc, #52]	; (8006110 <f_mount+0x88>)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <f_mount+0x66>
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <f_mount+0x6a>
 80060ee:	2300      	movs	r3, #0
 80060f0:	e00a      	b.n	8006108 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80060f2:	f107 010c 	add.w	r1, r7, #12
 80060f6:	f107 0308 	add.w	r3, r7, #8
 80060fa:	2200      	movs	r2, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fd09 	bl	8005b14 <find_volume>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3720      	adds	r7, #32
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	2000034c 	.word	0x2000034c

08006114 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b098      	sub	sp, #96	; 0x60
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <f_open+0x18>
 8006128:	2309      	movs	r3, #9
 800612a:	e1ba      	b.n	80064a2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006132:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006134:	79fa      	ldrb	r2, [r7, #7]
 8006136:	f107 0110 	add.w	r1, r7, #16
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fce8 	bl	8005b14 <find_volume>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800614a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 819e 	bne.w	8006490 <f_open+0x37c>
		dj.obj.fs = fs;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fbc7 	bl	80058f4 <follow_path>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800616c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11a      	bne.n	80061aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006174:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006178:	b25b      	sxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	da03      	bge.n	8006186 <f_open+0x72>
				res = FR_INVALID_NAME;
 800617e:	2306      	movs	r3, #6
 8006180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006184:	e011      	b.n	80061aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fb28 	bl	80047f4 <chk_lock>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	f003 031c 	and.w	r3, r3, #28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d07e      	beq.n	80062b2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80061b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80061bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d10e      	bne.n	80061e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061c4:	f7fe fb70 	bl	80048a8 <enq_lock>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <f_open+0xc8>
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fac7 	bl	8005766 <dir_register>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <f_open+0xca>
 80061dc:	2312      	movs	r3, #18
 80061de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	f043 0308 	orr.w	r3, r3, #8
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	e010      	b.n	800620e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80061ec:	7ebb      	ldrb	r3, [r7, #26]
 80061ee:	f003 0311 	and.w	r3, r3, #17
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <f_open+0xea>
					res = FR_DENIED;
 80061f6:	2307      	movs	r3, #7
 80061f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061fc:	e007      	b.n	800620e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <f_open+0xfa>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800620e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006212:	2b00      	cmp	r3, #0
 8006214:	d167      	bne.n	80062e6 <f_open+0x1d2>
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d062      	beq.n	80062e6 <f_open+0x1d2>
				dw = GET_FATTIME();
 8006220:	4ba2      	ldr	r3, [pc, #648]	; (80064ac <f_open+0x398>)
 8006222:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	330e      	adds	r3, #14
 8006228:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fa3d 	bl	80046aa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006232:	3316      	adds	r3, #22
 8006234:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fa37 	bl	80046aa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	330b      	adds	r3, #11
 8006240:	2220      	movs	r2, #32
 8006242:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f9f7 	bl	800563e <ld_clust>
 8006250:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006256:	2200      	movs	r2, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fa0f 	bl	800567c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	331c      	adds	r3, #28
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe fa20 	bl	80046aa <st_dword>
					fs->wflag = 1;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2201      	movs	r2, #1
 800626e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d037      	beq.n	80062e6 <f_open+0x1d2>
						dw = fs->winsect;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	2200      	movs	r2, #0
 8006282:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ff00 	bl	800508a <remove_chain>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006294:	2b00      	cmp	r3, #0
 8006296:	d126      	bne.n	80062e6 <f_open+0x1d2>
							res = move_window(fs, dw);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fc51 	bl	8004b44 <move_window>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ac:	3a01      	subs	r2, #1
 80062ae:	611a      	str	r2, [r3, #16]
 80062b0:	e019      	b.n	80062e6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80062b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d115      	bne.n	80062e6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80062ba:	7ebb      	ldrb	r3, [r7, #26]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <f_open+0x1b8>
					res = FR_NO_FILE;
 80062c4:	2304      	movs	r3, #4
 80062c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062ca:	e00c      	b.n	80062e6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <f_open+0x1d2>
 80062d6:	7ebb      	ldrb	r3, [r7, #26]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <f_open+0x1d2>
						res = FR_DENIED;
 80062e0:	2307      	movs	r3, #7
 80062e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80062e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d128      	bne.n	8006340 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fe:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fade 	bl	80048e8 <inc_lock>
 800632c:	4602      	mov	r2, r0
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <f_open+0x22c>
 800633a:	2302      	movs	r3, #2
 800633c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 80a3 	bne.w	8006490 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634e:	4611      	mov	r1, r2
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff f974 	bl	800563e <ld_clust>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635e:	331c      	adds	r3, #28
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe f966 	bl	8004632 <ld_dword>
 8006366:	4602      	mov	r2, r0
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	88da      	ldrh	r2, [r3, #6]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	79fa      	ldrb	r2, [r7, #7]
 8006384:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3330      	adds	r3, #48	; 0x30
 800639c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe f9cc 	bl	8004740 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d06e      	beq.n	8006490 <f_open+0x37c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d06a      	beq.n	8006490 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	895b      	ldrh	r3, [r3, #10]
 80063c6:	461a      	mov	r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	899b      	ldrh	r3, [r3, #12]
 80063cc:	fb03 f302 	mul.w	r3, r3, r2
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	657b      	str	r3, [r7, #84]	; 0x54
 80063de:	e016      	b.n	800640e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fc69 	bl	8004cbc <get_fat>
 80063ea:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80063ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d802      	bhi.n	80063f8 <f_open+0x2e4>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80063f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d102      	bne.n	8006406 <f_open+0x2f2>
 8006400:	2301      	movs	r3, #1
 8006402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	657b      	str	r3, [r7, #84]	; 0x54
 800640e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <f_open+0x30a>
 8006416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641a:	429a      	cmp	r2, r3
 800641c:	d8e0      	bhi.n	80063e0 <f_open+0x2cc>
				}
				fp->clust = clst;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006422:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006428:	2b00      	cmp	r3, #0
 800642a:	d131      	bne.n	8006490 <f_open+0x37c>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	899b      	ldrh	r3, [r3, #12]
 8006430:	461a      	mov	r2, r3
 8006432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006434:	fbb3 f1f2 	udiv	r1, r3, r2
 8006438:	fb02 f201 	mul.w	r2, r2, r1
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d026      	beq.n	8006490 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fc1a 	bl	8004c80 <clust2sect>
 800644c:	6478      	str	r0, [r7, #68]	; 0x44
 800644e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <f_open+0x348>
						res = FR_INT_ERR;
 8006454:	2302      	movs	r3, #2
 8006456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800645a:	e019      	b.n	8006490 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	899b      	ldrh	r3, [r3, #12]
 8006460:	461a      	mov	r2, r3
 8006462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006464:	fbb3 f2f2 	udiv	r2, r3, r2
 8006468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	7858      	ldrb	r0, [r3, #1]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	2301      	movs	r3, #1
 8006480:	f7fe f862 	bl	8004548 <disk_read>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <f_open+0x37c>
 800648a:	2301      	movs	r3, #1
 800648c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <f_open+0x38a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800649e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3760      	adds	r7, #96	; 0x60
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	4f930000 	.word	0x4f930000

080064b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	; 0x30
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f107 0210 	add.w	r2, r7, #16
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff fda3 	bl	800601c <validate>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80064dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d107      	bne.n	80064f4 <f_write+0x44>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7d5b      	ldrb	r3, [r3, #21]
 80064e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80064ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <f_write+0x4a>
 80064f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064f8:	e16a      	b.n	80067d0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	7d1b      	ldrb	r3, [r3, #20]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <f_write+0x5a>
 8006506:	2307      	movs	r3, #7
 8006508:	e162      	b.n	80067d0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	429a      	cmp	r2, r3
 8006518:	f080 814c 	bcs.w	80067b4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	43db      	mvns	r3, r3
 8006522:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006524:	e146      	b.n	80067b4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	8992      	ldrh	r2, [r2, #12]
 800652e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006532:	fb02 f201 	mul.w	r2, r2, r1
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 80f1 	bne.w	8006720 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	8992      	ldrh	r2, [r2, #12]
 8006546:	fbb3 f3f2 	udiv	r3, r3, r2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	8952      	ldrh	r2, [r2, #10]
 800654e:	3a01      	subs	r2, #1
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d143      	bne.n	80065e2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11a      	bne.n	80065a4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fdee 	bl	8005154 <create_chain>
 8006578:	62b8      	str	r0, [r7, #40]	; 0x28
 800657a:	e013      	b.n	80065a4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	4619      	mov	r1, r3
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7fe fe7a 	bl	8005284 <clmt_clust>
 8006590:	62b8      	str	r0, [r7, #40]	; 0x28
 8006592:	e007      	b.n	80065a4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7fe fdd9 	bl	8005154 <create_chain>
 80065a2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8109 	beq.w	80067be <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d104      	bne.n	80065bc <f_write+0x10c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2202      	movs	r2, #2
 80065b6:	755a      	strb	r2, [r3, #21]
 80065b8:	2302      	movs	r3, #2
 80065ba:	e109      	b.n	80067d0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d104      	bne.n	80065ce <f_write+0x11e>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	755a      	strb	r2, [r3, #21]
 80065ca:	2301      	movs	r3, #1
 80065cc:	e100      	b.n	80067d0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <f_write+0x132>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	7d1b      	ldrb	r3, [r3, #20]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da18      	bge.n	800661e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	7858      	ldrb	r0, [r3, #1]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	2301      	movs	r3, #1
 80065fc:	f7fd ffc4 	bl	8004588 <disk_write>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <f_write+0x160>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	755a      	strb	r2, [r3, #21]
 800660c:	2301      	movs	r3, #1
 800660e:	e0df      	b.n	80067d0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	7d1b      	ldrb	r3, [r3, #20]
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fe fb2a 	bl	8004c80 <clust2sect>
 800662c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <f_write+0x18e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2202      	movs	r2, #2
 8006638:	755a      	strb	r2, [r3, #21]
 800663a:	2302      	movs	r3, #2
 800663c:	e0c8      	b.n	80067d0 <f_write+0x320>
			sect += csect;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	4413      	add	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	899b      	ldrh	r3, [r3, #12]
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006652:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d043      	beq.n	80066e2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	4413      	add	r3, r2
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	8952      	ldrh	r2, [r2, #10]
 8006664:	4293      	cmp	r3, r2
 8006666:	d905      	bls.n	8006674 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	895b      	ldrh	r3, [r3, #10]
 800666c:	461a      	mov	r2, r3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	7858      	ldrb	r0, [r3, #1]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	69f9      	ldr	r1, [r7, #28]
 800667e:	f7fd ff83 	bl	8004588 <disk_write>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <f_write+0x1e2>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	755a      	strb	r2, [r3, #21]
 800668e:	2301      	movs	r3, #1
 8006690:	e09e      	b.n	80067d0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	429a      	cmp	r2, r3
 800669e:	d918      	bls.n	80066d2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	8992      	ldrh	r2, [r2, #12]
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	18d1      	adds	r1, r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	899b      	ldrh	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	f7fe f81e 	bl	8004700 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
 80066c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	899b      	ldrh	r3, [r3, #12]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80066e0:	e04b      	b.n	800677a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d016      	beq.n	800671a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	699a      	ldr	r2, [r3, #24]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d210      	bcs.n	800671a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	7858      	ldrb	r0, [r3, #1]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006702:	2301      	movs	r3, #1
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	f7fd ff1f 	bl	8004548 <disk_read>
 800670a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	755a      	strb	r2, [r3, #21]
 8006716:	2301      	movs	r3, #1
 8006718:	e05a      	b.n	80067d0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	899b      	ldrh	r3, [r3, #12]
 8006724:	4618      	mov	r0, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	8992      	ldrh	r2, [r2, #12]
 800672e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006732:	fb02 f201 	mul.w	r2, r2, r1
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	1ac3      	subs	r3, r0, r3
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d901      	bls.n	8006748 <f_write+0x298>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	8992      	ldrh	r2, [r2, #12]
 8006756:	fbb3 f0f2 	udiv	r0, r3, r2
 800675a:	fb02 f200 	mul.w	r2, r2, r0
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	440b      	add	r3, r1
 8006762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006764:	69f9      	ldr	r1, [r7, #28]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd ffca 	bl	8004700 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7d1b      	ldrb	r3, [r3, #20]
 8006770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	4413      	add	r3, r2
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	429a      	cmp	r2, r3
 8006798:	bf38      	it	cc
 800679a:	461a      	movcc	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	441a      	add	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f47f aeb5 	bne.w	8006526 <f_write+0x76>
 80067bc:	e000      	b.n	80067c0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7d1b      	ldrb	r3, [r3, #20]
 80067c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3730      	adds	r7, #48	; 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fc17 	bl	800601c <validate>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d167      	bne.n	80068c8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7d1b      	ldrb	r3, [r3, #20]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d061      	beq.n	80068c8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7d1b      	ldrb	r3, [r3, #20]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	da15      	bge.n	800683a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	7858      	ldrb	r0, [r3, #1]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	2301      	movs	r3, #1
 800681e:	f7fd feb3 	bl	8004588 <disk_write>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <f_sync+0x54>
 8006828:	2301      	movs	r3, #1
 800682a:	e04e      	b.n	80068ca <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7d1b      	ldrb	r3, [r3, #20]
 8006830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006834:	b2da      	uxtb	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800683a:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <f_sync+0xfc>)
 800683c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fe f97c 	bl	8004b44 <move_window>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d138      	bne.n	80068c8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	330b      	adds	r3, #11
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	330b      	adds	r3, #11
 8006866:	f042 0220 	orr.w	r2, r2, #32
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	461a      	mov	r2, r3
 8006878:	68f9      	ldr	r1, [r7, #12]
 800687a:	f7fe feff 	bl	800567c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f103 021c 	add.w	r2, r3, #28
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fd ff0d 	bl	80046aa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3316      	adds	r3, #22
 8006894:	6939      	ldr	r1, [r7, #16]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd ff07 	bl	80046aa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3312      	adds	r3, #18
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fd fee7 	bl	8004676 <st_word>
					fs->wflag = 1;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2201      	movs	r2, #1
 80068ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f975 	bl	8004ba0 <sync_fs>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7d1b      	ldrb	r3, [r3, #20]
 80068be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	4f930000 	.word	0x4f930000

080068d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff79 	bl	80067d8 <f_sync>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d118      	bne.n	8006922 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f107 0208 	add.w	r2, r7, #8
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fb8f 	bl	800601c <validate>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe f879 	bl	8004a04 <dec_lock>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006942:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 8006944:	7a5b      	ldrb	r3, [r3, #9]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d131      	bne.n	80069b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800694c:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 800694e:	7a5b      	ldrb	r3, [r3, #9]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800695a:	4b18      	ldr	r3, [pc, #96]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 800695c:	7a5b      	ldrb	r3, [r3, #9]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4a16      	ldr	r2, [pc, #88]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800696a:	4b14      	ldr	r3, [pc, #80]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 800696c:	7a5b      	ldrb	r3, [r3, #9]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 8006974:	4413      	add	r3, r2
 8006976:	79fa      	ldrb	r2, [r7, #7]
 8006978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 800697c:	7a5b      	ldrb	r3, [r3, #9]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	b2d1      	uxtb	r1, r2
 8006984:	4a0d      	ldr	r2, [pc, #52]	; (80069bc <FATFS_LinkDriverEx+0x90>)
 8006986:	7251      	strb	r1, [r2, #9]
 8006988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800698a:	7dbb      	ldrb	r3, [r7, #22]
 800698c:	3330      	adds	r3, #48	; 0x30
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3301      	adds	r3, #1
 8006998:	223a      	movs	r2, #58	; 0x3a
 800699a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3302      	adds	r3, #2
 80069a0:	222f      	movs	r2, #47	; 0x2f
 80069a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3303      	adds	r3, #3
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	20000374 	.word	0x20000374

080069c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069ca:	2200      	movs	r2, #0
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ffac 	bl	800692c <FATFS_LinkDriverEx>
 80069d4:	4603      	mov	r3, r0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	2500      	movs	r5, #0
 80069e4:	4e0c      	ldr	r6, [pc, #48]	; (8006a18 <__libc_init_array+0x38>)
 80069e6:	4c0d      	ldr	r4, [pc, #52]	; (8006a1c <__libc_init_array+0x3c>)
 80069e8:	1ba4      	subs	r4, r4, r6
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	f000 f82e 	bl	8006a50 <_init>
 80069f4:	2500      	movs	r5, #0
 80069f6:	4e0a      	ldr	r6, [pc, #40]	; (8006a20 <__libc_init_array+0x40>)
 80069f8:	4c0a      	ldr	r4, [pc, #40]	; (8006a24 <__libc_init_array+0x44>)
 80069fa:	1ba4      	subs	r4, r4, r6
 80069fc:	10a4      	asrs	r4, r4, #2
 80069fe:	42a5      	cmp	r5, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a08:	4798      	blx	r3
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a12:	4798      	blx	r3
 8006a14:	3501      	adds	r5, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	08006b68 	.word	0x08006b68
 8006a1c:	08006b68 	.word	0x08006b68
 8006a20:	08006b68 	.word	0x08006b68
 8006a24:	08006b6c 	.word	0x08006b6c

08006a28 <memcpy>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	1e43      	subs	r3, r0, #1
 8006a2c:	440a      	add	r2, r1
 8006a2e:	4291      	cmp	r1, r2
 8006a30:	d100      	bne.n	8006a34 <memcpy+0xc>
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a3c:	e7f7      	b.n	8006a2e <memcpy+0x6>

08006a3e <memset>:
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4402      	add	r2, r0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d100      	bne.n	8006a48 <memset+0xa>
 8006a46:	4770      	bx	lr
 8006a48:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4c:	e7f9      	b.n	8006a42 <memset+0x4>
	...

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
