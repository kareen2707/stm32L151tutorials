
yetimote_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002800  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002960  08002960  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002960  08002960  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002960  08002960  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000018  08002980  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002980  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e13  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013ad  00000000  00000000  00026e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  00028948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001583f  00000000  00000000  00029000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061e1  00000000  00000000  0003e83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008768c  00000000  00000000  00044a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc0ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  000cc128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	08002924 	.word	0x08002924

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	08002924 	.word	0x08002924

0800017c <test_I2C1_temp_sens>:
	  //tx_done = 0;
	  HAL_I2C_Master_Transmit(&hi2c2, dev_addr, tx_buffer, 2, 100);
	  //while(!tx_done);
 }

void test_I2C1_temp_sens(){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af02      	add	r7, sp, #8

	  HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &pointer_reg[1], 1, 100); //Addressing the pointer register to the configuration one
 8000182:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <test_I2C1_temp_sens+0x54>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	b299      	uxth	r1, r3
 8000188:	2364      	movs	r3, #100	; 0x64
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	2301      	movs	r3, #1
 800018e:	4a11      	ldr	r2, [pc, #68]	; (80001d4 <test_I2C1_temp_sens+0x58>)
 8000190:	4811      	ldr	r0, [pc, #68]	; (80001d8 <test_I2C1_temp_sens+0x5c>)
 8000192:	f001 f835 	bl	8001200 <HAL_I2C_Master_Transmit>
	  HAL_Delay(5);
 8000196:	2005      	movs	r0, #5
 8000198:	f000 fb10 	bl	80007bc <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, dev_addr, conf_packet, 2, 100); //Setting the configuration register
 800019c:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <test_I2C1_temp_sens+0x54>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	b299      	uxth	r1, r3
 80001a2:	2364      	movs	r3, #100	; 0x64
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2302      	movs	r3, #2
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <test_I2C1_temp_sens+0x60>)
 80001aa:	480b      	ldr	r0, [pc, #44]	; (80001d8 <test_I2C1_temp_sens+0x5c>)
 80001ac:	f001 f828 	bl	8001200 <HAL_I2C_Master_Transmit>
	  HAL_Delay(5);
 80001b0:	2005      	movs	r0, #5
 80001b2:	f000 fb03 	bl	80007bc <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &pointer_reg[0], 1, 100); //Addressing the pointer register to the temperature one
 80001b6:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <test_I2C1_temp_sens+0x54>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	b299      	uxth	r1, r3
 80001bc:	2364      	movs	r3, #100	; 0x64
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2301      	movs	r3, #1
 80001c2:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <test_I2C1_temp_sens+0x64>)
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <test_I2C1_temp_sens+0x5c>)
 80001c6:	f001 f81b 	bl	8001200 <HAL_I2C_Master_Transmit>
	  //HAL_Delay(5);
	  //HAL_I2C_Master_Receive(&hi2c1, dev_addr, temp_read, 2, 100);
  }
 80001ca:	bf00      	nop
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000005 	.word	0x20000005
 80001d8:	20000038 	.word	0x20000038
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fa78 	bl	80006de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f81f 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8e5 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001f6:	f000 f8c5 	bl	8000384 <MX_DMA_Init>
  MX_I2C1_Init();
 80001fa:	f000 f867 	bl	80002cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80001fe:	f000 f893 	bl	8000328 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  test_I2C1_temp_sens();
 8000202:	f7ff ffbb 	bl	800017c <test_I2C1_temp_sens>

    /* USER CODE BEGIN 3 */
	  //test_I2C2_DMA();
	  //HAL_Delay(5);
	  //test_I2C1_temp_sens();
	  HAL_I2C_Master_Receive(&hi2c1, dev_addr, temp_read, 2, 100); //Read temperature
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <main+0x40>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	b299      	uxth	r1, r3
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2302      	movs	r3, #2
 8000212:	4a05      	ldr	r2, [pc, #20]	; (8000228 <main+0x44>)
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <main+0x48>)
 8000216:	f001 f8f1 	bl	80013fc <HAL_I2C_Master_Receive>
	 // HAL_I2C_Master_Receive(&hi2c1, dev_addr, temp_read, 1, 100); //Read configuration
	  HAL_Delay(5);
 800021a:	2005      	movs	r0, #5
 800021c:	f000 face 	bl	80007bc <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, dev_addr, temp_read, 2, 100); //Read temperature
 8000220:	e7f1      	b.n	8000206 <main+0x22>
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000
 8000228:	20000034 	.word	0x20000034
 800022c:	20000038 	.word	0x20000038

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b092      	sub	sp, #72	; 0x48
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	2234      	movs	r2, #52	; 0x34
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fb68 	bl	8002914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <SystemClock_Config+0x98>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800025a:	4a1b      	ldr	r2, [pc, #108]	; (80002c8 <SystemClock_Config+0x98>)
 800025c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000260:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000262:	2302      	movs	r3, #2
 8000264:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026a:	2310      	movs	r3, #16
 800026c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000276:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800027a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800027c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fde6 	bl	8001e58 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 f8c5 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2303      	movs	r3, #3
 800029c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 f902 	bl	80024b8 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ba:	f000 f8b1 	bl	8000420 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3748      	adds	r7, #72	; 0x48
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40007000 	.word	0x40007000

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_I2C1_Init+0x50>)
 800030a:	f000 fe51 	bl	8000fb0 <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f884 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000038 	.word	0x20000038
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C2_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <MX_I2C2_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_I2C2_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_I2C2_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C2_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C2_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_I2C2_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C2_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_I2C2_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C2_Init+0x50>)
 8000366:	f000 fe23 	bl	8000fb0 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f856 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000008c 	.word	0x2000008c
 800037c:	40005800 	.word	0x40005800
 8000380:	000186a0 	.word	0x000186a0

08000384 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_DMA_Init+0x38>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <MX_DMA_Init+0x38>)
 8000390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_DMA_Init+0x38>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	200e      	movs	r0, #14
 80003a8:	f000 fb01 	bl	80009ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003ac:	200e      	movs	r0, #14
 80003ae:	f000 fb1a 	bl	80009e6 <HAL_NVIC_EnableIRQ>

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MX_GPIO_Init+0x58>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <MX_GPIO_Init+0x58>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	61d3      	str	r3, [r2, #28]
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <MX_GPIO_Init+0x58>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	f003 0302 	and.w	r3, r3, #2
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2130      	movs	r1, #48	; 0x30
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <MX_GPIO_Init+0x5c>)
 80003f2:	f000 fdc5 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 80003f6:	2330      	movs	r3, #48	; 0x30
 80003f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_GPIO_Init+0x5c>)
 800040c:	f000 fc2a 	bl	8000c64 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40023800 	.word	0x40023800
 800041c:	40020400 	.word	0x40020400

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_MspInit+0x58>)
 8000434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000436:	4a13      	ldr	r2, [pc, #76]	; (8000484 <HAL_MspInit+0x58>)
 8000438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800043c:	6253      	str	r3, [r2, #36]	; 0x24
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <HAL_MspInit+0x58>)
 8000440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <HAL_MspInit+0x58>)
 800044c:	6a1b      	ldr	r3, [r3, #32]
 800044e:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <HAL_MspInit+0x58>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6213      	str	r3, [r2, #32]
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <HAL_MspInit+0x58>)
 8000458:	6a1b      	ldr	r3, [r3, #32]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_MspInit+0x58>)
 8000464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_MspInit+0x58>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	6253      	str	r3, [r2, #36]	; 0x24
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_MspInit+0x58>)
 8000470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800

08000488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08c      	sub	sp, #48	; 0x30
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 031c 	add.w	r3, r7, #28
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a41      	ldr	r2, [pc, #260]	; (80005ac <HAL_I2C_MspInit+0x124>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d128      	bne.n	80004fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a40      	ldr	r2, [pc, #256]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004b0:	f043 0302 	orr.w	r3, r3, #2
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b3e      	ldr	r3, [pc, #248]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	61bb      	str	r3, [r7, #24]
 80004c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = S_SCL_T_Pin|S_SDA_T_Pin;
 80004c2:	23c0      	movs	r3, #192	; 0xc0
 80004c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c6:	2312      	movs	r3, #18
 80004c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ce:	2303      	movs	r3, #3
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004d2:	2304      	movs	r3, #4
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	4619      	mov	r1, r3
 80004dc:	4835      	ldr	r0, [pc, #212]	; (80005b4 <HAL_I2C_MspInit+0x12c>)
 80004de:	f000 fbc1 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e6:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6253      	str	r3, [r2, #36]	; 0x24
 80004ee:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 80004f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80004fa:	e053      	b.n	80005a4 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a2d      	ldr	r2, [pc, #180]	; (80005b8 <HAL_I2C_MspInit+0x130>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d14e      	bne.n	80005a4 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_Ex_Pin|SDA_Ex_Pin;
 800051e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000524:	2312      	movs	r3, #18
 8000526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000528:	2301      	movs	r3, #1
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000530:	2304      	movs	r3, #4
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	481e      	ldr	r0, [pc, #120]	; (80005b4 <HAL_I2C_MspInit+0x12c>)
 800053c:	f000 fb92 	bl	8000c64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 8000542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 8000546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800054a:	6253      	str	r3, [r2, #36]	; 0x24
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_I2C_MspInit+0x128>)
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_I2C_MspInit+0x134>)
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <HAL_I2C_MspInit+0x138>)
 800055c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_I2C_MspInit+0x134>)
 8000560:	2210      	movs	r2, #16
 8000562:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_I2C_MspInit+0x134>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_I2C_MspInit+0x134>)
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_I2C_MspInit+0x134>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_I2C_MspInit+0x134>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_I2C_MspInit+0x134>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_I2C_MspInit+0x134>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <HAL_I2C_MspInit+0x134>)
 800058a:	f000 fa47 	bl	8000a1c <HAL_DMA_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <HAL_I2C_MspInit+0x110>
      Error_Handler();
 8000594:	f7ff ff44 	bl	8000420 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_I2C_MspInit+0x134>)
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_I2C_MspInit+0x134>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005a4:	bf00      	nop
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40005400 	.word	0x40005400
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40020400 	.word	0x40020400
 80005b8:	40005800 	.word	0x40005800
 80005bc:	200000e0 	.word	0x200000e0
 80005c0:	40026044 	.word	0x40026044

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <HardFault_Handler+0x4>

080005d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <BusFault_Handler+0x4>

080005e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <UsageFault_Handler+0x4>

080005e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f8b8 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <DMA1_Channel4_IRQHandler+0x10>)
 800061e:	f000 fa71 	bl	8000b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000e0 	.word	0x200000e0

0800062c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <SystemInit+0x5c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <SystemInit+0x5c>)
 8000636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <SystemInit+0x5c>)
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	4911      	ldr	r1, [pc, #68]	; (8000688 <SystemInit+0x5c>)
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <SystemInit+0x60>)
 8000644:	4013      	ands	r3, r2
 8000646:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <SystemInit+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <SystemInit+0x5c>)
 800064e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000652:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000656:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <SystemInit+0x5c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <SystemInit+0x5c>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SystemInit+0x5c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemInit+0x5c>)
 800066a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800066e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SystemInit+0x5c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x64>)
 8000678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800067c:	609a      	str	r2, [r3, #8]
#endif
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	88ffc00c 	.word	0x88ffc00c
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffb7 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f002 f905 	bl	80028cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd8f 	bl	80001e4 <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r3, =_sidata
 80006c8:	08002968 	.word	0x08002968
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d0:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 80006d4:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 80006d8:	20000128 	.word	0x20000128

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>

080006de <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f955 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f80e 	bl	8000710 <HAL_InitTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e001      	b.n	8000704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000700:	f7ff fe94 	bl	800042c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_InitTick+0x68>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d022      	beq.n	800076a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_InitTick+0x6c>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <HAL_InitTick+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000730:	fbb1 f3f3 	udiv	r3, r1, r3
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f962 	bl	8000a02 <HAL_SYSTICK_Config>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10f      	bne.n	8000764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b0f      	cmp	r3, #15
 8000748:	d809      	bhi.n	800075e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	2200      	movs	r2, #0
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	f04f 30ff 	mov.w	r0, #4294967295
 8000752:	f000 f92c 	bl	80009ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_InitTick+0x70>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e007      	b.n	800076e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e004      	b.n	800076e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e001      	b.n	800076e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000014 	.word	0x20000014
 800077c:	2000000c 	.word	0x2000000c
 8000780:	20000010 	.word	0x20000010

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4413      	add	r3, r2
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x1c>)
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000124 	.word	0x20000124
 80007a4:	20000014 	.word	0x20000014

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000124 	.word	0x20000124

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d004      	beq.n	80007e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007e0:	bf00      	nop
 80007e2:	f7ff ffe1 	bl	80007a8 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f7      	bhi.n	80007e2 <HAL_Delay+0x26>
  {
  }
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000014 	.word	0x20000014

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <__NVIC_EnableIRQ+0x34>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff90 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff2d 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff42 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff90 	bl	80008f0 <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5f 	bl	800089c <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff35 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffa2 	bl	8000954 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e059      	b.n	8000ae2 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_DMA_Init+0xd0>)
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d80f      	bhi.n	8000a5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <HAL_DMA_Init+0xd4>)
 8000a42:	4413      	add	r3, r2
 8000a44:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <HAL_DMA_Init+0xd8>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	009a      	lsls	r2, r3, #2
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <HAL_DMA_Init+0xdc>)
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a58:	e00e      	b.n	8000a78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_DMA_Init+0xe0>)
 8000a62:	4413      	add	r3, r2
 8000a64:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <HAL_DMA_Init+0xd8>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	009a      	lsls	r2, r3, #2
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <HAL_DMA_Init+0xe4>)
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40026407 	.word	0x40026407
 8000af0:	bffd9ff8 	.word	0xbffd9ff8
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	40026000 	.word	0x40026000
 8000afc:	bffd9bf8 	.word	0xbffd9bf8
 8000b00:	40026400 	.word	0x40026400

08000b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 031c 	and.w	r3, r3, #28
 8000b24:	2204      	movs	r2, #4
 8000b26:	409a      	lsls	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d026      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x7a>
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d021      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d107      	bne.n	8000b58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 0204 	bic.w	r2, r2, #4
 8000b56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 021c 	and.w	r2, r3, #28
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b64:	2104      	movs	r1, #4
 8000b66:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d071      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000b7c:	e06c      	b.n	8000c58 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 031c 	and.w	r3, r3, #28
 8000b86:	2202      	movs	r2, #2
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d02e      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0xec>
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d029      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 020a 	bic.w	r2, r2, #10
 8000bb8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 021c 	and.w	r2, r3, #28
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	2102      	movs	r1, #2
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d038      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000bee:	e033      	b.n	8000c58 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 031c 	and.w	r3, r3, #28
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d02a      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x156>
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d025      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 020e 	bic.w	r2, r2, #14
 8000c1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 021c 	and.w	r2, r3, #28
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
}
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c7a:	e160      	b.n	8000f3e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8152 	beq.w	8000f38 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b12      	cmp	r3, #18
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	6939      	ldr	r1, [r7, #16]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d00b      	beq.n	8000d40 <HAL_GPIO_Init+0xdc>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	2b11      	cmp	r3, #17
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b12      	cmp	r3, #18
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 0201 	and.w	r2, r3, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80ac 	beq.w	8000f38 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a5c      	ldr	r2, [pc, #368]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6213      	str	r3, [r2, #32]
 8000dec:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000df8:	4a58      	ldr	r2, [pc, #352]	; (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a50      	ldr	r2, [pc, #320]	; (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d025      	beq.n	8000e70 <HAL_GPIO_Init+0x20c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d01f      	beq.n	8000e6c <HAL_GPIO_Init+0x208>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4e      	ldr	r2, [pc, #312]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d019      	beq.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_GPIO_Init+0x308>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d013      	beq.n	8000e64 <HAL_GPIO_Init+0x200>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x30c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00d      	beq.n	8000e60 <HAL_GPIO_Init+0x1fc>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_GPIO_Init+0x310>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x1f8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x314>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_GPIO_Init+0x1f4>
 8000e54:	2306      	movs	r3, #6
 8000e56:	e00c      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e58:	2307      	movs	r3, #7
 8000e5a:	e00a      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e008      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e004      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e70:	2300      	movs	r3, #0
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e82:	4936      	ldr	r1, [pc, #216]	; (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f ae97 	bne.w	8000c7c <HAL_GPIO_Init+0x18>
  } 
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e10f      	b.n	80011e2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fa56 	bl	8000488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ff4:	f001 fbf6 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8000ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a7b      	ldr	r2, [pc, #492]	; (80011ec <HAL_I2C_Init+0x23c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d807      	bhi.n	8001014 <HAL_I2C_Init+0x64>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_I2C_Init+0x240>)
 8001008:	4293      	cmp	r3, r2
 800100a:	bf94      	ite	ls
 800100c:	2301      	movls	r3, #1
 800100e:	2300      	movhi	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	e006      	b.n	8001022 <HAL_I2C_Init+0x72>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <HAL_I2C_Init+0x244>)
 8001018:	4293      	cmp	r3, r2
 800101a:	bf94      	ite	ls
 800101c:	2301      	movls	r3, #1
 800101e:	2300      	movhi	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0db      	b.n	80011e2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <HAL_I2C_Init+0x248>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9b      	lsrs	r3, r3, #18
 8001034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	430a      	orrs	r2, r1
 8001048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a64      	ldr	r2, [pc, #400]	; (80011ec <HAL_I2C_Init+0x23c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d802      	bhi.n	8001064 <HAL_I2C_Init+0xb4>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	e009      	b.n	8001078 <HAL_I2C_Init+0xc8>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a63      	ldr	r2, [pc, #396]	; (80011fc <HAL_I2C_Init+0x24c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	3301      	adds	r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	430b      	orrs	r3, r1
 800107e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800108a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4956      	ldr	r1, [pc, #344]	; (80011ec <HAL_I2C_Init+0x23c>)
 8001094:	428b      	cmp	r3, r1
 8001096:	d80d      	bhi.n	80010b4 <HAL_I2C_Init+0x104>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1e59      	subs	r1, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	bf38      	it	cc
 80010b0:	2304      	movcc	r3, #4
 80010b2:	e04f      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d111      	bne.n	80010e0 <HAL_I2C_Init+0x130>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1e58      	subs	r0, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e012      	b.n	8001106 <HAL_I2C_Init+0x156>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e58      	subs	r0, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	0099      	lsls	r1, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_Init+0x15e>
 800110a:	2301      	movs	r3, #1
 800110c:	e022      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10e      	bne.n	8001134 <HAL_I2C_Init+0x184>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1e58      	subs	r0, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	440b      	add	r3, r1
 8001124:	fbb0 f3f3 	udiv	r3, r0, r3
 8001128:	3301      	adds	r3, #1
 800112a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	e00f      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e58      	subs	r0, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	fbb0 f3f3 	udiv	r3, r0, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	6809      	ldr	r1, [r1, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69da      	ldr	r2, [r3, #28]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6911      	ldr	r1, [r2, #16]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68d2      	ldr	r2, [r2, #12]
 800118e:	4311      	orrs	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	430b      	orrs	r3, r1
 8001196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	000186a0 	.word	0x000186a0
 80011f0:	001e847f 	.word	0x001e847f
 80011f4:	003d08ff 	.word	0x003d08ff
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	461a      	mov	r2, r3
 800120c:	460b      	mov	r3, r1
 800120e:	817b      	strh	r3, [r7, #10]
 8001210:	4613      	mov	r3, r2
 8001212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fac8 	bl	80007a8 <HAL_GetTick>
 8001218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b20      	cmp	r3, #32
 8001224:	f040 80e0 	bne.w	80013e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2319      	movs	r3, #25
 800122e:	2201      	movs	r2, #1
 8001230:	4970      	ldr	r1, [pc, #448]	; (80013f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fc34 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800123e:	2302      	movs	r3, #2
 8001240:	e0d3      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_I2C_Master_Transmit+0x50>
 800124c:	2302      	movs	r3, #2
 800124e:	e0cc      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d007      	beq.n	8001276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2221      	movs	r2, #33	; 0x21
 800128a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2210      	movs	r2, #16
 8001292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	893a      	ldrh	r2, [r7, #8]
 80012a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012b8:	8979      	ldrh	r1, [r7, #10]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 fac2 	bl	8001848 <I2C_MasterRequestWrite>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e08d      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012e4:	e066      	b.n	80013b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	6a39      	ldr	r1, [r7, #32]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fcae 	bl	8001c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d107      	bne.n	800130e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06b      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132c:	b29b      	uxth	r3, r3
 800132e:	3b01      	subs	r3, #1
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d11b      	bne.n	8001388 <HAL_I2C_Master_Transmit+0x188>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d017      	beq.n	8001388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	6a39      	ldr	r1, [r7, #32]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fc9e 	bl	8001cce <I2C_WaitOnBTFFlagUntilTimeout>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00d      	beq.n	80013b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b04      	cmp	r3, #4
 800139e:	d107      	bne.n	80013b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e01a      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d194      	bne.n	80012e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e000      	b.n	80013ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013e8:	2302      	movs	r3, #2
  }
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	00100002 	.word	0x00100002
 80013f8:	ffff0000 	.word	0xffff0000

080013fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	817b      	strh	r3, [r7, #10]
 800140c:	4613      	mov	r3, r2
 800140e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff f9ca 	bl	80007a8 <HAL_GetTick>
 8001414:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b20      	cmp	r3, #32
 8001420:	f040 820b 	bne.w	800183a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2319      	movs	r3, #25
 800142a:	2201      	movs	r2, #1
 800142c:	497c      	ldr	r1, [pc, #496]	; (8001620 <HAL_I2C_Master_Receive+0x224>)
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fb36 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800143a:	2302      	movs	r3, #2
 800143c:	e1fe      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_I2C_Master_Receive+0x50>
 8001448:	2302      	movs	r3, #2
 800144a:	e1f7      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d007      	beq.n	8001472 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2222      	movs	r2, #34	; 0x22
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2210      	movs	r2, #16
 800148e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	893a      	ldrh	r2, [r7, #8]
 80014a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <HAL_I2C_Master_Receive+0x228>)
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014b4:	8979      	ldrh	r1, [r7, #10]
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fa3a 	bl	8001934 <I2C_MasterRequestRead>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1b8      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d113      	bne.n	80014fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	623b      	str	r3, [r7, #32]
 80014e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e18c      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d11b      	bne.n	800153a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e16c      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153e:	2b02      	cmp	r3, #2
 8001540:	d11b      	bne.n	800157a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001550:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	e14c      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80015a0:	e138      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	f200 80f1 	bhi.w	800178e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d123      	bne.n	80015fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fbc9 	bl	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e139      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015fa:	e10b      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001600:	2b02      	cmp	r3, #2
 8001602:	d14e      	bne.n	80016a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <HAL_I2C_Master_Receive+0x22c>)
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fa46 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e10e      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
 800161e:	bf00      	nop
 8001620:	00100002 	.word	0x00100002
 8001624:	ffff0000 	.word	0xffff0000
 8001628:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016a0:	e0b8      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	2200      	movs	r2, #0
 80016aa:	4966      	ldr	r1, [pc, #408]	; (8001844 <HAL_I2C_Master_Receive+0x448>)
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f9f7 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0bf      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	2200      	movs	r2, #0
 8001706:	494f      	ldr	r1, [pc, #316]	; (8001844 <HAL_I2C_Master_Receive+0x448>)
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f9c9 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e091      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800178c:	e042      	b.n	8001814 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fadc 	bl	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e04c      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d118      	bne.n	8001814 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	f47f aec2 	bne.w	80015a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800183a:	2302      	movs	r3, #2
  }
}
 800183c:	4618      	mov	r0, r3
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	00010004 	.word	0x00010004

08001848 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d006      	beq.n	8001872 <I2C_MasterRequestWrite+0x2a>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d003      	beq.n	8001872 <I2C_MasterRequestWrite+0x2a>
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001870:	d108      	bne.n	8001884 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00b      	b.n	800189c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	2b12      	cmp	r3, #18
 800188a:	d107      	bne.n	800189c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f8f9 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e035      	b.n	8001924 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c0:	d108      	bne.n	80018d4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	e01b      	b.n	800190c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	11db      	asrs	r3, r3, #7
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f003 0306 	and.w	r3, r3, #6
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f063 030f 	orn	r3, r3, #15
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <I2C_MasterRequestWrite+0xe4>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f92b 	bl	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e010      	b.n	8001924 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001902:	897b      	ldrh	r3, [r7, #10]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <I2C_MasterRequestWrite+0xe8>)
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f91b 	bl	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	00010008 	.word	0x00010008
 8001930:	00010002 	.word	0x00010002

08001934 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	460b      	mov	r3, r1
 8001942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d006      	beq.n	800196e <I2C_MasterRequestRead+0x3a>
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d003      	beq.n	800196e <I2C_MasterRequestRead+0x3a>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800196c:	d108      	bne.n	8001980 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e00b      	b.n	8001998 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	2b11      	cmp	r3, #17
 8001986:	d107      	bne.n	8001998 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f87b 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e06d      	b.n	8001a90 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019bc:	d108      	bne.n	80019d0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	e053      	b.n	8001a78 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	11db      	asrs	r3, r3, #7
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f063 030f 	orn	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	492a      	ldr	r1, [pc, #168]	; (8001a98 <I2C_MasterRequestRead+0x164>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8ad 	bl	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e048      	b.n	8001a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <I2C_MasterRequestRead+0x168>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f89d 	bl	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e038      	b.n	8001a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f825 	bl	8001aa0 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e017      	b.n	8001a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	11db      	asrs	r3, r3, #7
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f003 0306 	and.w	r3, r3, #6
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f063 030e 	orn	r3, r3, #14
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <I2C_MasterRequestRead+0x168>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f865 	bl	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	00010008 	.word	0x00010008
 8001a9c:	00010002 	.word	0x00010002

08001aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab0:	e025      	b.n	8001afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d021      	beq.n	8001afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7fe fe75 	bl	80007a8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d116      	bne.n	8001afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e023      	b.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10d      	bne.n	8001b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	e00c      	b.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d0b6      	beq.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5c:	e051      	b.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6c:	d123      	bne.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f043 0204 	orr.w	r2, r3, #4
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e046      	b.n	8001c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d021      	beq.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7fe fdf3 	bl	80007a8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d116      	bne.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e020      	b.n	8001c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e00b      	b.n	8001c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4013      	ands	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d18d      	bne.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c58:	e02d      	b.n	8001cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8ce 	bl	8001dfc <I2C_IsAcknowledgeFailed>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e02d      	b.n	8001cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d021      	beq.n	8001cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7fe fd99 	bl	80007a8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d116      	bne.n	8001cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f043 0220 	orr.w	r2, r3, #32
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d1ca      	bne.n	8001c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cda:	e02d      	b.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f88d 	bl	8001dfc <I2C_IsAcknowledgeFailed>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e02d      	b.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d021      	beq.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf4:	f7fe fd58 	bl	80007a8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d302      	bcc.n	8001d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e007      	b.n	8001d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d1ca      	bne.n	8001cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d5c:	e042      	b.n	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d119      	bne.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0210 	mvn.w	r2, #16
 8001d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e029      	b.n	8001df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da0:	f7fe fd02 	bl	80007a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d302      	bcc.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e007      	b.n	8001df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d1b5      	bne.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d11b      	bne.n	8001e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f043 0204 	orr.w	r2, r3, #4
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e31d      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d006      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d10f      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b87      	ldr	r3, [pc, #540]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06a      	beq.n	8001f80 <HAL_RCC_OscConfig+0x128>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d166      	bne.n	8001f80 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e2f7      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x74>
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e02d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x96>
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0xd0>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xb8>
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd0>
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fc3a 	bl	80007a8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe fc36 	bl	80007a8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2ad      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fc26 	bl	80007a8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7fe fc22 	bl	80007a8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e299      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f72:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x108>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d05a      	beq.n	8002044 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d119      	bne.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d116      	bne.n	8001fce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x160>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e276      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	493d      	ldr	r1, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fcc:	e03a      	b.n	8002044 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0x268>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fbe4 	bl	80007a8 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fbe0 	bl	80007a8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e257      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	492a      	ldr	r1, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
 8002016:	e015      	b.n	8002044 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_OscConfig+0x268>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7fe fbc3 	bl	80007a8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7fe fbbf 	bl	80007a8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e236      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b8 	beq.w	80021c2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d170      	bne.n	800213a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x218>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e21a      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800207c:	429a      	cmp	r2, r3
 800207e:	d921      	bls.n	80020c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fbc1 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e208      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4906      	ldr	r1, [pc, #24]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	4901      	ldr	r1, [pc, #4]	; (80020bc <HAL_RCC_OscConfig+0x264>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	e020      	b.n	80020fe <HAL_RCC_OscConfig+0x2a6>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c4:	4ba4      	ldr	r3, [pc, #656]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	49a1      	ldr	r1, [pc, #644]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	499c      	ldr	r1, [pc, #624]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fb8c 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1d3      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	0b5b      	lsrs	r3, r3, #13
 8002104:	3301      	adds	r3, #1
 8002106:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800210e:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002110:	6892      	ldr	r2, [r2, #8]
 8002112:	0912      	lsrs	r2, r2, #4
 8002114:	f002 020f 	and.w	r2, r2, #15
 8002118:	4990      	ldr	r1, [pc, #576]	; (800235c <HAL_RCC_OscConfig+0x504>)
 800211a:	5c8a      	ldrb	r2, [r1, r2]
 800211c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800211e:	4a90      	ldr	r2, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0x508>)
 8002120:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002122:	4b90      	ldr	r3, [pc, #576]	; (8002364 <HAL_RCC_OscConfig+0x50c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe faf2 	bl	8000710 <HAL_InitTick>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d045      	beq.n	80021c2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	e1b5      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d029      	beq.n	8002196 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_OscConfig+0x510>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fb2e 	bl	80007a8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002150:	f7fe fb2a 	bl	80007a8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1a1      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002162:	4b7d      	ldr	r3, [pc, #500]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216e:	4b7a      	ldr	r3, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4977      	ldr	r1, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4972      	ldr	r1, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x510>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fb04 	bl	80007a8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a4:	f7fe fb00 	bl	80007a8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e177      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021b6:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d030      	beq.n	8002230 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x514>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7fe fae4 	bl	80007a8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe fae0 	bl	80007a8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e157      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x38c>
 8002202:	e015      	b.n	8002230 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_OscConfig+0x514>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe facd 	bl	80007a8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe fac9 	bl	80007a8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e140      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002224:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80b5 	beq.w	80023a8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6253      	str	r3, [r2, #36]	; 0x24
 800225a:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_OscConfig+0x518>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x518>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x518>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe fa91 	bl	80007a8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe fa8d 	bl	80007a8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e104      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x518>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x466>
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6353      	str	r3, [r2, #52]	; 0x34
 80022bc:	e02d      	b.n	800231a <HAL_RCC_OscConfig+0x4c2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x488>
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	4a23      	ldr	r2, [pc, #140]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6353      	str	r3, [r2, #52]	; 0x34
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022dc:	6353      	str	r3, [r2, #52]	; 0x34
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x4c2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x4aa>
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6353      	str	r3, [r2, #52]	; 0x34
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x4c2>
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800230c:	6353      	str	r3, [r2, #52]	; 0x34
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002318:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fa41 	bl	80007a8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fa3d 	bl	80007a8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0b2      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x4d2>
 800234c:	e023      	b.n	8002396 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fa2b 	bl	80007a8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002354:	e019      	b.n	800238a <HAL_RCC_OscConfig+0x532>
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	08002948 	.word	0x08002948
 8002360:	2000000c 	.word	0x2000000c
 8002364:	20000010 	.word	0x20000010
 8002368:	42470020 	.word	0x42470020
 800236c:	42470680 	.word	0x42470680
 8002370:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe fa18 	bl	80007a8 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e08d      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ee      	bne.n	8002374 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d079      	beq.n	80024a4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d056      	beq.n	8002464 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d13b      	bne.n	8002436 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x65c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe f9f0 	bl	80007a8 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe f9ec 	bl	80007a8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e063      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	4319      	orrs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	430b      	orrs	r3, r1
 8002402:	492b      	ldr	r1, [pc, #172]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x65c>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe f9cb 	bl	80007a8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe f9c7 	bl	80007a8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e03e      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x5be>
 8002434:	e036      	b.n	80024a4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x65c>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe f9b4 	bl	80007a8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe f9b0 	bl	80007a8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e027      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x5ec>
 8002462:	e01f      	b.n	80024a4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e01a      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_OscConfig+0x658>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	429a      	cmp	r2, r3
 8002482:	d10d      	bne.n	80024a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	42470060 	.word	0x42470060

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e11a      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b8f      	ldr	r3, [pc, #572]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d919      	bls.n	800250e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_ClockConfig+0x34>
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a89      	ldr	r2, [pc, #548]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b87      	ldr	r3, [pc, #540]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0201 	bic.w	r2, r3, #1
 80024f4:	4985      	ldr	r1, [pc, #532]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0f9      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251a:	4b7d      	ldr	r3, [pc, #500]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	497a      	ldr	r1, [pc, #488]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 808e 	beq.w	8002656 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002542:	4b73      	ldr	r3, [pc, #460]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d121      	bne.n	8002592 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0d7      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0cb      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0bf      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0b7      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	495c      	ldr	r1, [pc, #368]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe f900 	bl	80007a8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d112      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe f8f8 	bl	80007a8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e09b      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ca:	4b51      	ldr	r3, [pc, #324]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d1ee      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xfc>
 80025d6:	e03e      	b.n	8002656 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d112      	bne.n	8002606 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7fe f8e1 	bl	80007a8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e084      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b45      	ldr	r3, [pc, #276]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x12a>
 8002604:	e027      	b.n	8002656 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11d      	bne.n	800264a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe f8ca 	bl	80007a8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e06d      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d1ee      	bne.n	8002610 <HAL_RCC_ClockConfig+0x158>
 8002632:	e010      	b.n	8002656 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe f8b8 	bl	80007a8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e05b      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d219      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCC_ClockConfig+0x1be>
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0201 	bic.w	r2, r3, #1
 800267e:	4923      	ldr	r1, [pc, #140]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RCC_ClockConfig+0x254>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e034      	b.n	8002702 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4917      	ldr	r1, [pc, #92]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490f      	ldr	r1, [pc, #60]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f823 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_RCC_ClockConfig+0x258>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	fa21 f303 	lsr.w	r3, r1, r3
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x264>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe f80a 	bl	8000710 <HAL_InitTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002700:	7afb      	ldrb	r3, [r7, #11]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00
 8002710:	40023800 	.word	0x40023800
 8002714:	08002948 	.word	0x08002948
 8002718:	2000000c 	.word	0x2000000c
 800271c:	20000010 	.word	0x20000010

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d006      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x24>
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d007      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x2a>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d12c      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002740:	613b      	str	r3, [r7, #16]
      break;
 8002742:	e037      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	e034      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_RCC_GetSysClockFreq+0xac>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	0d9b      	lsrs	r3, r3, #22
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	3301      	adds	r3, #1
 8002762:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002774:	fb02 f203 	mul.w	r2, r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e007      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002786:	fb02 f203 	mul.w	r2, r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
      break;
 8002796:	e00d      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0b5b      	lsrs	r3, r3, #13
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	613b      	str	r3, [r7, #16]
      break;
 80027b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	016e3600 	.word	0x016e3600
 80027cc:	0800293c 	.word	0x0800293c

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4601      	mov	r1, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	08002958 	.word	0x08002958

0800280c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d12c      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e016      	b.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6253      	str	r3, [r2, #36]	; 0x24
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800285c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002870:	d105      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002878:	d101      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800287a:	2301      	movs	r3, #1
 800287c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0201 	bic.w	r2, r3, #1
 8002898:	490b      	ldr	r1, [pc, #44]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	40023c00 	.word	0x40023c00

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2500      	movs	r5, #0
 80028d0:	4e0c      	ldr	r6, [pc, #48]	; (8002904 <__libc_init_array+0x38>)
 80028d2:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d4:	1ba4      	subs	r4, r4, r6
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	42a5      	cmp	r5, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	f000 f822 	bl	8002924 <_init>
 80028e0:	2500      	movs	r5, #0
 80028e2:	4e0a      	ldr	r6, [pc, #40]	; (800290c <__libc_init_array+0x40>)
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <__libc_init_array+0x44>)
 80028e6:	1ba4      	subs	r4, r4, r6
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	42a5      	cmp	r5, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f4:	4798      	blx	r3
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fe:	4798      	blx	r3
 8002900:	3501      	adds	r5, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	08002960 	.word	0x08002960
 8002908:	08002960 	.word	0x08002960
 800290c:	08002960 	.word	0x08002960
 8002910:	08002964 	.word	0x08002964

08002914 <memset>:
 8002914:	4603      	mov	r3, r0
 8002916:	4402      	add	r2, r0
 8002918:	4293      	cmp	r3, r2
 800291a:	d100      	bne.n	800291e <memset+0xa>
 800291c:	4770      	bx	lr
 800291e:	f803 1b01 	strb.w	r1, [r3], #1
 8002922:	e7f9      	b.n	8002918 <memset+0x4>

08002924 <_init>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr

08002930 <_fini>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr
