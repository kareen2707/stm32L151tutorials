
bsp-hts221.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eec  08002eec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eec  08002eec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eec  08002eec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002f00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002f00  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4bb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2a  00000000  00000000  0002a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016777  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f8f  00000000  00000000  000438cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d113  00000000  00000000  0004b85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  000d89ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002eb0 	.word	0x08002eb0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002eb0 	.word	0x08002eb0

0800017c <__gesf2>:
 800017c:	f04f 3cff 	mov.w	ip, #4294967295
 8000180:	e006      	b.n	8000190 <__cmpsf2+0x4>
 8000182:	bf00      	nop

08000184 <__lesf2>:
 8000184:	f04f 0c01 	mov.w	ip, #1
 8000188:	e002      	b.n	8000190 <__cmpsf2+0x4>
 800018a:	bf00      	nop

0800018c <__cmpsf2>:
 800018c:	f04f 0c01 	mov.w	ip, #1
 8000190:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000194:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000198:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	bf18      	it	ne
 80001a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a6:	d011      	beq.n	80001cc <__cmpsf2+0x40>
 80001a8:	b001      	add	sp, #4
 80001aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80001ae:	bf18      	it	ne
 80001b0:	ea90 0f01 	teqne	r0, r1
 80001b4:	bf58      	it	pl
 80001b6:	ebb2 0003 	subspl.w	r0, r2, r3
 80001ba:	bf88      	it	hi
 80001bc:	17c8      	asrhi	r0, r1, #31
 80001be:	bf38      	it	cc
 80001c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80001c4:	bf18      	it	ne
 80001c6:	f040 0001 	orrne.w	r0, r0, #1
 80001ca:	4770      	bx	lr
 80001cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001d0:	d102      	bne.n	80001d8 <__cmpsf2+0x4c>
 80001d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001d6:	d105      	bne.n	80001e4 <__cmpsf2+0x58>
 80001d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001dc:	d1e4      	bne.n	80001a8 <__cmpsf2+0x1c>
 80001de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001e2:	d0e1      	beq.n	80001a8 <__cmpsf2+0x1c>
 80001e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <__aeabi_cfrcmple>:
 80001ec:	4684      	mov	ip, r0
 80001ee:	4608      	mov	r0, r1
 80001f0:	4661      	mov	r1, ip
 80001f2:	e7ff      	b.n	80001f4 <__aeabi_cfcmpeq>

080001f4 <__aeabi_cfcmpeq>:
 80001f4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001f6:	f7ff ffc9 	bl	800018c <__cmpsf2>
 80001fa:	2800      	cmp	r0, #0
 80001fc:	bf48      	it	mi
 80001fe:	f110 0f00 	cmnmi.w	r0, #0
 8000202:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000204 <__aeabi_fcmpeq>:
 8000204:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000208:	f7ff fff4 	bl	80001f4 <__aeabi_cfcmpeq>
 800020c:	bf0c      	ite	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	2000      	movne	r0, #0
 8000212:	f85d fb08 	ldr.w	pc, [sp], #8
 8000216:	bf00      	nop

08000218 <__aeabi_fcmplt>:
 8000218:	f84d ed08 	str.w	lr, [sp, #-8]!
 800021c:	f7ff ffea 	bl	80001f4 <__aeabi_cfcmpeq>
 8000220:	bf34      	ite	cc
 8000222:	2001      	movcc	r0, #1
 8000224:	2000      	movcs	r0, #0
 8000226:	f85d fb08 	ldr.w	pc, [sp], #8
 800022a:	bf00      	nop

0800022c <__aeabi_fcmple>:
 800022c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000230:	f7ff ffe0 	bl	80001f4 <__aeabi_cfcmpeq>
 8000234:	bf94      	ite	ls
 8000236:	2001      	movls	r0, #1
 8000238:	2000      	movhi	r0, #0
 800023a:	f85d fb08 	ldr.w	pc, [sp], #8
 800023e:	bf00      	nop

08000240 <__aeabi_fcmpge>:
 8000240:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000244:	f7ff ffd2 	bl	80001ec <__aeabi_cfrcmple>
 8000248:	bf94      	ite	ls
 800024a:	2001      	movls	r0, #1
 800024c:	2000      	movhi	r0, #0
 800024e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000252:	bf00      	nop

08000254 <__aeabi_fcmpgt>:
 8000254:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000258:	f7ff ffc8 	bl	80001ec <__aeabi_cfrcmple>
 800025c:	bf34      	ite	cc
 800025e:	2001      	movcc	r0, #1
 8000260:	2000      	movcs	r0, #0
 8000262:	f85d fb08 	ldr.w	pc, [sp], #8
 8000266:	bf00      	nop

08000268 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <BSP_I2C1_Init+0x58>)
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <BSP_I2C1_Init+0x5c>)
 8000276:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <BSP_I2C1_Init+0x60>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	4912      	ldr	r1, [pc, #72]	; (80002c8 <BSP_I2C1_Init+0x60>)
 8000280:	600a      	str	r2, [r1, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d117      	bne.n	80002b6 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000286:	480e      	ldr	r0, [pc, #56]	; (80002c0 <BSP_I2C1_Init+0x58>)
 8000288:	f001 fd0e 	bl	8001ca8 <HAL_I2C_GetState>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d111      	bne.n	80002b6 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <BSP_I2C1_Init+0x58>)
 8000294:	f000 f8e2 	bl	800045c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10b      	bne.n	80002b6 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <BSP_I2C1_Init+0x58>)
 80002a0:	f000 f8a8 	bl	80003f4 <MX_I2C1_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 80002aa:	f06f 0307 	mvn.w	r3, #7
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	e001      	b.n	80002b6 <BSP_I2C1_Init+0x4e>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 80002b6:	687b      	ldr	r3, [r7, #4]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	40005400 	.word	0x40005400
 80002c8:	20000028 	.word	0x20000028

080002cc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <BSP_I2C1_DeInit+0x48>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d014      	beq.n	8000308 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <BSP_I2C1_DeInit+0x48>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <BSP_I2C1_DeInit+0x48>)
 80002e6:	6013      	str	r3, [r2, #0]
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <BSP_I2C1_DeInit+0x48>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d10b      	bne.n	8000308 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <BSP_I2C1_DeInit+0x4c>)
 80002f2:	f000 f8e7 	bl	80004c4 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80002f6:	4808      	ldr	r0, [pc, #32]	; (8000318 <BSP_I2C1_DeInit+0x4c>)
 80002f8:	f001 f974 	bl	80015e4 <HAL_I2C_DeInit>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d002      	beq.n	8000308 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8000302:	f06f 0307 	mvn.w	r3, #7
 8000306:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8000308:	687b      	ldr	r3, [r7, #4]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028
 8000318:	2000002c 	.word	0x2000002c

0800031c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af04      	add	r7, sp, #16
 8000322:	60ba      	str	r2, [r7, #8]
 8000324:	461a      	mov	r2, r3
 8000326:	4603      	mov	r3, r0
 8000328:	81fb      	strh	r3, [r7, #14]
 800032a:	460b      	mov	r3, r1
 800032c:	81bb      	strh	r3, [r7, #12]
 800032e:	4613      	mov	r3, r2
 8000330:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000336:	89ba      	ldrh	r2, [r7, #12]
 8000338:	89f9      	ldrh	r1, [r7, #14]
 800033a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2301      	movs	r3, #1
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <BSP_I2C1_WriteReg+0x60>)
 800034c:	f001 f98c 	bl	8001668 <HAL_I2C_Mem_Write>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d00c      	beq.n	8000370 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000356:	4809      	ldr	r0, [pc, #36]	; (800037c <BSP_I2C1_WriteReg+0x60>)
 8000358:	f001 fcb3 	bl	8001cc2 <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d103      	bne.n	800036a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000362:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	e002      	b.n	8000370 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800036a:	f06f 0303 	mvn.w	r3, #3
 800036e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000370:	697b      	ldr	r3, [r7, #20]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000002c 	.word	0x2000002c

08000380 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af04      	add	r7, sp, #16
 8000386:	60ba      	str	r2, [r7, #8]
 8000388:	461a      	mov	r2, r3
 800038a:	4603      	mov	r3, r0
 800038c:	81fb      	strh	r3, [r7, #14]
 800038e:	460b      	mov	r3, r1
 8000390:	81bb      	strh	r3, [r7, #12]
 8000392:	4613      	mov	r3, r2
 8000394:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800039a:	89ba      	ldrh	r2, [r7, #12]
 800039c:	89f9      	ldrh	r1, [r7, #14]
 800039e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a2:	9302      	str	r3, [sp, #8]
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2301      	movs	r3, #1
 80003ae:	480c      	ldr	r0, [pc, #48]	; (80003e0 <BSP_I2C1_ReadReg+0x60>)
 80003b0:	f001 fa54 	bl	800185c <HAL_I2C_Mem_Read>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d00c      	beq.n	80003d4 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <BSP_I2C1_ReadReg+0x60>)
 80003bc:	f001 fc81 	bl	8001cc2 <HAL_I2C_GetError>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d103      	bne.n	80003ce <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80003c6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e002      	b.n	80003d4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80003ce:	f06f 0303 	mvn.w	r3, #3
 80003d2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80003d4:	697b      	ldr	r3, [r7, #20]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c

080003e4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80003e8:	f000 fc14 	bl	8000c14 <HAL_GetTick>
 80003ec:	4603      	mov	r3, r0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <MX_I2C1_Init+0x60>)
 8000404:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <MX_I2C1_Init+0x64>)
 800040a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800041e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 ffab 	bl	8001394 <HAL_I2C_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000444:	2301      	movs	r3, #1
 8000446:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000448:	7bfb      	ldrb	r3, [r7, #15]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40005400 	.word	0x40005400
 8000458:	000186a0 	.word	0x000186a0

0800045c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <I2C1_MspInit+0x60>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <I2C1_MspInit+0x60>)
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <I2C1_MspInit+0x60>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f003 0302 	and.w	r3, r3, #2
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800047c:	23c0      	movs	r3, #192	; 0xc0
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000480:	2312      	movs	r3, #18
 8000482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000488:	2303      	movs	r3, #3
 800048a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800048c:	2304      	movs	r3, #4
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	480a      	ldr	r0, [pc, #40]	; (80004c0 <I2C1_MspInit+0x64>)
 8000498:	f000 fccc 	bl	8000e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <I2C1_MspInit+0x60>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <I2C1_MspInit+0x60>)
 80004a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a6:	6253      	str	r3, [r2, #36]	; 0x24
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <I2C1_MspInit+0x60>)
 80004aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	; 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400

080004c4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <I2C1_MspDeInit+0x24>)
 80004ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <I2C1_MspDeInit+0x24>)
 80004d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80004d6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80004d8:	21c0      	movs	r1, #192	; 0xc0
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <I2C1_MspDeInit+0x28>)
 80004dc:	f000 fe38 	bl	8001150 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400

080004f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_GPIO_Init+0x5c>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a10      	ldr	r2, [pc, #64]	; (800054c <MX_GPIO_Init+0x5c>)
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	61d3      	str	r3, [r2, #28]
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_GPIO_Init+0x5c>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f003 0302 	and.w	r3, r3, #2
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <MX_GPIO_Init+0x60>)
 8000524:	f000 ff04 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000528:	f44f 7340 	mov.w	r3, #768	; 0x300
 800052c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_GPIO_Init+0x60>)
 8000540:	f000 fc78 	bl	8000e34 <HAL_GPIO_Init>

}
 8000544:	bf00      	nop
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40023800 	.word	0x40023800
 8000550:	40020400 	.word	0x40020400

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 faf7 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f808 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f7ff ffc6 	bl	80004f0 <MX_GPIO_Init>
  MX_MEMS_Init();
 8000564:	f002 fc28 	bl	8002db8 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000568:	f002 fc5c 	bl	8002e24 <MX_MEMS_Process>
 800056c:	e7fc      	b.n	8000568 <main+0x14>
	...

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b092      	sub	sp, #72	; 0x48
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fc8e 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <SystemClock_Config+0x98>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800059a:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <SystemClock_Config+0x98>)
 800059c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a0:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 febc 	bl	8002344 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 f81b 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f9d8 	bl	80029a4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fa:	f000 f807 	bl	800060c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3748      	adds	r7, #72	; 0x48
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40007000 	.word	0x40007000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_MspInit+0x58>)
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <HAL_MspInit+0x58>)
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	6253      	str	r3, [r2, #36]	; 0x24
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_MspInit+0x58>)
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_MspInit+0x58>)
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <HAL_MspInit+0x58>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6213      	str	r3, [r2, #32]
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_MspInit+0x58>)
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_MspInit+0x58>)
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_MspInit+0x58>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6253      	str	r3, [r2, #36]	; 0x24
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_MspInit+0x58>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40023800 	.word	0x40023800

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <HardFault_Handler+0x4>

08000686 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <MemManage_Handler+0x4>

0800068c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <BusFault_Handler+0x4>

08000692 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <UsageFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 fa96 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <SystemInit+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <SystemInit+0x5c>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <SystemInit+0x5c>)
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	4911      	ldr	r1, [pc, #68]	; (8000724 <SystemInit+0x5c>)
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <SystemInit+0x60>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <SystemInit+0x5c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <SystemInit+0x5c>)
 80006ea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80006ee:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80006f2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <SystemInit+0x5c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SystemInit+0x5c>)
 80006fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006fe:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SystemInit+0x5c>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SystemInit+0x5c>)
 8000706:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800070a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SystemInit+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x64>)
 8000714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000718:	609a      	str	r2, [r3, #8]
#endif
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	88ffc00c 	.word	0x88ffc00c
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000730:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000732:	e003      	b.n	800073c <LoopCopyDataInit>

08000734 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000736:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000738:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800073a:	3104      	adds	r1, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000740:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000742:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000744:	d3f6      	bcc.n	8000734 <CopyDataInit>
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000748:	e002      	b.n	8000750 <LoopFillZerobss>

0800074a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800074c:	f842 3b04 	str.w	r3, [r2], #4

08000750 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000752:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000754:	d3f9      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f7ff ffb7 	bl	80006c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f002 fb7d 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fef9 	bl	8000554 <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r3, =_sidata
 8000764:	08002ef4 	.word	0x08002ef4
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000770:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000774:	200000d4 	.word	0x200000d4

08000778 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_IRQHandler>
	...

0800077c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e030      	b.n	80007f6 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	7b1a      	ldrb	r2, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	691a      	ldr	r2, [r3, #16]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	699a      	ldr	r2, [r3, #24]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HTS221_RegisterBusIO+0x84>)
 80007d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <HTS221_RegisterBusIO+0x88>)
 80007d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4798      	blx	r3
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	e002      	b.n	80007f6 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	08000921 	.word	0x08000921
 8000804:	08000983 	.word	0x08000983

08000808 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000816:	2b00      	cmp	r3, #0
 8000818:	d108      	bne.n	800082c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f854 	bl	80008c8 <HTS221_Initialize>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	e004      	b.n	8000836 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	331c      	adds	r3, #28
 800084c:	6839      	ldr	r1, [r7, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f944 	bl	8000adc <hts221_device_id_get>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e000      	b.n	8000862 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8000876:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800087a:	6838      	ldr	r0, [r7, #0]
 800087c:	f7ff fcd6 	bl	800022c <__aeabi_fcmple>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HTS221_SetOutputDataRate+0x1e>
 8000886:	2301      	movs	r3, #1
 8000888:	e009      	b.n	800089e <HTS221_SetOutputDataRate+0x32>
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <HTS221_SetOutputDataRate+0x58>)
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	f7ff fccd 	bl	800022c <__aeabi_fcmple>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HTS221_SetOutputDataRate+0x30>
 8000898:	2302      	movs	r3, #2
 800089a:	e000      	b.n	800089e <HTS221_SetOutputDataRate+0x32>
 800089c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800089e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	331c      	adds	r3, #28
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f8cb 	bl	8000a44 <hts221_data_rate_set>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e000      	b.n	80008bc <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40e00000 	.word	0x40e00000

080008c8 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	331c      	adds	r3, #28
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f911 	bl	8000afe <hts221_power_on_set>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e017      	b.n	8000918 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	331c      	adds	r3, #28
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8ce 	bl	8000a90 <hts221_block_data_update_set>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e00b      	b.n	8000918 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8000900:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffb1 	bl	800086c <HTS221_SetOutputDataRate>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	e000      	b.n	8000918 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	461a      	mov	r2, r3
 800092c:	460b      	mov	r3, r1
 800092e:	72fb      	strb	r3, [r7, #11]
 8000930:	4613      	mov	r3, r2
 8000932:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10e      	bne.n	800095e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	695c      	ldr	r4, [r3, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	7b1b      	ldrb	r3, [r3, #12]
 8000948:	b298      	uxth	r0, r3
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b299      	uxth	r1, r3
 8000954:	893b      	ldrh	r3, [r7, #8]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	47a0      	blx	r4
 800095a:	4603      	mov	r3, r0
 800095c:	e00d      	b.n	800097a <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	695c      	ldr	r4, [r3, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	7b1b      	ldrb	r3, [r3, #12]
 8000966:	b298      	uxth	r0, r3
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096e:	b2db      	uxtb	r3, r3
 8000970:	b299      	uxth	r1, r3
 8000972:	893b      	ldrh	r3, [r7, #8]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	47a0      	blx	r4
 8000978:	4603      	mov	r3, r0
  }
}
 800097a:	4618      	mov	r0, r3
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd90      	pop	{r4, r7, pc}

08000982 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000982:	b590      	push	{r4, r7, lr}
 8000984:	b087      	sub	sp, #28
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	72fb      	strb	r3, [r7, #11]
 8000992:	4613      	mov	r3, r2
 8000994:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10e      	bne.n	80009c0 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	691c      	ldr	r4, [r3, #16]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	7b1b      	ldrb	r3, [r3, #12]
 80009aa:	b298      	uxth	r0, r3
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	b299      	uxth	r1, r3
 80009b6:	893b      	ldrh	r3, [r7, #8]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	47a0      	blx	r4
 80009bc:	4603      	mov	r3, r0
 80009be:	e00d      	b.n	80009dc <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	691c      	ldr	r4, [r3, #16]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	7b1b      	ldrb	r3, [r3, #12]
 80009c8:	b298      	uxth	r0, r3
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	b299      	uxth	r1, r3
 80009d4:	893b      	ldrh	r3, [r7, #8]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	47a0      	blx	r4
 80009da:	4603      	mov	r3, r0
  }
}
 80009dc:	4618      	mov	r0, r3
 80009de:	371c      	adds	r7, #28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	461a      	mov	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	4613      	mov	r3, r2
 80009f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	685c      	ldr	r4, [r3, #4]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6898      	ldr	r0, [r3, #8]
 8000a00:	893b      	ldrh	r3, [r7, #8]
 8000a02:	7af9      	ldrb	r1, [r7, #11]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	47a0      	blx	r4
 8000a08:	6178      	str	r0, [r7, #20]
  return ret;
 8000a0a:	697b      	ldr	r3, [r7, #20]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}

08000a14 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	72fb      	strb	r3, [r7, #11]
 8000a24:	4613      	mov	r3, r2
 8000a26:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6898      	ldr	r0, [r3, #8]
 8000a30:	893b      	ldrh	r3, [r7, #8]
 8000a32:	7af9      	ldrb	r1, [r7, #11]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	47a0      	blx	r4
 8000a38:	6178      	str	r0, [r7, #20]
  return ret;
 8000a3a:	697b      	ldr	r3, [r7, #20]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	371c      	adds	r7, #28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}

08000a44 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	2301      	movs	r3, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffc3 	bl	80009e4 <hts221_read_reg>
 8000a5e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10f      	bne.n	8000a86 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	f362 0301 	bfi	r3, r2, #0, #2
 8000a74:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffc8 	bl	8000a14 <hts221_write_reg>
 8000a84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000a9c:	f107 0208 	add.w	r2, r7, #8
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff9d 	bl	80009e4 <hts221_read_reg>
 8000aaa:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10f      	bne.n	8000ad2 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	7a3b      	ldrb	r3, [r7, #8]
 8000abc:	f362 0382 	bfi	r3, r2, #2, #1
 8000ac0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000ac2:	f107 0208 	add.w	r2, r7, #8
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2120      	movs	r1, #32
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffa2 	bl	8000a14 <hts221_write_reg>
 8000ad0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	210f      	movs	r1, #15
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff79 	bl	80009e4 <hts221_read_reg>
 8000af2:	60f8      	str	r0, [r7, #12]
  return ret;
 8000af4:	68fb      	ldr	r3, [r7, #12]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2120      	movs	r1, #32
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff66 	bl	80009e4 <hts221_read_reg>
 8000b18:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <hts221_power_on_set+0x42>
    reg.pd = val;
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	7a3b      	ldrb	r3, [r7, #8]
 8000b2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8000b2e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8000b30:	f107 0208 	add.w	r2, r7, #8
 8000b34:	2301      	movs	r3, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff6b 	bl	8000a14 <hts221_write_reg>
 8000b3e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f939 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff fd54 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d022      	beq.n	8000bd6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f938 	bl	8000e1a <HAL_SYSTICK_Config>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10f      	bne.n	8000bd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d809      	bhi.n	8000bca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbe:	f000 f910 	bl	8000de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x70>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e004      	b.n	8000bda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <HAL_IncTick+0x1c>)
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000088 	.word	0x20000088
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000088 	.word	0x20000088

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d004      	beq.n	8000c4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4c:	bf00      	nop
 8000c4e:	f7ff ffe1 	bl	8000c14 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d8f7      	bhi.n	8000c4e <HAL_Delay+0x26>
  {
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff49 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e4a:	e160      	b.n	800110e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8152 	beq.w	8001108 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	6939      	ldr	r1, [r7, #16]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80ac 	beq.w	8001108 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_GPIO_Init+0x2f4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a5c      	ldr	r2, [pc, #368]	; (8001128 <HAL_GPIO_Init+0x2f4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000fc8:	4a58      	ldr	r2, [pc, #352]	; (800112c <HAL_GPIO_Init+0x2f8>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d025      	beq.n	8001040 <HAL_GPIO_Init+0x20c>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d01f      	beq.n	800103c <HAL_GPIO_Init+0x208>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x204>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x308>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x200>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1fc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x310>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1f4>
 8001024:	2306      	movs	r3, #6
 8001026:	e00c      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001028:	2307      	movs	r3, #7
 800102a:	e00a      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 800102c:	2305      	movs	r3, #5
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001030:	2304      	movs	r3, #4
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001034:	2303      	movs	r3, #3
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x20e>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001052:	4936      	ldr	r1, [pc, #216]	; (800112c <HAL_GPIO_Init+0x2f8>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <HAL_GPIO_Init+0x318>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <HAL_GPIO_Init+0x318>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_GPIO_Init+0x318>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_GPIO_Init+0x318>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_GPIO_Init+0x318>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <HAL_GPIO_Init+0x318>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_GPIO_Init+0x318>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_GPIO_Init+0x318>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f ae97 	bne.w	8000e4c <HAL_GPIO_Init+0x18>
  } 
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40023800 	.word	0x40023800
 800112c:	40010000 	.word	0x40010000
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001166:	e0c4      	b.n	80012f2 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001168:	2201      	movs	r2, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80b7 	beq.w	80012ec <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 800117e:	4a63      	ldr	r2, [pc, #396]	; (800130c <HAL_GPIO_DeInit+0x1bc>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a5b      	ldr	r2, [pc, #364]	; (8001310 <HAL_GPIO_DeInit+0x1c0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d025      	beq.n	80011f4 <HAL_GPIO_DeInit+0xa4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a5a      	ldr	r2, [pc, #360]	; (8001314 <HAL_GPIO_DeInit+0x1c4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d01f      	beq.n	80011f0 <HAL_GPIO_DeInit+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a59      	ldr	r2, [pc, #356]	; (8001318 <HAL_GPIO_DeInit+0x1c8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d019      	beq.n	80011ec <HAL_GPIO_DeInit+0x9c>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_GPIO_DeInit+0x1cc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_DeInit+0x98>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_GPIO_DeInit+0x1d0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_DeInit+0x94>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_GPIO_DeInit+0x1d4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_DeInit+0x90>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a55      	ldr	r2, [pc, #340]	; (8001328 <HAL_GPIO_DeInit+0x1d8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_DeInit+0x8c>
 80011d8:	2306      	movs	r3, #6
 80011da:	e00c      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011dc:	2307      	movs	r3, #7
 80011de:	e00a      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011e0:	2305      	movs	r3, #5
 80011e2:	e008      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_DeInit+0xa6>
 80011f4:	2300      	movs	r3, #0
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	429a      	cmp	r2, r3
 8001204:	d132      	bne.n	800126c <HAL_GPIO_DeInit+0x11c>
      {
        tmp = (0x0FU) << (4 * (position & 0x03));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8001216:	4a3d      	ldr	r2, [pc, #244]	; (800130c <HAL_GPIO_DeInit+0x1bc>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43da      	mvns	r2, r3
 8001226:	4839      	ldr	r0, [pc, #228]	; (800130c <HAL_GPIO_DeInit+0x1bc>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	400a      	ands	r2, r1
 800122e:	3302      	adds	r3, #2
 8001230:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	493b      	ldr	r1, [pc, #236]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 800123e:	4013      	ands	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	4938      	ldr	r1, [pc, #224]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 800124c:	4013      	ands	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	4934      	ldr	r1, [pc, #208]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 800125a:	4013      	ands	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	4931      	ldr	r1, [pc, #196]	; (800132c <HAL_GPIO_DeInit+0x1dc>)
 8001268:	4013      	ands	r3, r2
 800126a:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2103      	movs	r1, #3
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	401a      	ands	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	08d2      	lsrs	r2, r2, #3
 80012a2:	4019      	ands	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2103      	movs	r1, #3
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	2101      	movs	r1, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	401a      	ands	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2103      	movs	r1, #3
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]
    }

    position++;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f af34 	bne.w	8001168 <HAL_GPIO_DeInit+0x18>
  }
}
 8001300:	bf00      	nop
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40010000 	.word	0x40010000
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e002      	b.n	8001388 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
	...

08001394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e10f      	b.n	80015c6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f941 	bl	8001642 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d8:	f001 fc7a 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a7b      	ldr	r2, [pc, #492]	; (80015d0 <HAL_I2C_Init+0x23c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d807      	bhi.n	80013f8 <HAL_I2C_Init+0x64>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a7a      	ldr	r2, [pc, #488]	; (80015d4 <HAL_I2C_Init+0x240>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	e006      	b.n	8001406 <HAL_I2C_Init+0x72>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_I2C_Init+0x244>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	bf94      	ite	ls
 8001400:	2301      	movls	r3, #1
 8001402:	2300      	movhi	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0db      	b.n	80015c6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4a72      	ldr	r2, [pc, #456]	; (80015dc <HAL_I2C_Init+0x248>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a64      	ldr	r2, [pc, #400]	; (80015d0 <HAL_I2C_Init+0x23c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d802      	bhi.n	8001448 <HAL_I2C_Init+0xb4>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	e009      	b.n	800145c <HAL_I2C_Init+0xc8>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_I2C_Init+0x24c>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	099b      	lsrs	r3, r3, #6
 800145a:	3301      	adds	r3, #1
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	430b      	orrs	r3, r1
 8001462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800146e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4956      	ldr	r1, [pc, #344]	; (80015d0 <HAL_I2C_Init+0x23c>)
 8001478:	428b      	cmp	r3, r1
 800147a:	d80d      	bhi.n	8001498 <HAL_I2C_Init+0x104>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e59      	subs	r1, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fbb1 f3f3 	udiv	r3, r1, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	bf38      	it	cc
 8001494:	2304      	movcc	r3, #4
 8001496:	e04f      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <HAL_I2C_Init+0x130>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e58      	subs	r0, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e012      	b.n	80014ea <HAL_I2C_Init+0x156>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e58      	subs	r0, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	0099      	lsls	r1, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Init+0x15e>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e022      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10e      	bne.n	8001518 <HAL_I2C_Init+0x184>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e58      	subs	r0, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	440b      	add	r3, r1
 8001508:	fbb0 f3f3 	udiv	r3, r0, r3
 800150c:	3301      	adds	r3, #1
 800150e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001516:	e00f      	b.n	8001538 <HAL_I2C_Init+0x1a4>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e58      	subs	r0, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	0099      	lsls	r1, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	fbb0 f3f3 	udiv	r3, r0, r3
 800152e:	3301      	adds	r3, #1
 8001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	6809      	ldr	r1, [r1, #0]
 800153c:	4313      	orrs	r3, r2
 800153e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6911      	ldr	r1, [r2, #16]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68d2      	ldr	r2, [r2, #12]
 8001572:	4311      	orrs	r1, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	000186a0 	.word	0x000186a0
 80015d4:	001e847f 	.word	0x001e847f
 80015d8:	003d08ff 	.word	0x003d08ff
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e021      	b.n	800163a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2224      	movs	r2, #36	; 0x24
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f820 	bl	8001654 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	817b      	strh	r3, [r7, #10]
 800167a:	460b      	mov	r3, r1
 800167c:	813b      	strh	r3, [r7, #8]
 800167e:	4613      	mov	r3, r2
 8001680:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001682:	f7ff fac7 	bl	8000c14 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b20      	cmp	r3, #32
 8001692:	f040 80d9 	bne.w	8001848 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2319      	movs	r3, #25
 800169c:	2201      	movs	r2, #1
 800169e:	496d      	ldr	r1, [pc, #436]	; (8001854 <HAL_I2C_Mem_Write+0x1ec>)
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fc73 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
 80016ae:	e0cc      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_I2C_Mem_Write+0x56>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e0c5      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d007      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2221      	movs	r2, #33	; 0x21
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_I2C_Mem_Write+0x1f0>)
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001726:	88f8      	ldrh	r0, [r7, #6]
 8001728:	893a      	ldrh	r2, [r7, #8]
 800172a:	8979      	ldrh	r1, [r7, #10]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4603      	mov	r3, r0
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 face 	bl	8001cd8 <I2C_RequestMemoryWrite>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d052      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e081      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fcf4 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b04      	cmp	r3, #4
 800175c:	d107      	bne.n	800176e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800176c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06b      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11b      	bne.n	80017e8 <HAL_I2C_Mem_Write+0x180>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d017      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1aa      	bne.n	8001746 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 fce0 	bl	80021ba <I2C_WaitOnBTFFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	2b04      	cmp	r3, #4
 8001806:	d107      	bne.n	8001818 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e016      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e000      	b.n	800184a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	00100002 	.word	0x00100002
 8001858:	ffff0000 	.word	0xffff0000

0800185c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	817b      	strh	r3, [r7, #10]
 800186e:	460b      	mov	r3, r1
 8001870:	813b      	strh	r3, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001876:	f7ff f9cd 	bl	8000c14 <HAL_GetTick>
 800187a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	f040 8208 	bne.w	8001c9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2319      	movs	r3, #25
 8001890:	2201      	movs	r2, #1
 8001892:	497b      	ldr	r1, [pc, #492]	; (8001a80 <HAL_I2C_Mem_Read+0x224>)
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fb79 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	e1fb      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Mem_Read+0x56>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e1f4      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d007      	beq.n	80018d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2222      	movs	r2, #34	; 0x22
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_I2C_Mem_Read+0x228>)
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800191a:	88f8      	ldrh	r0, [r7, #6]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	8979      	ldrh	r1, [r7, #10]
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4603      	mov	r3, r0
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fa5e 	bl	8001dec <I2C_RequestMemoryRead>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e1b0      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	d113      	bne.n	800196a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e184      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	2b01      	cmp	r3, #1
 8001970:	d11b      	bne.n	80019aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e164      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d11b      	bne.n	80019ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	e144      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a00:	e138      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	f200 80f1 	bhi.w	8001bee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d123      	bne.n	8001a5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fc0f 	bl	800223c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e139      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a5a:	e10b      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d14e      	bne.n	8001b02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4906      	ldr	r1, [pc, #24]	; (8001a88 <HAL_I2C_Mem_Read+0x22c>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fa8c 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e10e      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
 8001a7e:	bf00      	nop
 8001a80:	00100002 	.word	0x00100002
 8001a84:	ffff0000 	.word	0xffff0000
 8001a88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b00:	e0b8      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4966      	ldr	r1, [pc, #408]	; (8001ca4 <HAL_I2C_Mem_Read+0x448>)
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fa3d 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0bf      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	2200      	movs	r2, #0
 8001b66:	494f      	ldr	r1, [pc, #316]	; (8001ca4 <HAL_I2C_Mem_Read+0x448>)
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fa0f 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e091      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bec:	e042      	b.n	8001c74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fb22 	bl	800223c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e04c      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d118      	bne.n	8001c74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f47f aec2 	bne.w	8001a02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	00010004 	.word	0x00010004

08001ca8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	817b      	strh	r3, [r7, #10]
 8001cea:	460b      	mov	r3, r1
 8001cec:	813b      	strh	r3, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f93c 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e05f      	b.n	8001dde <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	6a3a      	ldr	r2, [r7, #32]
 8001d32:	492d      	ldr	r1, [pc, #180]	; (8001de8 <I2C_RequestMemoryWrite+0x110>)
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f980 	bl	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e04c      	b.n	8001dde <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	6a39      	ldr	r1, [r7, #32]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f9ea 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d107      	bne.n	8001d82 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e02b      	b.n	8001dde <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8c:	893b      	ldrh	r3, [r7, #8]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	e021      	b.n	8001ddc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	6a39      	ldr	r1, [r7, #32]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f9c4 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d107      	bne.n	8001dce <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e005      	b.n	8001dde <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dd2:	893b      	ldrh	r3, [r7, #8]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	00010002 	.word	0x00010002

08001dec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	817b      	strh	r3, [r7, #10]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	813b      	strh	r3, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f8aa 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e09e      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	494c      	ldr	r1, [pc, #304]	; (8001f88 <I2C_RequestMemoryRead+0x19c>)
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f8ee 	bl	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e08b      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f958 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d107      	bne.n	8001ea6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06a      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	e021      	b.n	8001f00 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ebc:	893b      	ldrh	r3, [r7, #8]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f932 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e044      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f02:	6a39      	ldr	r1, [r7, #32]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f917 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d107      	bne.n	8001f28 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e029      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f81f 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e013      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	4906      	ldr	r1, [pc, #24]	; (8001f88 <I2C_RequestMemoryRead+0x19c>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f863 	bl	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	00010002 	.word	0x00010002

08001f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f9c:	e025      	b.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d021      	beq.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7fe fe35 	bl	8000c14 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d116      	bne.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e023      	b.n	8002032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10d      	bne.n	8002010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4013      	ands	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	e00c      	b.n	800202a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4013      	ands	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	429a      	cmp	r2, r3
 800202e:	d0b6      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002048:	e051      	b.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002058:	d123      	bne.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0204 	orr.w	r2, r3, #4
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e046      	b.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d021      	beq.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7fe fdb3 	bl	8000c14 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d116      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e020      	b.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10c      	bne.n	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4013      	ands	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e00b      	b.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	43da      	mvns	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d18d      	bne.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002144:	e02d      	b.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f8ce 	bl	80022e8 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e02d      	b.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d021      	beq.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7fe fd59 	bl	8000c14 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d116      	bne.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e007      	b.n	80021b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d1ca      	bne.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c6:	e02d      	b.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f88d 	bl	80022e8 <I2C_IsAcknowledgeFailed>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e02d      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d021      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7fe fd18 	bl	8000c14 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e007      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d1ca      	bne.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002248:	e042      	b.n	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b10      	cmp	r3, #16
 8002256:	d119      	bne.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0210 	mvn.w	r2, #16
 8002260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e029      	b.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228c:	f7fe fcc2 	bl	8000c14 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	d302      	bcc.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d1b5      	bne.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d11b      	bne.n	8002338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f043 0204 	orr.w	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e31d      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07b      	beq.n	800246e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d006      	beq.n	800238a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d10f      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d10b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	4b87      	ldr	r3, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d06a      	beq.n	800246c <HAL_RCC_OscConfig+0x128>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d166      	bne.n	800246c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e2f7      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x74>
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e02d      	b.n	8002414 <HAL_RCC_OscConfig+0xd0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10c      	bne.n	80023da <HAL_RCC_OscConfig+0x96>
 80023c0:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a78      	ldr	r2, [pc, #480]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0xd0>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xb8>
 80023e2:	4b71      	ldr	r3, [pc, #452]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a70      	ldr	r2, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6d      	ldr	r2, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd0>
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fbfa 	bl	8000c14 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fbf6 	bl	8000c14 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e2ad      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fbe6 	bl	8000c14 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fbe2 	bl	8000c14 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e299      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800245e:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x108>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d05a      	beq.n	8002530 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d119      	bne.n	80024ba <HAL_RCC_OscConfig+0x176>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x160>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e276      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	493d      	ldr	r1, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b8:	e03a      	b.n	8002530 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCC_OscConfig+0x268>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fba4 	bl	8000c14 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fba0 	bl	8000c14 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e257      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	492a      	ldr	r1, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
 8002502:	e015      	b.n	8002530 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_OscConfig+0x268>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fb83 	bl	8000c14 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002512:	f7fe fb7f 	bl	8000c14 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e236      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80b8 	beq.w	80026ae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d170      	bne.n	8002626 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_OscConfig+0x218>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e21a      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002568:	429a      	cmp	r2, r3
 800256a:	d921      	bls.n	80025b0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fbc1 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e208      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4906      	ldr	r1, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	4901      	ldr	r1, [pc, #4]	; (80025a8 <HAL_RCC_OscConfig+0x264>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e020      	b.n	80025ea <HAL_RCC_OscConfig+0x2a6>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b0:	4ba4      	ldr	r3, [pc, #656]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	49a1      	ldr	r1, [pc, #644]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c2:	4ba0      	ldr	r3, [pc, #640]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	499c      	ldr	r1, [pc, #624]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fb8c 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1d3      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	3301      	adds	r3, #1
 80025f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025fa:	4a92      	ldr	r2, [pc, #584]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	0912      	lsrs	r2, r2, #4
 8002600:	f002 020f 	and.w	r2, r2, #15
 8002604:	4990      	ldr	r1, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x504>)
 8002606:	5c8a      	ldrb	r2, [r1, r2]
 8002608:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800260a:	4a90      	ldr	r2, [pc, #576]	; (800284c <HAL_RCC_OscConfig+0x508>)
 800260c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800260e:	4b90      	ldr	r3, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x50c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fab2 	bl	8000b7c <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d045      	beq.n	80026ae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	e1b5      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d029      	beq.n	8002682 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800262e:	4b89      	ldr	r3, [pc, #548]	; (8002854 <HAL_RCC_OscConfig+0x510>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe faee 	bl	8000c14 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263c:	f7fe faea 	bl	8000c14 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1a1      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800264e:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4977      	ldr	r1, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	4972      	ldr	r1, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002682:	4b74      	ldr	r3, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x510>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fac4 	bl	8000c14 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002690:	f7fe fac0 	bl	8000c14 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e177      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026a2:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d030      	beq.n	800271c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x514>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe faa4 	bl	8000c14 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe faa0 	bl	8000c14 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e157      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026e2:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x38c>
 80026ee:	e015      	b.n	800271c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCC_OscConfig+0x514>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fa8d 	bl	8000c14 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fa89 	bl	8000c14 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e140      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80b5 	beq.w	8002894 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b45      	ldr	r3, [pc, #276]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6253      	str	r3, [r2, #36]	; 0x24
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x518>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b3e      	ldr	r3, [pc, #248]	; (800285c <HAL_RCC_OscConfig+0x518>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3d      	ldr	r2, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x518>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fe fa51 	bl	8000c14 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fa4d 	bl	8000c14 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e104      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x518>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x466>
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	4a28      	ldr	r2, [pc, #160]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6353      	str	r3, [r2, #52]	; 0x34
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x4c2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x488>
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027bc:	6353      	str	r3, [r2, #52]	; 0x34
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c8:	6353      	str	r3, [r2, #52]	; 0x34
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x4c2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x4aa>
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027de:	6353      	str	r3, [r2, #52]	; 0x34
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6353      	str	r3, [r2, #52]	; 0x34
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x4c2>
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f8:	6353      	str	r3, [r2, #52]	; 0x34
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 8002800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002804:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe fa01 	bl	8000c14 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe f9fd 	bl	8000c14 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b2      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_OscConfig+0x500>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x4d2>
 8002838:	e023      	b.n	8002882 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe f9eb 	bl	8000c14 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002840:	e019      	b.n	8002876 <HAL_RCC_OscConfig+0x532>
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	08002ed4 	.word	0x08002ed4
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004
 8002854:	42470020 	.word	0x42470020
 8002858:	42470680 	.word	0x42470680
 800285c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe f9d8 	bl	8000c14 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e08d      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x658>)
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ee      	bne.n	8002860 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x658>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x658>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d079      	beq.n	8002990 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d056      	beq.n	8002950 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d13b      	bne.n	8002922 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x65c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f9b0 	bl	8000c14 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe f9ac 	bl	8000c14 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e063      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x658>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x658>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	4319      	orrs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	430b      	orrs	r3, r1
 80028ee:	492b      	ldr	r1, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x658>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x65c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe f98b 	bl	8000c14 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe f987 	bl	8000c14 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e03e      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x658>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x5be>
 8002920:	e036      	b.n	8002990 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_RCC_OscConfig+0x65c>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f974 	bl	8000c14 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe f970 	bl	8000c14 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e027      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCC_OscConfig+0x658>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x5ec>
 800294e:	e01f      	b.n	8002990 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_OscConfig+0x658>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	429a      	cmp	r2, r3
 800296e:	d10d      	bne.n	800298c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470060 	.word	0x42470060

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e11a      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b8f      	ldr	r3, [pc, #572]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d919      	bls.n	80029fa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x34>
 80029cc:	4b8a      	ldr	r3, [pc, #552]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a89      	ldr	r2, [pc, #548]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 0201 	bic.w	r2, r3, #1
 80029e0:	4985      	ldr	r1, [pc, #532]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e8:	4b83      	ldr	r3, [pc, #524]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0f9      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a06:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	497a      	ldr	r1, [pc, #488]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 808e 	beq.w	8002b42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d121      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0d7      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0cb      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0bf      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0b7      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fe f8c0 	bl	8000c14 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe f8b8 	bl	8000c14 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e09b      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xfc>
 8002ac2:	e03e      	b.n	8002b42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d112      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ace:	f7fe f8a1 	bl	8000c14 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e084      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_ClockConfig+0x12a>
 8002af0:	e027      	b.n	8002b42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11d      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fe f88a 	bl	8000c14 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e06d      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCC_ClockConfig+0x158>
 8002b1e:	e010      	b.n	8002b42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe f878 	bl	8000c14 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e05b      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d219      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x1be>
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	4923      	ldr	r1, [pc, #140]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCC_ClockConfig+0x254>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e034      	b.n	8002bee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4917      	ldr	r1, [pc, #92]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490f      	ldr	r1, [pc, #60]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f823 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_ClockConfig+0x258>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x264>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd ffca 	bl	8000b7c <HAL_InitTick>
 8002be8:	4603      	mov	r3, r0
 8002bea:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08002ed4 	.word	0x08002ed4
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d006      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x24>
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x2a>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d12c      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c2c:	613b      	str	r3, [r7, #16]
      break;
 8002c2e:	e037      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c32:	613b      	str	r3, [r7, #16]
      break;
 8002c34:	e034      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0d9b      	lsrs	r3, r3, #22
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c60:	fb02 f203 	mul.w	r2, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e007      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c72:	fb02 f203 	mul.w	r2, r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	613b      	str	r3, [r7, #16]
      break;
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0b5b      	lsrs	r3, r3, #13
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca0:	693b      	ldr	r3, [r7, #16]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	016e3600 	.word	0x016e3600
 8002cb8:	08002ec8 	.word	0x08002ec8

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000000 	.word	0x20000000

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff2 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08002ee4 	.word	0x08002ee4

08002cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d12c      	bne.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e016      	b.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6253      	str	r3, [r2, #36]	; 0x24
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002d48:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d5c:	d105      	bne.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d64:	d101      	bne.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d66:	2301      	movs	r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 0201 	bic.w	r2, r3, #1
 8002d84:	490b      	ldr	r1, [pc, #44]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <MX_MEMS_Init>:
extern uint8_t ID;
HTS221_IO_t HTS221_pIO;
HTS221_Object_t HTS221_pObj;

void MX_MEMS_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 

  /* USER CODE END SV */

  /* USER CODE BEGIN MEMS_Init_PreTreatment */
	HTS221_pIO.Address = (0x5F<<1);
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002dbe:	22be      	movs	r2, #190	; 0xbe
 8002dc0:	731a      	strb	r2, [r3, #12]
	HTS221_pIO.BusType = 0;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
	HTS221_pIO.Init = BSP_I2C1_Init;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <MX_MEMS_Init+0x50>)
 8002dcc:	601a      	str	r2, [r3, #0]
	HTS221_pIO.DeInit = BSP_I2C1_DeInit;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <MX_MEMS_Init+0x54>)
 8002dd2:	605a      	str	r2, [r3, #4]
	HTS221_pIO.ReadReg = BSP_I2C1_ReadReg;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <MX_MEMS_Init+0x58>)
 8002dd8:	615a      	str	r2, [r3, #20]
	HTS221_pIO.WriteReg = BSP_I2C1_WriteReg;
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <MX_MEMS_Init+0x5c>)
 8002dde:	611a      	str	r2, [r3, #16]
	HTS221_pIO.GetTick = BSP_GetTick;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <MX_MEMS_Init+0x60>)
 8002de4:	619a      	str	r2, [r3, #24]

	HTS221_RegisterBusIO(&HTS221_pObj, &HTS221_pIO);
 8002de6:	4907      	ldr	r1, [pc, #28]	; (8002e04 <MX_MEMS_Init+0x4c>)
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <MX_MEMS_Init+0x64>)
 8002dea:	f7fd fcc7 	bl	800077c <HTS221_RegisterBusIO>
	HTS221_Init(&HTS221_pObj);
 8002dee:	480b      	ldr	r0, [pc, #44]	; (8002e1c <MX_MEMS_Init+0x64>)
 8002df0:	f7fd fd0a 	bl	8000808 <HTS221_Init>

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002df4:	2201      	movs	r2, #1
 8002df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dfa:	4809      	ldr	r0, [pc, #36]	; (8002e20 <MX_MEMS_Init+0x68>)
 8002dfc:	f7fe fa98 	bl	8001330 <HAL_GPIO_WritePin>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000008c 	.word	0x2000008c
 8002e08:	08000269 	.word	0x08000269
 8002e0c:	080002cd 	.word	0x080002cd
 8002e10:	08000381 	.word	0x08000381
 8002e14:	0800031d 	.word	0x0800031d
 8002e18:	080003e5 	.word	0x080003e5
 8002e1c:	200000a8 	.word	0x200000a8
 8002e20:	40020400 	.word	0x40020400

08002e24 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
	int32_t res;
  /* USER CODE END MEMS_Process_PreTreatment */
	//HTS221_HUM_GetHumidity(&HTS221_pObj, &humidity);

	res = HTS221_ReadID(&HTS221_pObj, &ID);
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <MX_MEMS_Process+0x28>)
 8002e2c:	4808      	ldr	r0, [pc, #32]	; (8002e50 <MX_MEMS_Process+0x2c>)
 8002e2e:	f7fd fd06 	bl	800083e <HTS221_ReadID>
 8002e32:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002e34:	2064      	movs	r0, #100	; 0x64
 8002e36:	f7fd fef7 	bl	8000c28 <HAL_Delay>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_MEMS_Process+0x30>)
 8002e40:	f7fe fa8e 	bl	8001360 <HAL_GPIO_TogglePin>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000080 	.word	0x20000080
 8002e50:	200000a8 	.word	0x200000a8
 8002e54:	40020400 	.word	0x40020400

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	4e0c      	ldr	r6, [pc, #48]	; (8002e90 <__libc_init_array+0x38>)
 8002e5e:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e60:	1ba4      	subs	r4, r4, r6
 8002e62:	10a4      	asrs	r4, r4, #2
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	f000 f822 	bl	8002eb0 <_init>
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	4e0a      	ldr	r6, [pc, #40]	; (8002e98 <__libc_init_array+0x40>)
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <__libc_init_array+0x44>)
 8002e72:	1ba4      	subs	r4, r4, r6
 8002e74:	10a4      	asrs	r4, r4, #2
 8002e76:	42a5      	cmp	r5, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e80:	4798      	blx	r3
 8002e82:	3501      	adds	r5, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8a:	4798      	blx	r3
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002eec 	.word	0x08002eec
 8002e94:	08002eec 	.word	0x08002eec
 8002e98:	08002eec 	.word	0x08002eec
 8002e9c:	08002ef0 	.word	0x08002ef0

08002ea0 <memset>:
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4402      	add	r2, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
