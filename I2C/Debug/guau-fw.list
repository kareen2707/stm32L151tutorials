
guau-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800392c  0800392c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800392c  0800392c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003940  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a487  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ee  00000000  00000000  0002a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001677d  00000000  00000000  0002d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fa3  00000000  00000000  00043865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d118  00000000  00000000  0004b808  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  000d899c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080038f0 	.word	0x080038f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080038f0 	.word	0x080038f0

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <BSP_I2C1_Init+0x58>)
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <BSP_I2C1_Init+0x5c>)
 8000732:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <BSP_I2C1_Init+0x60>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	4912      	ldr	r1, [pc, #72]	; (8000784 <BSP_I2C1_Init+0x60>)
 800073c:	600a      	str	r2, [r1, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d117      	bne.n	8000772 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <BSP_I2C1_Init+0x58>)
 8000744:	f001 ffb8 	bl	80026b8 <HAL_I2C_GetState>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d111      	bne.n	8000772 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <BSP_I2C1_Init+0x58>)
 8000750:	f000 f8e2 	bl	8000918 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10b      	bne.n	8000772 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <BSP_I2C1_Init+0x58>)
 800075c:	f000 f8a8 	bl	80008b0 <MX_I2C1_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8000766:	f06f 0307 	mvn.w	r3, #7
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	e001      	b.n	8000772 <BSP_I2C1_Init+0x4e>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000034 	.word	0x20000034
 8000780:	40005400 	.word	0x40005400
 8000784:	20000028 	.word	0x20000028

08000788 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <BSP_I2C1_DeInit+0x48>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d014      	beq.n	80007c4 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <BSP_I2C1_DeInit+0x48>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <BSP_I2C1_DeInit+0x48>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <BSP_I2C1_DeInit+0x48>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10b      	bne.n	80007c4 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <BSP_I2C1_DeInit+0x4c>)
 80007ae:	f000 f8e7 	bl	8000980 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <BSP_I2C1_DeInit+0x4c>)
 80007b4:	f001 fc1e 	bl	8001ff4 <HAL_I2C_DeInit>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 80007be:	f06f 0307 	mvn.w	r3, #7
 80007c2:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028
 80007d4:	20000034 	.word	0x20000034

080007d8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af04      	add	r7, sp, #16
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	460b      	mov	r3, r1
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80007f2:	89ba      	ldrh	r2, [r7, #12]
 80007f4:	89f9      	ldrh	r1, [r7, #14]
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <BSP_I2C1_WriteReg+0x60>)
 8000808:	f001 fc36 	bl	8002078 <HAL_I2C_Mem_Write>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00c      	beq.n	800082c <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <BSP_I2C1_WriteReg+0x60>)
 8000814:	f001 ff5d 	bl	80026d2 <HAL_I2C_GetError>
 8000818:	4603      	mov	r3, r0
 800081a:	2b04      	cmp	r3, #4
 800081c:	d103      	bne.n	8000826 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800081e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e002      	b.n	800082c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000826:	f06f 0303 	mvn.w	r3, #3
 800082a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800082c:	697b      	ldr	r3, [r7, #20]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000034 	.word	0x20000034

0800083c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af04      	add	r7, sp, #16
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	461a      	mov	r2, r3
 8000846:	4603      	mov	r3, r0
 8000848:	81fb      	strh	r3, [r7, #14]
 800084a:	460b      	mov	r3, r1
 800084c:	81bb      	strh	r3, [r7, #12]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000856:	89ba      	ldrh	r2, [r7, #12]
 8000858:	89f9      	ldrh	r1, [r7, #14]
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <BSP_I2C1_ReadReg+0x60>)
 800086c:	f001 fcfe 	bl	800226c <HAL_I2C_Mem_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00c      	beq.n	8000890 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <BSP_I2C1_ReadReg+0x60>)
 8000878:	f001 ff2b 	bl	80026d2 <HAL_I2C_GetError>
 800087c:	4603      	mov	r3, r0
 800087e:	2b04      	cmp	r3, #4
 8000880:	d103      	bne.n	800088a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000882:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e002      	b.n	8000890 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800088a:	f06f 0303 	mvn.w	r3, #3
 800088e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000890:	697b      	ldr	r3, [r7, #20]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000034 	.word	0x20000034

080008a0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80008a4:	f000 febe 	bl	8001624 <HAL_GetTick>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MX_I2C1_Init+0x60>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_I2C1_Init+0x64>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f001 fa55 	bl	8001da4 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	000186a0 	.word	0x000186a0

08000918 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <I2C1_MspInit+0x60>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <I2C1_MspInit+0x60>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	61d3      	str	r3, [r2, #28]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <I2C1_MspInit+0x60>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	2312      	movs	r3, #18
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000948:	2304      	movs	r3, #4
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <I2C1_MspInit+0x64>)
 8000954:	f000 ff76 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <I2C1_MspInit+0x60>)
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <I2C1_MspInit+0x60>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000962:	6253      	str	r3, [r2, #36]	; 0x24
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <I2C1_MspInit+0x60>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <I2C1_MspDeInit+0x24>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <I2C1_MspDeInit+0x24>)
 800098e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000992:	6253      	str	r3, [r2, #36]	; 0x24
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8000994:	21c0      	movs	r1, #192	; 0xc0
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <I2C1_MspDeInit+0x28>)
 8000998:	f001 f8e2 	bl	8001b60 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x5c>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <MX_GPIO_Init+0x5c>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	61d3      	str	r3, [r2, #28]
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_GPIO_Init+0x5c>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x60>)
 80009e0:	f001 f9ae 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80009e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0x60>)
 80009fc:	f000 ff22 	bl	8001844 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fda1 	bl	800155a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f80a 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff ffc6 	bl	80009ac <MX_GPIO_Init>
  MX_MEMS_Init();
 8000a20:	f002 fed2 	bl	80037c8 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000a24:	f002 ff1e 	bl	8003864 <MX_MEMS_Process>
  HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 fe05 	bl	8001638 <HAL_Delay>
  MX_MEMS_Process();
 8000a2e:	e7f9      	b.n	8000a24 <main+0x14>

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	; 0x48
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2234      	movs	r2, #52	; 0x34
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 ff4e 	bl	80038e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <SystemClock_Config+0x98>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <SystemClock_Config+0x98>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a60:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000a7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f964 	bl	8002d54 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a92:	f000 f81b 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fc80 	bl	80033b4 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000aba:	f000 f807 	bl	8000acc <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3748      	adds	r7, #72	; 0x48
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40007000 	.word	0x40007000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_MspInit+0x58>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_MspInit+0x58>)
 8000ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae8:	6253      	str	r3, [r2, #36]	; 0x24
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_MspInit+0x58>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_MspInit+0x58>)
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_MspInit+0x58>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6213      	str	r3, [r2, #32]
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_MspInit+0x58>)
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_MspInit+0x58>)
 8000b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_MspInit+0x58>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6253      	str	r3, [r2, #36]	; 0x24
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_MspInit+0x58>)
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40023800 	.word	0x40023800

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <HardFault_Handler+0x4>

08000b46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <MemManage_Handler+0x4>

08000b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <BusFault_Handler+0x4>

08000b52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <UsageFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 fd3e 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <SystemInit+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <SystemInit+0x5c>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <SystemInit+0x5c>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	4911      	ldr	r1, [pc, #68]	; (8000be4 <SystemInit+0x5c>)
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <SystemInit+0x60>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <SystemInit+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <SystemInit+0x5c>)
 8000baa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000bae:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000bb2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SystemInit+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SystemInit+0x5c>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SystemInit+0x5c>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SystemInit+0x5c>)
 8000bc6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000bca:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SystemInit+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x64>)
 8000bd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd8:	609a      	str	r2, [r3, #8]
#endif
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	88ffc00c 	.word	0x88ffc00c
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bf2:	e003      	b.n	8000bfc <LoopCopyDataInit>

08000bf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bfa:	3104      	adds	r1, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c04:	d3f6      	bcc.n	8000bf4 <CopyDataInit>
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c08:	e002      	b.n	8000c10 <LoopFillZerobss>

08000c0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c0c:	f842 3b04 	str.w	r3, [r2], #4

08000c10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c14:	d3f9      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c16:	f7ff ffb7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f002 fe3d 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fef7 	bl	8000a10 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r3, =_sidata
 8000c24:	08003934 	.word	0x08003934
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c30:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c34:	200000dc 	.word	0x200000dc

08000c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_IRQHandler>
	...

08000c3c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d103      	bne.n	8000c54 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e030      	b.n	8000cb6 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	7b1a      	ldrb	r2, [r3, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <HTS221_RegisterBusIO+0x84>)
 8000c90:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HTS221_RegisterBusIO+0x88>)
 8000c96:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d004      	beq.n	8000cb0 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4798      	blx	r3
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	e002      	b.n	8000cb6 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08001161 	.word	0x08001161
 8000cc4:	080011c3 	.word	0x080011c3

08000cc8 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d108      	bne.n	8000cec <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f9d0 	bl	8001080 <HTS221_Initialize>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e004      	b.n	8000cf6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	331c      	adds	r3, #28
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fb26 	bl	8001360 <hts221_device_id_get>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e000      	b.n	8000d22 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HTS221_Get_Init_Status>:
 * @param  pObj the device pObj
 * @param  Status 1 if initialized, 0 otherwise
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Get_Init_Status(HTS221_Object_t *pObj, uint8_t *Status)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  if (pObj == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <HTS221_Get_Init_Status+0x16>
  {
    return HTS221_ERROR;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e005      	b.n	8000d4c <HTS221_Get_Init_Status+0x22>
  }

  *Status = pObj->is_initialized;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	701a      	strb	r2, [r3, #0]

  return HTS221_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d101      	bne.n	8000d6c <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e015      	b.n	8000d98 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10b      	bne.n	8000d8e <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	331c      	adds	r3, #28
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fb00 	bl	8001382 <hts221_power_on_set>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	e004      	b.n	8000d98 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	331c      	adds	r3, #28
 8000dae:	f107 0218 	add.w	r2, r7, #24
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb8c 	bl	80014d2 <hts221_hum_adc_point_0_get>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	e082      	b.n	8000ecc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8000dc6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa90 	bl	80002f0 <__aeabi_i2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60bb      	str	r3, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	331c      	adds	r3, #28
 8000dd8:	f107 0218 	add.w	r2, r7, #24
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 faf5 	bl	80013ce <hts221_hum_rh_point_0_get>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <HTS221_HUM_GetHumidity+0x50>
  {
    return HTS221_ERROR;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e06d      	b.n	8000ecc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8000df0:	7e3b      	ldrb	r3, [r7, #24]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa78 	bl	80002e8 <__aeabi_ui2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60fb      	str	r3, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	331c      	adds	r3, #28
 8000e00:	f107 0218 	add.w	r2, r7, #24
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fb74 	bl	80014f4 <hts221_hum_adc_point_1_get>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <HTS221_HUM_GetHumidity+0x78>
  {
    return HTS221_ERROR;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e059      	b.n	8000ecc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8000e18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fa67 	bl	80002f0 <__aeabi_i2f>
 8000e22:	4603      	mov	r3, r0
 8000e24:	613b      	str	r3, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	331c      	adds	r3, #28
 8000e2a:	f107 0218 	add.w	r2, r7, #24
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fae3 	bl	80013fc <hts221_hum_rh_point_1_get>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HTS221_HUM_GetHumidity+0xa2>
  {
    return HTS221_ERROR;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	e044      	b.n	8000ecc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8000e42:	7e3b      	ldrb	r3, [r7, #24]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa4f 	bl	80002e8 <__aeabi_ui2f>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	617b      	str	r3, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2202      	movs	r2, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fd42 	bl	80038e0 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	331c      	adds	r3, #28
 8000e60:	f107 021c 	add.w	r2, r7, #28
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fa58 	bl	800131c <hts221_humidity_raw_get>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <HTS221_HUM_GetHumidity+0xd8>
  {
    return HTS221_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e029      	b.n	8000ecc <HTS221_HUM_GetHumidity+0x12c>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8000e78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fa37 	bl	80002f0 <__aeabi_i2f>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f924 	bl	80010d8 <Linear_Interpolation>
 8000e90:	4602      	mov	r2, r0
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 0100 	mov.w	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc18 	bl	80006d4 <__aeabi_fcmplt>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HTS221_HUM_GetHumidity+0x112>
  {
    *Value = 0.0f;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <HTS221_HUM_GetHumidity+0x134>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc29 	bl	8000710 <__aeabi_fcmpgt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HTS221_HUM_GetHumidity+0x12a>
  {
    *Value = 100.0f;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <HTS221_HUM_GetHumidity+0x134>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	42c80000 	.word	0x42c80000

08000ed8 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e015      	b.n	8000f1a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10b      	bne.n	8000f10 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	331c      	adds	r3, #28
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa3f 	bl	8001382 <hts221_power_on_set>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e004      	b.n	8000f1a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b088      	sub	sp, #32
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	331c      	adds	r3, #28
 8000f30:	f107 0218 	add.w	r2, r7, #24
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 faed 	bl	8001516 <hts221_temp_adc_point_0_get>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e068      	b.n	800101a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8000f48:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f9cf 	bl	80002f0 <__aeabi_i2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	60bb      	str	r3, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	331c      	adds	r3, #28
 8000f5a:	f107 0218 	add.w	r2, r7, #24
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fa62 	bl	800142a <hts221_temp_deg_point_0_get>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <HTS221_TEMP_GetTemperature+0x50>
  {
    return HTS221_ERROR;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	e053      	b.n	800101a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8000f72:	7e3b      	ldrb	r3, [r7, #24]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f9b7 	bl	80002e8 <__aeabi_ui2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60fb      	str	r3, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	331c      	adds	r3, #28
 8000f82:	f107 0218 	add.w	r2, r7, #24
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fad5 	bl	8001538 <hts221_temp_adc_point_1_get>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HTS221_TEMP_GetTemperature+0x78>
  {
    return HTS221_ERROR;
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	e03f      	b.n	800101a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8000f9a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f9a6 	bl	80002f0 <__aeabi_i2f>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	331c      	adds	r3, #28
 8000fac:	f107 0218 	add.w	r2, r7, #24
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fa63 	bl	800147e <hts221_temp_deg_point_1_get>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <HTS221_TEMP_GetTemperature+0xa2>
  {
    return HTS221_ERROR;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e02a      	b.n	800101a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8000fc4:	7e3b      	ldrb	r3, [r7, #24]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f98e 	bl	80002e8 <__aeabi_ui2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	617b      	str	r3, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fc81 	bl	80038e0 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	331c      	adds	r3, #28
 8000fe2:	f107 021c 	add.w	r2, r7, #28
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f9a8 	bl	800133e <hts221_temperature_raw_get>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <HTS221_TEMP_GetTemperature+0xd8>
  {
    return HTS221_ERROR;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	e00f      	b.n	800101a <HTS221_TEMP_GetTemperature+0xf8>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8000ffa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f976 	bl	80002f0 <__aeabi_i2f>
 8001004:	4602      	mov	r2, r0
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f863 	bl	80010d8 <Linear_Interpolation>
 8001012:	4602      	mov	r2, r0
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800102e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff fb58 	bl	80006e8 <__aeabi_fcmple>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HTS221_SetOutputDataRate+0x1e>
 800103e:	2301      	movs	r3, #1
 8001040:	e009      	b.n	8001056 <HTS221_SetOutputDataRate+0x32>
 8001042:	490e      	ldr	r1, [pc, #56]	; (800107c <HTS221_SetOutputDataRate+0x58>)
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff fb4f 	bl	80006e8 <__aeabi_fcmple>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HTS221_SetOutputDataRate+0x30>
 8001050:	2302      	movs	r3, #2
 8001052:	e000      	b.n	8001056 <HTS221_SetOutputDataRate+0x32>
 8001054:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001056:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	331c      	adds	r3, #28
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f90f 	bl	8001284 <hts221_data_rate_set>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	e000      	b.n	8001074 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40e00000 	.word	0x40e00000

08001080 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	331c      	adds	r3, #28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f977 	bl	8001382 <hts221_power_on_set>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e017      	b.n	80010d0 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	331c      	adds	r3, #28
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f912 	bl	80012d0 <hts221_block_data_update_set>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e00b      	b.n	80010d0 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80010b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffb1 	bl	8001024 <HTS221_SetOutputDataRate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	e000      	b.n	80010d0 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f7ff f849 	bl	8000184 <__aeabi_fsub>
 80010f2:	4603      	mov	r3, r0
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f94e 	bl	8000398 <__aeabi_fmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461c      	mov	r4, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f7ff f944 	bl	8000398 <__aeabi_fmul>
 8001110:	4603      	mov	r3, r0
 8001112:	461d      	mov	r5, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff f93a 	bl	8000398 <__aeabi_fmul>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	4628      	mov	r0, r5
 800112a:	f7ff f82b 	bl	8000184 <__aeabi_fsub>
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff f828 	bl	8000188 <__addsf3>
 8001138:	4603      	mov	r3, r0
 800113a:	461c      	mov	r4, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f7ff f81c 	bl	8000184 <__aeabi_fsub>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	4620      	mov	r0, r4
 8001152:	f7ff f9d5 	bl	8000500 <__aeabi_fdiv>
 8001156:	4603      	mov	r3, r0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}

08001160 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	461a      	mov	r2, r3
 800116c:	460b      	mov	r3, r1
 800116e:	72fb      	strb	r3, [r7, #11]
 8001170:	4613      	mov	r3, r2
 8001172:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10e      	bne.n	800119e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	695c      	ldr	r4, [r3, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	7b1b      	ldrb	r3, [r3, #12]
 8001188:	b298      	uxth	r0, r3
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b299      	uxth	r1, r3
 8001194:	893b      	ldrh	r3, [r7, #8]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	47a0      	blx	r4
 800119a:	4603      	mov	r3, r0
 800119c:	e00d      	b.n	80011ba <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	695c      	ldr	r4, [r3, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	7b1b      	ldrb	r3, [r3, #12]
 80011a6:	b298      	uxth	r0, r3
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b299      	uxth	r1, r3
 80011b2:	893b      	ldrh	r3, [r7, #8]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	47a0      	blx	r4
 80011b8:	4603      	mov	r3, r0
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}

080011c2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80011c2:	b590      	push	{r4, r7, lr}
 80011c4:	b087      	sub	sp, #28
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	461a      	mov	r2, r3
 80011ce:	460b      	mov	r3, r1
 80011d0:	72fb      	strb	r3, [r7, #11]
 80011d2:	4613      	mov	r3, r2
 80011d4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	691c      	ldr	r4, [r3, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	7b1b      	ldrb	r3, [r3, #12]
 80011ea:	b298      	uxth	r0, r3
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	b299      	uxth	r1, r3
 80011f6:	893b      	ldrh	r3, [r7, #8]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	47a0      	blx	r4
 80011fc:	4603      	mov	r3, r0
 80011fe:	e00d      	b.n	800121c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	691c      	ldr	r4, [r3, #16]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	7b1b      	ldrb	r3, [r3, #12]
 8001208:	b298      	uxth	r0, r3
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b299      	uxth	r1, r3
 8001214:	893b      	ldrh	r3, [r7, #8]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	47a0      	blx	r4
 800121a:	4603      	mov	r3, r0
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	461a      	mov	r2, r3
 8001230:	460b      	mov	r3, r1
 8001232:	72fb      	strb	r3, [r7, #11]
 8001234:	4613      	mov	r3, r2
 8001236:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685c      	ldr	r4, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6898      	ldr	r0, [r3, #8]
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	7af9      	ldrb	r1, [r7, #11]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	47a0      	blx	r4
 8001248:	6178      	str	r0, [r7, #20]
  return ret;
 800124a:	697b      	ldr	r3, [r7, #20]
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	72fb      	strb	r3, [r7, #11]
 8001264:	4613      	mov	r3, r2
 8001266:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681c      	ldr	r4, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	893b      	ldrh	r3, [r7, #8]
 8001272:	7af9      	ldrb	r1, [r7, #11]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	47a0      	blx	r4
 8001278:	6178      	str	r0, [r7, #20]
  return ret;
 800127a:	697b      	ldr	r3, [r7, #20]
}
 800127c:	4618      	mov	r0, r3
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}

08001284 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001290:	f107 0208 	add.w	r2, r7, #8
 8001294:	2301      	movs	r3, #1
 8001296:	2120      	movs	r1, #32
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffc3 	bl	8001224 <hts221_read_reg>
 800129e:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	7a3b      	ldrb	r3, [r7, #8]
 80012b0:	f362 0301 	bfi	r3, r2, #0, #2
 80012b4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80012b6:	f107 0208 	add.w	r2, r7, #8
 80012ba:	2301      	movs	r3, #1
 80012bc:	2120      	movs	r1, #32
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffc8 	bl	8001254 <hts221_write_reg>
 80012c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2301      	movs	r3, #1
 80012e2:	2120      	movs	r1, #32
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff9d 	bl	8001224 <hts221_read_reg>
 80012ea:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	f362 0382 	bfi	r3, r2, #2, #1
 8001300:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2301      	movs	r3, #1
 8001308:	2120      	movs	r1, #32
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <hts221_write_reg>
 8001310:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001326:	2302      	movs	r3, #2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	2128      	movs	r1, #40	; 0x28
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff79 	bl	8001224 <hts221_read_reg>
 8001332:	60f8      	str	r0, [r7, #12]
  return ret;
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001348:	2302      	movs	r3, #2
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	212a      	movs	r1, #42	; 0x2a
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff68 	bl	8001224 <hts221_read_reg>
 8001354:	60f8      	str	r0, [r7, #12]
  return ret;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800136a:	2301      	movs	r3, #1
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	210f      	movs	r1, #15
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff57 	bl	8001224 <hts221_read_reg>
 8001376:	60f8      	str	r0, [r7, #12]
  return ret;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	2301      	movs	r3, #1
 8001394:	2120      	movs	r1, #32
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff44 	bl	8001224 <hts221_read_reg>
 800139c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <hts221_power_on_set+0x42>
    reg.pd = val;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	f362 13c7 	bfi	r3, r2, #7, #1
 80013b2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80013b4:	f107 0208 	add.w	r2, r7, #8
 80013b8:	2301      	movs	r3, #1
 80013ba:	2120      	movs	r1, #32
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff49 	bl	8001254 <hts221_write_reg>
 80013c2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80013d8:	2301      	movs	r3, #1
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	2130      	movs	r1, #48	; 0x30
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff20 	bl	8001224 <hts221_read_reg>
 80013e4:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	701a      	strb	r2, [r3, #0]

  return ret;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001406:	2301      	movs	r3, #1
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	2131      	movs	r1, #49	; 0x31
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff09 	bl	8001224 <hts221_read_reg>
 8001412:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001434:	f107 020f 	add.w	r2, r7, #15
 8001438:	2301      	movs	r3, #1
 800143a:	2132      	movs	r1, #50	; 0x32
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fef1 	bl	8001224 <hts221_read_reg>
 8001442:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d114      	bne.n	8001474 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800144a:	f107 0210 	add.w	r2, r7, #16
 800144e:	2301      	movs	r3, #1
 8001450:	2135      	movs	r1, #53	; 0x35
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fee6 	bl	8001224 <hts221_read_reg>
 8001458:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800145a:	7c3b      	ldrb	r3, [r7, #16]
 800145c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001460:	b2db      	uxtb	r3, r3
 8001462:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	4413      	add	r3, r2
 800146c:	10db      	asrs	r3, r3, #3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001474:	697b      	ldr	r3, [r7, #20]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001488:	f107 020f 	add.w	r2, r7, #15
 800148c:	2301      	movs	r3, #1
 800148e:	2133      	movs	r1, #51	; 0x33
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fec7 	bl	8001224 <hts221_read_reg>
 8001496:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d114      	bne.n	80014c8 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800149e:	f107 0210 	add.w	r2, r7, #16
 80014a2:	2301      	movs	r3, #1
 80014a4:	2135      	movs	r1, #53	; 0x35
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff febc 	bl	8001224 <hts221_read_reg>
 80014ac:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80014ae:	7c3b      	ldrb	r3, [r7, #16]
 80014b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80014b8:	7cfb      	ldrb	r3, [r7, #19]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	4413      	add	r3, r2
 80014c0:	10db      	asrs	r3, r3, #3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80014c8:	697b      	ldr	r3, [r7, #20]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80014dc:	2302      	movs	r3, #2
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	2136      	movs	r1, #54	; 0x36
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe9e 	bl	8001224 <hts221_read_reg>
 80014e8:	60f8      	str	r0, [r7, #12]
  return ret;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80014fe:	2302      	movs	r3, #2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	213a      	movs	r1, #58	; 0x3a
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fe8d 	bl	8001224 <hts221_read_reg>
 800150a:	60f8      	str	r0, [r7, #12]
  return ret;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8001520:	2302      	movs	r3, #2
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	213c      	movs	r1, #60	; 0x3c
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fe7c 	bl	8001224 <hts221_read_reg>
 800152c:	60f8      	str	r0, [r7, #12]
  return ret;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8001542:	2302      	movs	r3, #2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	213e      	movs	r1, #62	; 0x3e
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fe6b 	bl	8001224 <hts221_read_reg>
 800154e:	60f8      	str	r0, [r7, #12]
  return ret;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f939 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f80e 	bl	800158c <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	e001      	b.n	8001580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800157c:	f7ff faac 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_InitTick+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d022      	beq.n	80015e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_InitTick+0x6c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_InitTick+0x68>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f938 	bl	800182a <HAL_SYSTICK_Config>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10f      	bne.n	80015e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d809      	bhi.n	80015da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	f04f 30ff 	mov.w	r0, #4294967295
 80015ce:	f000 f910 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_InitTick+0x70>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e007      	b.n	80015ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e004      	b.n	80015ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x1c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x20>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x1c>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000088 	.word	0x20000088
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b02      	ldr	r3, [pc, #8]	; (8001634 <HAL_GetTick+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000088 	.word	0x20000088

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff fff0 	bl	8001624 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d004      	beq.n	800165c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_Delay+0x40>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165c:	bf00      	nop
 800165e:	f7ff ffe1 	bl	8001624 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	429a      	cmp	r2, r3
 800166c:	d8f7      	bhi.n	800165e <HAL_Delay+0x26>
  {
  }
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff90 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff49 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff5e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb0 	bl	8001798 <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800185a:	e160      	b.n	8001b1e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8152 	beq.w	8001b18 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x40>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d00b      	beq.n	8001920 <HAL_GPIO_Init+0xdc>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001914:	2b11      	cmp	r3, #17
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b12      	cmp	r3, #18
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80ac 	beq.w	8001b18 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d025      	beq.n	8001a50 <HAL_GPIO_Init+0x20c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4f      	ldr	r2, [pc, #316]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01f      	beq.n	8001a4c <HAL_GPIO_Init+0x208>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4e      	ldr	r2, [pc, #312]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d019      	beq.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4d      	ldr	r2, [pc, #308]	; (8001b4c <HAL_GPIO_Init+0x308>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <HAL_GPIO_Init+0x200>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1fc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_GPIO_Init+0x314>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e00c      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a38:	2307      	movs	r3, #7
 8001a3a:	e00a      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	e008      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a40:	2304      	movs	r3, #4
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a50:	2300      	movs	r3, #0
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a62:	4936      	ldr	r1, [pc, #216]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a94:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a9a:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f ae97 	bne.w	800185c <HAL_GPIO_Init+0x18>
  } 
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001b76:	e0c4      	b.n	8001d02 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80b7 	beq.w	8001cfc <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_GPIO_DeInit+0x1bc>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <HAL_GPIO_DeInit+0x1c0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d025      	beq.n	8001c04 <HAL_GPIO_DeInit+0xa4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_GPIO_DeInit+0x1c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d01f      	beq.n	8001c00 <HAL_GPIO_DeInit+0xa0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a59      	ldr	r2, [pc, #356]	; (8001d28 <HAL_GPIO_DeInit+0x1c8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d019      	beq.n	8001bfc <HAL_GPIO_DeInit+0x9c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_GPIO_DeInit+0x1cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <HAL_GPIO_DeInit+0x98>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_GPIO_DeInit+0x1d0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_GPIO_DeInit+0x94>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a56      	ldr	r2, [pc, #344]	; (8001d34 <HAL_GPIO_DeInit+0x1d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d007      	beq.n	8001bf0 <HAL_GPIO_DeInit+0x90>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_GPIO_DeInit+0x1d8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_GPIO_DeInit+0x8c>
 8001be8:	2306      	movs	r3, #6
 8001bea:	e00c      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001bec:	2307      	movs	r3, #7
 8001bee:	e00a      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	e008      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_DeInit+0xa6>
 8001c04:	2300      	movs	r3, #0
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d132      	bne.n	8001c7c <HAL_GPIO_DeInit+0x11c>
      {
        tmp = (0x0FU) << (4 * (position & 0x03));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_GPIO_DeInit+0x1bc>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	4839      	ldr	r0, [pc, #228]	; (8001d1c <HAL_GPIO_DeInit+0x1bc>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	493b      	ldr	r1, [pc, #236]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4938      	ldr	r1, [pc, #224]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4931      	ldr	r1, [pc, #196]	; (8001d3c <HAL_GPIO_DeInit+0x1dc>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2103      	movs	r1, #3
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	08d2      	lsrs	r2, r2, #3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2103      	movs	r1, #3
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2103      	movs	r1, #3
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f af34 	bne.w	8001b78 <HAL_GPIO_DeInit+0x18>
  }
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e10f      	b.n	8001fd6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f941 	bl	8002052 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de8:	f001 fc7a 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <HAL_I2C_Init+0x23c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d807      	bhi.n	8001e08 <HAL_I2C_Init+0x64>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_I2C_Init+0x240>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e006      	b.n	8001e16 <HAL_I2C_Init+0x72>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <HAL_I2C_Init+0x244>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0db      	b.n	8001fd6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a72      	ldr	r2, [pc, #456]	; (8001fec <HAL_I2C_Init+0x248>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a64      	ldr	r2, [pc, #400]	; (8001fe0 <HAL_I2C_Init+0x23c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d802      	bhi.n	8001e58 <HAL_I2C_Init+0xb4>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	e009      	b.n	8001e6c <HAL_I2C_Init+0xc8>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a63      	ldr	r2, [pc, #396]	; (8001ff0 <HAL_I2C_Init+0x24c>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4956      	ldr	r1, [pc, #344]	; (8001fe0 <HAL_I2C_Init+0x23c>)
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d80d      	bhi.n	8001ea8 <HAL_I2C_Init+0x104>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	bf38      	it	cc
 8001ea4:	2304      	movcc	r3, #4
 8001ea6:	e04f      	b.n	8001f48 <HAL_I2C_Init+0x1a4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_I2C_Init+0x130>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e012      	b.n	8001efa <HAL_I2C_Init+0x156>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	0099      	lsls	r1, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x15e>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e022      	b.n	8001f48 <HAL_I2C_Init+0x1a4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <HAL_I2C_Init+0x184>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e58      	subs	r0, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	440b      	add	r3, r1
 8001f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Init+0x1a4>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	6809      	ldr	r1, [r1, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6911      	ldr	r1, [r2, #16]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68d2      	ldr	r2, [r2, #12]
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	000186a0 	.word	0x000186a0
 8001fe4:	001e847f 	.word	0x001e847f
 8001fe8:	003d08ff 	.word	0x003d08ff
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	10624dd3 	.word	0x10624dd3

08001ff4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e021      	b.n	800204a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2224      	movs	r2, #36	; 0x24
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f820 	bl	8002064 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002092:	f7ff fac7 	bl	8001624 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	f040 80d9 	bne.w	8002258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	2201      	movs	r2, #1
 80020ae:	496d      	ldr	r1, [pc, #436]	; (8002264 <HAL_I2C_Mem_Write+0x1ec>)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fc73 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	e0cc      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Mem_Write+0x56>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0c5      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d007      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2221      	movs	r2, #33	; 0x21
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_I2C_Mem_Write+0x1f0>)
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002136:	88f8      	ldrh	r0, [r7, #6]
 8002138:	893a      	ldrh	r2, [r7, #8]
 800213a:	8979      	ldrh	r1, [r7, #10]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4603      	mov	r3, r0
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 face 	bl	80026e8 <I2C_RequestMemoryWrite>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d052      	beq.n	80021f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e081      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fcf4 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b04      	cmp	r3, #4
 800216c:	d107      	bne.n	800217e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06b      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_I2C_Mem_Write+0x180>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1aa      	bne.n	8002156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fce0 	bl	8002bca <I2C_WaitOnBTFFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e016      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	00100002 	.word	0x00100002
 8002268:	ffff0000 	.word	0xffff0000

0800226c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	460b      	mov	r3, r1
 8002280:	813b      	strh	r3, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002286:	f7ff f9cd 	bl	8001624 <HAL_GetTick>
 800228a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	f040 8208 	bne.w	80026aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2319      	movs	r3, #25
 80022a0:	2201      	movs	r2, #1
 80022a2:	497b      	ldr	r1, [pc, #492]	; (8002490 <HAL_I2C_Mem_Read+0x224>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fb79 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	e1fb      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Read+0x56>
 80022be:	2302      	movs	r3, #2
 80022c0:	e1f4      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d007      	beq.n	80022e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2222      	movs	r2, #34	; 0x22
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a5b      	ldr	r2, [pc, #364]	; (8002494 <HAL_I2C_Mem_Read+0x228>)
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232a:	88f8      	ldrh	r0, [r7, #6]
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fa5e 	bl	80027fc <I2C_RequestMemoryRead>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1b0      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e184      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e164      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	e144      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002410:	e138      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	2b03      	cmp	r3, #3
 8002418:	f200 80f1 	bhi.w	80025fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b01      	cmp	r3, #1
 8002422:	d123      	bne.n	800246c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fc0f 	bl	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e139      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246a:	e10b      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14e      	bne.n	8002512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247a:	2200      	movs	r2, #0
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <HAL_I2C_Mem_Read+0x22c>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa8c 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e10e      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000
 8002498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002510:	e0b8      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2200      	movs	r2, #0
 800251a:	4966      	ldr	r1, [pc, #408]	; (80026b4 <HAL_I2C_Mem_Read+0x448>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fa3d 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0bf      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2200      	movs	r2, #0
 8002576:	494f      	ldr	r1, [pc, #316]	; (80026b4 <HAL_I2C_Mem_Read+0x448>)
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fa0f 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e091      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fc:	e042      	b.n	8002684 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fb22 	bl	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e04c      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d118      	bne.n	8002684 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f aec2 	bne.w	8002412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010004 	.word	0x00010004

080026b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2200      	movs	r2, #0
 800271a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f93c 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e05f      	b.n	80027ee <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800273c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	492d      	ldr	r1, [pc, #180]	; (80027f8 <I2C_RequestMemoryWrite+0x110>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f980 	bl	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e04c      	b.n	80027ee <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f9ea 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b04      	cmp	r3, #4
 8002780:	d107      	bne.n	8002792 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02b      	b.n	80027ee <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800279c:	893b      	ldrh	r3, [r7, #8]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	e021      	b.n	80027ec <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027a8:	893b      	ldrh	r3, [r7, #8]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9c4 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d107      	bne.n	80027de <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e005      	b.n	80027ee <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00010002 	.word	0x00010002

080027fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	817b      	strh	r3, [r7, #10]
 800280e:	460b      	mov	r3, r1
 8002810:	813b      	strh	r3, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2200      	movs	r2, #0
 800283e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8aa 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e09e      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	494c      	ldr	r1, [pc, #304]	; (8002998 <I2C_RequestMemoryRead+0x19c>)
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f8ee 	bl	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e08b      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f958 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d107      	bne.n	80028b6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06a      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	e021      	b.n	8002910 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028cc:	893b      	ldrh	r3, [r7, #8]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	6a39      	ldr	r1, [r7, #32]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f932 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d107      	bne.n	8002902 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e044      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002906:	893b      	ldrh	r3, [r7, #8]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	6a39      	ldr	r1, [r7, #32]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f917 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b04      	cmp	r3, #4
 8002926:	d107      	bne.n	8002938 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002936:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e029      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f81f 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e013      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	4906      	ldr	r1, [pc, #24]	; (8002998 <I2C_RequestMemoryRead+0x19c>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f863 	bl	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00010002 	.word	0x00010002

0800299c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ac:	e025      	b.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d021      	beq.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe fe35 	bl	8001624 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e023      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10d      	bne.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	e00c      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d0b6      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a58:	e051      	b.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a68:	d123      	bne.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0204 	orr.w	r2, r3, #4
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e046      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d021      	beq.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe fdb3 	bl	8001624 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e020      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10c      	bne.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e00b      	b.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d18d      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b54:	e02d      	b.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8ce 	bl	8002cf8 <I2C_IsAcknowledgeFailed>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02d      	b.n	8002bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d021      	beq.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fd59 	bl	8001624 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d1ca      	bne.n	8002b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd6:	e02d      	b.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f88d 	bl	8002cf8 <I2C_IsAcknowledgeFailed>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e02d      	b.n	8002c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d021      	beq.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7fe fd18 	bl	8001624 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d302      	bcc.n	8002c06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e007      	b.n	8002c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d1ca      	bne.n	8002bd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	e042      	b.n	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d119      	bne.n	8002c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e029      	b.n	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7fe fcc2 	bl	8001624 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d302      	bcc.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d1b5      	bne.n	8002c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d11b      	bne.n	8002d48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e31d      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d07b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d006      	beq.n	8002d9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5e>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d10b      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9a:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d06a      	beq.n	8002e7c <HAL_RCC_OscConfig+0x128>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d166      	bne.n	8002e7c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e2f7      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x74>
 8002dba:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e02d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x96>
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a78      	ldr	r2, [pc, #480]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e01c      	b.n	8002e24 <HAL_RCC_OscConfig+0xd0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xb8>
 8002df2:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a70      	ldr	r2, [pc, #448]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6d      	ldr	r2, [pc, #436]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd0>
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fbfa 	bl	8001624 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fbf6 	bl	8001624 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e2ad      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e46:	4b5c      	ldr	r3, [pc, #368]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe0>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fbe6 	bl	8001624 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fbe2 	bl	8001624 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e299      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e6e:	4b52      	ldr	r3, [pc, #328]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x108>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d05a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d119      	bne.n	8002eca <HAL_RCC_OscConfig+0x176>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x160>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e276      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	493d      	ldr	r1, [pc, #244]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec8:	e03a      	b.n	8002f40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCC_OscConfig+0x268>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fba4 	bl	8001624 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fba0 	bl	8001624 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e257      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef2:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	492a      	ldr	r1, [pc, #168]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
 8002f12:	e015      	b.n	8002f40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x268>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fb83 	bl	8001624 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fb7f 	bl	8001624 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e236      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80b8 	beq.w	80030be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d170      	bne.n	8003036 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_OscConfig+0x218>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e21a      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d921      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fbc1 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e208      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4906      	ldr	r1, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	4901      	ldr	r1, [pc, #4]	; (8002fb8 <HAL_RCC_OscConfig+0x264>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
 8002fb6:	e020      	b.n	8002ffa <HAL_RCC_OscConfig+0x2a6>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc0:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	49a1      	ldr	r1, [pc, #644]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd2:	4ba0      	ldr	r3, [pc, #640]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	499c      	ldr	r1, [pc, #624]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fb8c 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1d3      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	0b5b      	lsrs	r3, r3, #13
 8003000:	3301      	adds	r3, #1
 8003002:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800300a:	4a92      	ldr	r2, [pc, #584]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	0912      	lsrs	r2, r2, #4
 8003010:	f002 020f 	and.w	r2, r2, #15
 8003014:	4990      	ldr	r1, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0x504>)
 8003016:	5c8a      	ldrb	r2, [r1, r2]
 8003018:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800301a:	4a90      	ldr	r2, [pc, #576]	; (800325c <HAL_RCC_OscConfig+0x508>)
 800301c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800301e:	4b90      	ldr	r3, [pc, #576]	; (8003260 <HAL_RCC_OscConfig+0x50c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fab2 	bl	800158c <HAL_InitTick>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d045      	beq.n	80030be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	e1b5      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d029      	beq.n	8003092 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800303e:	4b89      	ldr	r3, [pc, #548]	; (8003264 <HAL_RCC_OscConfig+0x510>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe faee 	bl	8001624 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304c:	f7fe faea 	bl	8001624 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1a1      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800305e:	4b7d      	ldr	r3, [pc, #500]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800306a:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4977      	ldr	r1, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307c:	4b75      	ldr	r3, [pc, #468]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	4972      	ldr	r1, [pc, #456]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003092:	4b74      	ldr	r3, [pc, #464]	; (8003264 <HAL_RCC_OscConfig+0x510>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fac4 	bl	8001624 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a0:	f7fe fac0 	bl	8001624 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e177      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030b2:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x514>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe faa4 	bl	8001624 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe faa0 	bl	8001624 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e157      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030f2:	4b58      	ldr	r3, [pc, #352]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x38c>
 80030fe:	e015      	b.n	800312c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_OscConfig+0x514>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fa8d 	bl	8001624 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fa89 	bl	8001624 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e140      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80b5 	beq.w	80032a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b45      	ldr	r3, [pc, #276]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4a41      	ldr	r2, [pc, #260]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6253      	str	r3, [r2, #36]	; 0x24
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x518>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <HAL_RCC_OscConfig+0x518>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3d      	ldr	r2, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x518>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fa51 	bl	8001624 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fa4d 	bl	8001624 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e104      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x518>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x466>
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6353      	str	r3, [r2, #52]	; 0x34
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x4c2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x488>
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	4a23      	ldr	r2, [pc, #140]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031cc:	6353      	str	r3, [r2, #52]	; 0x34
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d8:	6353      	str	r3, [r2, #52]	; 0x34
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x4c2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x4aa>
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ee:	6353      	str	r3, [r2, #52]	; 0x34
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6353      	str	r3, [r2, #52]	; 0x34
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x4c2>
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	6353      	str	r3, [r2, #52]	; 0x34
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003214:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fa01 	bl	8001624 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f9fd 	bl	8001624 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0b2      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x4d2>
 8003248:	e023      	b.n	8003292 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe f9eb 	bl	8001624 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003250:	e019      	b.n	8003286 <HAL_RCC_OscConfig+0x532>
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	08003914 	.word	0x08003914
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004
 8003264:	42470020 	.word	0x42470020
 8003268:	42470680 	.word	0x42470680
 800326c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe f9d8 	bl	8001624 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e08d      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ee      	bne.n	8003270 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003292:	7ffb      	ldrb	r3, [r7, #31]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b44      	ldr	r3, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	4a43      	ldr	r2, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d079      	beq.n	80033a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d056      	beq.n	8003360 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d13b      	bne.n	8003332 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_OscConfig+0x65c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe f9b0 	bl	8001624 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe f9ac 	bl	8001624 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e063      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4319      	orrs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	430b      	orrs	r3, r1
 80032fe:	492b      	ldr	r1, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_RCC_OscConfig+0x65c>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe f98b 	bl	8001624 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe f987 	bl	8001624 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e03e      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x5be>
 8003330:	e036      	b.n	80033a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_OscConfig+0x65c>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe f974 	bl	8001624 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe f970 	bl	8001624 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e027      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x5ec>
 800335e:	e01f      	b.n	80033a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01a      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <HAL_RCC_OscConfig+0x658>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	429a      	cmp	r2, r3
 800337e:	d10d      	bne.n	800339c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470060 	.word	0x42470060

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e11a      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d919      	bls.n	800340a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x34>
 80033dc:	4b8a      	ldr	r3, [pc, #552]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a89      	ldr	r2, [pc, #548]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b87      	ldr	r3, [pc, #540]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 0201 	bic.w	r2, r3, #1
 80033f0:	4985      	ldr	r1, [pc, #532]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f8:	4b83      	ldr	r3, [pc, #524]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0f9      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003416:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	497a      	ldr	r1, [pc, #488]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 808e 	beq.w	8003552 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800343e:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d121      	bne.n	800348e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0d7      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0cb      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0bf      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800347e:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0b7      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	495c      	ldr	r1, [pc, #368]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fe f8c0 	bl	8001624 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe f8b8 	bl	8001624 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e09b      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c6:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d1ee      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xfc>
 80034d2:	e03e      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d112      	bne.n	8003502 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fe f8a1 	bl	8001624 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e084      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b45      	ldr	r3, [pc, #276]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_ClockConfig+0x12a>
 8003500:	e027      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d11d      	bne.n	8003546 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe f88a 	bl	8001624 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e06d      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_ClockConfig+0x158>
 800352e:	e010      	b.n	8003552 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe f878 	bl	8001624 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e05b      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ee      	bne.n	8003530 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003552:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d219      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_RCC_ClockConfig+0x1be>
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	4923      	ldr	r1, [pc, #140]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_RCC_ClockConfig+0x254>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e034      	b.n	80035fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4917      	ldr	r1, [pc, #92]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	490f      	ldr	r1, [pc, #60]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035d2:	f000 f823 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035d6:	4601      	mov	r1, r0
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_RCC_ClockConfig+0x258>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x264>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd ffca 	bl	800158c <HAL_InitTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00
 800360c:	40023800 	.word	0x40023800
 8003610:	08003914 	.word	0x08003914
 8003614:	20000000 	.word	0x20000000
 8003618:	20000004 	.word	0x20000004

0800361c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b08      	cmp	r3, #8
 8003630:	d006      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x24>
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d007      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x2a>
 8003636:	2b04      	cmp	r3, #4
 8003638:	d12c      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800363c:	613b      	str	r3, [r7, #16]
      break;
 800363e:	e037      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003642:	613b      	str	r3, [r7, #16]
      break;
 8003644:	e034      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	0c9b      	lsrs	r3, r3, #18
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	0d9b      	lsrs	r3, r3, #22
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	3301      	adds	r3, #1
 800365e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003670:	fb02 f203 	mul.w	r2, r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e007      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003682:	fb02 f203 	mul.w	r2, r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	613b      	str	r3, [r7, #16]
      break;
 8003692:	e00d      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0b5b      	lsrs	r3, r3, #13
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	613b      	str	r3, [r7, #16]
      break;
 80036ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b0:	693b      	ldr	r3, [r7, #16]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	40023800 	.word	0x40023800
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	016e3600 	.word	0x016e3600
 80036c8:	08003908 	.word	0x08003908

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <HAL_RCC_GetHCLKFreq+0x10>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000000 	.word	0x20000000

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff2 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036e8:	4601      	mov	r1, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4a03      	ldr	r2, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	08003924 	.word	0x08003924

08003708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d12c      	bne.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e016      	b.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6253      	str	r3, [r2, #36]	; 0x24
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003758:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	4a17      	ldr	r2, [pc, #92]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800376c:	d105      	bne.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003774:	d101      	bne.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003776:	2301      	movs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 0201 	bic.w	r2, r3, #1
 8003794:	490b      	ldr	r1, [pc, #44]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
 80037c4:	40023c00 	.word	0x40023c00

080037c8 <MX_MEMS_Init>:

HTS221_IO_t HTS221_pIO;
HTS221_Object_t HTS221_pObj;

void MX_MEMS_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 

  /* USER CODE END SV */

  /* USER CODE BEGIN MEMS_Init_PreTreatment */
	HTS221_pIO.Address = (0x5F<<1);
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <MX_MEMS_Init+0x74>)
 80037ce:	22be      	movs	r2, #190	; 0xbe
 80037d0:	731a      	strb	r2, [r3, #12]
	HTS221_pIO.BusType = 0;
 80037d2:	4b1a      	ldr	r3, [pc, #104]	; (800383c <MX_MEMS_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
	HTS221_pIO.Init = BSP_I2C1_Init;
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <MX_MEMS_Init+0x74>)
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <MX_MEMS_Init+0x78>)
 80037dc:	601a      	str	r2, [r3, #0]
	HTS221_pIO.DeInit = BSP_I2C1_DeInit;
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <MX_MEMS_Init+0x74>)
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <MX_MEMS_Init+0x7c>)
 80037e2:	605a      	str	r2, [r3, #4]
	HTS221_pIO.ReadReg = BSP_I2C1_ReadReg;
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <MX_MEMS_Init+0x74>)
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <MX_MEMS_Init+0x80>)
 80037e8:	615a      	str	r2, [r3, #20]
	HTS221_pIO.WriteReg = BSP_I2C1_WriteReg;
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <MX_MEMS_Init+0x74>)
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <MX_MEMS_Init+0x84>)
 80037ee:	611a      	str	r2, [r3, #16]
	HTS221_pIO.GetTick = BSP_GetTick;
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <MX_MEMS_Init+0x74>)
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <MX_MEMS_Init+0x88>)
 80037f4:	619a      	str	r2, [r3, #24]

	HTS221_RegisterBusIO(&HTS221_pObj, &HTS221_pIO);
 80037f6:	4911      	ldr	r1, [pc, #68]	; (800383c <MX_MEMS_Init+0x74>)
 80037f8:	4816      	ldr	r0, [pc, #88]	; (8003854 <MX_MEMS_Init+0x8c>)
 80037fa:	f7fd fa1f 	bl	8000c3c <HTS221_RegisterBusIO>
	HTS221_Init(&HTS221_pObj);
 80037fe:	4815      	ldr	r0, [pc, #84]	; (8003854 <MX_MEMS_Init+0x8c>)
 8003800:	f7fd fa62 	bl	8000cc8 <HTS221_Init>

	HTS221_ReadID(&HTS221_pObj, &ID);
 8003804:	4914      	ldr	r1, [pc, #80]	; (8003858 <MX_MEMS_Init+0x90>)
 8003806:	4813      	ldr	r0, [pc, #76]	; (8003854 <MX_MEMS_Init+0x8c>)
 8003808:	f7fd fa79 	bl	8000cfe <HTS221_ReadID>
	if(ID == HTS221_ID){
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <MX_MEMS_Init+0x90>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2bbc      	cmp	r3, #188	; 0xbc
 8003812:	d10a      	bne.n	800382a <MX_MEMS_Init+0x62>
			HTS221_Get_Init_Status(&HTS221_pObj, &status);
 8003814:	4911      	ldr	r1, [pc, #68]	; (800385c <MX_MEMS_Init+0x94>)
 8003816:	480f      	ldr	r0, [pc, #60]	; (8003854 <MX_MEMS_Init+0x8c>)
 8003818:	f7fd fa87 	bl	8000d2a <HTS221_Get_Init_Status>
			HTS221_HUM_Enable(&HTS221_pObj);
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <MX_MEMS_Init+0x8c>)
 800381e:	f7fd fa9a 	bl	8000d56 <HTS221_HUM_Enable>
			HTS221_TEMP_Enable(&HTS221_pObj);
 8003822:	480c      	ldr	r0, [pc, #48]	; (8003854 <MX_MEMS_Init+0x8c>)
 8003824:	f7fd fb58 	bl	8000ed8 <HTS221_TEMP_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 8003828:	e005      	b.n	8003836 <MX_MEMS_Init+0x6e>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003830:	480b      	ldr	r0, [pc, #44]	; (8003860 <MX_MEMS_Init+0x98>)
 8003832:	f7fe fa85 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000090 	.word	0x20000090
 8003840:	08000725 	.word	0x08000725
 8003844:	08000789 	.word	0x08000789
 8003848:	0800083d 	.word	0x0800083d
 800384c:	080007d9 	.word	0x080007d9
 8003850:	080008a1 	.word	0x080008a1
 8003854:	200000ac 	.word	0x200000ac
 8003858:	2000008c 	.word	0x2000008c
 800385c:	200000d8 	.word	0x200000d8
 8003860:	40020400 	.word	0x40020400

08003864 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  /* USER CODE END MEMS_Process_PreTreatment */
	HTS221_HUM_GetHumidity(&HTS221_pObj, &humidity);
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <MX_MEMS_Process+0x24>)
 800386a:	4808      	ldr	r0, [pc, #32]	; (800388c <MX_MEMS_Process+0x28>)
 800386c:	f7fd fa98 	bl	8000da0 <HTS221_HUM_GetHumidity>
	HTS221_TEMP_GetTemperature(&HTS221_pObj, &temperature);
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <MX_MEMS_Process+0x2c>)
 8003872:	4806      	ldr	r0, [pc, #24]	; (800388c <MX_MEMS_Process+0x28>)
 8003874:	f7fd fb55 	bl	8000f22 <HTS221_TEMP_GetTemperature>
	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800387c:	4805      	ldr	r0, [pc, #20]	; (8003894 <MX_MEMS_Process+0x30>)
 800387e:	f7fe fa77 	bl	8001d70 <HAL_GPIO_TogglePin>


  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	2000002c 	.word	0x2000002c
 800388c:	200000ac 	.word	0x200000ac
 8003890:	20000030 	.word	0x20000030
 8003894:	40020400 	.word	0x40020400

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2500      	movs	r5, #0
 800389c:	4e0c      	ldr	r6, [pc, #48]	; (80038d0 <__libc_init_array+0x38>)
 800389e:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1ba4      	subs	r4, r4, r6
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a5      	cmp	r5, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	f000 f822 	bl	80038f0 <_init>
 80038ac:	2500      	movs	r5, #0
 80038ae:	4e0a      	ldr	r6, [pc, #40]	; (80038d8 <__libc_init_array+0x40>)
 80038b0:	4c0a      	ldr	r4, [pc, #40]	; (80038dc <__libc_init_array+0x44>)
 80038b2:	1ba4      	subs	r4, r4, r6
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a5      	cmp	r5, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c0:	4798      	blx	r3
 80038c2:	3501      	adds	r5, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ca:	4798      	blx	r3
 80038cc:	3501      	adds	r5, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	0800392c 	.word	0x0800392c
 80038d4:	0800392c 	.word	0x0800392c
 80038d8:	0800392c 	.word	0x0800392c
 80038dc:	08003930 	.word	0x08003930

080038e0 <memset>:
 80038e0:	4603      	mov	r3, r0
 80038e2:	4402      	add	r2, r0
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d100      	bne.n	80038ea <memset+0xa>
 80038e8:	4770      	bx	lr
 80038ea:	f803 1b01 	strb.w	r1, [r3], #1
 80038ee:	e7f9      	b.n	80038e4 <memset+0x4>

080038f0 <_init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr

080038fc <_fini>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr
