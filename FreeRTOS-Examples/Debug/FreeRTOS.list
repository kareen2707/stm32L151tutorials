
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be74  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800bfb4  0800bfb4  0001bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c178  0800c178  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800c178  0800c178  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c178  0800c178  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c178  0800c178  0001c178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c17c  0800c17c  0001c17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800c180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b4  20000058  0800c1d8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  0800c1d8  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002435e  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b44  00000000  00000000  000443df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  00048f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  0004aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc9f  00000000  00000000  0004c310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018021  00000000  00000000  00068faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4435  00000000  00000000  00080fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000706c  00000000  00000000  00125480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000058 	.word	0x20000058
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bf9c 	.word	0x0800bf9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000005c 	.word	0x2000005c
 800017c:	0800bf9c 	.word	0x0800bf9c

08000180 <__aeabi_frsub>:
 8000180:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__addsf3>
 8000186:	bf00      	nop

08000188 <__aeabi_fsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800018c <__addsf3>:
 800018c:	0042      	lsls	r2, r0, #1
 800018e:	bf1f      	itttt	ne
 8000190:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000194:	ea92 0f03 	teqne	r2, r3
 8000198:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800019c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a0:	d06a      	beq.n	8000278 <__addsf3+0xec>
 80001a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001aa:	bfc1      	itttt	gt
 80001ac:	18d2      	addgt	r2, r2, r3
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	4048      	eorgt	r0, r1
 80001b2:	4041      	eorgt	r1, r0
 80001b4:	bfb8      	it	lt
 80001b6:	425b      	neglt	r3, r3
 80001b8:	2b19      	cmp	r3, #25
 80001ba:	bf88      	it	hi
 80001bc:	4770      	bxhi	lr
 80001be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4240      	negne	r0, r0
 80001ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4249      	negne	r1, r1
 80001de:	ea92 0f03 	teq	r2, r3
 80001e2:	d03f      	beq.n	8000264 <__addsf3+0xd8>
 80001e4:	f1a2 0201 	sub.w	r2, r2, #1
 80001e8:	fa41 fc03 	asr.w	ip, r1, r3
 80001ec:	eb10 000c 	adds.w	r0, r0, ip
 80001f0:	f1c3 0320 	rsb	r3, r3, #32
 80001f4:	fa01 f103 	lsl.w	r1, r1, r3
 80001f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001fc:	d502      	bpl.n	8000204 <__addsf3+0x78>
 80001fe:	4249      	negs	r1, r1
 8000200:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000208:	d313      	bcc.n	8000232 <__addsf3+0xa6>
 800020a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020e:	d306      	bcc.n	800021e <__addsf3+0x92>
 8000210:	0840      	lsrs	r0, r0, #1
 8000212:	ea4f 0131 	mov.w	r1, r1, rrx
 8000216:	f102 0201 	add.w	r2, r2, #1
 800021a:	2afe      	cmp	r2, #254	; 0xfe
 800021c:	d251      	bcs.n	80002c2 <__addsf3+0x136>
 800021e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	ea40 0003 	orr.w	r0, r0, r3
 8000230:	4770      	bx	lr
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	eb40 0000 	adc.w	r0, r0, r0
 8000238:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	d1ed      	bne.n	800021e <__addsf3+0x92>
 8000242:	fab0 fc80 	clz	ip, r0
 8000246:	f1ac 0c08 	sub.w	ip, ip, #8
 800024a:	ebb2 020c 	subs.w	r2, r2, ip
 800024e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000252:	bfaa      	itet	ge
 8000254:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000258:	4252      	neglt	r2, r2
 800025a:	4318      	orrge	r0, r3
 800025c:	bfbc      	itt	lt
 800025e:	40d0      	lsrlt	r0, r2
 8000260:	4318      	orrlt	r0, r3
 8000262:	4770      	bx	lr
 8000264:	f092 0f00 	teq	r2, #0
 8000268:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800026c:	bf06      	itte	eq
 800026e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000272:	3201      	addeq	r2, #1
 8000274:	3b01      	subne	r3, #1
 8000276:	e7b5      	b.n	80001e4 <__addsf3+0x58>
 8000278:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800027c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000280:	bf18      	it	ne
 8000282:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000286:	d021      	beq.n	80002cc <__addsf3+0x140>
 8000288:	ea92 0f03 	teq	r2, r3
 800028c:	d004      	beq.n	8000298 <__addsf3+0x10c>
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	bf08      	it	eq
 8000294:	4608      	moveq	r0, r1
 8000296:	4770      	bx	lr
 8000298:	ea90 0f01 	teq	r0, r1
 800029c:	bf1c      	itt	ne
 800029e:	2000      	movne	r0, #0
 80002a0:	4770      	bxne	lr
 80002a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a6:	d104      	bne.n	80002b2 <__addsf3+0x126>
 80002a8:	0040      	lsls	r0, r0, #1
 80002aa:	bf28      	it	cs
 80002ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	4770      	bx	lr
 80002b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b6:	bf3c      	itt	cc
 80002b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bxcc	lr
 80002be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ca:	4770      	bx	lr
 80002cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d0:	bf16      	itet	ne
 80002d2:	4608      	movne	r0, r1
 80002d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d8:	4601      	movne	r1, r0
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	bf06      	itte	eq
 80002de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002e2:	ea90 0f01 	teqeq	r0, r1
 80002e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ea:	4770      	bx	lr

080002ec <__aeabi_ui2f>:
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	e004      	b.n	80002fc <__aeabi_i2f+0x8>
 80002f2:	bf00      	nop

080002f4 <__aeabi_i2f>:
 80002f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f8:	bf48      	it	mi
 80002fa:	4240      	negmi	r0, r0
 80002fc:	ea5f 0c00 	movs.w	ip, r0
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000308:	4601      	mov	r1, r0
 800030a:	f04f 0000 	mov.w	r0, #0
 800030e:	e01c      	b.n	800034a <__aeabi_l2f+0x2a>

08000310 <__aeabi_ul2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	e00a      	b.n	8000334 <__aeabi_l2f+0x14>
 800031e:	bf00      	nop

08000320 <__aeabi_l2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800032c:	d502      	bpl.n	8000334 <__aeabi_l2f+0x14>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	ea5f 0c01 	movs.w	ip, r1
 8000338:	bf02      	ittt	eq
 800033a:	4684      	moveq	ip, r0
 800033c:	4601      	moveq	r1, r0
 800033e:	2000      	moveq	r0, #0
 8000340:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000344:	bf08      	it	eq
 8000346:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800034a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034e:	fabc f28c 	clz	r2, ip
 8000352:	3a08      	subs	r2, #8
 8000354:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000358:	db10      	blt.n	800037c <__aeabi_l2f+0x5c>
 800035a:	fa01 fc02 	lsl.w	ip, r1, r2
 800035e:	4463      	add	r3, ip
 8000360:	fa00 fc02 	lsl.w	ip, r0, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	fa20 f202 	lsr.w	r2, r0, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f102 0220 	add.w	r2, r2, #32
 8000380:	fa01 fc02 	lsl.w	ip, r1, r2
 8000384:	f1c2 0220 	rsb	r2, r2, #32
 8000388:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800038c:	fa21 f202 	lsr.w	r2, r1, r2
 8000390:	eb43 0002 	adc.w	r0, r3, r2
 8000394:	bf08      	it	eq
 8000396:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800039a:	4770      	bx	lr

0800039c <__aeabi_fmul>:
 800039c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a4:	bf1e      	ittt	ne
 80003a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003aa:	ea92 0f0c 	teqne	r2, ip
 80003ae:	ea93 0f0c 	teqne	r3, ip
 80003b2:	d06f      	beq.n	8000494 <__aeabi_fmul+0xf8>
 80003b4:	441a      	add	r2, r3
 80003b6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ba:	0240      	lsls	r0, r0, #9
 80003bc:	bf18      	it	ne
 80003be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c2:	d01e      	beq.n	8000402 <__aeabi_fmul+0x66>
 80003c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d0:	fba0 3101 	umull	r3, r1, r0, r1
 80003d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003dc:	bf3e      	ittt	cc
 80003de:	0049      	lslcc	r1, r1, #1
 80003e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e4:	005b      	lslcc	r3, r3, #1
 80003e6:	ea40 0001 	orr.w	r0, r0, r1
 80003ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ee:	2afd      	cmp	r2, #253	; 0xfd
 80003f0:	d81d      	bhi.n	800042e <__aeabi_fmul+0x92>
 80003f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fa:	bf08      	it	eq
 80003fc:	f020 0001 	biceq.w	r0, r0, #1
 8000400:	4770      	bx	lr
 8000402:	f090 0f00 	teq	r0, #0
 8000406:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040a:	bf08      	it	eq
 800040c:	0249      	lsleq	r1, r1, #9
 800040e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000412:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000416:	3a7f      	subs	r2, #127	; 0x7f
 8000418:	bfc2      	ittt	gt
 800041a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000422:	4770      	bxgt	lr
 8000424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	3a01      	subs	r2, #1
 800042e:	dc5d      	bgt.n	80004ec <__aeabi_fmul+0x150>
 8000430:	f112 0f19 	cmn.w	r2, #25
 8000434:	bfdc      	itt	le
 8000436:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043a:	4770      	bxle	lr
 800043c:	f1c2 0200 	rsb	r2, r2, #0
 8000440:	0041      	lsls	r1, r0, #1
 8000442:	fa21 f102 	lsr.w	r1, r1, r2
 8000446:	f1c2 0220 	rsb	r2, r2, #32
 800044a:	fa00 fc02 	lsl.w	ip, r0, r2
 800044e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000452:	f140 0000 	adc.w	r0, r0, #0
 8000456:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045a:	bf08      	it	eq
 800045c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000460:	4770      	bx	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046a:	bf02      	ittt	eq
 800046c:	0040      	lsleq	r0, r0, #1
 800046e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000472:	3a01      	subeq	r2, #1
 8000474:	d0f9      	beq.n	800046a <__aeabi_fmul+0xce>
 8000476:	ea40 000c 	orr.w	r0, r0, ip
 800047a:	f093 0f00 	teq	r3, #0
 800047e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0049      	lsleq	r1, r1, #1
 8000486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048a:	3b01      	subeq	r3, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xe6>
 800048e:	ea41 010c 	orr.w	r1, r1, ip
 8000492:	e78f      	b.n	80003b4 <__aeabi_fmul+0x18>
 8000494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000498:	ea92 0f0c 	teq	r2, ip
 800049c:	bf18      	it	ne
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d00a      	beq.n	80004ba <__aeabi_fmul+0x11e>
 80004a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a8:	bf18      	it	ne
 80004aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ae:	d1d8      	bne.n	8000462 <__aeabi_fmul+0xc6>
 80004b0:	ea80 0001 	eor.w	r0, r0, r1
 80004b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b8:	4770      	bx	lr
 80004ba:	f090 0f00 	teq	r0, #0
 80004be:	bf17      	itett	ne
 80004c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c4:	4608      	moveq	r0, r1
 80004c6:	f091 0f00 	teqne	r1, #0
 80004ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ce:	d014      	beq.n	80004fa <__aeabi_fmul+0x15e>
 80004d0:	ea92 0f0c 	teq	r2, ip
 80004d4:	d101      	bne.n	80004da <__aeabi_fmul+0x13e>
 80004d6:	0242      	lsls	r2, r0, #9
 80004d8:	d10f      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004da:	ea93 0f0c 	teq	r3, ip
 80004de:	d103      	bne.n	80004e8 <__aeabi_fmul+0x14c>
 80004e0:	024b      	lsls	r3, r1, #9
 80004e2:	bf18      	it	ne
 80004e4:	4608      	movne	r0, r1
 80004e6:	d108      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004e8:	ea80 0001 	eor.w	r0, r0, r1
 80004ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f8:	4770      	bx	lr
 80004fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000502:	4770      	bx	lr

08000504 <__aeabi_fdiv>:
 8000504:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000508:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800050c:	bf1e      	ittt	ne
 800050e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000512:	ea92 0f0c 	teqne	r2, ip
 8000516:	ea93 0f0c 	teqne	r3, ip
 800051a:	d069      	beq.n	80005f0 <__aeabi_fdiv+0xec>
 800051c:	eba2 0203 	sub.w	r2, r2, r3
 8000520:	ea80 0c01 	eor.w	ip, r0, r1
 8000524:	0249      	lsls	r1, r1, #9
 8000526:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800052a:	d037      	beq.n	800059c <__aeabi_fdiv+0x98>
 800052c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000530:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000534:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000538:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800053c:	428b      	cmp	r3, r1
 800053e:	bf38      	it	cc
 8000540:	005b      	lslcc	r3, r3, #1
 8000542:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000546:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800054a:	428b      	cmp	r3, r1
 800054c:	bf24      	itt	cs
 800054e:	1a5b      	subcs	r3, r3, r1
 8000550:	ea40 000c 	orrcs.w	r0, r0, ip
 8000554:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000558:	bf24      	itt	cs
 800055a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000562:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000566:	bf24      	itt	cs
 8000568:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800056c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000570:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000574:	bf24      	itt	cs
 8000576:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800057a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	bf18      	it	ne
 8000582:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000586:	d1e0      	bne.n	800054a <__aeabi_fdiv+0x46>
 8000588:	2afd      	cmp	r2, #253	; 0xfd
 800058a:	f63f af50 	bhi.w	800042e <__aeabi_fmul+0x92>
 800058e:	428b      	cmp	r3, r1
 8000590:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000594:	bf08      	it	eq
 8000596:	f020 0001 	biceq.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a4:	327f      	adds	r2, #127	; 0x7f
 80005a6:	bfc2      	ittt	gt
 80005a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b0:	4770      	bxgt	lr
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	3a01      	subs	r2, #1
 80005bc:	e737      	b.n	800042e <__aeabi_fmul+0x92>
 80005be:	f092 0f00 	teq	r2, #0
 80005c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c6:	bf02      	ittt	eq
 80005c8:	0040      	lsleq	r0, r0, #1
 80005ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ce:	3a01      	subeq	r2, #1
 80005d0:	d0f9      	beq.n	80005c6 <__aeabi_fdiv+0xc2>
 80005d2:	ea40 000c 	orr.w	r0, r0, ip
 80005d6:	f093 0f00 	teq	r3, #0
 80005da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005de:	bf02      	ittt	eq
 80005e0:	0049      	lsleq	r1, r1, #1
 80005e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e6:	3b01      	subeq	r3, #1
 80005e8:	d0f9      	beq.n	80005de <__aeabi_fdiv+0xda>
 80005ea:	ea41 010c 	orr.w	r1, r1, ip
 80005ee:	e795      	b.n	800051c <__aeabi_fdiv+0x18>
 80005f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f4:	ea92 0f0c 	teq	r2, ip
 80005f8:	d108      	bne.n	800060c <__aeabi_fdiv+0x108>
 80005fa:	0242      	lsls	r2, r0, #9
 80005fc:	f47f af7d 	bne.w	80004fa <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	f47f af70 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000608:	4608      	mov	r0, r1
 800060a:	e776      	b.n	80004fa <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	d104      	bne.n	800061c <__aeabi_fdiv+0x118>
 8000612:	024b      	lsls	r3, r1, #9
 8000614:	f43f af4c 	beq.w	80004b0 <__aeabi_fmul+0x114>
 8000618:	4608      	mov	r0, r1
 800061a:	e76e      	b.n	80004fa <__aeabi_fmul+0x15e>
 800061c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000620:	bf18      	it	ne
 8000622:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000626:	d1ca      	bne.n	80005be <__aeabi_fdiv+0xba>
 8000628:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800062c:	f47f af5c 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000630:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000634:	f47f af3c 	bne.w	80004b0 <__aeabi_fmul+0x114>
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0x15e>
 800063a:	bf00      	nop

0800063c <__gesf2>:
 800063c:	f04f 3cff 	mov.w	ip, #4294967295
 8000640:	e006      	b.n	8000650 <__cmpsf2+0x4>
 8000642:	bf00      	nop

08000644 <__lesf2>:
 8000644:	f04f 0c01 	mov.w	ip, #1
 8000648:	e002      	b.n	8000650 <__cmpsf2+0x4>
 800064a:	bf00      	nop

0800064c <__cmpsf2>:
 800064c:	f04f 0c01 	mov.w	ip, #1
 8000650:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000654:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000658:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	bf18      	it	ne
 8000662:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000666:	d011      	beq.n	800068c <__cmpsf2+0x40>
 8000668:	b001      	add	sp, #4
 800066a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066e:	bf18      	it	ne
 8000670:	ea90 0f01 	teqne	r0, r1
 8000674:	bf58      	it	pl
 8000676:	ebb2 0003 	subspl.w	r0, r2, r3
 800067a:	bf88      	it	hi
 800067c:	17c8      	asrhi	r0, r1, #31
 800067e:	bf38      	it	cc
 8000680:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000684:	bf18      	it	ne
 8000686:	f040 0001 	orrne.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000690:	d102      	bne.n	8000698 <__cmpsf2+0x4c>
 8000692:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000696:	d105      	bne.n	80006a4 <__cmpsf2+0x58>
 8000698:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800069c:	d1e4      	bne.n	8000668 <__cmpsf2+0x1c>
 800069e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006a2:	d0e1      	beq.n	8000668 <__cmpsf2+0x1c>
 80006a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__aeabi_cfrcmple>:
 80006ac:	4684      	mov	ip, r0
 80006ae:	4608      	mov	r0, r1
 80006b0:	4661      	mov	r1, ip
 80006b2:	e7ff      	b.n	80006b4 <__aeabi_cfcmpeq>

080006b4 <__aeabi_cfcmpeq>:
 80006b4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b6:	f7ff ffc9 	bl	800064c <__cmpsf2>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	bf48      	it	mi
 80006be:	f110 0f00 	cmnmi.w	r0, #0
 80006c2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c4 <__aeabi_fcmpeq>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff fff4 	bl	80006b4 <__aeabi_cfcmpeq>
 80006cc:	bf0c      	ite	eq
 80006ce:	2001      	moveq	r0, #1
 80006d0:	2000      	movne	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_fcmplt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffea 	bl	80006b4 <__aeabi_cfcmpeq>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_fcmple>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffe0 	bl	80006b4 <__aeabi_cfcmpeq>
 80006f4:	bf94      	ite	ls
 80006f6:	2001      	movls	r0, #1
 80006f8:	2000      	movhi	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_fcmpge>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffd2 	bl	80006ac <__aeabi_cfrcmple>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_fcmpgt>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffc8 	bl	80006ac <__aeabi_cfrcmple>
 800071c:	bf34      	ite	cc
 800071e:	2001      	movcc	r0, #1
 8000720:	2000      	movcs	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <BSP_I2C1_Init+0x58>)
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <BSP_I2C1_Init+0x5c>)
 8000736:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <BSP_I2C1_Init+0x60>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	4912      	ldr	r1, [pc, #72]	; (8000788 <BSP_I2C1_Init+0x60>)
 8000740:	600a      	str	r2, [r1, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d117      	bne.n	8000776 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <BSP_I2C1_Init+0x58>)
 8000748:	f002 fc9e 	bl	8003088 <HAL_I2C_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d111      	bne.n	8000776 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <BSP_I2C1_Init+0x58>)
 8000754:	f000 f8e2 	bl	800091c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10b      	bne.n	8000776 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <BSP_I2C1_Init+0x58>)
 8000760:	f000 f8a8 	bl	80008b4 <MX_I2C1_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 800076a:	f06f 0307 	mvn.w	r3, #7
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	e001      	b.n	8000776 <BSP_I2C1_Init+0x4e>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200012dc 	.word	0x200012dc
 8000784:	40005400 	.word	0x40005400
 8000788:	20000074 	.word	0x20000074

0800078c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <BSP_I2C1_DeInit+0x48>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <BSP_I2C1_DeInit+0x48>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <BSP_I2C1_DeInit+0x48>)
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <BSP_I2C1_DeInit+0x48>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10b      	bne.n	80007c8 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <BSP_I2C1_DeInit+0x4c>)
 80007b2:	f000 f8e7 	bl	8000984 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <BSP_I2C1_DeInit+0x4c>)
 80007b8:	f002 f904 	bl	80029c4 <HAL_I2C_DeInit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 80007c2:	f06f 0307 	mvn.w	r3, #7
 80007c6:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000074 	.word	0x20000074
 80007d8:	200012dc 	.word	0x200012dc

080007dc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af04      	add	r7, sp, #16
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4603      	mov	r3, r0
 80007e8:	81fb      	strh	r3, [r7, #14]
 80007ea:	460b      	mov	r3, r1
 80007ec:	81bb      	strh	r3, [r7, #12]
 80007ee:	4613      	mov	r3, r2
 80007f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80007f6:	89ba      	ldrh	r2, [r7, #12]
 80007f8:	89f9      	ldrh	r1, [r7, #14]
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <BSP_I2C1_WriteReg+0x60>)
 800080c:	f002 f91c 	bl	8002a48 <HAL_I2C_Mem_Write>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00c      	beq.n	8000830 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <BSP_I2C1_WriteReg+0x60>)
 8000818:	f002 fc43 	bl	80030a2 <HAL_I2C_GetError>
 800081c:	4603      	mov	r3, r0
 800081e:	2b04      	cmp	r3, #4
 8000820:	d103      	bne.n	800082a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000822:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e002      	b.n	8000830 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800082a:	f06f 0303 	mvn.w	r3, #3
 800082e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000830:	697b      	ldr	r3, [r7, #20]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200012dc 	.word	0x200012dc

08000840 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af04      	add	r7, sp, #16
 8000846:	60ba      	str	r2, [r7, #8]
 8000848:	461a      	mov	r2, r3
 800084a:	4603      	mov	r3, r0
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	460b      	mov	r3, r1
 8000850:	81bb      	strh	r3, [r7, #12]
 8000852:	4613      	mov	r3, r2
 8000854:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800085a:	89ba      	ldrh	r2, [r7, #12]
 800085c:	89f9      	ldrh	r1, [r7, #14]
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2301      	movs	r3, #1
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <BSP_I2C1_ReadReg+0x60>)
 8000870:	f002 f9e4 	bl	8002c3c <HAL_I2C_Mem_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00c      	beq.n	8000894 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <BSP_I2C1_ReadReg+0x60>)
 800087c:	f002 fc11 	bl	80030a2 <HAL_I2C_GetError>
 8000880:	4603      	mov	r3, r0
 8000882:	2b04      	cmp	r3, #4
 8000884:	d103      	bne.n	800088e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000886:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e002      	b.n	8000894 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800088e:	f06f 0303 	mvn.w	r3, #3
 8000892:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000894:	697b      	ldr	r3, [r7, #20]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200012dc 	.word	0x200012dc

080008a4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80008a8:	f001 f90a 	bl	8001ac0 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2C1_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_I2C1_Init+0x64>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f001 ff3b 	bl	8002774 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	000186a0 	.word	0x000186a0

0800091c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <I2C1_MspInit+0x60>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <I2C1_MspInit+0x60>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	61d3      	str	r3, [r2, #28]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <I2C1_MspInit+0x60>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093c:	23c0      	movs	r3, #192	; 0xc0
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <I2C1_MspInit+0x64>)
 8000958:	f001 fc5c 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <I2C1_MspInit+0x60>)
 800095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <I2C1_MspInit+0x60>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	6253      	str	r3, [r2, #36]	; 0x24
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <I2C1_MspInit+0x60>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400

08000984 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <I2C1_MspDeInit+0x24>)
 800098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <I2C1_MspDeInit+0x24>)
 8000992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000996:	6253      	str	r3, [r2, #36]	; 0x24
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8000998:	21c0      	movs	r1, #192	; 0xc0
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <I2C1_MspDeInit+0x28>)
 800099c:	f001 fdc8 	bl	8002530 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DMA_Init+0x38>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <MX_DMA_Init+0x38>)
 80009bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DMA_Init+0x38>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2105      	movs	r1, #5
 80009d2:	2035      	movs	r0, #53	; 0x35
 80009d4:	f001 f955 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80009d8:	2035      	movs	r0, #53	; 0x35
 80009da:	f001 f96e 	bl	8001cba <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <vApplicationGetIdleTaskMemory+0x28>)
 80009fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	200000d0 	.word	0x200000d0

08000a1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b09c      	sub	sp, #112	; 0x70
 8000a20:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_FREERTOS_Init+0xa4>)
 8000a24:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a28:	461d      	mov	r5, r3
 8000a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f008 fcd5 	bl	80093ec <osThreadCreate>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_FREERTOS_Init+0xa8>)
 8000a46:	601a      	str	r2, [r3, #0]

  /* definition and creation of testTask */
  osThreadDef(testTask, blinkingLED, osPriorityLow, 0, 128);
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_FREERTOS_Init+0xac>)
 8000a4a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a4e:	461d      	mov	r5, r3
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 8000a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 fcc2 	bl	80093ec <osThreadCreate>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_FREERTOS_Init+0xb0>)
 8000a6c:	601a      	str	r2, [r3, #0]

  /* definition and creation of microSDTask */
  osThreadDef(microSDTask, microSD, osPriorityIdle, 0, 128);
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_FREERTOS_Init+0xb4>)
 8000a70:	f107 041c 	add.w	r4, r7, #28
 8000a74:	461d      	mov	r5, r3
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  microSDTaskHandle = osThreadCreate(osThread(microSDTask), NULL);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f008 fcaf 	bl	80093ec <osThreadCreate>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_FREERTOS_Init+0xb8>)
 8000a92:	601a      	str	r2, [r3, #0]

  /* definition and creation of hts221Task */
  osThreadDef(hts221Task, HTS221, osPriorityIdle, 0, 128);
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_FREERTOS_Init+0xbc>)
 8000a96:	463c      	mov	r4, r7
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hts221TaskHandle = osThreadCreate(osThread(hts221Task), NULL);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fc9e 	bl	80093ec <osThreadCreate>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_FREERTOS_Init+0xc0>)
 8000ab4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ab6:	bf00      	nop
 8000ab8:	3770      	adds	r7, #112	; 0x70
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bdb0      	pop	{r4, r5, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800bfc0 	.word	0x0800bfc0
 8000ac4:	20001330 	.word	0x20001330
 8000ac8:	0800bfe8 	.word	0x0800bfe8
 8000acc:	200017ac 	.word	0x200017ac
 8000ad0:	0800c010 	.word	0x0800c010
 8000ad4:	20001338 	.word	0x20001338
 8000ad8:	0800c038 	.word	0x0800c038
 8000adc:	2000133c 	.word	0x2000133c

08000ae0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8000ae8:	f005 fdaa 	bl	8006640 <MX_FATFS_Init>

  /* init code for MEMS */
  MX_MEMS_Init();
 8000aec:	f006 f940 	bl	8006d70 <MX_MEMS_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f008 fcc7 	bl	8009484 <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartDefaultTask+0x10>

08000af8 <blinkingLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkingLED */
void blinkingLED(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkingLED */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <blinkingLED+0x1c>)
 8000b06:	f001 fe1b 	bl	8002740 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f008 fcba 	bl	8009484 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b10:	e7f6      	b.n	8000b00 <blinkingLED+0x8>
 8000b12:	bf00      	nop
 8000b14:	40020400 	.word	0x40020400

08000b18 <microSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_microSD */
void microSD(void const * argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN microSD */
	//MX_FATFS_Init();
  /* Infinite loop */
  for(;;)
  {
	  if(fileOnce == 0){
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <microSD+0x98>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d13d      	bne.n	8000ba4 <microSD+0x8c>
		  res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1); // 1. Register a work area
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4922      	ldr	r1, [pc, #136]	; (8000bb4 <microSD+0x9c>)
 8000b2c:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <microSD+0xa0>)
 8000b2e:	f007 fee7 	bl	8008900 <f_mount>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <microSD+0xa4>)
 8000b38:	701a      	strb	r2, [r3, #0]
		  if (res == FR_OK){
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <microSD+0xa4>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d12d      	bne.n	8000b9e <microSD+0x86>
			  res = f_open(&SDFile, "freertos.txt", FA_CREATE_ALWAYS | FA_WRITE); // 2. Creating a new file for writing/reading later
 8000b42:	220a      	movs	r2, #10
 8000b44:	491e      	ldr	r1, [pc, #120]	; (8000bc0 <microSD+0xa8>)
 8000b46:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <microSD+0xac>)
 8000b48:	f007 ff3e 	bl	80089c8 <f_open>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <microSD+0xa4>)
 8000b52:	701a      	strb	r2, [r3, #0]
			  if(res == FR_OK){
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <microSD+0xa4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11d      	bne.n	8000b98 <microSD+0x80>
				  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4819      	ldr	r0, [pc, #100]	; (8000bc8 <microSD+0xb0>)
 8000b64:	f001 fdd4 	bl	8002710 <HAL_GPIO_WritePin>
				  res = f_write(&SDFile, wtext, sizeof(wtext), (void *) &byteswritten);
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <microSD+0xb4>)
 8000b6a:	2241      	movs	r2, #65	; 0x41
 8000b6c:	4918      	ldr	r1, [pc, #96]	; (8000bd0 <microSD+0xb8>)
 8000b6e:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <microSD+0xac>)
 8000b70:	f008 f8ef 	bl	8008d52 <f_write>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <microSD+0xa4>)
 8000b7a:	701a      	strb	r2, [r3, #0]
				  if((res != FR_OK) || (byteswritten == 0)){
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <microSD+0xa4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d103      	bne.n	8000b8c <microSD+0x74>
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <microSD+0xb4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <microSD+0x80>
					  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <microSD+0xb0>)
 8000b94:	f001 fdbc 	bl	8002710 <HAL_GPIO_WritePin>
				  }
			  }
			  f_close(&SDFile);
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <microSD+0xac>)
 8000b9a:	f008 fb07 	bl	80091ac <f_close>
		  }
		  fileOnce = 1;
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <microSD+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(500);
 8000ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba8:	f008 fc6c 	bl	8009484 <osDelay>
	  if(fileOnce == 0){
 8000bac:	e7b8      	b.n	8000b20 <microSD+0x8>
 8000bae:	bf00      	nop
 8000bb0:	20000078 	.word	0x20000078
 8000bb4:	20001340 	.word	0x20001340
 8000bb8:	20001578 	.word	0x20001578
 8000bbc:	20001574 	.word	0x20001574
 8000bc0:	0800c054 	.word	0x0800c054
 8000bc4:	20001344 	.word	0x20001344
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	20001334 	.word	0x20001334
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <HTS221>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HTS221 */
void HTS221(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HTS221 */
  /* Infinite loop */
  for(;;)
  {
	  MX_MEMS_Process();
 8000bdc:	f006 f90e 	bl	8006dfc <MX_MEMS_Process>
	  osDelay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f008 fc4f 	bl	8009484 <osDelay>
	  MX_MEMS_Process();
 8000be6:	e7f9      	b.n	8000bdc <HTS221+0x8>

08000be8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_GPIO_Init+0x90>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <MX_GPIO_Init+0x94>)
 8000c4e:	f001 fd5f 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_GPIO_Init+0x94>)
 8000c6c:	f001 fad2 	bl	8002214 <HAL_GPIO_Init>

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020400 	.word	0x40020400

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f000 fef1 	bl	8001a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f80c 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f7ff ffac 	bl	8000be8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c90:	f7ff fe8e 	bl	80009b0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000c94:	f000 f86a 	bl	8000d6c <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000c98:	f7ff fec0 	bl	8000a1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f008 fb83 	bl	80093a6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <main+0x20>
	...

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b092      	sub	sp, #72	; 0x48
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2234      	movs	r2, #52	; 0x34
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00b f969 	bl	800bf8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <SystemClock_Config+0x98>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <SystemClock_Config+0x98>)
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000cf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fd12 	bl	8003724 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d06:	f000 f82a 	bl	8000d5e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 f82e 	bl	8003d84 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d2e:	f000 f816 	bl	8000d5e <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3748      	adds	r7, #72	; 0x48
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40007000 	.word	0x40007000

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d52:	f000 fea3 	bl	8001a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sd_mmc;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <MX_SDIO_SD_Init+0x3c>)
 8000d74:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <MX_SDIO_SD_Init+0x38>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]

}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200017f4 	.word	0x200017f4
 8000da8:	40012c00 	.word	0x40012c00

08000dac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a41      	ldr	r2, [pc, #260]	; (8000ed0 <HAL_SD_MspInit+0x124>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d17b      	bne.n	8000ec6 <HAL_SD_MspInit+0x11a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a3a      	ldr	r2, [pc, #232]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <HAL_SD_MspInit+0x128>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000e16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4829      	ldr	r0, [pc, #164]	; (8000ed8 <HAL_SD_MspInit+0x12c>)
 8000e34:	f001 f9ee 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4822      	ldr	r0, [pc, #136]	; (8000edc <HAL_SD_MspInit+0x130>)
 8000e54:	f001 f9de 	bl	8002214 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SD_MMC Init */
    hdma_sd_mmc.Instance = DMA2_Channel4;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_SD_MspInit+0x138>)
 8000e5c:	601a      	str	r2, [r3, #0]
    hdma_sd_mmc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_sd_mmc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_sd_mmc.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_sd_mmc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e76:	611a      	str	r2, [r3, #16]
    hdma_sd_mmc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e7e:	615a      	str	r2, [r3, #20]
    hdma_sd_mmc.Init.Mode = DMA_NORMAL;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
    hdma_sd_mmc.Init.Priority = DMA_PRIORITY_HIGH;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sd_mmc) != HAL_OK)
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000e90:	f000 ff22 	bl	8001cd8 <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_SD_MspInit+0xf2>
    {
      Error_Handler();
 8000e9a:	f7ff ff60 	bl	8000d5e <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sd_mmc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sd_mmc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <HAL_SD_MspInit+0x134>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	202d      	movs	r0, #45	; 0x2d
 8000ebc:	f000 fee1 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ec0:	202d      	movs	r0, #45	; 0x2d
 8000ec2:	f000 fefa 	bl	8001cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	200017b0 	.word	0x200017b0
 8000ee4:	40026444 	.word	0x40026444

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_MspInit+0x64>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_MspInit+0x64>)
 8000ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_MspInit+0x64>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_MspInit+0x64>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_MspInit+0x64>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6213      	str	r3, [r2, #32]
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_MspInit+0x64>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_MspInit+0x64>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_MspInit+0x64>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6253      	str	r3, [r2, #36]	; 0x24
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_MspInit+0x64>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	210f      	movs	r1, #15
 8000f3a:	f06f 0001 	mvn.w	r0, #1
 8000f3e:	f000 fea0 	bl	8001c82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	201c      	movs	r0, #28
 8000f66:	f000 fe8c 	bl	8001c82 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000f6a:	201c      	movs	r0, #28
 8000f6c:	f000 fea5 	bl	8001cba <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6253      	str	r3, [r2, #36]	; 0x24
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_InitTick+0xa0>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f88:	f107 0210 	add.w	r2, r7, #16
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 f8a0 	bl	80040d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f98:	f003 f88a 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8000f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_InitTick+0xa4>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fd0:	f004 fc12 	bl	80057f8 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d104      	bne.n	8000fe4 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <HAL_InitTick+0xa8>)
 8000fdc:	f004 fc40 	bl	8005860 <HAL_TIM_Base_Start_IT>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	e000      	b.n	8000fe6 <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	20001878 	.word	0x20001878

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <HardFault_Handler+0x4>

0800100e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <BusFault_Handler+0x4>

0800101a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <UsageFault_Handler+0x4>

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM2_IRQHandler+0x10>)
 8001032:	f004 fc38 	bl	80058a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001878 	.word	0x20001878

08001040 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <SDIO_IRQHandler+0x10>)
 8001046:	f003 fb4b 	bl	80046e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200017f4 	.word	0x200017f4

08001054 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
	if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	2b81      	cmp	r3, #129	; 0x81
 800105e:	d003      	beq.n	8001068 <DMA2_Channel4_IRQHandler+0x14>
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	2b82      	cmp	r3, #130	; 0x82
 8001066:	d105      	bne.n	8001074 <DMA2_Channel4_IRQHandler+0x20>
			 HAL_DMA_IRQHandler(hsd.hdmarx);
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fff3 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sd_mmc);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001072:	e00c      	b.n	800108e <DMA2_Channel4_IRQHandler+0x3a>
		else if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) || (hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK))){
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	2b90      	cmp	r3, #144	; 0x90
 800107a:	d003      	beq.n	8001084 <DMA2_Channel4_IRQHandler+0x30>
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	2ba0      	cmp	r3, #160	; 0xa0
 8001082:	d104      	bne.n	800108e <DMA2_Channel4_IRQHandler+0x3a>
			 HAL_DMA_IRQHandler(hsd.hdmatx);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <DMA2_Channel4_IRQHandler+0x40>)
 8001086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001088:	4618      	mov	r0, r3
 800108a:	f000 ffe5 	bl	8002058 <HAL_DMA_IRQHandler>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200017f4 	.word	0x200017f4

08001098 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SystemInit+0x5c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <SystemInit+0x5c>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0x5c>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <SystemInit+0x5c>)
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <SystemInit+0x60>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0x5c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <SystemInit+0x5c>)
 80010ba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80010be:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80010c2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SystemInit+0x5c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SystemInit+0x5c>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <SystemInit+0x5c>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <SystemInit+0x5c>)
 80010d6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80010da:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SystemInit+0x5c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x64>)
 80010e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e8:	609a      	str	r2, [r3, #8]
#endif
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	88ffc00c 	.word	0x88ffc00c
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001100:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001126:	f7ff ffb7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f00a feff 	bl	800bf2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112e:	f7ff fda7 	bl	8000c80 <main>
  bx lr
 8001132:	4770      	bx	lr
  ldr r3, =_sidata
 8001134:	0800c180 	.word	0x0800c180
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800113c:	20000058 	.word	0x20000058
  ldr r2, =_sbss
 8001140:	20000058 	.word	0x20000058
  ldr r3, = _ebss
 8001144:	2000190c 	.word	0x2000190c

08001148 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_IRQHandler>
	...

0800114c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e030      	b.n	80011c6 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	7b1a      	ldrb	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HTS221_RegisterBusIO+0x84>)
 80011a0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HTS221_RegisterBusIO+0x88>)
 80011a6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4798      	blx	r3
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	e002      	b.n	80011c6 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08001671 	.word	0x08001671
 80011d4:	080016d3 	.word	0x080016d3

080011d8 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d108      	bne.n	80011fc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f9d0 	bl	8001590 <HTS221_Initialize>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e004      	b.n	8001206 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	331c      	adds	r3, #28
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fb26 	bl	8001870 <hts221_device_id_get>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e000      	b.n	8001232 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HTS221_Get_Init_Status>:
 * @param  pObj the device pObj
 * @param  Status 1 if initialized, 0 otherwise
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Get_Init_Status(HTS221_Object_t *pObj, uint8_t *Status)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  if (pObj == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HTS221_Get_Init_Status+0x16>
  {
    return HTS221_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e005      	b.n	800125c <HTS221_Get_Init_Status+0x22>
  }

  *Status = pObj->is_initialized;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	701a      	strb	r2, [r3, #0]

  return HTS221_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e015      	b.n	80012a8 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10b      	bne.n	800129e <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	331c      	adds	r3, #28
 800128a:	2101      	movs	r1, #1
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fb00 	bl	8001892 <hts221_power_on_set>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e004      	b.n	80012a8 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	331c      	adds	r3, #28
 80012be:	f107 0218 	add.w	r2, r7, #24
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fb8c 	bl	80019e2 <hts221_hum_adc_point_0_get>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	e082      	b.n	80013dc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 80012d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f80a 	bl	80002f4 <__aeabi_i2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60bb      	str	r3, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	331c      	adds	r3, #28
 80012e8:	f107 0218 	add.w	r2, r7, #24
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 faf5 	bl	80018de <hts221_hum_rh_point_0_get>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <HTS221_HUM_GetHumidity+0x50>
  {
    return HTS221_ERROR;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e06d      	b.n	80013dc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8001300:	7e3b      	ldrb	r3, [r7, #24]
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe fff2 	bl	80002ec <__aeabi_ui2f>
 8001308:	4603      	mov	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	331c      	adds	r3, #28
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fb74 	bl	8001a04 <hts221_hum_adc_point_1_get>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HTS221_HUM_GetHumidity+0x78>
  {
    return HTS221_ERROR;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e059      	b.n	80013dc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8001328:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffe1 	bl	80002f4 <__aeabi_i2f>
 8001332:	4603      	mov	r3, r0
 8001334:	613b      	str	r3, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	331c      	adds	r3, #28
 800133a:	f107 0218 	add.w	r2, r7, #24
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fae3 	bl	800190c <hts221_hum_rh_point_1_get>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HTS221_HUM_GetHumidity+0xa2>
  {
    return HTS221_ERROR;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	e044      	b.n	80013dc <HTS221_HUM_GetHumidity+0x12c>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8001352:	7e3b      	ldrb	r3, [r7, #24]
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffc9 	bl	80002ec <__aeabi_ui2f>
 800135a:	4603      	mov	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2202      	movs	r2, #2
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00a fe0f 	bl	800bf8a <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	331c      	adds	r3, #28
 8001370:	f107 021c 	add.w	r2, r7, #28
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fa58 	bl	800182c <hts221_humidity_raw_get>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <HTS221_HUM_GetHumidity+0xd8>
  {
    return HTS221_ERROR;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e029      	b.n	80013dc <HTS221_HUM_GetHumidity+0x12c>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001388:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ffb1 	bl	80002f4 <__aeabi_i2f>
 8001392:	4602      	mov	r2, r0
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f924 	bl	80015e8 <Linear_Interpolation>
 80013a0:	4602      	mov	r2, r0
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f04f 0100 	mov.w	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f992 	bl	80006d8 <__aeabi_fcmplt>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HTS221_HUM_GetHumidity+0x112>
  {
    *Value = 0.0f;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4907      	ldr	r1, [pc, #28]	; (80013e4 <HTS221_HUM_GetHumidity+0x134>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f9a3 	bl	8000714 <__aeabi_fcmpgt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HTS221_HUM_GetHumidity+0x12a>
  {
    *Value = 100.0f;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HTS221_HUM_GetHumidity+0x134>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	42c80000 	.word	0x42c80000

080013e8 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e015      	b.n	800142a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10b      	bne.n	8001420 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	331c      	adds	r3, #28
 800140c:	2101      	movs	r1, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa3f 	bl	8001892 <hts221_power_on_set>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e004      	b.n	800142a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b088      	sub	sp, #32
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	331c      	adds	r3, #28
 8001440:	f107 0218 	add.w	r2, r7, #24
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 faed 	bl	8001a26 <hts221_temp_adc_point_0_get>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e068      	b.n	800152a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8001458:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe ff49 	bl	80002f4 <__aeabi_i2f>
 8001462:	4603      	mov	r3, r0
 8001464:	60bb      	str	r3, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	331c      	adds	r3, #28
 800146a:	f107 0218 	add.w	r2, r7, #24
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fa62 	bl	800193a <hts221_temp_deg_point_0_get>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HTS221_TEMP_GetTemperature+0x50>
  {
    return HTS221_ERROR;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	e053      	b.n	800152a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8001482:	7e3b      	ldrb	r3, [r7, #24]
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff31 	bl	80002ec <__aeabi_ui2f>
 800148a:	4603      	mov	r3, r0
 800148c:	60fb      	str	r3, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	331c      	adds	r3, #28
 8001492:	f107 0218 	add.w	r2, r7, #24
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fad5 	bl	8001a48 <hts221_temp_adc_point_1_get>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <HTS221_TEMP_GetTemperature+0x78>
  {
    return HTS221_ERROR;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	e03f      	b.n	800152a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 80014aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ff20 	bl	80002f4 <__aeabi_i2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	613b      	str	r3, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	331c      	adds	r3, #28
 80014bc:	f107 0218 	add.w	r2, r7, #24
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fa63 	bl	800198e <hts221_temp_deg_point_1_get>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <HTS221_TEMP_GetTemperature+0xa2>
  {
    return HTS221_ERROR;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e02a      	b.n	800152a <HTS221_TEMP_GetTemperature+0xf8>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 80014d4:	7e3b      	ldrb	r3, [r7, #24]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff08 	bl	80002ec <__aeabi_ui2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	617b      	str	r3, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2202      	movs	r2, #2
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00a fd4e 	bl	800bf8a <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	331c      	adds	r3, #28
 80014f2:	f107 021c 	add.w	r2, r7, #28
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f9a8 	bl	800184e <hts221_temperature_raw_get>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HTS221_TEMP_GetTemperature+0xd8>
  {
    return HTS221_ERROR;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	e00f      	b.n	800152a <HTS221_TEMP_GetTemperature+0xf8>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800150a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fef0 	bl	80002f4 <__aeabi_i2f>
 8001514:	4602      	mov	r2, r0
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f863 	bl	80015e8 <Linear_Interpolation>
 8001522:	4602      	mov	r2, r0
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800153e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f7ff f8d2 	bl	80006ec <__aeabi_fcmple>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HTS221_SetOutputDataRate+0x1e>
 800154e:	2301      	movs	r3, #1
 8001550:	e009      	b.n	8001566 <HTS221_SetOutputDataRate+0x32>
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <HTS221_SetOutputDataRate+0x58>)
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff f8c9 	bl	80006ec <__aeabi_fcmple>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HTS221_SetOutputDataRate+0x30>
 8001560:	2302      	movs	r3, #2
 8001562:	e000      	b.n	8001566 <HTS221_SetOutputDataRate+0x32>
 8001564:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001566:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	331c      	adds	r3, #28
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f90f 	bl	8001794 <hts221_data_rate_set>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	e000      	b.n	8001584 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40e00000 	.word	0x40e00000

08001590 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	331c      	adds	r3, #28
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f977 	bl	8001892 <hts221_power_on_set>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e017      	b.n	80015e0 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	331c      	adds	r3, #28
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f912 	bl	80017e0 <hts221_block_data_update_set>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e00b      	b.n	80015e0 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80015c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffb1 	bl	8001534 <HTS221_SetOutputDataRate>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	e000      	b.n	80015e0 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f7fe fdc3 	bl	8000188 <__aeabi_fsub>
 8001602:	4603      	mov	r3, r0
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fec8 	bl	800039c <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	461c      	mov	r4, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7fe febe 	bl	800039c <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	461d      	mov	r5, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f7fe feb4 	bl	800039c <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	4628      	mov	r0, r5
 800163a:	f7fe fda5 	bl	8000188 <__aeabi_fsub>
 800163e:	4603      	mov	r3, r0
 8001640:	4619      	mov	r1, r3
 8001642:	4620      	mov	r0, r4
 8001644:	f7fe fda2 	bl	800018c <__addsf3>
 8001648:	4603      	mov	r3, r0
 800164a:	461c      	mov	r4, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7fe fd96 	bl	8000188 <__aeabi_fsub>
 800165c:	4603      	mov	r3, r0
 800165e:	4619      	mov	r1, r3
 8001660:	4620      	mov	r0, r4
 8001662:	f7fe ff4f 	bl	8000504 <__aeabi_fdiv>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}

08001670 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	72fb      	strb	r3, [r7, #11]
 8001680:	4613      	mov	r3, r2
 8001682:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10e      	bne.n	80016ae <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	695c      	ldr	r4, [r3, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	b298      	uxth	r0, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b299      	uxth	r1, r3
 80016a4:	893b      	ldrh	r3, [r7, #8]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	47a0      	blx	r4
 80016aa:	4603      	mov	r3, r0
 80016ac:	e00d      	b.n	80016ca <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	695c      	ldr	r4, [r3, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	b298      	uxth	r0, r3
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	b299      	uxth	r1, r3
 80016c2:	893b      	ldrh	r3, [r7, #8]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	47a0      	blx	r4
 80016c8:	4603      	mov	r3, r0
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016d2:	b590      	push	{r4, r7, lr}
 80016d4:	b087      	sub	sp, #28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	461a      	mov	r2, r3
 80016de:	460b      	mov	r3, r1
 80016e0:	72fb      	strb	r3, [r7, #11]
 80016e2:	4613      	mov	r3, r2
 80016e4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10e      	bne.n	8001710 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	691c      	ldr	r4, [r3, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	7b1b      	ldrb	r3, [r3, #12]
 80016fa:	b298      	uxth	r0, r3
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001702:	b2db      	uxtb	r3, r3
 8001704:	b299      	uxth	r1, r3
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	47a0      	blx	r4
 800170c:	4603      	mov	r3, r0
 800170e:	e00d      	b.n	800172c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	691c      	ldr	r4, [r3, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	7b1b      	ldrb	r3, [r3, #12]
 8001718:	b298      	uxth	r0, r3
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b299      	uxth	r1, r3
 8001724:	893b      	ldrh	r3, [r7, #8]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	47a0      	blx	r4
 800172a:	4603      	mov	r3, r0
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	460b      	mov	r3, r1
 8001742:	72fb      	strb	r3, [r7, #11]
 8001744:	4613      	mov	r3, r2
 8001746:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685c      	ldr	r4, [r3, #4]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6898      	ldr	r0, [r3, #8]
 8001750:	893b      	ldrh	r3, [r7, #8]
 8001752:	7af9      	ldrb	r1, [r7, #11]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	47a0      	blx	r4
 8001758:	6178      	str	r0, [r7, #20]
  return ret;
 800175a:	697b      	ldr	r3, [r7, #20]
}
 800175c:	4618      	mov	r0, r3
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}

08001764 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	72fb      	strb	r3, [r7, #11]
 8001774:	4613      	mov	r3, r2
 8001776:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681c      	ldr	r4, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	7af9      	ldrb	r1, [r7, #11]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	47a0      	blx	r4
 8001788:	6178      	str	r0, [r7, #20]
  return ret;
 800178a:	697b      	ldr	r3, [r7, #20]
}
 800178c:	4618      	mov	r0, r3
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	2301      	movs	r3, #1
 80017a6:	2120      	movs	r1, #32
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffc3 	bl	8001734 <hts221_read_reg>
 80017ae:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7a3b      	ldrb	r3, [r7, #8]
 80017c0:	f362 0301 	bfi	r3, r2, #0, #2
 80017c4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80017c6:	f107 0208 	add.w	r2, r7, #8
 80017ca:	2301      	movs	r3, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffc8 	bl	8001764 <hts221_write_reg>
 80017d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80017ec:	f107 0208 	add.w	r2, r7, #8
 80017f0:	2301      	movs	r3, #1
 80017f2:	2120      	movs	r1, #32
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff9d 	bl	8001734 <hts221_read_reg>
 80017fa:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f362 0382 	bfi	r3, r2, #2, #1
 8001810:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	2301      	movs	r3, #1
 8001818:	2120      	movs	r1, #32
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <hts221_write_reg>
 8001820:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001836:	2302      	movs	r3, #2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	2128      	movs	r1, #40	; 0x28
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff79 	bl	8001734 <hts221_read_reg>
 8001842:	60f8      	str	r0, [r7, #12]
  return ret;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001858:	2302      	movs	r3, #2
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	212a      	movs	r1, #42	; 0x2a
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ff68 	bl	8001734 <hts221_read_reg>
 8001864:	60f8      	str	r0, [r7, #12]
  return ret;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800187a:	2301      	movs	r3, #1
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	210f      	movs	r1, #15
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff57 	bl	8001734 <hts221_read_reg>
 8001886:	60f8      	str	r0, [r7, #12]
  return ret;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800189e:	f107 0208 	add.w	r2, r7, #8
 80018a2:	2301      	movs	r3, #1
 80018a4:	2120      	movs	r1, #32
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff44 	bl	8001734 <hts221_read_reg>
 80018ac:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10f      	bne.n	80018d4 <hts221_power_on_set+0x42>
    reg.pd = val;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	7a3b      	ldrb	r3, [r7, #8]
 80018be:	f362 13c7 	bfi	r3, r2, #7, #1
 80018c2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80018c4:	f107 0208 	add.w	r2, r7, #8
 80018c8:	2301      	movs	r3, #1
 80018ca:	2120      	movs	r1, #32
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff49 	bl	8001764 <hts221_write_reg>
 80018d2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80018e8:	2301      	movs	r3, #1
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	2130      	movs	r1, #48	; 0x30
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ff20 	bl	8001734 <hts221_read_reg>
 80018f4:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	701a      	strb	r2, [r3, #0]

  return ret;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8001916:	2301      	movs	r3, #1
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	2131      	movs	r1, #49	; 0x31
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff09 	bl	8001734 <hts221_read_reg>
 8001922:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001944:	f107 020f 	add.w	r2, r7, #15
 8001948:	2301      	movs	r3, #1
 800194a:	2132      	movs	r1, #50	; 0x32
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fef1 	bl	8001734 <hts221_read_reg>
 8001952:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d114      	bne.n	8001984 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800195a:	f107 0210 	add.w	r2, r7, #16
 800195e:	2301      	movs	r3, #1
 8001960:	2135      	movs	r1, #53	; 0x35
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fee6 	bl	8001734 <hts221_read_reg>
 8001968:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001970:	b2db      	uxtb	r3, r3
 8001972:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8001974:	7cfb      	ldrb	r3, [r7, #19]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	4413      	add	r3, r2
 800197c:	10db      	asrs	r3, r3, #3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001984:	697b      	ldr	r3, [r7, #20]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001998:	f107 020f 	add.w	r2, r7, #15
 800199c:	2301      	movs	r3, #1
 800199e:	2133      	movs	r1, #51	; 0x33
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fec7 	bl	8001734 <hts221_read_reg>
 80019a6:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d114      	bne.n	80019d8 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80019ae:	f107 0210 	add.w	r2, r7, #16
 80019b2:	2301      	movs	r3, #1
 80019b4:	2135      	movs	r1, #53	; 0x35
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff febc 	bl	8001734 <hts221_read_reg>
 80019bc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80019be:	7c3b      	ldrb	r3, [r7, #16]
 80019c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	4413      	add	r3, r2
 80019d0:	10db      	asrs	r3, r3, #3
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80019d8:	697b      	ldr	r3, [r7, #20]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80019ec:	2302      	movs	r3, #2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	2136      	movs	r1, #54	; 0x36
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fe9e 	bl	8001734 <hts221_read_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8001a0e:	2302      	movs	r3, #2
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	213a      	movs	r1, #58	; 0x3a
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fe8d 	bl	8001734 <hts221_read_reg>
 8001a1a:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8001a30:	2302      	movs	r3, #2
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	213c      	movs	r1, #60	; 0x3c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fe7c 	bl	8001734 <hts221_read_reg>
 8001a3c:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8001a52:	2302      	movs	r3, #2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	213e      	movs	r1, #62	; 0x3e
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fe6b 	bl	8001734 <hts221_read_reg>
 8001a5e:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f8f9 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fa68 	bl	8000f50 <HAL_InitTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	e001      	b.n	8001a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8c:	f7ff fa2c 	bl	8000ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200018b4 	.word	0x200018b4
 8001abc:	2000004c 	.word	0x2000004c

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200018b4 	.word	0x200018b4

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d004      	beq.n	8001af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_Delay+0x40>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af8:	bf00      	nop
 8001afa:	f7ff ffe1 	bl	8001ac0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d8f7      	bhi.n	8001afa <HAL_Delay+0x26>
  {
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000004c 	.word	0x2000004c

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <__NVIC_EnableIRQ+0x34>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff4f 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff64 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ffb2 	bl	8001c08 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff81 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff57 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e059      	b.n	8001d9e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_DMA_Init+0xd0>)
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d80f      	bhi.n	8001d16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_DMA_Init+0xd4>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <HAL_DMA_Init+0xd8>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	009a      	lsls	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_DMA_Init+0xdc>)
 8001d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d14:	e00e      	b.n	8001d34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_DMA_Init+0xe0>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_DMA_Init+0xd8>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_DMA_Init+0xe4>)
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40026407 	.word	0x40026407
 8001dac:	bffd9ff8 	.word	0xbffd9ff8
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	40026000 	.word	0x40026000
 8001db8:	bffd9bf8 	.word	0xbffd9bf8
 8001dbc:	40026400 	.word	0x40026400

08001dc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e052      	b.n	8001e78 <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_DMA_DeInit+0xc4>)
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d80f      	bhi.n	8001e0e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_DMA_DeInit+0xc8>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_DMA_DeInit+0xcc>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_DMA_DeInit+0xd0>)
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e0c:	e00e      	b.n	8001e2c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_DMA_DeInit+0xd4>)
 8001e16:	4413      	add	r3, r2
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_DMA_DeInit+0xcc>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	009a      	lsls	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_DMA_DeInit+0xd8>)
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 021c 	and.w	r2, r3, #28
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40026407 	.word	0x40026407
 8001e88:	bffd9ff8 	.word	0xbffd9ff8
 8001e8c:	cccccccd 	.word	0xcccccccd
 8001e90:	40026000 	.word	0x40026000
 8001e94:	bffd9bf8 	.word	0xbffd9bf8
 8001e98:	40026400 	.word	0x40026400

08001e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Start_IT+0x20>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e04b      	b.n	8001f54 <HAL_DMA_Start_IT+0xb8>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d13a      	bne.n	8001f46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f95e 	bl	80021b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 020e 	orr.w	r2, r2, #14
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00f      	b.n	8001f34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 020a 	orr.w	r2, r2, #10
 8001f32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e005      	b.n	8001f52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2204      	movs	r2, #4
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e022      	b.n	8001fcc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020e 	bic.w	r2, r2, #14
 8001f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 021c 	and.w	r2, r3, #28
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d005      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e029      	b.n	800204e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020e 	bic.w	r2, r2, #14
 8002008:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 021c 	and.w	r2, r3, #28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
    }
  }
  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f003 031c 	and.w	r3, r3, #28
 8002078:	2204      	movs	r2, #4
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d026      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x7a>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d021      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 021c 	and.w	r2, r3, #28
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	2104      	movs	r1, #4
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d071      	beq.n	80021ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020d0:	e06c      	b.n	80021ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 031c 	and.w	r3, r3, #28
 80020da:	2202      	movs	r2, #2
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02e      	beq.n	8002144 <HAL_DMA_IRQHandler+0xec>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d029      	beq.n	8002144 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 020a 	bic.w	r2, r2, #10
 800210c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 021c 	and.w	r2, r3, #28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2102      	movs	r1, #2
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d038      	beq.n	80021ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002142:	e033      	b.n	80021ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 031c 	and.w	r3, r3, #28
 800214c:	2208      	movs	r2, #8
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02a      	beq.n	80021ae <HAL_DMA_IRQHandler+0x156>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d025      	beq.n	80021ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 020e 	bic.w	r2, r2, #14
 8002170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 021c 	and.w	r2, r3, #28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
}
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 021c 	and.w	r2, r3, #28
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d108      	bne.n	80021fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021f8:	e007      	b.n	800220a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800222a:	e160      	b.n	80024ee <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8152 	beq.w	80024e8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b12      	cmp	r3, #18
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	6939      	ldr	r1, [r7, #16]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00b      	beq.n	80022f0 <HAL_GPIO_Init+0xdc>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e4:	2b11      	cmp	r3, #17
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80ac 	beq.w	80024e8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002390:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	4b5a      	ldr	r3, [pc, #360]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_GPIO_Init+0x2fc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d025      	beq.n	8002420 <HAL_GPIO_Init+0x20c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4f      	ldr	r2, [pc, #316]	; (8002514 <HAL_GPIO_Init+0x300>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d01f      	beq.n	800241c <HAL_GPIO_Init+0x208>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a4e      	ldr	r2, [pc, #312]	; (8002518 <HAL_GPIO_Init+0x304>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d019      	beq.n	8002418 <HAL_GPIO_Init+0x204>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a4d      	ldr	r2, [pc, #308]	; (800251c <HAL_GPIO_Init+0x308>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_GPIO_Init+0x200>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a4c      	ldr	r2, [pc, #304]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00d      	beq.n	8002410 <HAL_GPIO_Init+0x1fc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a4b      	ldr	r2, [pc, #300]	; (8002524 <HAL_GPIO_Init+0x310>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <HAL_GPIO_Init+0x1f8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a4a      	ldr	r2, [pc, #296]	; (8002528 <HAL_GPIO_Init+0x314>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_GPIO_Init+0x1f4>
 8002404:	2306      	movs	r3, #6
 8002406:	e00c      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 8002408:	2307      	movs	r3, #7
 800240a:	e00a      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 800240c:	2305      	movs	r3, #5
 800240e:	e008      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 8002410:	2304      	movs	r3, #4
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 8002414:	2303      	movs	r3, #3
 8002416:	e004      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 8002418:	2302      	movs	r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_GPIO_Init+0x20e>
 8002420:	2300      	movs	r3, #0
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002432:	4936      	ldr	r1, [pc, #216]	; (800250c <HAL_GPIO_Init+0x2f8>)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_GPIO_Init+0x318>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002464:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_GPIO_Init+0x318>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_GPIO_Init+0x318>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800248e:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_GPIO_Init+0x318>)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_GPIO_Init+0x318>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_GPIO_Init+0x318>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_GPIO_Init+0x318>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_GPIO_Init+0x318>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f ae97 	bne.w	800222c <HAL_GPIO_Init+0x18>
  } 
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800
 800250c:	40010000 	.word	0x40010000
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40021400 	.word	0x40021400
 8002528:	40021800 	.word	0x40021800
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002546:	e0c4      	b.n	80026d2 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002548:	2201      	movs	r2, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b7 	beq.w	80026cc <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 800255e:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_GPIO_DeInit+0x1bc>)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a5b      	ldr	r2, [pc, #364]	; (80026f0 <HAL_GPIO_DeInit+0x1c0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d025      	beq.n	80025d4 <HAL_GPIO_DeInit+0xa4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <HAL_GPIO_DeInit+0x1c4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01f      	beq.n	80025d0 <HAL_GPIO_DeInit+0xa0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a59      	ldr	r2, [pc, #356]	; (80026f8 <HAL_GPIO_DeInit+0x1c8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d019      	beq.n	80025cc <HAL_GPIO_DeInit+0x9c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_GPIO_DeInit+0x1cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_GPIO_DeInit+0x98>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_GPIO_DeInit+0x1d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_DeInit+0x94>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_DeInit+0x1d4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_DeInit+0x90>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_GPIO_DeInit+0x1d8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_DeInit+0x8c>
 80025b8:	2306      	movs	r3, #6
 80025ba:	e00c      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025bc:	2307      	movs	r3, #7
 80025be:	e00a      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025c0:	2305      	movs	r3, #5
 80025c2:	e008      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025c4:	2304      	movs	r3, #4
 80025c6:	e006      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025c8:	2303      	movs	r3, #3
 80025ca:	e004      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_GPIO_DeInit+0xa6>
 80025d4:	2300      	movs	r3, #0
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	f002 0203 	and.w	r2, r2, #3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4093      	lsls	r3, r2
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d132      	bne.n	800264c <HAL_GPIO_DeInit+0x11c>
      {
        tmp = (0x0FU) << (4 * (position & 0x03));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80025f6:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <HAL_GPIO_DeInit+0x1bc>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43da      	mvns	r2, r3
 8002606:	4839      	ldr	r0, [pc, #228]	; (80026ec <HAL_GPIO_DeInit+0x1bc>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	400a      	ands	r2, r1
 800260e:	3302      	adds	r3, #2
 8002610:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	493b      	ldr	r1, [pc, #236]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 800261e:	4013      	ands	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	4938      	ldr	r1, [pc, #224]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 800262c:	4013      	ands	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	4934      	ldr	r1, [pc, #208]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 800263a:	4013      	ands	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	4931      	ldr	r1, [pc, #196]	; (800270c <HAL_GPIO_DeInit+0x1dc>)
 8002648:	4013      	ands	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2103      	movs	r1, #3
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	08d2      	lsrs	r2, r2, #3
 8002682:	4019      	ands	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2103      	movs	r1, #3
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	2101      	movs	r1, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2103      	movs	r1, #3
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f47f af34 	bne.w	8002548 <HAL_GPIO_DeInit+0x18>
  }
}
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40021400 	.word	0x40021400
 8002708:	40021800 	.word	0x40021800
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	041a      	lsls	r2, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002760:	e002      	b.n	8002768 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e10f      	b.n	80029a6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f941 	bl	8002a22 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b8:	f001 fc7a 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a7b      	ldr	r2, [pc, #492]	; (80029b0 <HAL_I2C_Init+0x23c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d807      	bhi.n	80027d8 <HAL_I2C_Init+0x64>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_I2C_Init+0x240>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e006      	b.n	80027e6 <HAL_I2C_Init+0x72>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_I2C_Init+0x244>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0db      	b.n	80029a6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_I2C_Init+0x248>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9b      	lsrs	r3, r3, #18
 80027f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a64      	ldr	r2, [pc, #400]	; (80029b0 <HAL_I2C_Init+0x23c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d802      	bhi.n	8002828 <HAL_I2C_Init+0xb4>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	e009      	b.n	800283c <HAL_I2C_Init+0xc8>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	4a63      	ldr	r2, [pc, #396]	; (80029c0 <HAL_I2C_Init+0x24c>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	3301      	adds	r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800284e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4956      	ldr	r1, [pc, #344]	; (80029b0 <HAL_I2C_Init+0x23c>)
 8002858:	428b      	cmp	r3, r1
 800285a:	d80d      	bhi.n	8002878 <HAL_I2C_Init+0x104>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e59      	subs	r1, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fbb1 f3f3 	udiv	r3, r1, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b04      	cmp	r3, #4
 8002872:	bf38      	it	cc
 8002874:	2304      	movcc	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1a4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x130>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x156>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x15e>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1a4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x184>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1a4>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e021      	b.n	8002a1a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	; 0x24
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f820 	bl	8002a34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a62:	f7ff f82d 	bl	8001ac0 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	f040 80d9 	bne.w	8002c28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2319      	movs	r3, #25
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	496d      	ldr	r1, [pc, #436]	; (8002c34 <HAL_I2C_Mem_Write+0x1ec>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fc73 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e0cc      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2C_Mem_Write+0x56>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0c5      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d007      	beq.n	8002ac4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2221      	movs	r2, #33	; 0x21
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_I2C_Mem_Write+0x1f0>)
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b06:	88f8      	ldrh	r0, [r7, #6]
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4603      	mov	r3, r0
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 face 	bl	80030b8 <I2C_RequestMemoryWrite>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d052      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e081      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fcf4 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d107      	bne.n	8002b4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06b      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_I2C_Mem_Write+0x180>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d017      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1aa      	bne.n	8002b26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fce0 	bl	800359a <I2C_WaitOnBTFFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e016      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	00100002 	.word	0x00100002
 8002c38:	ffff0000 	.word	0xffff0000

08002c3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c56:	f7fe ff33 	bl	8001ac0 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	f040 8208 	bne.w	800307a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2319      	movs	r3, #25
 8002c70:	2201      	movs	r2, #1
 8002c72:	497b      	ldr	r1, [pc, #492]	; (8002e60 <HAL_I2C_Mem_Read+0x224>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fb79 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
 8002c82:	e1fb      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Mem_Read+0x56>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e1f4      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d007      	beq.n	8002cb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	; 0x22
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_I2C_Mem_Read+0x228>)
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfa:	88f8      	ldrh	r0, [r7, #6]
 8002cfc:	893a      	ldrh	r2, [r7, #8]
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa5e 	bl	80031cc <I2C_RequestMemoryRead>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1b0      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d113      	bne.n	8002d4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e184      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d11b      	bne.n	8002d8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e164      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d11b      	bne.n	8002dca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	e144      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002de0:	e138      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	f200 80f1 	bhi.w	8002fce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d123      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fc0f 	bl	800361c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e139      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e3a:	e10b      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d14e      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4906      	ldr	r1, [pc, #24]	; (8002e68 <HAL_I2C_Mem_Read+0x22c>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa8c 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e10e      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
 8002e5e:	bf00      	nop
 8002e60:	00100002 	.word	0x00100002
 8002e64:	ffff0000 	.word	0xffff0000
 8002e68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ee0:	e0b8      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4966      	ldr	r1, [pc, #408]	; (8003084 <HAL_I2C_Mem_Read+0x448>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa3d 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0bf      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	2200      	movs	r2, #0
 8002f46:	494f      	ldr	r1, [pc, #316]	; (8003084 <HAL_I2C_Mem_Read+0x448>)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa0f 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e091      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fcc:	e042      	b.n	8003054 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fb22 	bl	800361c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e04c      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d118      	bne.n	8003054 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f aec2 	bne.w	8002de2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	00010004 	.word	0x00010004

08003088 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f93c 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e05f      	b.n	80031be <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800310c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	492d      	ldr	r1, [pc, #180]	; (80031c8 <I2C_RequestMemoryWrite+0x110>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f980 	bl	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04c      	b.n	80031be <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9ea 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b04      	cmp	r3, #4
 8003150:	d107      	bne.n	8003162 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02b      	b.n	80031be <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800316c:	893b      	ldrh	r3, [r7, #8]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e021      	b.n	80031bc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003178:	893b      	ldrh	r3, [r7, #8]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	b29b      	uxth	r3, r3
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9c4 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e005      	b.n	80031be <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00010002 	.word	0x00010002

080031cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	460b      	mov	r3, r1
 80031e0:	813b      	strh	r3, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2200      	movs	r2, #0
 800320e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f8aa 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e09e      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	6a3a      	ldr	r2, [r7, #32]
 8003236:	494c      	ldr	r1, [pc, #304]	; (8003368 <I2C_RequestMemoryRead+0x19c>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f8ee 	bl	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e08b      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	6a39      	ldr	r1, [r7, #32]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f958 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b04      	cmp	r3, #4
 8003274:	d107      	bne.n	8003286 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06a      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	e021      	b.n	80032e0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f932 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e044      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	6a39      	ldr	r1, [r7, #32]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f917 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e029      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2200      	movs	r2, #0
 8003324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f81f 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e013      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	4906      	ldr	r1, [pc, #24]	; (8003368 <I2C_RequestMemoryRead+0x19c>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f863 	bl	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	00010002 	.word	0x00010002

0800336c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337c:	e025      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d021      	beq.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fe fb9b 	bl	8001ac0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e023      	b.n	8003412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	e00c      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	429a      	cmp	r2, r3
 800340e:	d0b6      	beq.n	800337e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003428:	e051      	b.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d123      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0204 	orr.w	r2, r3, #4
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e046      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d021      	beq.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fb19 	bl	8001ac0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e020      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10c      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e00b      	b.n	800350a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d18d      	bne.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003524:	e02d      	b.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8ce 	bl	80036c8 <I2C_IsAcknowledgeFailed>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e02d      	b.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d021      	beq.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe fabf 	bl	8001ac0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d1ca      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a6:	e02d      	b.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f88d 	bl	80036c8 <I2C_IsAcknowledgeFailed>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e02d      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d021      	beq.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fa7e 	bl	8001ac0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d1ca      	bne.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003628:	e042      	b.n	80036b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b10      	cmp	r3, #16
 8003636:	d119      	bne.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0210 	mvn.w	r2, #16
 8003640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e029      	b.n	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7fe fa28 	bl	8001ac0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d1b5      	bne.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d11b      	bne.n	8003718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0204 	orr.w	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e31d      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003736:	4b94      	ldr	r3, [pc, #592]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07b      	beq.n	800384e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d006      	beq.n	800376a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b87      	ldr	r3, [pc, #540]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06a      	beq.n	800384c <HAL_RCC_OscConfig+0x128>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d166      	bne.n	800384c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e2f7      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x74>
 800378a:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7e      	ldr	r2, [pc, #504]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e02d      	b.n	80037f4 <HAL_RCC_OscConfig+0xd0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10c      	bne.n	80037ba <HAL_RCC_OscConfig+0x96>
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a78      	ldr	r2, [pc, #480]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a75      	ldr	r2, [pc, #468]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0xd0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0xb8>
 80037c2:	4b71      	ldr	r3, [pc, #452]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a70      	ldr	r2, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6d      	ldr	r2, [pc, #436]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0xd0>
 80037dc:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a69      	ldr	r2, [pc, #420]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a66      	ldr	r2, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe f960 	bl	8001ac0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe f95c 	bl	8001ac0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e2ad      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0xe0>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe f94c 	bl	8001ac0 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe f948 	bl	8001ac0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e299      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x108>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d05a      	beq.n	8003910 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d119      	bne.n	800389a <HAL_RCC_OscConfig+0x176>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d116      	bne.n	800389a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x160>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e276      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	493d      	ldr	r1, [pc, #244]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003898:	e03a      	b.n	8003910 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d020      	beq.n	80038e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCC_OscConfig+0x268>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe f90a 	bl	8001ac0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fe f906 	bl	8001ac0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e257      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	492a      	ldr	r1, [pc, #168]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
 80038e2:	e015      	b.n	8003910 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0x268>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe f8e9 	bl	8001ac0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe f8e5 	bl	8001ac0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e236      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80b8 	beq.w	8003a8e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d170      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x218>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e21a      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003948:	429a      	cmp	r2, r3
 800394a:	d921      	bls.n	8003990 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fbf1 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e208      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4906      	ldr	r1, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	061b      	lsls	r3, r3, #24
 8003980:	4901      	ldr	r1, [pc, #4]	; (8003988 <HAL_RCC_OscConfig+0x264>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
 8003986:	e020      	b.n	80039ca <HAL_RCC_OscConfig+0x2a6>
 8003988:	40023800 	.word	0x40023800
 800398c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003990:	4ba4      	ldr	r3, [pc, #656]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	49a1      	ldr	r1, [pc, #644]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a2:	4ba0      	ldr	r3, [pc, #640]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	499c      	ldr	r1, [pc, #624]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fbbc 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1d3      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	0b5b      	lsrs	r3, r3, #13
 80039d0:	3301      	adds	r3, #1
 80039d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039da:	4a92      	ldr	r2, [pc, #584]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	0912      	lsrs	r2, r2, #4
 80039e0:	f002 020f 	and.w	r2, r2, #15
 80039e4:	4990      	ldr	r1, [pc, #576]	; (8003c28 <HAL_RCC_OscConfig+0x504>)
 80039e6:	5c8a      	ldrb	r2, [r1, r2]
 80039e8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039ea:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <HAL_RCC_OscConfig+0x508>)
 80039ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ee:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <HAL_RCC_OscConfig+0x50c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd faac 	bl	8000f50 <HAL_InitTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d045      	beq.n	8003a8e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	e1b5      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d029      	beq.n	8003a62 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a0e:	4b89      	ldr	r3, [pc, #548]	; (8003c34 <HAL_RCC_OscConfig+0x510>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe f854 	bl	8001ac0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a1c:	f7fe f850 	bl	8001ac0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1a1      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a2e:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3a:	4b7a      	ldr	r3, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4977      	ldr	r1, [pc, #476]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4c:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	4972      	ldr	r1, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a62:	4b74      	ldr	r3, [pc, #464]	; (8003c34 <HAL_RCC_OscConfig+0x510>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe f82a 	bl	8001ac0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a70:	f7fe f826 	bl	8001ac0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e177      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a82:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d030      	beq.n	8003afc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x514>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe f80a 	bl	8001ac0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe f806 	bl	8001ac0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e157      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ac2:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x38c>
 8003ace:	e015      	b.n	8003afc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_OscConfig+0x514>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fff3 	bl	8001ac0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fd ffef 	bl	8001ac0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e140      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80b5 	beq.w	8003c74 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6253      	str	r3, [r2, #36]	; 0x24
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x518>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <HAL_RCC_OscConfig+0x518>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x518>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd ffb7 	bl	8001ac0 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7fd ffb3 	bl	8001ac0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e104      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_OscConfig+0x518>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x466>
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6353      	str	r3, [r2, #52]	; 0x34
 8003b88:	e02d      	b.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x488>
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	6353      	str	r3, [r2, #52]	; 0x34
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8003baa:	e01c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCC_OscConfig+0x4aa>
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bbe:	6353      	str	r3, [r2, #52]	; 0x34
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6353      	str	r3, [r2, #52]	; 0x34
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCC_OscConfig+0x4c2>
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	6353      	str	r3, [r2, #52]	; 0x34
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d015      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bee:	f7fd ff67 	bl	8001ac0 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fd ff63 	bl	8001ac0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0b2      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ee      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4d2>
 8003c18:	e023      	b.n	8003c62 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd ff51 	bl	8001ac0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c20:	e019      	b.n	8003c56 <HAL_RCC_OscConfig+0x532>
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800c0cc 	.word	0x0800c0cc
 8003c2c:	20000044 	.word	0x20000044
 8003c30:	20000048 	.word	0x20000048
 8003c34:	42470020 	.word	0x42470020
 8003c38:	42470680 	.word	0x42470680
 8003c3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd ff3e 	bl	8001ac0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e08d      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c56:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b44      	ldr	r3, [pc, #272]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d079      	beq.n	8003d70 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d056      	beq.n	8003d30 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d13b      	bne.n	8003d02 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x65c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd ff16 	bl	8001ac0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd ff12 	bl	8001ac0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e063      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb6:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	4319      	orrs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	492b      	ldr	r1, [pc, #172]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x65c>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd fef1 	bl	8001ac0 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fd feed 	bl	8001ac0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e03e      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x5be>
 8003d00:	e036      	b.n	8003d70 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCC_OscConfig+0x65c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd feda 	bl	8001ac0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd fed6 	bl	8001ac0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e027      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5ec>
 8003d2e:	e01f      	b.n	8003d70 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e01a      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_RCC_OscConfig+0x658>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470060 	.word	0x42470060

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e11a      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d919      	bls.n	8003dda <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x34>
 8003dac:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a89      	ldr	r2, [pc, #548]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b87      	ldr	r3, [pc, #540]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 0201 	bic.w	r2, r3, #1
 8003dc0:	4985      	ldr	r1, [pc, #532]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc8:	4b83      	ldr	r3, [pc, #524]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0f9      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	497a      	ldr	r1, [pc, #488]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 808e 	beq.w	8003f22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e0e:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d121      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0d7      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e26:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d115      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0cb      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e3e:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0bf      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0b7      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	495c      	ldr	r1, [pc, #368]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd fe26 	bl	8001ac0 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d112      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fd fe1e 	bl	8001ac0 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e09b      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xfc>
 8003ea2:	e03e      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d112      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eae:	f7fd fe07 	bl	8001ac0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e084      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec4:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_ClockConfig+0x12a>
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d11d      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd fdf0 	bl	8001ac0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e06d      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d1ee      	bne.n	8003edc <HAL_RCC_ClockConfig+0x158>
 8003efe:	e010      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fd fdde 	bl	8001ac0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e05b      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d219      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1be>
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 0201 	bic.w	r2, r3, #1
 8003f4a:	4923      	ldr	r1, [pc, #140]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_RCC_ClockConfig+0x254>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e034      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490f      	ldr	r1, [pc, #60]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f823 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCC_ClockConfig+0x258>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x264>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc ffc4 	bl	8000f50 <HAL_InitTick>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	0800c0cc 	.word	0x0800c0cc
 8003fe4:	20000044 	.word	0x20000044
 8003fe8:	20000048 	.word	0x20000048

08003fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d006      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x24>
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d007      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x2a>
 8004006:	2b04      	cmp	r3, #4
 8004008:	d12c      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_GetSysClockFreq+0xa4>)
 800400c:	613b      	str	r3, [r7, #16]
      break;
 800400e:	e037      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004012:	613b      	str	r3, [r7, #16]
      break;
 8004014:	e034      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0c9b      	lsrs	r3, r3, #18
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_RCC_GetSysClockFreq+0xac>)
 8004020:	5cd3      	ldrb	r3, [r2, r3]
 8004022:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	0d9b      	lsrs	r3, r3, #22
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	3301      	adds	r3, #1
 800402e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004040:	fb02 f203 	mul.w	r2, r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e007      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004052:	fb02 f203 	mul.w	r2, r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	613b      	str	r3, [r7, #16]
      break;
 8004062:	e00d      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	0b5b      	lsrs	r3, r3, #13
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	613b      	str	r3, [r7, #16]
      break;
 800407e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004080:	693b      	ldr	r3, [r7, #16]
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400
 8004094:	016e3600 	.word	0x016e3600
 8004098:	0800c0c0 	.word	0x0800c0c0

0800409c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <HAL_RCC_GetHCLKFreq+0x10>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	20000044 	.word	0x20000044

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b4:	f7ff fff2 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040b8:	4601      	mov	r1, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40023800 	.word	0x40023800
 80040d4:	0800c0dc 	.word	0x0800c0dc

080040d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	220f      	movs	r2, #15
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_GetClockConfig+0x58>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCC_GetClockConfig+0x58>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_GetClockConfig+0x58>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_RCC_GetClockConfig+0x58>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0201 	and.w	r2, r3, #1
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40023800 	.word	0x40023800
 8004134:	40023c00 	.word	0x40023c00

08004138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d12c      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004150:	4b26      	ldr	r3, [pc, #152]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e016      	b.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6253      	str	r3, [r2, #36]	; 0x24
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004188:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800419c:	d105      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041a4:	d101      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80041a6:	2301      	movs	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80041b0:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	490b      	ldr	r1, [pc, #44]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	40023c00 	.word	0x40023c00

080041f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e022      	b.n	8004250 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d105      	bne.n	8004222 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc fdc5 	bl	8000dac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2203      	movs	r2, #3
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f814 	bl	8004258 <HAL_SD_InitCard>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e00a      	b.n	8004250 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b08e      	sub	sp, #56	; 0x38
 800425c:	af04      	add	r7, sp, #16
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004274:	2376      	movs	r3, #118	; 0x76
 8004276:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681d      	ldr	r5, [r3, #0]
 800427c:	466c      	mov	r4, sp
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004290:	4628      	mov	r0, r5
 8004292:	f001 fc79 	bl	8005b88 <SDIO_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800429c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e03a      	b.n	800431e <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80042a8:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <HAL_SD_InitCard+0xd0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fcae 	bl	8005c14 <SDIO_PowerState_ON>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80042be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e029      	b.n	800431e <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_SD_InitCard+0xd0>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 ffd5 	bl	8005280 <SD_PowerON>
 80042d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e013      	b.n	800431e <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fef4 	bl	80050e4 <SD_InitCard>
 80042fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3728      	adds	r7, #40	; 0x28
 8004322:	46bd      	mov	sp, r7
 8004324:	bdb0      	pop	{r4, r5, r7, pc}
 8004326:	bf00      	nop
 8004328:	422580a0 	.word	0x422580a0

0800432c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0c9      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	f040 80c2 	bne.w	80044e6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	429a      	cmp	r2, r3
 8004374:	d907      	bls.n	8004386 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0b0      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a50      	ldr	r2, [pc, #320]	; (80044f0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a4f      	ldr	r2, [pc, #316]	; (80044f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2200      	movs	r2, #0
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3380      	adds	r3, #128	; 0x80
 80043cc:	4619      	mov	r1, r3
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	025b      	lsls	r3, r3, #9
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f7fd fd61 	bl	8001e9c <HAL_DMA_Start_IT>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d017      	beq.n	8004410 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80043ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a40      	ldr	r2, [pc, #256]	; (80044f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e06b      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004410:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	2b01      	cmp	r3, #1
 800441c:	d002      	beq.n	8004424 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	025b      	lsls	r3, r3, #9
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fc7f 	bl	8005d30 <SDMMC_CmdBlockLength>
 8004432:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e046      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	025b      	lsls	r3, r3, #9
 8004464:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004466:	2390      	movs	r3, #144	; 0x90
 8004468:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800446a:	2302      	movs	r3, #2
 800446c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004472:	2301      	movs	r3, #1
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f107 0210 	add.w	r2, r7, #16
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fc2a 	bl	8005cda <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d90a      	bls.n	80044a2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2282      	movs	r2, #130	; 0x82
 8004490:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fc8d 	bl	8005db8 <SDMMC_CmdReadMultiBlock>
 800449e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80044a0:	e009      	b.n	80044b6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2281      	movs	r2, #129	; 0x81
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fc60 	bl	8005d74 <SDMMC_CmdReadSingleBlock>
 80044b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	431a      	orrs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e002      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	; 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08004f01 	.word	0x08004f01
 80044f4:	08004f71 	.word	0x08004f71
 80044f8:	004005ff 	.word	0x004005ff
 80044fc:	4225858c 	.word	0x4225858c

08004500 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d107      	bne.n	8004528 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0ce      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80c7 	bne.w	80046c4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800453c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	441a      	add	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	429a      	cmp	r2, r3
 8004548:	d907      	bls.n	800455a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e0b5      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2203      	movs	r2, #3
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	4a53      	ldr	r2, [pc, #332]	; (80046d0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004584:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	4a52      	ldr	r2, [pc, #328]	; (80046d4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800458c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	2200      	movs	r2, #0
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	2b01      	cmp	r3, #1
 800459c:	d002      	beq.n	80045a4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	025b      	lsls	r3, r3, #9
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fbbf 	bl	8005d30 <SDMMC_CmdBlockLength>
 80045b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00f      	beq.n	80045da <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a46      	ldr	r2, [pc, #280]	; (80046d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e075      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d90a      	bls.n	80045f6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22a0      	movs	r2, #160	; 0xa0
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fc27 	bl	8005e40 <SDMMC_CmdWriteMultiBlock>
 80045f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80045f4:	e009      	b.n	800460a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2290      	movs	r2, #144	; 0x90
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fbfa 	bl	8005dfc <SDMMC_CmdWriteSingleBlock>
 8004608:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	431a      	orrs	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e047      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3380      	adds	r3, #128	; 0x80
 8004648:	461a      	mov	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	025b      	lsls	r3, r3, #9
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	f7fd fc24 	bl	8001e9c <HAL_DMA_Start_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01c      	beq.n	8004694 <HAL_SD_WriteBlocks_DMA+0x194>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e018      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
 8004698:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	025b      	lsls	r3, r3, #9
 800469e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046a0:	2390      	movs	r3, #144	; 0x90
 80046a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f107 0210 	add.w	r2, r7, #16
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fb0d 	bl	8005cda <SDIO_ConfigData>

      return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3730      	adds	r7, #48	; 0x30
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	08004ed9 	.word	0x08004ed9
 80046d4:	08004f71 	.word	0x08004f71
 80046d8:	004005ff 	.word	0x004005ff
 80046dc:	4225858c 	.word	0x4225858c

080046e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_SD_IRQHandler+0x2e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 ffd0 	bl	80056ac <SD_Read_IT>
 800470c:	e165      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 808f 	beq.w	800483c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004736:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800473a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d039      	beq.n	80047ca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_SD_IRQHandler+0x8a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f001 fb88 	bl	8005e84 <SDMMC_CmdStopTransfer>
 8004774:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f92f 	bl	80049ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f240 523a 	movw	r2, #1338	; 0x53a
 8004796:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_SD_IRQHandler+0xda>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 f80e 	bl	80067dc <HAL_SD_RxCpltCallback>
 80047c0:	e10b      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 f800 	bl	80067c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047c8:	e107      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8102 	beq.w	80049da <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d011      	beq.n	8004804 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fb4d 	bl	8005e84 <SDMMC_CmdStopTransfer>
 80047ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8f4 	bl	80049ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 80e5 	bne.w	80049da <HAL_SD_IRQHandler+0x2fa>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 80df 	bne.w	80049da <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0208 	bic.w	r2, r2, #8
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 ffc7 	bl	80067c8 <HAL_SD_TxCpltCallback>
}
 800483a:	e0ce      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_SD_IRQHandler+0x17c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 ff7a 	bl	800574e <SD_Write_IT>
 800485a:	e0be      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004862:	f240 233a 	movw	r3, #570	; 0x23a
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80b6 	beq.w	80049da <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f043 0202 	orr.w	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	f043 0208 	orr.w	r2, r3, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	f043 0210 	orr.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	f043 0208 	orr.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f240 723a 	movw	r2, #1850	; 0x73a
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004908:	f023 0302 	bic.w	r3, r3, #2
 800490c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fab6 	bl	8005e84 <SDMMC_CmdStopTransfer>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f855 	bl	80049ec <HAL_SD_ErrorCallback>
}
 8004942:	e04a      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d045      	beq.n	80049da <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_SD_IRQHandler+0x282>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_SD_IRQHandler+0x304>)
 8004968:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fb31 	bl	8001fd6 <HAL_DMA_Abort_IT>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02f      	beq.n	80049da <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb42 	bl	8005008 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004984:	e029      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_SD_IRQHandler+0x2ba>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d011      	beq.n	80049be <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <HAL_SD_IRQHandler+0x308>)
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fb15 	bl	8001fd6 <HAL_DMA_Abort_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d013      	beq.n	80049da <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb5d 	bl	8005076 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80049bc:	e00d      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 feee 	bl	80067b4 <HAL_SD_AbortCallback>
}
 80049d8:	e7ff      	b.n	80049da <HAL_SD_IRQHandler+0x2fa>
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	08005009 	.word	0x08005009
 80049e8:	08005077 	.word	0x08005077

080049ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0e:	0f9b      	lsrs	r3, r3, #30
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1a:	0e9b      	lsrs	r3, r3, #26
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3e:	0c1b      	lsrs	r3, r3, #16
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a7e:	0bdb      	lsrs	r3, r3, #15
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a90:	0b9b      	lsrs	r3, r3, #14
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa2:	0b5b      	lsrs	r3, r3, #13
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab4:	0b1b      	lsrs	r3, r3, #12
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d163      	bne.n	8004b98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad4:	009a      	lsls	r2, r3, #2
 8004ad6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ae0:	0f92      	lsrs	r2, r2, #30
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aec:	0edb      	lsrs	r3, r3, #27
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afe:	0e1b      	lsrs	r3, r3, #24
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b10:	0d5b      	lsrs	r3, r3, #21
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b22:	0c9b      	lsrs	r3, r3, #18
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b34:	0bdb      	lsrs	r3, r3, #15
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	7e1b      	ldrb	r3, [r3, #24]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	3302      	adds	r3, #2
 8004b58:	2201      	movs	r2, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b62:	fb02 f203 	mul.w	r2, r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	7a1b      	ldrb	r3, [r3, #8]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2201      	movs	r2, #1
 8004b76:	409a      	lsls	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b84:	0a52      	lsrs	r2, r2, #9
 8004b86:	fb02 f203 	mul.w	r2, r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b94:	661a      	str	r2, [r3, #96]	; 0x60
 8004b96:	e031      	b.n	8004bfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d11d      	bne.n	8004bdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	029a      	lsls	r2, r3, #10
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60
 8004bda:	e00f      	b.n	8004bfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_SD_GetCardCSD+0x344>)
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e09d      	b.n	8004d38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	0b9b      	lsrs	r3, r3, #14
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c12:	09db      	lsrs	r3, r3, #7
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	0fdb      	lsrs	r3, r3, #31
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	0f5b      	lsrs	r3, r3, #29
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	0e9b      	lsrs	r3, r3, #26
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	0d9b      	lsrs	r3, r3, #22
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	0d5b      	lsrs	r3, r3, #21
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	0bdb      	lsrs	r3, r3, #15
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	0b9b      	lsrs	r3, r3, #14
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	0b5b      	lsrs	r3, r3, #13
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	0b1b      	lsrs	r3, r3, #12
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	004005ff 	.word	0x004005ff

08004d48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af04      	add	r7, sp, #16
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2203      	movs	r2, #3
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d02e      	beq.n	8004e18 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dce:	e029      	b.n	8004e24 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d10a      	bne.n	8004dee <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb07 	bl	80053ec <SD_WideBus_Enable>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
 8004dec:	e01a      	b.n	8004e24 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fb44 	bl	8005482 <SD_WideBus_Disable>
 8004dfa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
 8004e08:	e00c      	b.n	8004e24 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
 8004e16:	e005      	b.n	8004e24 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d009      	beq.n	8004e40 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e024      	b.n	8004e8a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681d      	ldr	r5, [r3, #0]
 8004e66:	466c      	mov	r4, sp
 8004e68:	f107 0318 	add.w	r3, r7, #24
 8004e6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 fe84 	bl	8005b88 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3728      	adds	r7, #40	; 0x28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bdb0      	pop	{r4, r5, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	004005ff 	.word	0x004005ff

08004e98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa76 	bl	800539c <SD_SendStatus>
 8004eb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0a5b      	lsrs	r3, r3, #9
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004ece:	693b      	ldr	r3, [r7, #16]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	2b82      	cmp	r3, #130	; 0x82
 8004f14:	d111      	bne.n	8004f3a <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 ffb2 	bl	8005e84 <SDMMC_CmdStopTransfer>
 8004f20:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fd59 	bl	80049ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0208 	bic.w	r2, r2, #8
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f001 fc3a 	bl	80067dc <HAL_SD_RxCpltCallback>
#endif
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d002      	beq.n	8004f9a <SD_DMAError+0x2a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d12d      	bne.n	8004ff6 <SD_DMAError+0x86>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <SD_DMAError+0x94>)
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff ff6a 	bl	8004e98 <HAL_SD_GetCardState>
 8004fc4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d002      	beq.n	8004fd2 <SD_DMAError+0x62>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10a      	bne.n	8004fe8 <SD_DMAError+0x78>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ff54 	bl	8005e84 <SDMMC_CmdStopTransfer>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff fcf8 	bl	80049ec <HAL_SD_ErrorCallback>
#endif
}
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	004005ff 	.word	0x004005ff

08005008 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f240 523a 	movw	r2, #1338	; 0x53a
 800501e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff ff39 	bl	8004e98 <HAL_SD_GetCardState>
 8005026:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d002      	beq.n	8005042 <SD_DMATxAbort+0x3a>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b05      	cmp	r3, #5
 8005040:	d10a      	bne.n	8005058 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 ff1c 	bl	8005e84 <SDMMC_CmdStopTransfer>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	431a      	orrs	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f001 fba7 	bl	80067b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005066:	e002      	b.n	800506e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fcbf 	bl	80049ec <HAL_SD_ErrorCallback>
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f240 523a 	movw	r2, #1338	; 0x53a
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff02 	bl	8004e98 <HAL_SD_GetCardState>
 8005094:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d002      	beq.n	80050b0 <SD_DMARxAbort+0x3a>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d10a      	bne.n	80050c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fee5 	bl	8005e84 <SDMMC_CmdStopTransfer>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 fb70 	bl	80067b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80050d4:	e002      	b.n	80050dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fc88 	bl	80049ec <HAL_SD_ErrorCallback>
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050e4:	b5b0      	push	{r4, r5, r7, lr}
 80050e6:	b094      	sub	sp, #80	; 0x50
 80050e8:	af04      	add	r7, sp, #16
 80050ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050ec:	2301      	movs	r3, #1
 80050ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fd9c 	bl	8005c32 <SDIO_GetPowerState>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005100:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005104:	e0b7      	b.n	8005276 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	2b03      	cmp	r3, #3
 800510c:	d02f      	beq.n	800516e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ffc0 	bl	8006098 <SDMMC_CmdSendCID>
 8005118:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <SD_InitCard+0x40>
    {
      return errorstate;
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	e0a8      	b.n	8005276 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fdc3 	bl	8005cb6 <SDIO_GetResponse>
 8005130:	4602      	mov	r2, r0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2104      	movs	r1, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fdba 	bl	8005cb6 <SDIO_GetResponse>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fdb1 	bl	8005cb6 <SDIO_GetResponse>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	210c      	movs	r1, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fda8 	bl	8005cb6 <SDIO_GetResponse>
 8005166:	4602      	mov	r2, r0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	2b03      	cmp	r3, #3
 8005174:	d00d      	beq.n	8005192 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f107 020e 	add.w	r2, r7, #14
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ffc6 	bl	8006112 <SDMMC_CmdSetRelAdd>
 8005186:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <SD_InitCard+0xae>
    {
      return errorstate;
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	e071      	b.n	8005276 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	2b03      	cmp	r3, #3
 8005198:	d036      	beq.n	8005208 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800519a:	89fb      	ldrh	r3, [r7, #14]
 800519c:	461a      	mov	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f000 ff90 	bl	80060d4 <SDMMC_CmdSendCSD>
 80051b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80051bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051be:	e05a      	b.n	8005276 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fd75 	bl	8005cb6 <SDIO_GetResponse>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2104      	movs	r1, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fd6c 	bl	8005cb6 <SDIO_GetResponse>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2108      	movs	r1, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fd63 	bl	8005cb6 <SDIO_GetResponse>
 80051f0:	4602      	mov	r2, r0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	210c      	movs	r1, #12
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fd5a 	bl	8005cb6 <SDIO_GetResponse>
 8005202:	4602      	mov	r2, r0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2104      	movs	r1, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fd51 	bl	8005cb6 <SDIO_GetResponse>
 8005214:	4603      	mov	r3, r0
 8005216:	0d1a      	lsrs	r2, r3, #20
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800521c:	f107 0310 	add.w	r3, r7, #16
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fbec 	bl	8004a00 <HAL_SD_GetCardCSD>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800522e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005232:	e020      	b.n	8005276 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	f04f 0400 	mov.w	r4, #0
 8005242:	461a      	mov	r2, r3
 8005244:	4623      	mov	r3, r4
 8005246:	4608      	mov	r0, r1
 8005248:	f000 fe3e 	bl	8005ec8 <SDMMC_CmdSelDesel>
 800524c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <SD_InitCard+0x174>
  {
    return errorstate;
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	e00e      	b.n	8005276 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681d      	ldr	r5, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	466c      	mov	r4, sp
 8005260:	f103 0210 	add.w	r2, r3, #16
 8005264:	ca07      	ldmia	r2, {r0, r1, r2}
 8005266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800526a:	3304      	adds	r3, #4
 800526c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fc8a 	bl	8005b88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3740      	adds	r7, #64	; 0x40
 800527a:	46bd      	mov	sp, r7
 800527c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005280 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe38 	bl	8005f0e <SDMMC_CmdGoIdleState>
 800529e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	e072      	b.n	8005390 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fe4b 	bl	8005f4a <SDMMC_CmdOperCond>
 80052b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fe21 	bl	8005f0e <SDMMC_CmdGoIdleState>
 80052cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <SD_PowerON+0x5e>
    {
      return errorstate;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	e05b      	b.n	8005390 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d137      	bne.n	8005356 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fe4b 	bl	8005f88 <SDMMC_CmdAppCommand>
 80052f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02d      	beq.n	8005356 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052fe:	e047      	b.n	8005390 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fe3e 	bl	8005f88 <SDMMC_CmdAppCommand>
 800530c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <SD_PowerON+0x98>
    {
      return errorstate;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	e03b      	b.n	8005390 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	491e      	ldr	r1, [pc, #120]	; (8005398 <SD_PowerON+0x118>)
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fe54 	bl	8005fcc <SDMMC_CmdAppOperCommand>
 8005324:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800532c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005330:	e02e      	b.n	8005390 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fcbc 	bl	8005cb6 <SDIO_GetResponse>
 800533e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	0fdb      	lsrs	r3, r3, #31
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <SD_PowerON+0xcc>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <SD_PowerON+0xce>
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]

    count++;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	3301      	adds	r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800535c:	4293      	cmp	r3, r2
 800535e:	d802      	bhi.n	8005366 <SD_PowerON+0xe6>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0cc      	beq.n	8005300 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800536c:	4293      	cmp	r3, r2
 800536e:	d902      	bls.n	8005376 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005374:	e00c      	b.n	8005390 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
 8005386:	e002      	b.n	800538e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	c1100000 	.word	0xc1100000

0800539c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80053ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053b0:	e018      	b.n	80053e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fec8 	bl	8006154 <SDMMC_CmdSendStatus>
 80053c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	e009      	b.n	80053e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fc6d 	bl	8005cb6 <SDIO_GetResponse>
 80053dc:	4602      	mov	r2, r0
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fc57 	bl	8005cb6 <SDIO_GetResponse>
 8005408:	4603      	mov	r3, r0
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005412:	d102      	bne.n	800541a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005418:	e02f      	b.n	800547a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f879 	bl	8005518 <SD_FindSCR>
 8005426:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	e023      	b.n	800547a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01c      	beq.n	8005476 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 fd9d 	bl	8005f88 <SDMMC_CmdAppCommand>
 800544e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	e00f      	b.n	800547a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fdd6 	bl	8006012 <SDMMC_CmdBusWidth>
 8005466:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	e003      	b.n	800547a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005472:	2300      	movs	r3, #0
 8005474:	e001      	b.n	800547a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005476:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fc0c 	bl	8005cb6 <SDIO_GetResponse>
 800549e:	4603      	mov	r3, r0
 80054a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a8:	d102      	bne.n	80054b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054ae:	e02f      	b.n	8005510 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f82e 	bl	8005518 <SD_FindSCR>
 80054bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	e023      	b.n	8005510 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01c      	beq.n	800550c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fd52 	bl	8005f88 <SDMMC_CmdAppCommand>
 80054e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	e00f      	b.n	8005510 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fd8b 	bl	8006012 <SDMMC_CmdBusWidth>
 80054fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	e003      	b.n	8005510 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005508:	2300      	movs	r3, #0
 800550a:	e001      	b.n	8005510 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800550c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b08f      	sub	sp, #60	; 0x3c
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005522:	f7fc facd 	bl	8001ac0 <HAL_GetTick>
 8005526:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2108      	movs	r1, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fbf6 	bl	8005d30 <SDMMC_CmdBlockLength>
 8005544:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <SD_FindSCR+0x38>
  {
    return errorstate;
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	e0a9      	b.n	80056a4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fd13 	bl	8005f88 <SDMMC_CmdAppCommand>
 8005562:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <SD_FindSCR+0x56>
  {
    return errorstate;
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	e09a      	b.n	80056a4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005574:	2308      	movs	r3, #8
 8005576:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005578:	2330      	movs	r3, #48	; 0x30
 800557a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800557c:	2302      	movs	r3, #2
 800557e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005580:	2300      	movs	r3, #0
 8005582:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005584:	2301      	movs	r3, #1
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f107 0210 	add.w	r2, r7, #16
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fba1 	bl	8005cda <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fd5a 	bl	8006056 <SDMMC_CmdSendSCR>
 80055a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d022      	beq.n	80055f0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	e07a      	b.n	80056a4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	18d4      	adds	r4, r2, r3
 80055ca:	4608      	mov	r0, r1
 80055cc:	f000 fb06 	bl	8005bdc <SDIO_ReadFIFO>
 80055d0:	4603      	mov	r3, r0
 80055d2:	6023      	str	r3, [r4, #0]
      index++;
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	3301      	adds	r3, #1
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055da:	f7fc fa71 	bl	8001ac0 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d102      	bne.n	80055f0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80055ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ee:	e059      	b.n	80056a4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f6:	f240 432a 	movw	r3, #1066	; 0x42a
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0d6      	beq.n	80055ae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2208      	movs	r2, #8
 8005614:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005616:	2308      	movs	r3, #8
 8005618:	e044      	b.n	80056a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005630:	2302      	movs	r3, #2
 8005632:	e037      	b.n	80056a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2220      	movs	r2, #32
 8005648:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800564a:	2320      	movs	r3, #32
 800564c:	e02a      	b.n	80056a4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f240 523a 	movw	r2, #1338	; 0x53a
 8005656:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	061a      	lsls	r2, r3, #24
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005664:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800566e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	0e1b      	lsrs	r3, r3, #24
 8005674:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	601a      	str	r2, [r3, #0]
    scr++;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	3304      	adds	r3, #4
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	061a      	lsls	r2, r3, #24
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800568c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005696:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	373c      	adds	r7, #60	; 0x3c
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd90      	pop	{r4, r7, pc}

080056ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d03f      	beq.n	8005746 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e033      	b.n	8005734 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fa83 	bl	8005bdc <SDIO_ReadFIFO>
 80056d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3b01      	subs	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3b01      	subs	r3, #1
 8005716:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	0e1b      	lsrs	r3, r3, #24
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3301      	adds	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3b01      	subs	r3, #1
 800572c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	3301      	adds	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b07      	cmp	r3, #7
 8005738:	d9c8      	bls.n	80056cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d043      	beq.n	80057f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e037      	b.n	80057de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3b01      	subs	r3, #1
 800577e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	021a      	lsls	r2, r3, #8
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4313      	orrs	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3b01      	subs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	041a      	lsls	r2, r3, #16
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	061a      	lsls	r2, r3, #24
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f107 0208 	add.w	r2, r7, #8
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fa0e 	bl	8005bf4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b07      	cmp	r3, #7
 80057e2:	d9c4      	bls.n	800576e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01d      	b.n	8005846 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f815 	bl	800584e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 f936 	bl	8005aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d007      	beq.n	800589a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d122      	bne.n	8005902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d11b      	bne.n	8005902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f06f 0202 	mvn.w	r2, #2
 80058d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8c1 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 80058ee:	e005      	b.n	80058fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8b4 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8c3 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d122      	bne.n	8005956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d11b      	bne.n	8005956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0204 	mvn.w	r2, #4
 8005926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f897 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 8005942:	e005      	b.n	8005950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f88a 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f899 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d122      	bne.n	80059aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d11b      	bne.n	80059aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0208 	mvn.w	r2, #8
 800597a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2204      	movs	r2, #4
 8005980:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f86d 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f860 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f86f 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d122      	bne.n	80059fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d11b      	bne.n	80059fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f06f 0210 	mvn.w	r2, #16
 80059ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2208      	movs	r2, #8
 80059d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f843 	bl	8005a70 <HAL_TIM_IC_CaptureCallback>
 80059ea:	e005      	b.n	80059f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f836 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f845 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0201 	mvn.w	r2, #1
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fb f98b 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f81f 	bl	8005a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
	...

08005aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0x38>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <TIM_Base_SetConfig+0xc8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0x38>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <TIM_Base_SetConfig+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x38>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <TIM_Base_SetConfig+0xd0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x38>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <TIM_Base_SetConfig+0xd4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d017      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <TIM_Base_SetConfig+0xc8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <TIM_Base_SetConfig+0xcc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a1a      	ldr	r2, [pc, #104]	; (8005b78 <TIM_Base_SetConfig+0xd0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <TIM_Base_SetConfig+0xd4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <TIM_Base_SetConfig+0xd8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0x82>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <TIM_Base_SetConfig+0xdc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	615a      	str	r2, [r3, #20]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40010800 	.word	0x40010800
 8005b80:	40010c00 	.word	0x40010c00
 8005b84:	40011000 	.word	0x40011000

08005b88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005b88:	b084      	sub	sp, #16
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	f107 001c 	add.w	r0, r7, #28
 8005b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005ba2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ba6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005baa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005bae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005bb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	b004      	add	sp, #16
 8005bda:	4770      	bx	lr

08005bdc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005c22:	2002      	movs	r0, #2
 8005c24:	f7fb ff56 	bl	8001ad4 <HAL_Delay>
  
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005c70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005c76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c86:	f023 030f 	bic.w	r3, r3, #15
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	b2db      	uxtb	r3, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
}  
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d00:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d06:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0

}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005d3e:	2310      	movs	r3, #16
 8005d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d42:	2340      	movs	r3, #64	; 0x40
 8005d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff78 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	2110      	movs	r1, #16
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa40 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d82:	2311      	movs	r3, #17
 8005d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d86:	2340      	movs	r3, #64	; 0x40
 8005d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d94:	f107 0308 	add.w	r3, r7, #8
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff ff56 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	2111      	movs	r1, #17
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa1e 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dae:	69fb      	ldr	r3, [r7, #28]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005dc6:	2312      	movs	r3, #18
 8005dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dca:	2340      	movs	r3, #64	; 0x40
 8005dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dd8:	f107 0308 	add.w	r3, r7, #8
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff34 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	2112      	movs	r1, #18
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9fc 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e0a:	2318      	movs	r3, #24
 8005e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ff12 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2c:	2118      	movs	r1, #24
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9da 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e36:	69fb      	ldr	r3, [r7, #28]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005e4e:	2319      	movs	r3, #25
 8005e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e52:	2340      	movs	r3, #64	; 0x40
 8005e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e60:	f107 0308 	add.w	r3, r7, #8
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fef0 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e70:	2119      	movs	r1, #25
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9b8 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e90:	230c      	movs	r3, #12
 8005e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ea2:	f107 0308 	add.w	r3, r7, #8
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fecf 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <SDMMC_CmdStopTransfer+0x40>)
 8005eb0:	210c      	movs	r1, #12
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f998 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	05f5e100 	.word	0x05f5e100

08005ec8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005edc:	2340      	movs	r3, #64	; 0x40
 8005ede:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff feab 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	2107      	movs	r1, #7
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f973 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005f02:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3728      	adds	r7, #40	; 0x28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b088      	sub	sp, #32
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe8a 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f92d 	bl	8006198 <SDMMC_GetCmdError>
 8005f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f40:	69fb      	ldr	r3, [r7, #28]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005f52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005f58:	2308      	movs	r3, #8
 8005f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe6b 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb16 	bl	80065a8 <SDMMC_GetCmdResp7>
 8005f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f96:	2337      	movs	r3, #55	; 0x37
 8005f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f9a:	2340      	movs	r3, #64	; 0x40
 8005f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fe4c 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb8:	2137      	movs	r1, #55	; 0x37
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f914 	bl	80061e8 <SDMMC_GetCmdResp1>
 8005fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005fe2:	2329      	movs	r3, #41	; 0x29
 8005fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe6:	2340      	movs	r3, #64	; 0x40
 8005fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff4:	f107 0308 	add.w	r3, r7, #8
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fe26 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa23 	bl	800644c <SDMMC_GetCmdResp3>
 8006006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006008:	69fb      	ldr	r3, [r7, #28]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b088      	sub	sp, #32
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006020:	2306      	movs	r3, #6
 8006022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006024:	2340      	movs	r3, #64	; 0x40
 8006026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fe07 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800603e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006042:	2106      	movs	r1, #6
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f8cf 	bl	80061e8 <SDMMC_GetCmdResp1>
 800604a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800604c:	69fb      	ldr	r3, [r7, #28]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b088      	sub	sp, #32
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006062:	2333      	movs	r3, #51	; 0x33
 8006064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800606e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006074:	f107 0308 	add.w	r3, r7, #8
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff fde6 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006080:	f241 3288 	movw	r2, #5000	; 0x1388
 8006084:	2133      	movs	r1, #51	; 0x33
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8ae 	bl	80061e8 <SDMMC_GetCmdResp1>
 800608c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800608e:	69fb      	ldr	r3, [r7, #28]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80060a4:	2302      	movs	r3, #2
 80060a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060a8:	23c0      	movs	r3, #192	; 0xc0
 80060aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fdc5 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f97c 	bl	80063c0 <SDMMC_GetCmdResp2>
 80060c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80060e2:	2309      	movs	r3, #9
 80060e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060e6:	23c0      	movs	r3, #192	; 0xc0
 80060e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fda6 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f95d 	bl	80063c0 <SDMMC_GetCmdResp2>
 8006106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006108:	69fb      	ldr	r3, [r7, #28]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b088      	sub	sp, #32
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006120:	2303      	movs	r3, #3
 8006122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800612c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006132:	f107 0308 	add.w	r3, r7, #8
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fd87 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	2103      	movs	r1, #3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9bc 	bl	80064c0 <SDMMC_GetCmdResp6>
 8006148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800614a:	69fb      	ldr	r3, [r7, #28]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006162:	230d      	movs	r3, #13
 8006164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800616e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fd66 	bl	8005c4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006180:	f241 3288 	movw	r2, #5000	; 0x1388
 8006184:	210d      	movs	r1, #13
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f82e 	bl	80061e8 <SDMMC_GetCmdResp1>
 800618c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618e:	69fb      	ldr	r3, [r7, #28]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006198:	b490      	push	{r4, r7}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <SDMMC_GetCmdError+0x48>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0f      	ldr	r2, [pc, #60]	; (80061e4 <SDMMC_GetCmdError+0x4c>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a5b      	lsrs	r3, r3, #9
 80061ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80061b4:	4623      	mov	r3, r4
 80061b6:	1e5c      	subs	r4, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061c0:	e009      	b.n	80061d6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f2      	beq.n	80061b4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	22c5      	movs	r2, #197	; 0xc5
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc90      	pop	{r4, r7}
 80061de:	4770      	bx	lr
 80061e0:	20000044 	.word	0x20000044
 80061e4:	10624dd3 	.word	0x10624dd3

080061e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	460b      	mov	r3, r1
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80061f6:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <SDMMC_GetCmdResp1+0x1cc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6f      	ldr	r2, [pc, #444]	; (80063b8 <SDMMC_GetCmdResp1+0x1d0>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	0a5b      	lsrs	r3, r3, #9
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006208:	4623      	mov	r3, r4
 800620a:	1e5c      	subs	r4, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006214:	e0c9      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <SDMMC_GetCmdResp1+0x20>
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1eb      	bne.n	8006208 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2204      	movs	r2, #4
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006242:	2304      	movs	r3, #4
 8006244:	e0b1      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006258:	2301      	movs	r3, #1
 800625a:	e0a6      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	22c5      	movs	r2, #197	; 0xc5
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fd1b 	bl	8005c9e <SDIO_GetCommandResponse>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	4293      	cmp	r3, r2
 8006270:	d001      	beq.n	8006276 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006272:	2301      	movs	r3, #1
 8006274:	e099      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006276:	2100      	movs	r1, #0
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fd1c 	bl	8005cb6 <SDIO_GetResponse>
 800627e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4b4e      	ldr	r3, [pc, #312]	; (80063bc <SDMMC_GetCmdResp1+0x1d4>)
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800628a:	2300      	movs	r3, #0
 800628c:	e08d      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	da02      	bge.n	800629a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006298:	e087      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062a4:	2340      	movs	r3, #64	; 0x40
 80062a6:	e080      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	e079      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80062c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c4:	e071      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80062d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d4:	e069      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80062e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e4:	e061      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80062f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f4:	e059      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006304:	e051      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006314:	e049      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006324:	e041      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006334:	e039      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006344:	e031      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006350:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006354:	e029      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006360:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006364:	e021      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006374:	e019      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006384:	e011      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006394:	e009      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063a4:	e001      	b.n	80063aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000044 	.word	0x20000044
 80063b8:	10624dd3 	.word	0x10624dd3
 80063bc:	fdffe008 	.word	0xfdffe008

080063c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80063c0:	b490      	push	{r4, r7}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <SDMMC_GetCmdResp2+0x84>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <SDMMC_GetCmdResp2+0x88>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	0a5b      	lsrs	r3, r3, #9
 80063d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80063dc:	4623      	mov	r3, r4
 80063de:	1e5c      	subs	r4, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063e8:	e026      	b.n	8006438 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <SDMMC_GetCmdResp2+0x1c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1eb      	bne.n	80063dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2204      	movs	r2, #4
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006416:	2304      	movs	r3, #4
 8006418:	e00e      	b.n	8006438 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800642c:	2301      	movs	r3, #1
 800642e:	e003      	b.n	8006438 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	22c5      	movs	r2, #197	; 0xc5
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bc90      	pop	{r4, r7}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20000044 	.word	0x20000044
 8006448:	10624dd3 	.word	0x10624dd3

0800644c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800644c:	b490      	push	{r4, r7}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006454:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <SDMMC_GetCmdResp3+0x6c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <SDMMC_GetCmdResp3+0x70>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	0a5b      	lsrs	r3, r3, #9
 8006460:	f241 3288 	movw	r2, #5000	; 0x1388
 8006464:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006468:	4623      	mov	r3, r4
 800646a:	1e5c      	subs	r4, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006474:	e01b      	b.n	80064ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <SDMMC_GetCmdResp3+0x1c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1eb      	bne.n	8006468 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2204      	movs	r2, #4
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064a2:	2304      	movs	r3, #4
 80064a4:	e003      	b.n	80064ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	22c5      	movs	r2, #197	; 0xc5
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc90      	pop	{r4, r7}
 80064b6:	4770      	bx	lr
 80064b8:	20000044 	.word	0x20000044
 80064bc:	10624dd3 	.word	0x10624dd3

080064c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	460b      	mov	r3, r1
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064ce:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <SDMMC_GetCmdResp6+0xe0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <SDMMC_GetCmdResp6+0xe4>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	0a5b      	lsrs	r3, r3, #9
 80064da:	f241 3288 	movw	r2, #5000	; 0x1388
 80064de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064e2:	4623      	mov	r3, r4
 80064e4:	1e5c      	subs	r4, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064ee:	e052      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <SDMMC_GetCmdResp6+0x22>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1eb      	bne.n	80064e2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2204      	movs	r2, #4
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800651c:	2304      	movs	r3, #4
 800651e:	e03a      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006532:	2301      	movs	r3, #1
 8006534:	e02f      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff fbb1 	bl	8005c9e <SDIO_GetCommandResponse>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	7afb      	ldrb	r3, [r7, #11]
 8006542:	4293      	cmp	r3, r2
 8006544:	d001      	beq.n	800654a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006546:	2301      	movs	r3, #1
 8006548:	e025      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22c5      	movs	r2, #197	; 0xc5
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006550:	2100      	movs	r1, #0
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fbaf 	bl	8005cb6 <SDIO_GetResponse>
 8006558:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	0c1b      	lsrs	r3, r3, #16
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800656e:	2300      	movs	r3, #0
 8006570:	e011      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800657c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006580:	e009      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800658c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006590:	e001      	b.n	8006596 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000044 	.word	0x20000044
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80065a8:	b490      	push	{r4, r7}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <SDMMC_GetCmdResp7+0x90>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a21      	ldr	r2, [pc, #132]	; (800663c <SDMMC_GetCmdResp7+0x94>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	0a5b      	lsrs	r3, r3, #9
 80065bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065c4:	4623      	mov	r3, r4
 80065c6:	1e5c      	subs	r4, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065d0:	e02c      	b.n	800662c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <SDMMC_GetCmdResp7+0x1c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1eb      	bne.n	80065c4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065fe:	2304      	movs	r3, #4
 8006600:	e014      	b.n	800662c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006614:	2301      	movs	r3, #1
 8006616:	e009      	b.n	800662c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2240      	movs	r2, #64	; 0x40
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800662a:	2300      	movs	r3, #0
  
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bc90      	pop	{r4, r7}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000044 	.word	0x20000044
 800663c:	10624dd3 	.word	0x10624dd3

08006640 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006644:	4904      	ldr	r1, [pc, #16]	; (8006658 <MX_FATFS_Init+0x18>)
 8006646:	4805      	ldr	r0, [pc, #20]	; (800665c <MX_FATFS_Init+0x1c>)
 8006648:	f002 fe2a 	bl	80092a0 <FATFS_LinkDriver>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <MX_FATFS_Init+0x20>)
 8006652:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20001340 	.word	0x20001340
 800665c:	0800c0e4 	.word	0x0800c0e4
 8006660:	200018b8 	.word	0x200018b8

08006664 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006668:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
	...

08006674 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800667e:	f000 f8bd 	bl	80067fc <BSP_SD_IsDetected>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d001      	beq.n	800668c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e011      	b.n	80066b0 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800668c:	480a      	ldr	r0, [pc, #40]	; (80066b8 <BSP_SD_Init+0x44>)
 800668e:	f7fd fdb3 	bl	80041f8 <HAL_SD_Init>
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 800669c:	2100      	movs	r1, #0
 800669e:	4806      	ldr	r0, [pc, #24]	; (80066b8 <BSP_SD_Init+0x44>)
 80066a0:	f7fe fb7e 	bl	8004da0 <HAL_SD_ConfigWideBusOperation>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80066ae:	79fb      	ldrb	r3, [r7, #7]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	200017f4 	.word	0x200017f4

080066bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read  
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  hsd.hdmatx = NULL;
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	63da      	str	r2, [r3, #60]	; 0x3c
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigRx(&hsd);
 80066d2:	480d      	ldr	r0, [pc, #52]	; (8006708 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80066d4:	f000 f89e 	bl	8006814 <SD_DMAConfigRx>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    state = HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	4807      	ldr	r0, [pc, #28]	; (8006708 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80066ea:	f7fd fe1f 	bl	800432c <HAL_SD_ReadBlocks_DMA>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e000      	b.n	80066fe <BSP_SD_ReadBlocks_DMA+0x42>
  }    
  else
  {
    return MSD_ERROR;
 80066fc:	2301      	movs	r3, #1
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200017f4 	.word	0x200017f4

0800670c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written  
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  hsd.hdmarx = NULL;
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <BSP_SD_WriteBlocks_DMA+0x4c>)
 800671e:	2200      	movs	r2, #0
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigTx(&hsd);
 8006722:	480d      	ldr	r0, [pc, #52]	; (8006758 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8006724:	f000 f8be 	bl	80068a4 <SD_DMAConfigTx>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <BSP_SD_WriteBlocks_DMA+0x36>
  { 
    /* Write block(s) in DMA transfer mode */
    state = HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	4807      	ldr	r0, [pc, #28]	; (8006758 <BSP_SD_WriteBlocks_DMA+0x4c>)
 800673a:	f7fd fee1 	bl	8004500 <HAL_SD_WriteBlocks_DMA>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 800674c:	2301      	movs	r3, #1
  } 
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200017f4 	.word	0x200017f4

0800675c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 8006762:	480c      	ldr	r0, [pc, #48]	; (8006794 <BSP_SD_GetCardState+0x38>)
 8006764:	f7fe fb98 	bl	8004e98 <HAL_SD_GetCardState>
 8006768:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b04      	cmp	r3, #4
 800676e:	d101      	bne.n	8006774 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8006770:	2300      	movs	r3, #0
 8006772:	e00b      	b.n	800678c <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d005      	beq.n	8006786 <BSP_SD_GetCardState+0x2a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b06      	cmp	r3, #6
 800677e:	d002      	beq.n	8006786 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b07      	cmp	r3, #7
 8006784:	d101      	bne.n	800678a <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 800678a:	2302      	movs	r3, #2
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200017f4 	.word	0x200017f4

08006798 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4803      	ldr	r0, [pc, #12]	; (80067b0 <BSP_SD_GetCardInfo+0x18>)
 80067a4:	f7fe fad0 	bl	8004d48 <HAL_SD_GetCardInfo>
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200017f4 	.word	0x200017f4

080067b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80067bc:	f000 f818 	bl	80067f0 <BSP_SD_AbortCallback>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80067d0:	f000 fab2 	bl	8006d38 <BSP_SD_WriteCpltCallback>
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80067e4:	f000 fab6 	bl	8006d54 <BSP_SD_ReadCpltCallback>
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0

}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr

080067fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006802:	2301      	movs	r3, #1
 8006804:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	b2db      	uxtb	r3, r3
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <SD_DMAConfigRx>:

/* USER CODE BEGIN DMAConfigCode */
HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	static DMA_HandleTypeDef hdma_rx;
		HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]

		HAL_DMA_DeInit(hsd->hdmatx);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	4618      	mov	r0, r3
 8006826:	f7fb facb 	bl	8001dc0 <HAL_DMA_DeInit>

		/* Configure the DMA Rx parameters */
		hdma_rx.Instance = DMA2_Channel4;
 800682a:	4b1c      	ldr	r3, [pc, #112]	; (800689c <SD_DMAConfigRx+0x88>)
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <SD_DMAConfigRx+0x8c>)
 800682e:	601a      	str	r2, [r3, #0]
		hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <SD_DMAConfigRx+0x88>)
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
		hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006836:	4b19      	ldr	r3, [pc, #100]	; (800689c <SD_DMAConfigRx+0x88>)
 8006838:	2200      	movs	r2, #0
 800683a:	609a      	str	r2, [r3, #8]
		hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 800683c:	4b17      	ldr	r3, [pc, #92]	; (800689c <SD_DMAConfigRx+0x88>)
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	60da      	str	r2, [r3, #12]
		hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006842:	4b16      	ldr	r3, [pc, #88]	; (800689c <SD_DMAConfigRx+0x88>)
 8006844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006848:	611a      	str	r2, [r3, #16]
		hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800684a:	4b14      	ldr	r3, [pc, #80]	; (800689c <SD_DMAConfigRx+0x88>)
 800684c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006850:	615a      	str	r2, [r3, #20]
		hdma_rx.Init.Mode = DMA_NORMAL;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <SD_DMAConfigRx+0x88>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
		hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006858:	4b10      	ldr	r3, [pc, #64]	; (800689c <SD_DMAConfigRx+0x88>)
 800685a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800685e:	61da      	str	r2, [r3, #28]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsd,hdmarx,hdma_rx);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <SD_DMAConfigRx+0x88>)
 8006864:	641a      	str	r2, [r3, #64]	; 0x40
 8006866:	4a0d      	ldr	r2, [pc, #52]	; (800689c <SD_DMAConfigRx+0x88>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6253      	str	r3, [r2, #36]	; 0x24

		/* Stop any ongoing transfer and reset the state*/
		  HAL_DMA_Abort(&hdma_rx);
 800686c:	480b      	ldr	r0, [pc, #44]	; (800689c <SD_DMAConfigRx+0x88>)
 800686e:	f7fb fb75 	bl	8001f5c <HAL_DMA_Abort>

		/* Deinitialize the Channel for new transfer */
		  HAL_DMA_DeInit(&hdma_rx);
 8006872:	480a      	ldr	r0, [pc, #40]	; (800689c <SD_DMAConfigRx+0x88>)
 8006874:	f7fb faa4 	bl	8001dc0 <HAL_DMA_DeInit>

		/* Configure the DMA Channel */
		  status = HAL_DMA_Init(&hdma_rx);
 8006878:	4808      	ldr	r0, [pc, #32]	; (800689c <SD_DMAConfigRx+0x88>)
 800687a:	f7fb fa2d 	bl	8001cd8 <HAL_DMA_Init>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]

		/* NVIC configuration for DMA transfer complete interrupt */
		  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8006882:	2200      	movs	r2, #0
 8006884:	2105      	movs	r1, #5
 8006886:	2035      	movs	r0, #53	; 0x35
 8006888:	f7fb f9fb 	bl	8001c82 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800688c:	2035      	movs	r0, #53	; 0x35
 800688e:	f7fb fa14 	bl	8001cba <HAL_NVIC_EnableIRQ>

		  return status;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
} 
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200002d0 	.word	0x200002d0
 80068a0:	40026444 	.word	0x40026444

080068a4 <SD_DMAConfigTx>:

HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* function body to be changed by the user (if needed) */
	static DMA_HandleTypeDef hdma_tx;
	  HAL_StatusTypeDef status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]

	  /* Configure the DMA Tx parameters */
	  	hdma_tx.Instance = DMA2_Channel4;
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <SD_DMAConfigTx+0x84>)
 80068b4:	601a      	str	r2, [r3, #0]
	  	hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068b6:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068b8:	2210      	movs	r2, #16
 80068ba:	605a      	str	r2, [r3, #4]
	  	hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
	  	hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068c2:	4b18      	ldr	r3, [pc, #96]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	60da      	str	r2, [r3, #12]
	  	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ce:	611a      	str	r2, [r3, #16]
	  	hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d6:	615a      	str	r2, [r3, #20]
	  	hdma_tx.Init.Mode = DMA_NORMAL;
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
	  	hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068e0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80068e4:	61da      	str	r2, [r3, #28]

	  	/* Associate the DMA handle */
	  	__HAL_LINKDMA(hsd,hdmatx,hdma_tx);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a0e      	ldr	r2, [pc, #56]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80068ec:	4a0d      	ldr	r2, [pc, #52]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6253      	str	r3, [r2, #36]	; 0x24

	  	/* Stop any ongoing transfer and reset the state*/
	  	  HAL_DMA_Abort(&hdma_tx);
 80068f2:	480c      	ldr	r0, [pc, #48]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068f4:	f7fb fb32 	bl	8001f5c <HAL_DMA_Abort>

	  	/* Deinitialize the Channel for new transfer */
	  	  HAL_DMA_DeInit(&hdma_tx);
 80068f8:	480a      	ldr	r0, [pc, #40]	; (8006924 <SD_DMAConfigTx+0x80>)
 80068fa:	f7fb fa61 	bl	8001dc0 <HAL_DMA_DeInit>

	  	/* Configure the DMA Channel */
	  	  status = HAL_DMA_Init(&hdma_tx);
 80068fe:	4809      	ldr	r0, [pc, #36]	; (8006924 <SD_DMAConfigTx+0x80>)
 8006900:	f7fb f9ea 	bl	8001cd8 <HAL_DMA_Init>
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]

	  	 /* NVIC configuration for DMA transfer complete interrupt */
	  	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8006908:	2200      	movs	r2, #0
 800690a:	2105      	movs	r1, #5
 800690c:	2035      	movs	r0, #53	; 0x35
 800690e:	f7fb f9b8 	bl	8001c82 <HAL_NVIC_SetPriority>
	  	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8006912:	2035      	movs	r0, #53	; 0x35
 8006914:	f7fb f9d1 	bl	8001cba <HAL_NVIC_EnableIRQ>

	  return status;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20000314 	.word	0x20000314
 8006928:	40026444 	.word	0x40026444

0800692c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8006934:	f002 fd4a 	bl	80093cc <osKernelSysTick>
 8006938:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800693a:	e006      	b.n	800694a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800693c:	f7ff ff0e 	bl	800675c <BSP_SD_GetCardState>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006946:	2300      	movs	r3, #0
 8006948:	e009      	b.n	800695e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800694a:	f002 fd3f 	bl	80093cc <osKernelSysTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d8f0      	bhi.n	800693c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800695a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <SD_CheckStatus+0x38>)
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006978:	f7ff fef0 	bl	800675c <BSP_SD_GetCardState>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <SD_CheckStatus+0x38>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <SD_CheckStatus+0x38>)
 8006990:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <SD_CheckStatus+0x38>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b2db      	uxtb	r3, r3
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000050 	.word	0x20000050

080069a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80069ae:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <SD_initialize+0x74>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80069b4:	f002 fcfe 	bl	80093b4 <osKernelRunning>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d024      	beq.n	8006a08 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80069be:	f7ff fe59 	bl	8006674 <BSP_SD_Init>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff ffcc 	bl	8006968 <SD_CheckStatus>
 80069d0:	4603      	mov	r3, r0
 80069d2:	461a      	mov	r2, r3
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <SD_initialize+0x74>)
 80069d6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <SD_initialize+0x74>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d012      	beq.n	8006a08 <SD_initialize+0x64>
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <SD_initialize+0x78>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10e      	bne.n	8006a08 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <SD_initialize+0x7c>)
 80069ec:	f107 0408 	add.w	r4, r7, #8
 80069f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f002 fe20 	bl	8009642 <osMessageCreate>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <SD_initialize+0x78>)
 8006a06:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <SD_initialize+0x74>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd90      	pop	{r4, r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000050 	.word	0x20000050
 8006a1c:	20000558 	.word	0x20000558
 8006a20:	0800c064 	.word	0x0800c064

08006a24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff99 	bl	8006968 <SD_CheckStatus>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	61b9      	str	r1, [r7, #24]
 8006a48:	617a      	str	r2, [r7, #20]
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006a56:	f247 5030 	movw	r0, #30000	; 0x7530
 8006a5a:	f7ff ff67 	bl	800692c <SD_CheckStatusWithTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da02      	bge.n	8006a6a <SD_read+0x2a>
  {
    return res;
 8006a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a68:	e06c      	b.n	8006b44 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11e      	bne.n	8006ab2 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	69b8      	ldr	r0, [r7, #24]
 8006a7a:	f7ff fe1f 	bl	80066bc <BSP_SD_ReadBlocks_DMA>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8006a84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d159      	bne.n	8006b40 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <SD_read+0x10c>)
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	f107 0320 	add.w	r3, r7, #32
 8006a94:	f247 5230 	movw	r2, #30000	; 0x7530
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f002 fe3b 	bl	8009714 <osMessageGet>
      if (event.status == osEventMessage) {
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d14d      	bne.n	8006b40 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d14a      	bne.n	8006b40 <SD_read+0x100>
          res = RES_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ab0:	e046      	b.n	8006b40 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab6:	e032      	b.n	8006b1e <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	617a      	str	r2, [r7, #20]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4823      	ldr	r0, [pc, #140]	; (8006b50 <SD_read+0x110>)
 8006ac4:	f7ff fdfa 	bl	80066bc <BSP_SD_ReadBlocks_DMA>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8006ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d128      	bne.n	8006b28 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <SD_read+0x10c>)
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	463b      	mov	r3, r7
 8006adc:	f247 5230 	movw	r2, #30000	; 0x7530
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 fe17 	bl	8009714 <osMessageGet>
 8006ae6:	f107 0320 	add.w	r3, r7, #32
 8006aea:	463a      	mov	r2, r7
 8006aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8006aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d10f      	bne.n	8006b18 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10c      	bne.n	8006b18 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <SD_read+0x110>)
 8006b02:	4618      	mov	r0, r3
 8006b04:	4611      	mov	r1, r2
 8006b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f005 fa32 	bl	800bf74 <memcpy>
            buff += BLOCKSIZE;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b16:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d8c8      	bhi.n	8006ab8 <SD_read+0x78>
 8006b26:	e000      	b.n	8006b2a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8006b28:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d106      	bne.n	8006b40 <SD_read+0x100>
 8006b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <SD_read+0x100>
      res = RES_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8006b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8006b44:	4618      	mov	r0, r3
 8006b46:	3738      	adds	r7, #56	; 0x38
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000558 	.word	0x20000558
 8006b50:	20000358 	.word	0x20000358

08006b54 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b090      	sub	sp, #64	; 0x40
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	61b9      	str	r1, [r7, #24]
 8006b5c:	617a      	str	r2, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	4603      	mov	r3, r0
 8006b62:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006b6a:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b6e:	f7ff fedd 	bl	800692c <SD_CheckStatusWithTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da02      	bge.n	8006b7e <SD_write+0x2a>
  {
    return res;
 8006b78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b7c:	e07c      	b.n	8006c78 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d12e      	bne.n	8006be6 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	69b8      	ldr	r0, [r7, #24]
 8006b8e:	f7ff fdbd 	bl	800670c <BSP_SD_WriteBlocks_DMA>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d16d      	bne.n	8006c74 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006b98:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <SD_write+0x12c>)
 8006b9a:	6819      	ldr	r1, [r3, #0]
 8006b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba0:	f247 5230 	movw	r2, #30000	; 0x7530
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 fdb5 	bl	8009714 <osMessageGet>

      if (event.status == osEventMessage)
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d161      	bne.n	8006c74 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d15e      	bne.n	8006c74 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8006bb6:	f002 fc09 	bl	80093cc <osKernelSysTick>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8006bc0:	3330      	adds	r3, #48	; 0x30
 8006bc2:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8006bc4:	e008      	b.n	8006bd8 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006bc6:	f7ff fdc9 	bl	800675c <BSP_SD_GetCardState>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d103      	bne.n	8006bd8 <SD_write+0x84>
            {
              res = RES_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8006bd6:	e04d      	b.n	8006c74 <SD_write+0x120>
          while(timer > osKernelSysTick())
 8006bd8:	f002 fbf8 	bl	80093cc <osKernelSysTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d8f0      	bhi.n	8006bc6 <SD_write+0x72>
 8006be4:	e046      	b.n	8006c74 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bea:	e032      	b.n	8006c52 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	617a      	str	r2, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4823      	ldr	r0, [pc, #140]	; (8006c84 <SD_write+0x130>)
 8006bf8:	f7ff fd88 	bl	800670c <BSP_SD_WriteBlocks_DMA>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8006c02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d128      	bne.n	8006c5c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006c0a:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <SD_write+0x12c>)
 8006c0c:	6819      	ldr	r1, [r3, #0]
 8006c0e:	463b      	mov	r3, r7
 8006c10:	f247 5230 	movw	r2, #30000	; 0x7530
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 fd7d 	bl	8009714 <osMessageGet>
 8006c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1e:	463a      	mov	r2, r7
 8006c20:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d10f      	bne.n	8006c4c <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d10c      	bne.n	8006c4c <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <SD_write+0x130>)
 8006c36:	4618      	mov	r0, r3
 8006c38:	4611      	mov	r1, r2
 8006c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f005 f998 	bl	800bf74 <memcpy>
            buff += BLOCKSIZE;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c4a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	3301      	adds	r3, #1
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d8c8      	bhi.n	8006bec <SD_write+0x98>
 8006c5a:	e000      	b.n	8006c5e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8006c5c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d106      	bne.n	8006c74 <SD_write+0x120>
 8006c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <SD_write+0x120>
      res = RES_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8006c74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3740      	adds	r7, #64	; 0x40
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000558 	.word	0x20000558
 8006c84:	20000358 	.word	0x20000358

08006c88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08c      	sub	sp, #48	; 0x30
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	603a      	str	r2, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
 8006c94:	460b      	mov	r3, r1
 8006c96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c9e:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <SD_ioctl+0xac>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <SD_ioctl+0x28>
 8006cac:	2303      	movs	r3, #3
 8006cae:	e03c      	b.n	8006d2a <SD_ioctl+0xa2>

  switch (cmd)
 8006cb0:	79bb      	ldrb	r3, [r7, #6]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d834      	bhi.n	8006d20 <SD_ioctl+0x98>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <SD_ioctl+0x34>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cd5 	.word	0x08006cd5
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006d07 	.word	0x08006d07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006cd2:	e028      	b.n	8006d26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fd5d 	bl	8006798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006cea:	e01c      	b.n	8006d26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fd51 	bl	8006798 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d04:	e00f      	b.n	8006d26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d06:	f107 030c 	add.w	r3, r7, #12
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fd44 	bl	8006798 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	0a5a      	lsrs	r2, r3, #9
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d1e:	e002      	b.n	8006d26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3730      	adds	r7, #48	; 0x30
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000050 	.word	0x20000050

08006d38 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <BSP_SD_WriteCpltCallback+0x18>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 fca4 	bl	8009694 <osMessagePut>
}
 8006d4c:	bf00      	nop
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000558 	.word	0x20000558

08006d54 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <BSP_SD_ReadCpltCallback+0x18>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	2101      	movs	r1, #1
 8006d62:	4618      	mov	r0, r3
 8006d64:	f002 fc96 	bl	8009694 <osMessagePut>
}
 8006d68:	bf00      	nop
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000558 	.word	0x20000558

08006d70 <MX_MEMS_Init>:
 uint8_t ID;
 uint8_t status;


void MX_MEMS_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b092      	sub	sp, #72	; 0x48
 8006d74:	af00      	add	r7, sp, #0
	HTS221_IO_t HTS221_pIO;
	HTS221_Object_t HTS221_pObj;
  /* USER CODE END SV */

  /* USER CODE BEGIN MEMS_Init_PreTreatment */
	HTS221_pIO.Address = (0x5F<<1);
 8006d76:	23be      	movs	r3, #190	; 0xbe
 8006d78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HTS221_pIO.BusType = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
	HTS221_pIO.Init = BSP_I2C1_Init;
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <MX_MEMS_Init+0x70>)
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	HTS221_pIO.DeInit = BSP_I2C1_DeInit;
 8006d84:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <MX_MEMS_Init+0x74>)
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
	HTS221_pIO.ReadReg = BSP_I2C1_ReadReg;
 8006d88:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <MX_MEMS_Init+0x78>)
 8006d8a:	643b      	str	r3, [r7, #64]	; 0x40
	HTS221_pIO.WriteReg = BSP_I2C1_WriteReg;
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <MX_MEMS_Init+0x7c>)
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HTS221_pIO.GetTick = BSP_GetTick;
 8006d90:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <MX_MEMS_Init+0x80>)
 8006d92:	647b      	str	r3, [r7, #68]	; 0x44

	HTS221_RegisterBusIO(&HTS221_pObj, &HTS221_pIO);
 8006d94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006d98:	463b      	mov	r3, r7
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fa f9d5 	bl	800114c <HTS221_RegisterBusIO>
	HTS221_Init(&HTS221_pObj);
 8006da2:	463b      	mov	r3, r7
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fa fa17 	bl	80011d8 <HTS221_Init>

	HTS221_ReadID(&HTS221_pObj, &ID);
 8006daa:	463b      	mov	r3, r7
 8006dac:	4911      	ldr	r1, [pc, #68]	; (8006df4 <MX_MEMS_Init+0x84>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fa fa2d 	bl	800120e <HTS221_ReadID>
	if(ID == HTS221_ID){
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <MX_MEMS_Init+0x84>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2bbc      	cmp	r3, #188	; 0xbc
 8006dba:	d10c      	bne.n	8006dd6 <MX_MEMS_Init+0x66>
		HTS221_Get_Init_Status(&HTS221_pObj, &status);
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	490e      	ldr	r1, [pc, #56]	; (8006df8 <MX_MEMS_Init+0x88>)
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fa fa3a 	bl	800123a <HTS221_Get_Init_Status>
		HTS221_HUM_Enable(&HTS221_pObj);
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fa fa4c 	bl	8001266 <HTS221_HUM_Enable>
		HTS221_TEMP_Enable(&HTS221_pObj);
 8006dce:	463b      	mov	r3, r7
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fa fb09 	bl	80013e8 <HTS221_TEMP_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 8006dd6:	bf00      	nop
 8006dd8:	3748      	adds	r7, #72	; 0x48
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08000729 	.word	0x08000729
 8006de4:	0800078d 	.word	0x0800078d
 8006de8:	08000841 	.word	0x08000841
 8006dec:	080007dd 	.word	0x080007dd
 8006df0:	080008a5 	.word	0x080008a5
 8006df4:	200018bc 	.word	0x200018bc
 8006df8:	200018c8 	.word	0x200018c8

08006dfc <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08c      	sub	sp, #48	; 0x30
 8006e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
	HTS221_Object_t HTS221_pObj;
	HTS221_HUM_GetHumidity(&HTS221_pObj, &humidity);
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	4906      	ldr	r1, [pc, #24]	; (8006e20 <MX_MEMS_Process+0x24>)
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fa fa52 	bl	80012b0 <HTS221_HUM_GetHumidity>
	HTS221_TEMP_GetTemperature(&HTS221_pObj, &temperature);
 8006e0c:	1d3b      	adds	r3, r7, #4
 8006e0e:	4905      	ldr	r1, [pc, #20]	; (8006e24 <MX_MEMS_Process+0x28>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fa fb0e 	bl	8001432 <HTS221_TEMP_GetTemperature>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 8006e16:	bf00      	nop
 8006e18:	3730      	adds	r7, #48	; 0x30
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200018c4 	.word	0x200018c4
 8006e24:	200018c0 	.word	0x200018c0

08006e28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <disk_status+0x30>)
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	79fa      	ldrb	r2, [r7, #7]
 8006e40:	4905      	ldr	r1, [pc, #20]	; (8006e58 <disk_status+0x30>)
 8006e42:	440a      	add	r2, r1
 8006e44:	7a12      	ldrb	r2, [r2, #8]
 8006e46:	4610      	mov	r0, r2
 8006e48:	4798      	blx	r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000584 	.word	0x20000584

08006e5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <disk_initialize+0x48>)
 8006e6e:	5cd3      	ldrb	r3, [r2, r3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d111      	bne.n	8006e98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <disk_initialize+0x48>)
 8006e78:	2101      	movs	r1, #1
 8006e7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	4a09      	ldr	r2, [pc, #36]	; (8006ea4 <disk_initialize+0x48>)
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	79fa      	ldrb	r2, [r7, #7]
 8006e8a:	4906      	ldr	r1, [pc, #24]	; (8006ea4 <disk_initialize+0x48>)
 8006e8c:	440a      	add	r2, r1
 8006e8e:	7a12      	ldrb	r2, [r2, #8]
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000584 	.word	0x20000584

08006ea8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <disk_read+0x3c>)
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	689c      	ldr	r4, [r3, #8]
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	4a07      	ldr	r2, [pc, #28]	; (8006ee4 <disk_read+0x3c>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	7a18      	ldrb	r0, [r3, #8]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	47a0      	blx	r4
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000584 	.word	0x20000584

08006ee8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <disk_write+0x3c>)
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68dc      	ldr	r4, [r3, #12]
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <disk_write+0x3c>)
 8006f08:	4413      	add	r3, r2
 8006f0a:	7a18      	ldrb	r0, [r3, #8]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	47a0      	blx	r4
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd90      	pop	{r4, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000584 	.word	0x20000584

08006f28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	603a      	str	r2, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	460b      	mov	r3, r1
 8006f36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <disk_ioctl+0x38>)
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	79fa      	ldrb	r2, [r7, #7]
 8006f46:	4906      	ldr	r1, [pc, #24]	; (8006f60 <disk_ioctl+0x38>)
 8006f48:	440a      	add	r2, r1
 8006f4a:	7a10      	ldrb	r0, [r2, #8]
 8006f4c:	79b9      	ldrb	r1, [r7, #6]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000584 	.word	0x20000584

08006f64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b21a      	sxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b21b      	sxth	r3, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b21b      	sxth	r3, r3
 8006f84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f86:	89fb      	ldrh	r3, [r7, #14]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr

08006f92 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3303      	adds	r3, #3
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	3202      	adds	r2, #2
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	3201      	adds	r2, #1
 8006fb8:	7812      	ldrb	r2, [r2, #0]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
	return rv;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr

08006fd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	887a      	ldrh	r2, [r7, #2]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	887b      	ldrh	r3, [r7, #2]
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	887a      	ldrh	r2, [r7, #2]
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	1c53      	adds	r3, r2, #1
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	6179      	str	r1, [r7, #20]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3b01      	subs	r3, #1
 800708e:	607b      	str	r3, [r7, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f1      	bne.n	800707a <mem_cpy+0x1a>
	}
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	617a      	str	r2, [r7, #20]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3b01      	subs	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f3      	bne.n	80070b0 <mem_set+0x10>
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80070d2:	b480      	push	{r7}
 80070d4:	b089      	sub	sp, #36	; 0x24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	61fa      	str	r2, [r7, #28]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	61ba      	str	r2, [r7, #24]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	1acb      	subs	r3, r1, r3
 80070fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <mem_cmp+0x40>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0eb      	beq.n	80070ea <mem_cmp+0x18>

	return r;
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3724      	adds	r7, #36	; 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007128:	e002      	b.n	8007130 <chk_chr+0x12>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3301      	adds	r3, #1
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <chk_chr+0x26>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	4293      	cmp	r3, r2
 8007142:	d1f2      	bne.n	800712a <chk_chr+0xc>
	return *str;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	781b      	ldrb	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <lock_fs+0x22>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4618      	mov	r0, r3
 8007166:	f002 f8d6 	bl	8009316 <ff_req_grant>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <lock_fs+0x22>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <lock_fs+0x24>
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <unlock_fs+0x2e>
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d00a      	beq.n	80071ac <unlock_fs+0x2e>
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	2b0b      	cmp	r3, #11
 800719a:	d007      	beq.n	80071ac <unlock_fs+0x2e>
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	2b0f      	cmp	r3, #15
 80071a0:	d004      	beq.n	80071ac <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 f8ca 	bl	8009340 <ff_rel_grant>
	}
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e029      	b.n	800721c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80071c8:	4a26      	ldr	r2, [pc, #152]	; (8007264 <chk_lock+0xb0>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	4413      	add	r3, r2
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01d      	beq.n	8007212 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071d6:	4a23      	ldr	r2, [pc, #140]	; (8007264 <chk_lock+0xb0>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d116      	bne.n	8007216 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80071e8:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <chk_lock+0xb0>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	4413      	add	r3, r2
 80071f0:	3304      	adds	r3, #4
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d10c      	bne.n	8007216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <chk_lock+0xb0>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	4413      	add	r3, r2
 8007204:	3308      	adds	r3, #8
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800720c:	429a      	cmp	r2, r3
 800720e:	d102      	bne.n	8007216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007210:	e007      	b.n	8007222 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007212:	2301      	movs	r3, #1
 8007214:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d9d2      	bls.n	80071c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d109      	bne.n	800723c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <chk_lock+0x80>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d101      	bne.n	8007238 <chk_lock+0x84>
 8007234:	2300      	movs	r3, #0
 8007236:	e010      	b.n	800725a <chk_lock+0xa6>
 8007238:	2312      	movs	r3, #18
 800723a:	e00e      	b.n	800725a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <chk_lock+0xa0>
 8007242:	4a08      	ldr	r2, [pc, #32]	; (8007264 <chk_lock+0xb0>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	330c      	adds	r3, #12
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d101      	bne.n	8007258 <chk_lock+0xa4>
 8007254:	2310      	movs	r3, #16
 8007256:	e000      	b.n	800725a <chk_lock+0xa6>
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr
 8007264:	20000564 	.word	0x20000564

08007268 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800726e:	2300      	movs	r3, #0
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	e002      	b.n	800727a <enq_lock+0x12>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3301      	adds	r3, #1
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d806      	bhi.n	800728e <enq_lock+0x26>
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <enq_lock+0x3c>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	4413      	add	r3, r2
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f2      	bne.n	8007274 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b02      	cmp	r3, #2
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr
 80072a4:	20000564 	.word	0x20000564

080072a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e01f      	b.n	80072f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80072b8:	4a41      	ldr	r2, [pc, #260]	; (80073c0 <inc_lock+0x118>)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	4413      	add	r3, r2
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d113      	bne.n	80072f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80072ca:	4a3d      	ldr	r2, [pc, #244]	; (80073c0 <inc_lock+0x118>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4413      	add	r3, r2
 80072d2:	3304      	adds	r3, #4
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80072da:	429a      	cmp	r2, r3
 80072dc:	d109      	bne.n	80072f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80072de:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <inc_lock+0x118>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	4413      	add	r3, r2
 80072e6:	3308      	adds	r3, #8
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d006      	beq.n	8007300 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d9dc      	bls.n	80072b8 <inc_lock+0x10>
 80072fe:	e000      	b.n	8007302 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007300:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d132      	bne.n	800736e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <inc_lock+0x6c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d806      	bhi.n	8007328 <inc_lock+0x80>
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <inc_lock+0x118>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	4413      	add	r3, r2
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f2      	bne.n	800730e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d101      	bne.n	8007332 <inc_lock+0x8a>
 800732e:	2300      	movs	r3, #0
 8007330:	e040      	b.n	80073b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4922      	ldr	r1, [pc, #136]	; (80073c0 <inc_lock+0x118>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	440b      	add	r3, r1
 800733e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	491e      	ldr	r1, [pc, #120]	; (80073c0 <inc_lock+0x118>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	440b      	add	r3, r1
 800734c:	3304      	adds	r3, #4
 800734e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	491a      	ldr	r1, [pc, #104]	; (80073c0 <inc_lock+0x118>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	440b      	add	r3, r1
 800735c:	3308      	adds	r3, #8
 800735e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007360:	4a17      	ldr	r2, [pc, #92]	; (80073c0 <inc_lock+0x118>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	4413      	add	r3, r2
 8007368:	330c      	adds	r3, #12
 800736a:	2200      	movs	r2, #0
 800736c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <inc_lock+0xe0>
 8007374:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <inc_lock+0x118>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	330c      	adds	r3, #12
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <inc_lock+0xe0>
 8007384:	2300      	movs	r3, #0
 8007386:	e015      	b.n	80073b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <inc_lock+0xf8>
 800738e:	4a0c      	ldr	r2, [pc, #48]	; (80073c0 <inc_lock+0x118>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	4413      	add	r3, r2
 8007396:	330c      	adds	r3, #12
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	e001      	b.n	80073a4 <inc_lock+0xfc>
 80073a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <inc_lock+0x118>)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	440b      	add	r3, r1
 80073ac:	330c      	adds	r3, #12
 80073ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000564 	.word	0x20000564

080073c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d825      	bhi.n	8007424 <dec_lock+0x60>
		n = Files[i].ctr;
 80073d8:	4a16      	ldr	r2, [pc, #88]	; (8007434 <dec_lock+0x70>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	4413      	add	r3, r2
 80073e0:	330c      	adds	r3, #12
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80073e6:	89fb      	ldrh	r3, [r7, #14]
 80073e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ec:	d101      	bne.n	80073f2 <dec_lock+0x2e>
 80073ee:	2300      	movs	r3, #0
 80073f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <dec_lock+0x3a>
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80073fe:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <dec_lock+0x70>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	330c      	adds	r3, #12
 8007408:	89fa      	ldrh	r2, [r7, #14]
 800740a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <dec_lock+0x5a>
 8007412:	4a08      	ldr	r2, [pc, #32]	; (8007434 <dec_lock+0x70>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	4413      	add	r3, r2
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	737b      	strb	r3, [r7, #13]
 8007422:	e001      	b.n	8007428 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007424:	2302      	movs	r3, #2
 8007426:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007428:	7b7b      	ldrb	r3, [r7, #13]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr
 8007434:	20000564 	.word	0x20000564

08007438 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e010      	b.n	8007468 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007446:	4a0c      	ldr	r2, [pc, #48]	; (8007478 <clear_lock+0x40>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	4413      	add	r3, r2
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d105      	bne.n	8007462 <clear_lock+0x2a>
 8007456:	4a08      	ldr	r2, [pc, #32]	; (8007478 <clear_lock+0x40>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	4413      	add	r3, r2
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d9eb      	bls.n	8007446 <clear_lock+0xe>
	}
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	20000564 	.word	0x20000564

0800747c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	78db      	ldrb	r3, [r3, #3]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d034      	beq.n	80074fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7858      	ldrb	r0, [r3, #1]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074a0:	2301      	movs	r3, #1
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	f7ff fd20 	bl	8006ee8 <disk_write>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	e022      	b.n	80074fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d217      	bcs.n	80074fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	789b      	ldrb	r3, [r3, #2]
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e010      	b.n	80074f4 <sync_window+0x78>
					wsect += fs->fsize;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7858      	ldrb	r0, [r3, #1]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074e6:	2301      	movs	r3, #1
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	f7ff fcfd 	bl	8006ee8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d8eb      	bhi.n	80074d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d01b      	beq.n	8007554 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ffad 	bl	800747c <sync_window>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d113      	bne.n	8007554 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7858      	ldrb	r0, [r3, #1]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007536:	2301      	movs	r3, #1
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	f7ff fcb5 	bl	8006ea8 <disk_read>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800754a:	2301      	movs	r3, #1
 800754c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff87 	bl	800747c <sync_window>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d158      	bne.n	800762a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d148      	bne.n	8007612 <sync_fs+0xb2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d144      	bne.n	8007612 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3334      	adds	r3, #52	; 0x34
 800758c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fd84 	bl	80070a0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3334      	adds	r3, #52	; 0x34
 800759c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff fd16 	bl	8006fd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3334      	adds	r3, #52	; 0x34
 80075ae:	4921      	ldr	r1, [pc, #132]	; (8007634 <sync_fs+0xd4>)
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fd2a 	bl	800700a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3334      	adds	r3, #52	; 0x34
 80075ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075be:	491e      	ldr	r1, [pc, #120]	; (8007638 <sync_fs+0xd8>)
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fd22 	bl	800700a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3334      	adds	r3, #52	; 0x34
 80075ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7ff fd18 	bl	800700a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3334      	adds	r3, #52	; 0x34
 80075de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7ff fd0e 	bl	800700a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7858      	ldrb	r0, [r3, #1]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007606:	2301      	movs	r3, #1
 8007608:	f7ff fc6e 	bl	8006ee8 <disk_write>
			fs->fsi_flag = 0;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fc84 	bl	8006f28 <disk_ioctl>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <sync_fs+0xca>
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	41615252 	.word	0x41615252
 8007638:	61417272 	.word	0x61417272

0800763c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3b02      	subs	r3, #2
 800764a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	3b02      	subs	r3, #2
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d301      	bcc.n	800765c <clust2sect+0x20>
 8007658:	2300      	movs	r3, #0
 800765a:	e008      	b.n	800766e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	895b      	ldrh	r3, [r3, #10]
 8007660:	461a      	mov	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	fb03 f202 	mul.w	r2, r3, r2
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4413      	add	r3, r2
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d904      	bls.n	8007698 <get_fat+0x20>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d302      	bcc.n	800769e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e08c      	b.n	80077b8 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d045      	beq.n	8007738 <get_fat+0xc0>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d05d      	beq.n	800776c <get_fat+0xf4>
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d177      	bne.n	80077a4 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	0a5b      	lsrs	r3, r3, #9
 80076ca:	4413      	add	r3, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	6938      	ldr	r0, [r7, #16]
 80076d0:	f7ff ff18 	bl	8007504 <move_window>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d167      	bne.n	80077aa <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	60fa      	str	r2, [r7, #12]
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4413      	add	r3, r2
 80076e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	0a5b      	lsrs	r3, r3, #9
 80076f6:	4413      	add	r3, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f7ff ff02 	bl	8007504 <move_window>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d153      	bne.n	80077ae <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4313      	orrs	r3, r2
 800771c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <get_fat+0xb6>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	e002      	b.n	8007734 <get_fat+0xbc>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007734:	617b      	str	r3, [r7, #20]
			break;
 8007736:	e03f      	b.n	80077b8 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	4413      	add	r3, r2
 8007742:	4619      	mov	r1, r3
 8007744:	6938      	ldr	r0, [r7, #16]
 8007746:	f7ff fedd 	bl	8007504 <move_window>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d130      	bne.n	80077b2 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800775e:	4413      	add	r3, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fbff 	bl	8006f64 <ld_word>
 8007766:	4603      	mov	r3, r0
 8007768:	617b      	str	r3, [r7, #20]
			break;
 800776a:	e025      	b.n	80077b8 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	09db      	lsrs	r3, r3, #7
 8007774:	4413      	add	r3, r2
 8007776:	4619      	mov	r1, r3
 8007778:	6938      	ldr	r0, [r7, #16]
 800777a:	f7ff fec3 	bl	8007504 <move_window>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d118      	bne.n	80077b6 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007792:	4413      	add	r3, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff fbfc 	bl	8006f92 <ld_dword>
 800779a:	4603      	mov	r3, r0
 800779c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077a0:	617b      	str	r3, [r7, #20]
			break;
 80077a2:	e009      	b.n	80077b8 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e006      	b.n	80077b8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077aa:	bf00      	nop
 80077ac:	e004      	b.n	80077b8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077b6:	bf00      	nop
		}
	}

	return val;
 80077b8:	697b      	ldr	r3, [r7, #20]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80077c2:	b590      	push	{r4, r7, lr}
 80077c4:	b089      	sub	sp, #36	; 0x24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80077ce:	2302      	movs	r3, #2
 80077d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f240 80d6 	bls.w	8007986 <put_fat+0x1c4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	f080 80d0 	bcs.w	8007986 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d073      	beq.n	80078d6 <put_fat+0x114>
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f000 8091 	beq.w	8007916 <put_fat+0x154>
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	f040 80c6 	bne.w	8007986 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4413      	add	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	4413      	add	r3, r2
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff fe75 	bl	8007504 <move_window>
 800781a:	4603      	mov	r3, r0
 800781c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800781e:	7ffb      	ldrb	r3, [r7, #31]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 80a9 	bne.w	8007978 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	61b9      	str	r1, [r7, #24]
 8007832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007836:	4413      	add	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <put_fat+0x9e>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b25b      	sxtb	r3, r3
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	b25a      	sxtb	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	b25b      	sxtb	r3, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	b25b      	sxtb	r3, r3
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e001      	b.n	8007864 <put_fat+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	4413      	add	r3, r2
 8007878:	4619      	mov	r1, r3
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fe42 	bl	8007504 <move_window>
 8007880:	4603      	mov	r3, r0
 8007882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007884:	7ffb      	ldrb	r3, [r7, #31]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d178      	bne.n	800797c <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	4413      	add	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <put_fat+0xea>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	091b      	lsrs	r3, r3, #4
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	e00e      	b.n	80078ca <put_fat+0x108>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	b25b      	sxtb	r3, r3
 80078b2:	f023 030f 	bic.w	r3, r3, #15
 80078b6:	b25a      	sxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0a1b      	lsrs	r3, r3, #8
 80078bc:	b25b      	sxtb	r3, r3
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	4313      	orrs	r3, r2
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	70da      	strb	r2, [r3, #3]
			break;
 80078d4:	e057      	b.n	8007986 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	4413      	add	r3, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fe0e 	bl	8007504 <move_window>
 80078e8:	4603      	mov	r3, r0
 80078ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078ec:	7ffb      	ldrb	r3, [r7, #31]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d146      	bne.n	8007980 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007900:	4413      	add	r3, r2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	b292      	uxth	r2, r2
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fb64 	bl	8006fd6 <st_word>
			fs->wflag = 1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	70da      	strb	r2, [r3, #3]
			break;
 8007914:	e037      	b.n	8007986 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	09db      	lsrs	r3, r3, #7
 800791e:	4413      	add	r3, r2
 8007920:	4619      	mov	r1, r3
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fdee 	bl	8007504 <move_window>
 8007928:	4603      	mov	r3, r0
 800792a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800792c:	7ffb      	ldrb	r3, [r7, #31]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d128      	bne.n	8007984 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007946:	4413      	add	r3, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fb22 	bl	8006f92 <ld_dword>
 800794e:	4603      	mov	r3, r0
 8007950:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007954:	4323      	orrs	r3, r4
 8007956:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007966:	4413      	add	r3, r2
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fb4d 	bl	800700a <st_dword>
			fs->wflag = 1;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	70da      	strb	r2, [r3, #3]
			break;
 8007976:	e006      	b.n	8007986 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007984:	bf00      	nop
		}
	}
	return res;
 8007986:	7ffb      	ldrb	r3, [r7, #31]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3724      	adds	r7, #36	; 0x24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd90      	pop	{r4, r7, pc}

08007990 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d904      	bls.n	80079b6 <remove_chain+0x26>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d301      	bcc.n	80079ba <remove_chain+0x2a>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e04b      	b.n	8007a52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00c      	beq.n	80079da <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	69b8      	ldr	r0, [r7, #24]
 80079c8:	f7ff fefb 	bl	80077c2 <put_fat>
 80079cc:	4603      	mov	r3, r0
 80079ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80079d0:	7ffb      	ldrb	r3, [r7, #31]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <remove_chain+0x4a>
 80079d6:	7ffb      	ldrb	r3, [r7, #31]
 80079d8:	e03b      	b.n	8007a52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fe4b 	bl	8007678 <get_fat>
 80079e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d031      	beq.n	8007a4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <remove_chain+0x64>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e02e      	b.n	8007a52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d101      	bne.n	8007a00 <remove_chain+0x70>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e028      	b.n	8007a52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007a00:	2200      	movs	r2, #0
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	69b8      	ldr	r0, [r7, #24]
 8007a06:	f7ff fedc 	bl	80077c2 <put_fat>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007a0e:	7ffb      	ldrb	r3, [r7, #31]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <remove_chain+0x88>
 8007a14:	7ffb      	ldrb	r3, [r7, #31]
 8007a16:	e01c      	b.n	8007a52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	695a      	ldr	r2, [r3, #20]
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	3b02      	subs	r3, #2
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d20b      	bcs.n	8007a3e <remove_chain+0xae>
			fs->free_clst++;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	791b      	ldrb	r3, [r3, #4]
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d3c6      	bcc.n	80079da <remove_chain+0x4a>
 8007a4c:	e000      	b.n	8007a50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007a4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10d      	bne.n	8007a8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <create_chain+0x2c>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d31b      	bcc.n	8007abe <create_chain+0x64>
 8007a86:	2301      	movs	r3, #1
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e018      	b.n	8007abe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fdf2 	bl	8007678 <get_fat>
 8007a94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d801      	bhi.n	8007aa0 <create_chain+0x46>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e070      	b.n	8007b82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d101      	bne.n	8007aac <create_chain+0x52>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	e06a      	b.n	8007b82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d201      	bcs.n	8007aba <create_chain+0x60>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	e063      	b.n	8007b82 <create_chain+0x128>
		scl = clst;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d307      	bcc.n	8007ae2 <create_chain+0x88>
				ncl = 2;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d901      	bls.n	8007ae2 <create_chain+0x88>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e04f      	b.n	8007b82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fdc7 	bl	8007678 <get_fat>
 8007aea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d003      	beq.n	8007b00 <create_chain+0xa6>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d101      	bne.n	8007b04 <create_chain+0xaa>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	e03e      	b.n	8007b82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d1da      	bne.n	8007ac2 <create_chain+0x68>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e038      	b.n	8007b82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007b10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	6938      	ldr	r0, [r7, #16]
 8007b1a:	f7ff fe52 	bl	80077c2 <put_fat>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <create_chain+0xe2>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6938      	ldr	r0, [r7, #16]
 8007b34:	f7ff fe45 	bl	80077c2 <put_fat>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d116      	bne.n	8007b70 <create_chain+0x116>
		fs->last_clst = ncl;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	3b02      	subs	r3, #2
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d804      	bhi.n	8007b60 <create_chain+0x106>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	711a      	strb	r2, [r3, #4]
 8007b6e:	e007      	b.n	8007b80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d102      	bne.n	8007b7c <create_chain+0x122>
 8007b76:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7a:	e000      	b.n	8007b7e <create_chain+0x124>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007b80:	69fb      	ldr	r3, [r7, #28]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3720      	adds	r7, #32
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	0a5b      	lsrs	r3, r3, #9
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	8952      	ldrh	r2, [r2, #10]
 8007baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	613a      	str	r2, [r7, #16]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <clmt_clust+0x3a>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e010      	b.n	8007be6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d307      	bcc.n	8007bdc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007bda:	e7e9      	b.n	8007bb0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007bdc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4413      	add	r3, r2
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr

08007bf0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c06:	d204      	bcs.n	8007c12 <dir_sdi+0x22>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007c12:	2302      	movs	r3, #2
 8007c14:	e063      	b.n	8007cde <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <dir_sdi+0x46>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d902      	bls.n	8007c36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10c      	bne.n	8007c56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	8912      	ldrh	r2, [r2, #8]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d301      	bcc.n	8007c4c <dir_sdi+0x5c>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e048      	b.n	8007cde <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	61da      	str	r2, [r3, #28]
 8007c54:	e029      	b.n	8007caa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	895b      	ldrh	r3, [r3, #10]
 8007c5a:	025b      	lsls	r3, r3, #9
 8007c5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c5e:	e019      	b.n	8007c94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6979      	ldr	r1, [r7, #20]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fd07 	bl	8007678 <get_fat>
 8007c6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d101      	bne.n	8007c78 <dir_sdi+0x88>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e032      	b.n	8007cde <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d904      	bls.n	8007c88 <dir_sdi+0x98>
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d301      	bcc.n	8007c8c <dir_sdi+0x9c>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e028      	b.n	8007cde <dir_sdi+0xee>
			ofs -= csz;
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d2e1      	bcs.n	8007c60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	6938      	ldr	r0, [r7, #16]
 8007ca0:	f7ff fccc 	bl	800763c <clust2sect>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <dir_sdi+0xcc>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e010      	b.n	8007cde <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	0a5b      	lsrs	r3, r3, #9
 8007cc4:	441a      	add	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	3320      	adds	r3, #32
 8007cfc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <dir_next+0x28>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d0c:	d301      	bcc.n	8007d12 <dir_next+0x2c>
 8007d0e:	2304      	movs	r3, #4
 8007d10:	e0aa      	b.n	8007e68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 8098 	bne.w	8007e4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10b      	bne.n	8007d48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	8912      	ldrh	r2, [r2, #8]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	f0c0 8088 	bcc.w	8007e4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	61da      	str	r2, [r3, #28]
 8007d44:	2304      	movs	r3, #4
 8007d46:	e08f      	b.n	8007e68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	0a5b      	lsrs	r3, r3, #9
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	8952      	ldrh	r2, [r2, #10]
 8007d50:	3a01      	subs	r2, #1
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d17a      	bne.n	8007e4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f7ff fc89 	bl	8007678 <get_fat>
 8007d66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d801      	bhi.n	8007d72 <dir_next+0x8c>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e07a      	b.n	8007e68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d101      	bne.n	8007d7e <dir_next+0x98>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e074      	b.n	8007e68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d358      	bcc.n	8007e3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	61da      	str	r2, [r3, #28]
 8007d94:	2304      	movs	r3, #4
 8007d96:	e067      	b.n	8007e68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7ff fe5a 	bl	8007a5a <create_chain>
 8007da6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <dir_next+0xcc>
 8007dae:	2307      	movs	r3, #7
 8007db0:	e05a      	b.n	8007e68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <dir_next+0xd6>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e055      	b.n	8007e68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d101      	bne.n	8007dc8 <dir_next+0xe2>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e04f      	b.n	8007e68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fb57 	bl	800747c <sync_window>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <dir_next+0xf2>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e047      	b.n	8007e68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3334      	adds	r3, #52	; 0x34
 8007ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff f95c 	bl	80070a0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007de8:	2300      	movs	r3, #0
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	6979      	ldr	r1, [r7, #20]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fc24 	bl	800763c <clust2sect>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
 8007dfa:	e012      	b.n	8007e22 <dir_next+0x13c>
						fs->wflag = 1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff fb3a 	bl	800747c <sync_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <dir_next+0x12c>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e02a      	b.n	8007e68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3301      	adds	r3, #1
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	895b      	ldrh	r3, [r3, #10]
 8007e26:	461a      	mov	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d3e6      	bcc.n	8007dfc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad2      	subs	r2, r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff fbfa 	bl	800763c <clust2sect>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e60:	441a      	add	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff feb4 	bl	8007bf0 <dir_sdi>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d12b      	bne.n	8007eea <dir_alloc+0x7a>
		n = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fb31 	bl	8007504 <move_window>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d11d      	bne.n	8007ee8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2be5      	cmp	r3, #229	; 0xe5
 8007eb4:	d004      	beq.n	8007ec0 <dir_alloc+0x50>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d107      	bne.n	8007ed0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d102      	bne.n	8007ed4 <dir_alloc+0x64>
 8007ece:	e00c      	b.n	8007eea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff ff05 	bl	8007ce6 <dir_next>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0d7      	beq.n	8007e96 <dir_alloc+0x26>
 8007ee6:	e000      	b.n	8007eea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007ee8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d101      	bne.n	8007ef4 <dir_alloc+0x84>
 8007ef0:	2307      	movs	r3, #7
 8007ef2:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	331a      	adds	r3, #26
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff f829 	bl	8006f64 <ld_word>
 8007f12:	4603      	mov	r3, r0
 8007f14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d109      	bne.n	8007f32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	3314      	adds	r3, #20
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff f81e 	bl	8006f64 <ld_word>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007f32:	68fb      	ldr	r3, [r7, #12]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	331a      	adds	r3, #26
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	b292      	uxth	r2, r2
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f83f 	bl	8006fd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d109      	bne.n	8007f74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f103 0214 	add.w	r2, r3, #20
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f7ff f831 	bl	8006fd6 <st_word>
	}
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fe2f 	bl	8007bf0 <dir_sdi>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <dir_find+0x24>
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	e03e      	b.n	800801e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f7ff faac 	bl	8007504 <move_window>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12f      	bne.n	8008016 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <dir_find+0x4e>
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	75fb      	strb	r3, [r7, #23]
 8007fc8:	e028      	b.n	800801c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	330b      	adds	r3, #11
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	330b      	adds	r3, #11
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <dir_find+0x86>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a18      	ldr	r0, [r3, #32]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3324      	adds	r3, #36	; 0x24
 8007ff4:	220b      	movs	r2, #11
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	f7ff f86b 	bl	80070d2 <mem_cmp>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fe6e 	bl	8007ce6 <dir_next>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0c5      	beq.n	8007fa0 <dir_find+0x24>
 8008014:	e002      	b.n	800801c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008016:	bf00      	nop
 8008018:	e000      	b.n	800801c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800801a:	bf00      	nop

	return res;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008034:	2101      	movs	r1, #1
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff ff1a 	bl	8007e70 <dir_alloc>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11c      	bne.n	8008080 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	4619      	mov	r1, r3
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f7ff fa59 	bl	8007504 <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d111      	bne.n	8008080 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	2220      	movs	r2, #32
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff f81b 	bl	80070a0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a18      	ldr	r0, [r3, #32]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3324      	adds	r3, #36	; 0x24
 8008072:	220b      	movs	r2, #11
 8008074:	4619      	mov	r1, r3
 8008076:	f7fe fff3 	bl	8007060 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2201      	movs	r2, #1
 800807e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3324      	adds	r3, #36	; 0x24
 80080a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80080a2:	220b      	movs	r2, #11
 80080a4:	2120      	movs	r1, #32
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f7fe fffa 	bl	80070a0 <mem_set>
	si = i = 0; ni = 8;
 80080ac:	2300      	movs	r3, #0
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	2308      	movs	r3, #8
 80080b6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	617a      	str	r2, [r7, #20]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80080c6:	7ffb      	ldrb	r3, [r7, #31]
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d94e      	bls.n	800816a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80080cc:	7ffb      	ldrb	r3, [r7, #31]
 80080ce:	2b2f      	cmp	r3, #47	; 0x2f
 80080d0:	d006      	beq.n	80080e0 <create_name+0x54>
 80080d2:	7ffb      	ldrb	r3, [r7, #31]
 80080d4:	2b5c      	cmp	r3, #92	; 0x5c
 80080d6:	d110      	bne.n	80080fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80080d8:	e002      	b.n	80080e0 <create_name+0x54>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	3301      	adds	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	4413      	add	r3, r2
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b2f      	cmp	r3, #47	; 0x2f
 80080ea:	d0f6      	beq.n	80080da <create_name+0x4e>
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b5c      	cmp	r3, #92	; 0x5c
 80080f6:	d0f0      	beq.n	80080da <create_name+0x4e>
			break;
 80080f8:	e038      	b.n	800816c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80080fa:	7ffb      	ldrb	r3, [r7, #31]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d003      	beq.n	8008108 <create_name+0x7c>
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d30c      	bcc.n	8008122 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b0b      	cmp	r3, #11
 800810c:	d002      	beq.n	8008114 <create_name+0x88>
 800810e:	7ffb      	ldrb	r3, [r7, #31]
 8008110:	2b2e      	cmp	r3, #46	; 0x2e
 8008112:	d001      	beq.n	8008118 <create_name+0x8c>
 8008114:	2306      	movs	r3, #6
 8008116:	e044      	b.n	80081a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008118:	2308      	movs	r3, #8
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	230b      	movs	r3, #11
 800811e:	61bb      	str	r3, [r7, #24]
			continue;
 8008120:	e022      	b.n	8008168 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008126:	2b00      	cmp	r3, #0
 8008128:	da04      	bge.n	8008134 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800812a:	7ffb      	ldrb	r3, [r7, #31]
 800812c:	3b80      	subs	r3, #128	; 0x80
 800812e:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <create_name+0x120>)
 8008130:	5cd3      	ldrb	r3, [r2, r3]
 8008132:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008134:	7ffb      	ldrb	r3, [r7, #31]
 8008136:	4619      	mov	r1, r3
 8008138:	481d      	ldr	r0, [pc, #116]	; (80081b0 <create_name+0x124>)
 800813a:	f7fe fff0 	bl	800711e <chk_chr>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <create_name+0xbc>
 8008144:	2306      	movs	r3, #6
 8008146:	e02c      	b.n	80081a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008148:	7ffb      	ldrb	r3, [r7, #31]
 800814a:	2b60      	cmp	r3, #96	; 0x60
 800814c:	d905      	bls.n	800815a <create_name+0xce>
 800814e:	7ffb      	ldrb	r3, [r7, #31]
 8008150:	2b7a      	cmp	r3, #122	; 0x7a
 8008152:	d802      	bhi.n	800815a <create_name+0xce>
 8008154:	7ffb      	ldrb	r3, [r7, #31]
 8008156:	3b20      	subs	r3, #32
 8008158:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	613a      	str	r2, [r7, #16]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4413      	add	r3, r2
 8008164:	7ffa      	ldrb	r2, [r7, #31]
 8008166:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008168:	e7a6      	b.n	80080b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800816a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	441a      	add	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <create_name+0xf4>
 800817c:	2306      	movs	r3, #6
 800817e:	e010      	b.n	80081a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2be5      	cmp	r3, #229	; 0xe5
 8008186:	d102      	bne.n	800818e <create_name+0x102>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2205      	movs	r2, #5
 800818c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800818e:	7ffb      	ldrb	r3, [r7, #31]
 8008190:	2b20      	cmp	r3, #32
 8008192:	d801      	bhi.n	8008198 <create_name+0x10c>
 8008194:	2204      	movs	r2, #4
 8008196:	e000      	b.n	800819a <create_name+0x10e>
 8008198:	2200      	movs	r2, #0
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	330b      	adds	r3, #11
 800819e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80081a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	0800c0f8 	.word	0x0800c0f8
 80081b0:	0800c074 	.word	0x0800c074

080081b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80081c8:	e002      	b.n	80081d0 <follow_path+0x1c>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b2f      	cmp	r3, #47	; 0x2f
 80081d6:	d0f8      	beq.n	80081ca <follow_path+0x16>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b5c      	cmp	r3, #92	; 0x5c
 80081de:	d0f4      	beq.n	80081ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b1f      	cmp	r3, #31
 80081ec:	d80a      	bhi.n	8008204 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2280      	movs	r2, #128	; 0x80
 80081f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fcf9 	bl	8007bf0 <dir_sdi>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
 8008202:	e043      	b.n	800828c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008204:	463b      	mov	r3, r7
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff3f 	bl	800808c <create_name>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d134      	bne.n	8008282 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff feaf 	bl	8007f7c <dir_find>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008228:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b04      	cmp	r3, #4
 8008234:	d127      	bne.n	8008286 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d122      	bne.n	8008286 <follow_path+0xd2>
 8008240:	2305      	movs	r3, #5
 8008242:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008244:	e01f      	b.n	8008286 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11c      	bne.n	800828a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	799b      	ldrb	r3, [r3, #6]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800825c:	2305      	movs	r3, #5
 800825e:	75fb      	strb	r3, [r7, #23]
 8008260:	e014      	b.n	800828c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	4413      	add	r3, r2
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fe42 	bl	8007efe <ld_clust>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008280:	e7c0      	b.n	8008204 <follow_path+0x50>
			if (res != FR_OK) break;
 8008282:	bf00      	nop
 8008284:	e002      	b.n	800828c <follow_path+0xd8>
				break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800828a:	bf00      	nop
			}
		}
	}

	return res;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008296:	b480      	push	{r7}
 8008298:	b087      	sub	sp, #28
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d031      	beq.n	8008310 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e002      	b.n	80082ba <get_ldnumber+0x24>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	3301      	adds	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d903      	bls.n	80082ca <get_ldnumber+0x34>
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b3a      	cmp	r3, #58	; 0x3a
 80082c8:	d1f4      	bne.n	80082b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b3a      	cmp	r3, #58	; 0x3a
 80082d0:	d11c      	bne.n	800830c <get_ldnumber+0x76>
			tp = *path;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	60fa      	str	r2, [r7, #12]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	3b30      	subs	r3, #48	; 0x30
 80082e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d80e      	bhi.n	8008308 <get_ldnumber+0x72>
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d10a      	bne.n	8008308 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <get_ldnumber+0x72>
					vol = (int)i;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	3301      	adds	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	e002      	b.n	8008312 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008310:	693b      	ldr	r3, [r7, #16]
}
 8008312:	4618      	mov	r0, r3
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	70da      	strb	r2, [r3, #3]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f04f 32ff 	mov.w	r2, #4294967295
 8008332:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff f8e4 	bl	8007504 <move_window>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <check_fs+0x2a>
 8008342:	2304      	movs	r3, #4
 8008344:	e038      	b.n	80083b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3334      	adds	r3, #52	; 0x34
 800834a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fe08 	bl	8006f64 <ld_word>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800835c:	429a      	cmp	r2, r3
 800835e:	d001      	beq.n	8008364 <check_fs+0x48>
 8008360:	2303      	movs	r3, #3
 8008362:	e029      	b.n	80083b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800836a:	2be9      	cmp	r3, #233	; 0xe9
 800836c:	d009      	beq.n	8008382 <check_fs+0x66>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008374:	2beb      	cmp	r3, #235	; 0xeb
 8008376:	d11e      	bne.n	80083b6 <check_fs+0x9a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800837e:	2b90      	cmp	r3, #144	; 0x90
 8008380:	d119      	bne.n	80083b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3334      	adds	r3, #52	; 0x34
 8008386:	3336      	adds	r3, #54	; 0x36
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fe02 	bl	8006f92 <ld_dword>
 800838e:	4603      	mov	r3, r0
 8008390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008394:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <check_fs+0xa4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d101      	bne.n	800839e <check_fs+0x82>
 800839a:	2300      	movs	r3, #0
 800839c:	e00c      	b.n	80083b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3334      	adds	r3, #52	; 0x34
 80083a2:	3352      	adds	r3, #82	; 0x52
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fdf4 	bl	8006f92 <ld_dword>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <check_fs+0xa8>)
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d101      	bne.n	80083b6 <check_fs+0x9a>
 80083b2:	2300      	movs	r3, #0
 80083b4:	e000      	b.n	80083b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80083b6:	2302      	movs	r3, #2
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	00544146 	.word	0x00544146
 80083c4:	33544146 	.word	0x33544146

080083c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b096      	sub	sp, #88	; 0x58
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff ff5a 	bl	8008296 <get_ldnumber>
 80083e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da01      	bge.n	80083ee <find_volume+0x26>
 80083ea:	230b      	movs	r3, #11
 80083ec:	e236      	b.n	800885c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80083ee:	4aac      	ldr	r2, [pc, #688]	; (80086a0 <find_volume+0x2d8>)
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <find_volume+0x3a>
 80083fe:	230c      	movs	r3, #12
 8008400:	e22c      	b.n	800885c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8008402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008404:	f7fe fea5 	bl	8007152 <lock_fs>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <find_volume+0x4a>
 800840e:	230f      	movs	r3, #15
 8008410:	e224      	b.n	800885c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008416:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01a      	beq.n	800845e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fcfb 	bl	8006e28 <disk_status>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10c      	bne.n	800845e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <find_volume+0x92>
 800844a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008456:	230a      	movs	r3, #10
 8008458:	e200      	b.n	800885c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800845a:	2300      	movs	r3, #0
 800845c:	e1fe      	b.n	800885c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008466:	b2da      	uxtb	r2, r3
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fcf3 	bl	8006e5c <disk_initialize>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800847c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008488:	2303      	movs	r3, #3
 800848a:	e1e7      	b.n	800885c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <find_volume+0xda>
 8008492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800849e:	230a      	movs	r3, #10
 80084a0:	e1dc      	b.n	800885c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80084a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084aa:	f7ff ff37 	bl	800831c <check_fs>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80084b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d14b      	bne.n	8008554 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084bc:	2300      	movs	r3, #0
 80084be:	643b      	str	r3, [r7, #64]	; 0x40
 80084c0:	e01f      	b.n	8008502 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80084d0:	4413      	add	r3, r2
 80084d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	3304      	adds	r3, #4
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d006      	beq.n	80084ec <find_volume+0x124>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	3308      	adds	r3, #8
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fd55 	bl	8006f92 <ld_dword>
 80084e8:	4602      	mov	r2, r0
 80084ea:	e000      	b.n	80084ee <find_volume+0x126>
 80084ec:	2200      	movs	r2, #0
 80084ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80084f6:	440b      	add	r3, r1
 80084f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	3301      	adds	r3, #1
 8008500:	643b      	str	r3, [r7, #64]	; 0x40
 8008502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008504:	2b03      	cmp	r3, #3
 8008506:	d9dc      	bls.n	80084c2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008508:	2300      	movs	r3, #0
 800850a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <find_volume+0x150>
 8008512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008514:	3b01      	subs	r3, #1
 8008516:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008520:	4413      	add	r3, r2
 8008522:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <find_volume+0x172>
 800852e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008532:	f7ff fef3 	bl	800831c <check_fs>
 8008536:	4603      	mov	r3, r0
 8008538:	e000      	b.n	800853c <find_volume+0x174>
 800853a:	2303      	movs	r3, #3
 800853c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008544:	2b01      	cmp	r3, #1
 8008546:	d905      	bls.n	8008554 <find_volume+0x18c>
 8008548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854a:	3301      	adds	r3, #1
 800854c:	643b      	str	r3, [r7, #64]	; 0x40
 800854e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008550:	2b03      	cmp	r3, #3
 8008552:	d9e1      	bls.n	8008518 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008558:	2b04      	cmp	r3, #4
 800855a:	d101      	bne.n	8008560 <find_volume+0x198>
 800855c:	2301      	movs	r3, #1
 800855e:	e17d      	b.n	800885c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008564:	2b01      	cmp	r3, #1
 8008566:	d901      	bls.n	800856c <find_volume+0x1a4>
 8008568:	230d      	movs	r3, #13
 800856a:	e177      	b.n	800885c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	3334      	adds	r3, #52	; 0x34
 8008570:	330b      	adds	r3, #11
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fcf6 	bl	8006f64 <ld_word>
 8008578:	4603      	mov	r3, r0
 800857a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857e:	d001      	beq.n	8008584 <find_volume+0x1bc>
 8008580:	230d      	movs	r3, #13
 8008582:	e16b      	b.n	800885c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	3334      	adds	r3, #52	; 0x34
 8008588:	3316      	adds	r3, #22
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fcea 	bl	8006f64 <ld_word>
 8008590:	4603      	mov	r3, r0
 8008592:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <find_volume+0x1e0>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	3334      	adds	r3, #52	; 0x34
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe fcf6 	bl	8006f92 <ld_dword>
 80085a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d005      	beq.n	80085cc <find_volume+0x204>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	789b      	ldrb	r3, [r3, #2]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d001      	beq.n	80085cc <find_volume+0x204>
 80085c8:	230d      	movs	r3, #13
 80085ca:	e147      	b.n	800885c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	789b      	ldrb	r3, [r3, #2]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	895b      	ldrh	r3, [r3, #10]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <find_volume+0x238>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	895b      	ldrh	r3, [r3, #10]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	895b      	ldrh	r3, [r3, #10]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <find_volume+0x23c>
 8008600:	230d      	movs	r3, #13
 8008602:	e12b      	b.n	800885c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	3334      	adds	r3, #52	; 0x34
 8008608:	3311      	adds	r3, #17
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fcaa 	bl	8006f64 <ld_word>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <find_volume+0x262>
 8008626:	230d      	movs	r3, #13
 8008628:	e118      	b.n	800885c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	3334      	adds	r3, #52	; 0x34
 800862e:	3313      	adds	r3, #19
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fc97 	bl	8006f64 <ld_word>
 8008636:	4603      	mov	r3, r0
 8008638:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800863a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <find_volume+0x286>
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	3334      	adds	r3, #52	; 0x34
 8008644:	3320      	adds	r3, #32
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fca3 	bl	8006f92 <ld_dword>
 800864c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	3334      	adds	r3, #52	; 0x34
 8008652:	330e      	adds	r3, #14
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fc85 	bl	8006f64 <ld_word>
 800865a:	4603      	mov	r3, r0
 800865c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800865e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <find_volume+0x2a0>
 8008664:	230d      	movs	r3, #13
 8008666:	e0f9      	b.n	800885c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008668:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800866a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866c:	4413      	add	r3, r2
 800866e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008670:	8912      	ldrh	r2, [r2, #8]
 8008672:	0912      	lsrs	r2, r2, #4
 8008674:	b292      	uxth	r2, r2
 8008676:	4413      	add	r3, r2
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	429a      	cmp	r2, r3
 8008680:	d201      	bcs.n	8008686 <find_volume+0x2be>
 8008682:	230d      	movs	r3, #13
 8008684:	e0ea      	b.n	800885c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800868e:	8952      	ldrh	r2, [r2, #10]
 8008690:	fbb3 f3f2 	udiv	r3, r3, r2
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <find_volume+0x2dc>
 800869c:	230d      	movs	r3, #13
 800869e:	e0dd      	b.n	800885c <find_volume+0x494>
 80086a0:	2000055c 	.word	0x2000055c
		fmt = FS_FAT32;
 80086a4:	2303      	movs	r3, #3
 80086a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d802      	bhi.n	80086ba <find_volume+0x2f2>
 80086b4:	2302      	movs	r3, #2
 80086b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d802      	bhi.n	80086ca <find_volume+0x302>
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1c9a      	adds	r2, r3, #2
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086d6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80086d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086dc:	441a      	add	r2, r3
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80086e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	441a      	add	r2, r3
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80086ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d11e      	bne.n	8008732 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	3334      	adds	r3, #52	; 0x34
 80086f8:	332a      	adds	r3, #42	; 0x2a
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fc32 	bl	8006f64 <ld_word>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <find_volume+0x342>
 8008706:	230d      	movs	r3, #13
 8008708:	e0a8      	b.n	800885c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	891b      	ldrh	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <find_volume+0x34e>
 8008712:	230d      	movs	r3, #13
 8008714:	e0a2      	b.n	800885c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	3334      	adds	r3, #52	; 0x34
 800871a:	332c      	adds	r3, #44	; 0x2c
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fc38 	bl	8006f92 <ld_dword>
 8008722:	4602      	mov	r2, r0
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
 8008730:	e01f      	b.n	8008772 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	891b      	ldrh	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <find_volume+0x376>
 800873a:	230d      	movs	r3, #13
 800873c:	e08e      	b.n	800885c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	441a      	add	r2, r3
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800874a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800874e:	2b02      	cmp	r3, #2
 8008750:	d103      	bne.n	800875a <find_volume+0x392>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	e00a      	b.n	8008770 <find_volume+0x3a8>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	4613      	mov	r3, r2
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4413      	add	r3, r2
 8008764:	085a      	lsrs	r2, r3, #1
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008770:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008778:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800877c:	0a5b      	lsrs	r3, r3, #9
 800877e:	429a      	cmp	r2, r3
 8008780:	d201      	bcs.n	8008786 <find_volume+0x3be>
 8008782:	230d      	movs	r3, #13
 8008784:	e06a      	b.n	800885c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f04f 32ff 	mov.w	r2, #4294967295
 800878c:	615a      	str	r2, [r3, #20]
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2280      	movs	r2, #128	; 0x80
 800879a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800879c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d149      	bne.n	8008838 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	3334      	adds	r3, #52	; 0x34
 80087a8:	3330      	adds	r3, #48	; 0x30
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fbda 	bl	8006f64 <ld_word>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d140      	bne.n	8008838 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80087b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b8:	3301      	adds	r3, #1
 80087ba:	4619      	mov	r1, r3
 80087bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087be:	f7fe fea1 	bl	8007504 <move_window>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d137      	bne.n	8008838 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	2200      	movs	r2, #0
 80087cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3334      	adds	r3, #52	; 0x34
 80087d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fbc4 	bl	8006f64 <ld_word>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d127      	bne.n	8008838 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	3334      	adds	r3, #52	; 0x34
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fbd0 	bl	8006f92 <ld_dword>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <find_volume+0x49c>)
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d11e      	bne.n	8008838 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	3334      	adds	r3, #52	; 0x34
 80087fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fbc5 	bl	8006f92 <ld_dword>
 8008808:	4602      	mov	r2, r0
 800880a:	4b17      	ldr	r3, [pc, #92]	; (8008868 <find_volume+0x4a0>)
 800880c:	429a      	cmp	r2, r3
 800880e:	d113      	bne.n	8008838 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	3334      	adds	r3, #52	; 0x34
 8008814:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe fbba 	bl	8006f92 <ld_dword>
 800881e:	4602      	mov	r2, r0
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	3334      	adds	r3, #52	; 0x34
 8008828:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fbb0 	bl	8006f92 <ld_dword>
 8008832:	4602      	mov	r2, r0
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800883e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <find_volume+0x4a4>)
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <find_volume+0x4a4>)
 800884a:	801a      	strh	r2, [r3, #0]
 800884c:	4b07      	ldr	r3, [pc, #28]	; (800886c <find_volume+0x4a4>)
 800884e:	881a      	ldrh	r2, [r3, #0]
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008856:	f7fe fdef 	bl	8007438 <clear_lock>
#endif
	return FR_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3758      	adds	r7, #88	; 0x58
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	41615252 	.word	0x41615252
 8008868:	61417272 	.word	0x61417272
 800886c:	20000560 	.word	0x20000560

08008870 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800887a:	2309      	movs	r3, #9
 800887c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02e      	beq.n	80088e2 <validate+0x72>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d02a      	beq.n	80088e2 <validate+0x72>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d025      	beq.n	80088e2 <validate+0x72>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	889a      	ldrh	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	88db      	ldrh	r3, [r3, #6]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d11e      	bne.n	80088e2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe fc52 	bl	8007152 <lock_fs>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d014      	beq.n	80088de <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fab4 	bl	8006e28 <disk_status>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <validate+0x60>
				res = FR_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
 80088ce:	e008      	b.n	80088e2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fc51 	bl	800717e <unlock_fs>
 80088dc:	e001      	b.n	80088e2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80088de:	230f      	movs	r3, #15
 80088e0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <validate+0x7e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	e000      	b.n	80088f0 <validate+0x80>
 80088ee:	2300      	movs	r3, #0
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	6013      	str	r3, [r2, #0]
	return res;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4613      	mov	r3, r2
 800890c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff fcbd 	bl	8008296 <get_ldnumber>
 800891c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	da01      	bge.n	8008928 <f_mount+0x28>
 8008924:	230b      	movs	r3, #11
 8008926:	e048      	b.n	80089ba <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008928:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <f_mount+0xc4>)
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008930:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00f      	beq.n	8008958 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008938:	69b8      	ldr	r0, [r7, #24]
 800893a:	f7fe fd7d 	bl	8007438 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fcdb 	bl	80092fe <ff_del_syncobj>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <f_mount+0x52>
 800894e:	2302      	movs	r3, #2
 8008950:	e033      	b.n	80089ba <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00f      	beq.n	800897e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	330c      	adds	r3, #12
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f000 fca5 	bl	80092be <ff_cre_syncobj>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <f_mount+0x7e>
 800897a:	2302      	movs	r3, #2
 800897c:	e01d      	b.n	80089ba <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4910      	ldr	r1, [pc, #64]	; (80089c4 <f_mount+0xc4>)
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <f_mount+0x94>
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d001      	beq.n	8008998 <f_mount+0x98>
 8008994:	2300      	movs	r3, #0
 8008996:	e010      	b.n	80089ba <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008998:	f107 010c 	add.w	r1, r7, #12
 800899c:	f107 0308 	add.w	r3, r7, #8
 80089a0:	2200      	movs	r2, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff fd10 	bl	80083c8 <find_volume>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	7dfa      	ldrb	r2, [r7, #23]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fbe3 	bl	800717e <unlock_fs>
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000055c 	.word	0x2000055c

080089c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b098      	sub	sp, #96	; 0x60
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <f_open+0x18>
 80089dc:	2309      	movs	r3, #9
 80089de:	e1b4      	b.n	8008d4a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80089e8:	79fa      	ldrb	r2, [r7, #7]
 80089ea:	f107 0110 	add.w	r1, r7, #16
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fce8 	bl	80083c8 <find_volume>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80089fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 8191 	bne.w	8008d2a <f_open+0x362>
		dj.obj.fs = fs;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	f107 0314 	add.w	r3, r7, #20
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fbcd 	bl	80081b4 <follow_path>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11a      	bne.n	8008a5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008a28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	da03      	bge.n	8008a3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008a32:	2306      	movs	r3, #6
 8008a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a38:	e011      	b.n	8008a5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	f023 0301 	bic.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f107 0314 	add.w	r3, r7, #20
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fbae 	bl	80071b4 <chk_lock>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	f003 031c 	and.w	r3, r3, #28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d07f      	beq.n	8008b68 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d017      	beq.n	8008aa0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d10e      	bne.n	8008a96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a78:	f7fe fbf6 	bl	8007268 <enq_lock>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <f_open+0xc8>
 8008a82:	f107 0314 	add.w	r3, r7, #20
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff facd 	bl	8008026 <dir_register>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	e000      	b.n	8008a92 <f_open+0xca>
 8008a90:	2312      	movs	r3, #18
 8008a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	f043 0308 	orr.w	r3, r3, #8
 8008a9c:	71fb      	strb	r3, [r7, #7]
 8008a9e:	e010      	b.n	8008ac2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008aa0:	7ebb      	ldrb	r3, [r7, #26]
 8008aa2:	f003 0311 	and.w	r3, r3, #17
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <f_open+0xea>
					res = FR_DENIED;
 8008aaa:	2307      	movs	r3, #7
 8008aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ab0:	e007      	b.n	8008ac2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <f_open+0xfa>
 8008abc:	2308      	movs	r3, #8
 8008abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d168      	bne.n	8008b9c <f_open+0x1d4>
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d063      	beq.n	8008b9c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008ad4:	f7fd fdc6 	bl	8006664 <get_fattime>
 8008ad8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	330e      	adds	r3, #14
 8008ade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe fa92 	bl	800700a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	3316      	adds	r3, #22
 8008aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fa8c 	bl	800700a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	330b      	adds	r3, #11
 8008af6:	2220      	movs	r2, #32
 8008af8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff f9fc 	bl	8007efe <ld_clust>
 8008b06:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fa14 	bl	8007f3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	331c      	adds	r3, #28
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fa75 	bl	800700a <st_dword>
					fs->wflag = 1;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2201      	movs	r2, #1
 8008b24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d037      	beq.n	8008b9c <f_open+0x1d4>
						dw = fs->winsect;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008b32:	f107 0314 	add.w	r3, r7, #20
 8008b36:	2200      	movs	r2, #0
 8008b38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff28 	bl	8007990 <remove_chain>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d126      	bne.n	8008b9c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fcd6 	bl	8007504 <move_window>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b62:	3a01      	subs	r2, #1
 8008b64:	611a      	str	r2, [r3, #16]
 8008b66:	e019      	b.n	8008b9c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d115      	bne.n	8008b9c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b70:	7ebb      	ldrb	r3, [r7, #26]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008b7a:	2304      	movs	r3, #4
 8008b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b80:	e00c      	b.n	8008b9c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <f_open+0x1d4>
 8008b8c:	7ebb      	ldrb	r3, [r7, #26]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <f_open+0x1d4>
						res = FR_DENIED;
 8008b96:	2307      	movs	r3, #7
 8008b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d128      	bne.n	8008bf6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf14      	ite	ne
 8008bce:	2301      	movne	r3, #1
 8008bd0:	2300      	moveq	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f107 0314 	add.w	r3, r7, #20
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fb63 	bl	80072a8 <inc_lock>
 8008be2:	4602      	mov	r2, r0
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <f_open+0x22e>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 8095 	bne.w	8008d2a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff f979 	bl	8007efe <ld_clust>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	331c      	adds	r3, #28
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe f9bb 	bl	8006f92 <ld_dword>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	88da      	ldrh	r2, [r3, #6]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	79fa      	ldrb	r2, [r7, #7]
 8008c3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3330      	adds	r3, #48	; 0x30
 8008c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fa21 	bl	80070a0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d060      	beq.n	8008d2a <f_open+0x362>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d05c      	beq.n	8008d2a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	895b      	ldrh	r3, [r3, #10]
 8008c7c:	025b      	lsls	r3, r3, #9
 8008c7e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c8c:	e016      	b.n	8008cbc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fcf0 	bl	8007678 <get_fat>
 8008c98:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d802      	bhi.n	8008ca6 <f_open+0x2de>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d102      	bne.n	8008cb4 <f_open+0x2ec>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	657b      	str	r3, [r7, #84]	; 0x54
 8008cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <f_open+0x304>
 8008cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d8e0      	bhi.n	8008c8e <f_open+0x2c6>
				}
				fp->clust = clst;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008cd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d127      	bne.n	8008d2a <f_open+0x362>
 8008cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d022      	beq.n	8008d2a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fca7 	bl	800763c <clust2sect>
 8008cee:	6478      	str	r0, [r7, #68]	; 0x44
 8008cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <f_open+0x336>
						res = FR_INT_ERR;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cfc:	e015      	b.n	8008d2a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d00:	0a5a      	lsrs	r2, r3, #9
 8008d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d04:	441a      	add	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	7858      	ldrb	r0, [r3, #1]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a1a      	ldr	r2, [r3, #32]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f7fe f8c5 	bl	8006ea8 <disk_read>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <f_open+0x362>
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <f_open+0x370>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fa1c 	bl	800717e <unlock_fs>
 8008d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3760      	adds	r7, #96	; 0x60
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b08c      	sub	sp, #48	; 0x30
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f107 0210 	add.w	r2, r7, #16
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fd7c 	bl	8008870 <validate>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <f_write+0x44>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7d5b      	ldrb	r3, [r3, #21]
 8008d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <f_write+0x58>
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe f9ed 	bl	800717e <unlock_fs>
 8008da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008da8:	e173      	b.n	8009092 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	7d1b      	ldrb	r3, [r3, #20]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <f_write+0x72>
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2107      	movs	r1, #7
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe f9df 	bl	800717e <unlock_fs>
 8008dc0:	2307      	movs	r3, #7
 8008dc2:	e166      	b.n	8009092 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	441a      	add	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	f080 814b 	bcs.w	800906c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	43db      	mvns	r3, r3
 8008ddc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008dde:	e145      	b.n	800906c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 8101 	bne.w	8008ff0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	0a5b      	lsrs	r3, r3, #9
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	8952      	ldrh	r2, [r2, #10]
 8008df8:	3a01      	subs	r2, #1
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d14d      	bne.n	8008ea0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10c      	bne.n	8008e26 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11a      	bne.n	8008e4e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fe1c 	bl	8007a5a <create_chain>
 8008e22:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e24:	e013      	b.n	8008e4e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	4619      	mov	r1, r3
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7fe fea8 	bl	8007b8a <clmt_clust>
 8008e3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e3c:	e007      	b.n	8008e4e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fe07 	bl	8007a5a <create_chain>
 8008e4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8110 	beq.w	8009076 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d109      	bne.n	8008e70 <f_write+0x11e>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	755a      	strb	r2, [r3, #21]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2102      	movs	r1, #2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe f989 	bl	800717e <unlock_fs>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e110      	b.n	8009092 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d109      	bne.n	8008e8c <f_write+0x13a>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	755a      	strb	r2, [r3, #21]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2101      	movs	r1, #1
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe f97b 	bl	800717e <unlock_fs>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e102      	b.n	8009092 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e90:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <f_write+0x14e>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	7d1b      	ldrb	r3, [r3, #20]
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	da1d      	bge.n	8008ee6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	7858      	ldrb	r0, [r3, #1]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f7fe f815 	bl	8006ee8 <disk_write>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <f_write+0x186>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	755a      	strb	r2, [r3, #21]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2101      	movs	r1, #1
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f955 	bl	800717e <unlock_fs>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0dc      	b.n	8009092 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	7d1b      	ldrb	r3, [r3, #20]
 8008edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe fba4 	bl	800763c <clust2sect>
 8008ef4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <f_write+0x1be>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2202      	movs	r2, #2
 8008f00:	755a      	strb	r2, [r3, #21]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2102      	movs	r1, #2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f939 	bl	800717e <unlock_fs>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e0c0      	b.n	8009092 <f_write+0x340>
			sect += csect;
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	4413      	add	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	0a5b      	lsrs	r3, r3, #9
 8008f1c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d041      	beq.n	8008fa8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	4413      	add	r3, r2
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	8952      	ldrh	r2, [r2, #10]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d905      	bls.n	8008f3e <f_write+0x1ec>
					cc = fs->csize - csect;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	895b      	ldrh	r3, [r3, #10]
 8008f36:	461a      	mov	r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	7858      	ldrb	r0, [r3, #1]
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	69f9      	ldr	r1, [r7, #28]
 8008f48:	f7fd ffce 	bl	8006ee8 <disk_write>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <f_write+0x214>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	755a      	strb	r2, [r3, #21]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe f90e 	bl	800717e <unlock_fs>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e095      	b.n	8009092 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1a      	ldr	r2, [r3, #32]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d915      	bls.n	8008fa0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	025b      	lsls	r3, r3, #9
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f7fe f867 	bl	8007060 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	7d1b      	ldrb	r3, [r3, #20]
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	025b      	lsls	r3, r3, #9
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008fa6:	e044      	b.n	8009032 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d01b      	beq.n	8008fea <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d215      	bcs.n	8008fea <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	7858      	ldrb	r0, [r3, #1]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fc8:	2301      	movs	r3, #1
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	f7fd ff6c 	bl	8006ea8 <disk_read>
 8008fd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d009      	beq.n	8008fea <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	755a      	strb	r2, [r3, #21]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe f8cc 	bl	800717e <unlock_fs>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e053      	b.n	8009092 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d901      	bls.n	800900a <f_write+0x2b8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009018:	4413      	add	r3, r2
 800901a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901c:	69f9      	ldr	r1, [r7, #28]
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe f81e 	bl	8007060 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	7d1b      	ldrb	r3, [r3, #20]
 8009028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800902c:	b2da      	uxtb	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	4413      	add	r3, r2
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	619a      	str	r2, [r3, #24]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	429a      	cmp	r2, r3
 8009050:	bf38      	it	cc
 8009052:	461a      	movcc	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	60da      	str	r2, [r3, #12]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	441a      	add	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f47f aeb6 	bne.w	8008de0 <f_write+0x8e>
 8009074:	e000      	b.n	8009078 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009076:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	7d1b      	ldrb	r3, [r3, #20]
 800907c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009080:	b2da      	uxtb	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe f877 	bl	800717e <unlock_fs>
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3730      	adds	r7, #48	; 0x30
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f107 0208 	add.w	r2, r7, #8
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fbe0 	bl	8008870 <validate>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d16d      	bne.n	8009196 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	7d1b      	ldrb	r3, [r3, #20]
 80090be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d067      	beq.n	8009196 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	7d1b      	ldrb	r3, [r3, #20]
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da1a      	bge.n	8009106 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	7858      	ldrb	r0, [r3, #1]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1a      	ldr	r2, [r3, #32]
 80090de:	2301      	movs	r3, #1
 80090e0:	f7fd ff02 	bl	8006ee8 <disk_write>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d006      	beq.n	80090f8 <f_sync+0x5e>
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe f845 	bl	800717e <unlock_fs>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e055      	b.n	80091a4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7d1b      	ldrb	r3, [r3, #20]
 80090fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009100:	b2da      	uxtb	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009106:	f7fd faad 	bl	8006664 <get_fattime>
 800910a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f7fe f9f5 	bl	8007504 <move_window>
 800911a:	4603      	mov	r3, r0
 800911c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d138      	bne.n	8009196 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	330b      	adds	r3, #11
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	330b      	adds	r3, #11
 8009134:	f042 0220 	orr.w	r2, r2, #32
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	461a      	mov	r2, r3
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	f7fe fef8 	bl	8007f3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f103 021c 	add.w	r2, r3, #28
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f7fd ff56 	bl	800700a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3316      	adds	r3, #22
 8009162:	6939      	ldr	r1, [r7, #16]
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd ff50 	bl	800700a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3312      	adds	r3, #18
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f7fd ff30 	bl	8006fd6 <st_word>
					fs->wflag = 1;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2201      	movs	r2, #1
 800917a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe f9ee 	bl	8007560 <sync_fs>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7dfa      	ldrb	r2, [r7, #23]
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd ffee 	bl	800717e <unlock_fs>
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff ff70 	bl	800909a <f_sync>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11d      	bne.n	8009200 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f107 0208 	add.w	r2, r7, #8
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fb4f 	bl	8008870 <validate>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d111      	bne.n	8009200 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe f8ef 	bl	80073c4 <dec_lock>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2100      	movs	r1, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fd ffbf 	bl	800717e <unlock_fs>
#endif
		}
	}
	return res;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800921a:	2301      	movs	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009222:	4b1e      	ldr	r3, [pc, #120]	; (800929c <FATFS_LinkDriverEx+0x90>)
 8009224:	7a5b      	ldrb	r3, [r3, #9]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d131      	bne.n	8009290 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800922c:	4b1b      	ldr	r3, [pc, #108]	; (800929c <FATFS_LinkDriverEx+0x90>)
 800922e:	7a5b      	ldrb	r3, [r3, #9]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	461a      	mov	r2, r3
 8009234:	4b19      	ldr	r3, [pc, #100]	; (800929c <FATFS_LinkDriverEx+0x90>)
 8009236:	2100      	movs	r1, #0
 8009238:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800923a:	4b18      	ldr	r3, [pc, #96]	; (800929c <FATFS_LinkDriverEx+0x90>)
 800923c:	7a5b      	ldrb	r3, [r3, #9]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	4a16      	ldr	r2, [pc, #88]	; (800929c <FATFS_LinkDriverEx+0x90>)
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800924a:	4b14      	ldr	r3, [pc, #80]	; (800929c <FATFS_LinkDriverEx+0x90>)
 800924c:	7a5b      	ldrb	r3, [r3, #9]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <FATFS_LinkDriverEx+0x90>)
 8009254:	4413      	add	r3, r2
 8009256:	79fa      	ldrb	r2, [r7, #7]
 8009258:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800925a:	4b10      	ldr	r3, [pc, #64]	; (800929c <FATFS_LinkDriverEx+0x90>)
 800925c:	7a5b      	ldrb	r3, [r3, #9]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	b2d1      	uxtb	r1, r2
 8009264:	4a0d      	ldr	r2, [pc, #52]	; (800929c <FATFS_LinkDriverEx+0x90>)
 8009266:	7251      	strb	r1, [r2, #9]
 8009268:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800926a:	7dbb      	ldrb	r3, [r7, #22]
 800926c:	3330      	adds	r3, #48	; 0x30
 800926e:	b2da      	uxtb	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3301      	adds	r3, #1
 8009278:	223a      	movs	r2, #58	; 0x3a
 800927a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3302      	adds	r3, #2
 8009280:	222f      	movs	r2, #47	; 0x2f
 8009282:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	3303      	adds	r3, #3
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
}
 8009292:	4618      	mov	r0, r3
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr
 800929c:	20000584 	.word	0x20000584

080092a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80092aa:	2200      	movs	r2, #0
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff ffac 	bl	800920c <FATFS_LinkDriverEx>
 80092b4:	4603      	mov	r3, r0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	4603      	mov	r3, r0
 80092c6:	6039      	str	r1, [r7, #0]
 80092c8:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	2300      	movs	r3, #0
 80092d0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	2101      	movs	r1, #1
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8e7 	bl	80094ac <osSemaphoreCreate>
 80092de:	4602      	mov	r2, r0
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	617b      	str	r3, [r7, #20]

    return ret;
 80092f4:	697b      	ldr	r3, [r7, #20]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f988 	bl	800961c <osSemaphoreDelete>
    return 1;
 800930c:	2301      	movs	r3, #1
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8f4 	bl	8009514 <osSemaphoreWait>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <ff_req_grant+0x20>
  {
    ret = 1;
 8009332:	2301      	movs	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009336:	68fb      	ldr	r3, [r7, #12]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f931 	bl	80095b0 <osSemaphoreRelease>
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	4603      	mov	r3, r0
 800935e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009368:	2b84      	cmp	r3, #132	; 0x84
 800936a:	d005      	beq.n	8009378 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800936c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	3303      	adds	r3, #3
 8009376:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009378:	68fb      	ldr	r3, [r7, #12]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr

08009384 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800938a:	f3ef 8305 	mrs	r3, IPSR
 800938e:	607b      	str	r3, [r7, #4]
  return(result);
 8009390:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009392:	2b00      	cmp	r3, #0
 8009394:	bf14      	ite	ne
 8009396:	2301      	movne	r3, #1
 8009398:	2300      	moveq	r3, #0
 800939a:	b2db      	uxtb	r3, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr

080093a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80093aa:	f001 fbb1 	bl	800ab10 <vTaskStartScheduler>
  
  return osOK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80093b8:	f001 ffc6 	bl	800b348 <xTaskGetSchedulerState>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <osKernelRunning+0x12>
    return 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e000      	b.n	80093c8 <osKernelRunning+0x14>
  else
    return 1;
 80093c6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	bd80      	pop	{r7, pc}

080093cc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80093d0:	f7ff ffd8 	bl	8009384 <inHandlerMode>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80093da:	f001 fcaf 	bl	800ad3c <xTaskGetTickCountFromISR>
 80093de:	4603      	mov	r3, r0
 80093e0:	e002      	b.n	80093e8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80093e2:	f001 fc9d 	bl	800ad20 <xTaskGetTickCount>
 80093e6:	4603      	mov	r3, r0
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	bd80      	pop	{r7, pc}

080093ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80093ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ee:	b089      	sub	sp, #36	; 0x24
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d020      	beq.n	8009440 <osThreadCreate+0x54>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01c      	beq.n	8009440 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685c      	ldr	r4, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681d      	ldr	r5, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691e      	ldr	r6, [r3, #16]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009418:	4618      	mov	r0, r3
 800941a:	f7ff ff9c 	bl	8009356 <makeFreeRtosPriority>
 800941e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009428:	9202      	str	r2, [sp, #8]
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	9100      	str	r1, [sp, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	4632      	mov	r2, r6
 8009432:	4629      	mov	r1, r5
 8009434:	4620      	mov	r0, r4
 8009436:	f001 f9b1 	bl	800a79c <xTaskCreateStatic>
 800943a:	4603      	mov	r3, r0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e01c      	b.n	800947a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685c      	ldr	r4, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800944c:	b29e      	uxth	r6, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff ff7e 	bl	8009356 <makeFreeRtosPriority>
 800945a:	4602      	mov	r2, r0
 800945c:	f107 030c 	add.w	r3, r7, #12
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	9200      	str	r2, [sp, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	4632      	mov	r2, r6
 8009468:	4629      	mov	r1, r5
 800946a:	4620      	mov	r0, r4
 800946c:	f001 f9ef 	bl	800a84e <xTaskCreate>
 8009470:	4603      	mov	r3, r0
 8009472:	2b01      	cmp	r3, #1
 8009474:	d001      	beq.n	800947a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e000      	b.n	800947c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800947a:	68fb      	ldr	r3, [r7, #12]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009484 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <osDelay+0x16>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	e000      	b.n	800949c <osDelay+0x18>
 800949a:	2301      	movs	r3, #1
 800949c:	4618      	mov	r0, r3
 800949e:	f001 fb03 	bl	800aaa8 <vTaskDelay>
  
  return osOK;
 80094a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d010      	beq.n	80094e0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d10b      	bne.n	80094dc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	2303      	movs	r3, #3
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	4613      	mov	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	2100      	movs	r1, #0
 80094d2:	2001      	movs	r0, #1
 80094d4:	f000 faaa 	bl	8009a2c <xQueueGenericCreateStatic>
 80094d8:	4603      	mov	r3, r0
 80094da:	e016      	b.n	800950a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	e014      	b.n	800950a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d110      	bne.n	8009508 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80094e6:	2203      	movs	r2, #3
 80094e8:	2100      	movs	r1, #0
 80094ea:	2001      	movs	r0, #1
 80094ec:	f000 fb10 	bl	8009b10 <xQueueGenericCreate>
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <osSemaphoreCreate+0x58>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fb62 	bl	8009bc8 <xQueueGenericSend>
      return sema;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	e000      	b.n	800950a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009508:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800951e:	2300      	movs	r3, #0
 8009520:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	e03a      	b.n	80095a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d103      	bne.n	8009540 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009538:	f04f 33ff 	mov.w	r3, #4294967295
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	e009      	b.n	8009554 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d006      	beq.n	8009554 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <osSemaphoreWait+0x40>
      ticks = 1;
 8009550:	2301      	movs	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009554:	f7ff ff16 	bl	8009384 <inHandlerMode>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d017      	beq.n	800958e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800955e:	f107 0308 	add.w	r3, r7, #8
 8009562:	461a      	mov	r2, r3
 8009564:	2100      	movs	r1, #0
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 ff2a 	bl	800a3c0 <xQueueReceiveFromISR>
 800956c:	4603      	mov	r3, r0
 800956e:	2b01      	cmp	r3, #1
 8009570:	d001      	beq.n	8009576 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009572:	23ff      	movs	r3, #255	; 0xff
 8009574:	e015      	b.n	80095a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d011      	beq.n	80095a0 <osSemaphoreWait+0x8c>
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <osSemaphoreWait+0x98>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	e008      	b.n	80095a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fe0d 	bl	800a1b0 <xQueueSemaphoreTake>
 8009596:	4603      	mov	r3, r0
 8009598:	2b01      	cmp	r3, #1
 800959a:	d001      	beq.n	80095a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800959c:	23ff      	movs	r3, #255	; 0xff
 800959e:	e000      	b.n	80095a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	e000ed04 	.word	0xe000ed04

080095b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80095c0:	f7ff fee0 	bl	8009384 <inHandlerMode>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d016      	beq.n	80095f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fc87 	bl	8009ee4 <xQueueGiveFromISR>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d001      	beq.n	80095e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80095dc:	23ff      	movs	r3, #255	; 0xff
 80095de:	e017      	b.n	8009610 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d013      	beq.n	800960e <osSemaphoreRelease+0x5e>
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <osSemaphoreRelease+0x68>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	e00a      	b.n	800960e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80095f8:	2300      	movs	r3, #0
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fae2 	bl	8009bc8 <xQueueGenericSend>
 8009604:	4603      	mov	r3, r0
 8009606:	2b01      	cmp	r3, #1
 8009608:	d001      	beq.n	800960e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800960a:	23ff      	movs	r3, #255	; 0xff
 800960c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800960e:	68fb      	ldr	r3, [r7, #12]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009624:	f7ff feae 	bl	8009384 <inHandlerMode>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800962e:	2382      	movs	r3, #130	; 0x82
 8009630:	e003      	b.n	800963a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 ff41 	bl	800a4ba <vQueueDelete>

  return osOK; 
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009642:	b590      	push	{r4, r7, lr}
 8009644:	b085      	sub	sp, #20
 8009646:	af02      	add	r7, sp, #8
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d012      	beq.n	800967a <osMessageCreate+0x38>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00e      	beq.n	800967a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68dc      	ldr	r4, [r3, #12]
 800966c:	2300      	movs	r3, #0
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	4623      	mov	r3, r4
 8009672:	f000 f9db 	bl	8009a2c <xQueueGenericCreateStatic>
 8009676:	4603      	mov	r3, r0
 8009678:	e008      	b.n	800968c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	4619      	mov	r1, r3
 8009686:	f000 fa43 	bl	8009b10 <xQueueGenericCreate>
 800968a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bd90      	pop	{r4, r7, pc}

08009694 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <osMessagePut+0x1e>
    ticks = 1;
 80096ae:	2301      	movs	r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80096b2:	f7ff fe67 	bl	8009384 <inHandlerMode>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d018      	beq.n	80096ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80096bc:	f107 0210 	add.w	r2, r7, #16
 80096c0:	f107 0108 	add.w	r1, r7, #8
 80096c4:	2300      	movs	r3, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fb78 	bl	8009dbc <xQueueGenericSendFromISR>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d001      	beq.n	80096d6 <osMessagePut+0x42>
      return osErrorOS;
 80096d2:	23ff      	movs	r3, #255	; 0xff
 80096d4:	e018      	b.n	8009708 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d014      	beq.n	8009706 <osMessagePut+0x72>
 80096dc:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <osMessagePut+0x7c>)
 80096de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	e00b      	b.n	8009706 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80096ee:	f107 0108 	add.w	r1, r7, #8
 80096f2:	2300      	movs	r3, #0
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fa66 	bl	8009bc8 <xQueueGenericSend>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d001      	beq.n	8009706 <osMessagePut+0x72>
      return osErrorOS;
 8009702:	23ff      	movs	r3, #255	; 0xff
 8009704:	e000      	b.n	8009708 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	e000ed04 	.word	0xe000ed04

08009714 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b08b      	sub	sp, #44	; 0x2c
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	617b      	str	r3, [r7, #20]
    return event;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	461c      	mov	r4, r3
 8009736:	f107 0314 	add.w	r3, r7, #20
 800973a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800973e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009742:	e054      	b.n	80097ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009744:	2300      	movs	r3, #0
 8009746:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d103      	bne.n	800975c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009754:	f04f 33ff 	mov.w	r3, #4294967295
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
 800975a:	e009      	b.n	8009770 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d006      	beq.n	8009770 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <osMessageGet+0x5c>
      ticks = 1;
 800976c:	2301      	movs	r3, #1
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009770:	f7ff fe08 	bl	8009384 <inHandlerMode>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01c      	beq.n	80097b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800977a:	f107 0220 	add.w	r2, r7, #32
 800977e:	f107 0314 	add.w	r3, r7, #20
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	68b8      	ldr	r0, [r7, #8]
 8009788:	f000 fe1a 	bl	800a3c0 <xQueueReceiveFromISR>
 800978c:	4603      	mov	r3, r0
 800978e:	2b01      	cmp	r3, #1
 8009790:	d102      	bne.n	8009798 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009792:	2310      	movs	r3, #16
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e001      	b.n	800979c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01d      	beq.n	80097de <osMessageGet+0xca>
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <osMessageGet+0xe4>)
 80097a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	e014      	b.n	80097de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80097b4:	f107 0314 	add.w	r3, r7, #20
 80097b8:	3304      	adds	r3, #4
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	4619      	mov	r1, r3
 80097be:	68b8      	ldr	r0, [r7, #8]
 80097c0:	f000 fc1a 	bl	8009ff8 <xQueueReceive>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d102      	bne.n	80097d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80097ca:	2310      	movs	r3, #16
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e006      	b.n	80097de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <osMessageGet+0xc6>
 80097d6:	2300      	movs	r3, #0
 80097d8:	e000      	b.n	80097dc <osMessageGet+0xc8>
 80097da:	2340      	movs	r3, #64	; 0x40
 80097dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	461c      	mov	r4, r3
 80097e2:	f107 0314 	add.w	r3, r7, #20
 80097e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	372c      	adds	r7, #44	; 0x2c
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd90      	pop	{r4, r7, pc}
 80097f6:	bf00      	nop
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f103 0208 	add.w	r2, r3, #8
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f103 0208 	add.w	r2, r3, #8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f103 0208 	add.w	r2, r3, #8
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	bc80      	pop	{r7}
 8009838:	4770      	bx	lr

0800983a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	601a      	str	r2, [r3, #0]
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d103      	bne.n	80098b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e00c      	b.n	80098d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3308      	adds	r3, #8
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	e002      	b.n	80098c6 <vListInsert+0x2e>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d2f6      	bcs.n	80098c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr

08009908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6892      	ldr	r2, [r2, #8]
 800991e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6852      	ldr	r2, [r2, #4]
 8009928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d103      	bne.n	800993c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr
	...

0800995c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60bb      	str	r3, [r7, #8]
 8009982:	e7fe      	b.n	8009982 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009984:	f002 f808 	bl	800b998 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009990:	68f9      	ldr	r1, [r7, #12]
 8009992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009994:	fb01 f303 	mul.w	r3, r1, r3
 8009998:	441a      	add	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b4:	3b01      	subs	r3, #1
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	441a      	add	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	22ff      	movs	r2, #255	; 0xff
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	22ff      	movs	r2, #255	; 0xff
 80099d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d114      	bne.n	8009a04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01a      	beq.n	8009a18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3310      	adds	r3, #16
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 faf4 	bl	800afd4 <xTaskRemoveFromEventList>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d012      	beq.n	8009a18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <xQueueGenericReset+0xcc>)
 80099f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	e009      	b.n	8009a18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3310      	adds	r3, #16
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fef7 	bl	80097fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3324      	adds	r3, #36	; 0x24
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fef2 	bl	80097fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a18:	f001 ffec 	bl	800b9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a1c:	2301      	movs	r3, #1
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	; 0x38
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d109      	bne.n	8009a54 <xQueueGenericCreateStatic+0x28>
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a52:	e7fe      	b.n	8009a52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <xQueueGenericCreateStatic+0x42>
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a6c:	e7fe      	b.n	8009a6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <xQueueGenericCreateStatic+0x4e>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <xQueueGenericCreateStatic+0x52>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <xQueueGenericCreateStatic+0x54>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d109      	bne.n	8009a98 <xQueueGenericCreateStatic+0x6c>
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	623b      	str	r3, [r7, #32]
 8009a96:	e7fe      	b.n	8009a96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <xQueueGenericCreateStatic+0x78>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <xQueueGenericCreateStatic+0x7c>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <xQueueGenericCreateStatic+0x7e>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d109      	bne.n	8009ac2 <xQueueGenericCreateStatic+0x96>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61fb      	str	r3, [r7, #28]
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ac2:	2348      	movs	r3, #72	; 0x48
 8009ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b48      	cmp	r3, #72	; 0x48
 8009aca:	d009      	beq.n	8009ae0 <xQueueGenericCreateStatic+0xb4>
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	e7fe      	b.n	8009ade <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009af2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4613      	mov	r3, r2
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 f842 	bl	8009b8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3730      	adds	r7, #48	; 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af02      	add	r7, sp, #8
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d109      	bne.n	8009b38 <xQueueGenericCreate+0x28>
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	e7fe      	b.n	8009b36 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	e004      	b.n	8009b4e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	fb02 f303 	mul.w	r3, r2, r3
 8009b4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	3348      	adds	r3, #72	; 0x48
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 f816 	bl	800bb84 <pvPortMalloc>
 8009b58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00f      	beq.n	8009b80 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	3348      	adds	r3, #72	; 0x48
 8009b64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b6e:	79fa      	ldrb	r2, [r7, #7]
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	68b9      	ldr	r1, [r7, #8]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f805 	bl	8009b8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b80:	69bb      	ldr	r3, [r7, #24]
	}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d103      	bne.n	8009ba6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	e002      	b.n	8009bac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bb8:	2101      	movs	r1, #1
 8009bba:	69b8      	ldr	r0, [r7, #24]
 8009bbc:	f7ff fece 	bl	800995c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08e      	sub	sp, #56	; 0x38
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d109      	bne.n	8009bf8 <xQueueGenericSend+0x30>
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bf6:	e7fe      	b.n	8009bf6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <xQueueGenericSend+0x3e>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <xQueueGenericSend+0x42>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <xQueueGenericSend+0x44>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <xQueueGenericSend+0x5c>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d103      	bne.n	8009c32 <xQueueGenericSend+0x6a>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <xQueueGenericSend+0x6e>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <xQueueGenericSend+0x70>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d109      	bne.n	8009c50 <xQueueGenericSend+0x88>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	623b      	str	r3, [r7, #32]
 8009c4e:	e7fe      	b.n	8009c4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c50:	f001 fb7a 	bl	800b348 <xTaskGetSchedulerState>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <xQueueGenericSend+0x98>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <xQueueGenericSend+0x9c>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <xQueueGenericSend+0x9e>
 8009c64:	2300      	movs	r3, #0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <xQueueGenericSend+0xb6>
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e7fe      	b.n	8009c7c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c7e:	f001 fe8b 	bl	800b998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d302      	bcc.n	8009c94 <xQueueGenericSend+0xcc>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d129      	bne.n	8009ce8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9a:	f000 fc47 	bl	800a52c <prvCopyDataToQueue>
 8009c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d010      	beq.n	8009cca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	3324      	adds	r3, #36	; 0x24
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 f991 	bl	800afd4 <xTaskRemoveFromEventList>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d013      	beq.n	8009ce0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cb8:	4b3f      	ldr	r3, [pc, #252]	; (8009db8 <xQueueGenericSend+0x1f0>)
 8009cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	e00a      	b.n	8009ce0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cd0:	4b39      	ldr	r3, [pc, #228]	; (8009db8 <xQueueGenericSend+0x1f0>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ce0:	f001 fe88 	bl	800b9f4 <vPortExitCritical>
				return pdPASS;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e063      	b.n	8009db0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cee:	f001 fe81 	bl	800b9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e05c      	b.n	8009db0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d106      	bne.n	8009d0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f9c9 	bl	800b098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d06:	2301      	movs	r3, #1
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d0a:	f001 fe73 	bl	800b9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d0e:	f000 ff5d 	bl	800abcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d12:	f001 fe41 	bl	800b998 <vPortEnterCritical>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d1c:	b25b      	sxtb	r3, r3
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d22:	d103      	bne.n	8009d2c <xQueueGenericSend+0x164>
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d103      	bne.n	8009d42 <xQueueGenericSend+0x17a>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d42:	f001 fe57 	bl	800b9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d46:	1d3a      	adds	r2, r7, #4
 8009d48:	f107 0314 	add.w	r3, r7, #20
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 f9b8 	bl	800b0c4 <xTaskCheckForTimeOut>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d124      	bne.n	8009da4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d5c:	f000 fcde 	bl	800a71c <prvIsQueueFull>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d018      	beq.n	8009d98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	3310      	adds	r3, #16
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 f90c 	bl	800af8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d76:	f000 fc69 	bl	800a64c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d7a:	f000 ff35 	bl	800abe8 <xTaskResumeAll>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af7c 	bne.w	8009c7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <xQueueGenericSend+0x1f0>)
 8009d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	e772      	b.n	8009c7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d9a:	f000 fc57 	bl	800a64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d9e:	f000 ff23 	bl	800abe8 <xTaskResumeAll>
 8009da2:	e76c      	b.n	8009c7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009da6:	f000 fc51 	bl	800a64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009daa:	f000 ff1d 	bl	800abe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dae:	2300      	movs	r3, #0
		}
	}
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3738      	adds	r7, #56	; 0x38
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08e      	sub	sp, #56	; 0x38
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d109      	bne.n	8009de8 <xQueueGenericSendFromISR+0x2c>
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
 8009de6:	e7fe      	b.n	8009de6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <xQueueGenericSendFromISR+0x3a>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <xQueueGenericSendFromISR+0x3e>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e000      	b.n	8009dfc <xQueueGenericSendFromISR+0x40>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <xQueueGenericSendFromISR+0x58>
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	623b      	str	r3, [r7, #32]
 8009e12:	e7fe      	b.n	8009e12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d103      	bne.n	8009e22 <xQueueGenericSendFromISR+0x66>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d101      	bne.n	8009e26 <xQueueGenericSendFromISR+0x6a>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueGenericSendFromISR+0x6c>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d109      	bne.n	8009e40 <xQueueGenericSendFromISR+0x84>
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	e7fe      	b.n	8009e3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e40:	f001 fe64 	bl	800bb0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e44:	f3ef 8211 	mrs	r2, BASEPRI
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	61ba      	str	r2, [r7, #24]
 8009e5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d302      	bcc.n	8009e72 <xQueueGenericSendFromISR+0xb6>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d12c      	bne.n	8009ecc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e82:	f000 fb53 	bl	800a52c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d112      	bne.n	8009eb6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d016      	beq.n	8009ec6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	3324      	adds	r3, #36	; 0x24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f899 	bl	800afd4 <xTaskRemoveFromEventList>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00e      	beq.n	8009ec6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e007      	b.n	8009ec6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009eba:	3301      	adds	r3, #1
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	b25a      	sxtb	r2, r3
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009eca:	e001      	b.n	8009ed0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3738      	adds	r7, #56	; 0x38
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08e      	sub	sp, #56	; 0x38
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <xQueueGiveFromISR+0x28>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	623b      	str	r3, [r7, #32]
 8009f0a:	e7fe      	b.n	8009f0a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <xQueueGiveFromISR+0x44>
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61fb      	str	r3, [r7, #28]
 8009f26:	e7fe      	b.n	8009f26 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <xQueueGiveFromISR+0x54>
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <xQueueGiveFromISR+0x58>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <xQueueGiveFromISR+0x5a>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <xQueueGiveFromISR+0x72>
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	e7fe      	b.n	8009f54 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f56:	f001 fdd9 	bl	800bb0c <vPortValidateInterruptPriority>
	__asm volatile
 8009f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	617a      	str	r2, [r7, #20]
 8009f70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d22b      	bcs.n	8009fde <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa0:	d112      	bne.n	8009fc8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d016      	beq.n	8009fd8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	3324      	adds	r3, #36	; 0x24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f001 f810 	bl	800afd4 <xTaskRemoveFromEventList>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00e      	beq.n	8009fd8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	e007      	b.n	8009fd8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fcc:	3301      	adds	r3, #1
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	b25a      	sxtb	r2, r3
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	637b      	str	r3, [r7, #52]	; 0x34
 8009fdc:	e001      	b.n	8009fe2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3738      	adds	r7, #56	; 0x38
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08c      	sub	sp, #48	; 0x30
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a004:	2300      	movs	r3, #0
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <xQueueReceive+0x2e>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	623b      	str	r3, [r7, #32]
 800a024:	e7fe      	b.n	800a024 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d103      	bne.n	800a034 <xQueueReceive+0x3c>
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <xQueueReceive+0x40>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <xQueueReceive+0x42>
 800a038:	2300      	movs	r3, #0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <xQueueReceive+0x5a>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	e7fe      	b.n	800a050 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a052:	f001 f979 	bl	800b348 <xTaskGetSchedulerState>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d102      	bne.n	800a062 <xQueueReceive+0x6a>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <xQueueReceive+0x6e>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <xQueueReceive+0x70>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <xQueueReceive+0x88>
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	e7fe      	b.n	800a07e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a080:	f001 fc8a 	bl	800b998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01f      	beq.n	800a0d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a094:	f000 fab4 	bl	800a600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	1e5a      	subs	r2, r3, #1
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00f      	beq.n	800a0c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	3310      	adds	r3, #16
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 ff91 	bl	800afd4 <xTaskRemoveFromEventList>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0b8:	4b3c      	ldr	r3, [pc, #240]	; (800a1ac <xQueueReceive+0x1b4>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0c8:	f001 fc94 	bl	800b9f4 <vPortExitCritical>
				return pdPASS;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e069      	b.n	800a1a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0d6:	f001 fc8d 	bl	800b9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e062      	b.n	800a1a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d106      	bne.n	800a0f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0e4:	f107 0310 	add.w	r3, r7, #16
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 ffd5 	bl	800b098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0f2:	f001 fc7f 	bl	800b9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0f6:	f000 fd69 	bl	800abcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0fa:	f001 fc4d 	bl	800b998 <vPortEnterCritical>
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a104:	b25b      	sxtb	r3, r3
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d103      	bne.n	800a114 <xQueueReceive+0x11c>
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	d103      	bne.n	800a12a <xQueueReceive+0x132>
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a12a:	f001 fc63 	bl	800b9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a12e:	1d3a      	adds	r2, r7, #4
 800a130:	f107 0310 	add.w	r3, r7, #16
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f000 ffc4 	bl	800b0c4 <xTaskCheckForTimeOut>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d123      	bne.n	800a18a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a144:	f000 fad4 	bl	800a6f0 <prvIsQueueEmpty>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d017      	beq.n	800a17e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	3324      	adds	r3, #36	; 0x24
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f000 ff18 	bl	800af8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15e:	f000 fa75 	bl	800a64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a162:	f000 fd41 	bl	800abe8 <xTaskResumeAll>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d189      	bne.n	800a080 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <xQueueReceive+0x1b4>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	e780      	b.n	800a080 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a180:	f000 fa64 	bl	800a64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a184:	f000 fd30 	bl	800abe8 <xTaskResumeAll>
 800a188:	e77a      	b.n	800a080 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a18a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18c:	f000 fa5e 	bl	800a64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a190:	f000 fd2a 	bl	800abe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a196:	f000 faab 	bl	800a6f0 <prvIsQueueEmpty>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f43f af6f 	beq.w	800a080 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3730      	adds	r7, #48	; 0x30
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08e      	sub	sp, #56	; 0x38
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <xQueueSemaphoreTake+0x30>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	623b      	str	r3, [r7, #32]
 800a1de:	e7fe      	b.n	800a1de <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d009      	beq.n	800a1fc <xQueueSemaphoreTake+0x4c>
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	61fb      	str	r3, [r7, #28]
 800a1fa:	e7fe      	b.n	800a1fa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1fc:	f001 f8a4 	bl	800b348 <xTaskGetSchedulerState>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d102      	bne.n	800a20c <xQueueSemaphoreTake+0x5c>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <xQueueSemaphoreTake+0x60>
 800a20c:	2301      	movs	r3, #1
 800a20e:	e000      	b.n	800a212 <xQueueSemaphoreTake+0x62>
 800a210:	2300      	movs	r3, #0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <xQueueSemaphoreTake+0x7a>
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	61bb      	str	r3, [r7, #24]
 800a228:	e7fe      	b.n	800a228 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a22a:	f001 fbb5 	bl	800b998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	2b00      	cmp	r3, #0
 800a238:	d024      	beq.n	800a284 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	1e5a      	subs	r2, r3, #1
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d104      	bne.n	800a254 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a24a:	f001 fa43 	bl	800b6d4 <pvTaskIncrementMutexHeldCount>
 800a24e:	4602      	mov	r2, r0
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00f      	beq.n	800a27c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	3310      	adds	r3, #16
 800a260:	4618      	mov	r0, r3
 800a262:	f000 feb7 	bl	800afd4 <xTaskRemoveFromEventList>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a26c:	4b53      	ldr	r3, [pc, #332]	; (800a3bc <xQueueSemaphoreTake+0x20c>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a27c:	f001 fbba 	bl	800b9f4 <vPortExitCritical>
				return pdPASS;
 800a280:	2301      	movs	r3, #1
 800a282:	e096      	b.n	800a3b2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d110      	bne.n	800a2ac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <xQueueSemaphoreTake+0xf4>
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e7fe      	b.n	800a2a2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2a4:	f001 fba6 	bl	800b9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e082      	b.n	800a3b2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2b2:	f107 030c 	add.w	r3, r7, #12
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 feee 	bl	800b098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2c0:	f001 fb98 	bl	800b9f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2c4:	f000 fc82 	bl	800abcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2c8:	f001 fb66 	bl	800b998 <vPortEnterCritical>
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2d2:	b25b      	sxtb	r3, r3
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d103      	bne.n	800a2e2 <xQueueSemaphoreTake+0x132>
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e8:	b25b      	sxtb	r3, r3
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	d103      	bne.n	800a2f8 <xQueueSemaphoreTake+0x148>
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f8:	f001 fb7c 	bl	800b9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	f107 030c 	add.w	r3, r7, #12
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fedd 	bl	800b0c4 <xTaskCheckForTimeOut>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d132      	bne.n	800a376 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a312:	f000 f9ed 	bl	800a6f0 <prvIsQueueEmpty>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d026      	beq.n	800a36a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a324:	f001 fb38 	bl	800b998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f001 f829 	bl	800b384 <xTaskPriorityInherit>
 800a332:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a334:	f001 fb5e 	bl	800b9f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fe23 	bl	800af8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a348:	f000 f980 	bl	800a64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a34c:	f000 fc4c 	bl	800abe8 <xTaskResumeAll>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	f47f af69 	bne.w	800a22a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a358:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <xQueueSemaphoreTake+0x20c>)
 800a35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	e75f      	b.n	800a22a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36c:	f000 f96e 	bl	800a64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a370:	f000 fc3a 	bl	800abe8 <xTaskResumeAll>
 800a374:	e759      	b.n	800a22a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a378:	f000 f968 	bl	800a64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a37c:	f000 fc34 	bl	800abe8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a382:	f000 f9b5 	bl	800a6f0 <prvIsQueueEmpty>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f43f af4e 	beq.w	800a22a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00d      	beq.n	800a3b0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a394:	f001 fb00 	bl	800b998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a39a:	f000 f8b0 	bl	800a4fe <prvGetDisinheritPriorityAfterTimeout>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 f8f6 	bl	800b598 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3ac:	f001 fb22 	bl	800b9f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3738      	adds	r7, #56	; 0x38
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	e000ed04 	.word	0xe000ed04

0800a3c0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d109      	bne.n	800a3ea <xQueueReceiveFromISR+0x2a>
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	623b      	str	r3, [r7, #32]
 800a3e8:	e7fe      	b.n	800a3e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d103      	bne.n	800a3f8 <xQueueReceiveFromISR+0x38>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <xQueueReceiveFromISR+0x3c>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <xQueueReceiveFromISR+0x3e>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <xQueueReceiveFromISR+0x56>
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e7fe      	b.n	800a414 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a416:	f001 fb79 	bl	800bb0c <vPortValidateInterruptPriority>
	__asm volatile
 800a41a:	f3ef 8211 	mrs	r2, BASEPRI
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	61ba      	str	r2, [r7, #24]
 800a430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02f      	beq.n	800a4a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a450:	f000 f8d6 	bl	800a600 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	1e5a      	subs	r2, r3, #1
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a45c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a464:	d112      	bne.n	800a48c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d016      	beq.n	800a49c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	3310      	adds	r3, #16
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fdae 	bl	800afd4 <xTaskRemoveFromEventList>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00b      	beq.n	800a49c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	e007      	b.n	800a49c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a490:	3301      	adds	r3, #1
 800a492:	b2db      	uxtb	r3, r3
 800a494:	b25a      	sxtb	r2, r3
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a49c:	2301      	movs	r3, #1
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a0:	e001      	b.n	800a4a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3738      	adds	r7, #56	; 0x38
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d109      	bne.n	800a4e0 <vQueueDelete+0x26>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60bb      	str	r3, [r7, #8]
 800a4de:	e7fe      	b.n	800a4de <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f933 	bl	800a74c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f001 fc09 	bl	800bd08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1c3 0307 	rsb	r3, r3, #7
 800a518:	60fb      	str	r3, [r7, #12]
 800a51a:	e001      	b.n	800a520 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a520:	68fb      	ldr	r3, [r7, #12]
	}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	bc80      	pop	{r7}
 800a52a:	4770      	bx	lr

0800a52c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d14d      	bne.n	800a5ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 ff9a 	bl	800b490 <xTaskPriorityDisinherit>
 800a55c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]
 800a564:	e043      	b.n	800a5ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d119      	bne.n	800a5a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6898      	ldr	r0, [r3, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	461a      	mov	r2, r3
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	f001 fcfc 	bl	800bf74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a584:	441a      	add	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d32b      	bcc.n	800a5ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]
 800a59e:	e026      	b.n	800a5ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68d8      	ldr	r0, [r3, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	f001 fce2 	bl	800bf74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	68da      	ldr	r2, [r3, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	425b      	negs	r3, r3
 800a5ba:	441a      	add	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d207      	bcs.n	800a5dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	441a      	add	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d105      	bne.n	800a5ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5f6:	697b      	ldr	r3, [r7, #20]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d018      	beq.n	800a644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	441a      	add	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68da      	ldr	r2, [r3, #12]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d303      	bcc.n	800a634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68d9      	ldr	r1, [r3, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	461a      	mov	r2, r3
 800a63e:	6838      	ldr	r0, [r7, #0]
 800a640:	f001 fc98 	bl	800bf74 <memcpy>
	}
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a654:	f001 f9a0 	bl	800b998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a65e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a660:	e011      	b.n	800a686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b00      	cmp	r3, #0
 800a668:	d012      	beq.n	800a690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3324      	adds	r3, #36	; 0x24
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 fcb0 	bl	800afd4 <xTaskRemoveFromEventList>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a67a:	f000 fd83 	bl	800b184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	3b01      	subs	r3, #1
 800a682:	b2db      	uxtb	r3, r3
 800a684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dce9      	bgt.n	800a662 <prvUnlockQueue+0x16>
 800a68e:	e000      	b.n	800a692 <prvUnlockQueue+0x46>
					break;
 800a690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	22ff      	movs	r2, #255	; 0xff
 800a696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a69a:	f001 f9ab 	bl	800b9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a69e:	f001 f97b 	bl	800b998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6aa:	e011      	b.n	800a6d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d012      	beq.n	800a6da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3310      	adds	r3, #16
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fc8b 	bl	800afd4 <xTaskRemoveFromEventList>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6c4:	f000 fd5e 	bl	800b184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dce9      	bgt.n	800a6ac <prvUnlockQueue+0x60>
 800a6d8:	e000      	b.n	800a6dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	22ff      	movs	r2, #255	; 0xff
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6e4:	f001 f986 	bl	800b9f4 <vPortExitCritical>
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6f8:	f001 f94e 	bl	800b998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	e001      	b.n	800a70e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a70e:	f001 f971 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a724:	f001 f938 	bl	800b998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a730:	429a      	cmp	r2, r3
 800a732:	d102      	bne.n	800a73a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a734:	2301      	movs	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	e001      	b.n	800a73e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a73e:	f001 f959 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 800a742:	68fb      	ldr	r3, [r7, #12]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e016      	b.n	800a788 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a75a:	4a0f      	ldr	r2, [pc, #60]	; (800a798 <vQueueUnregisterQueue+0x4c>)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	4413      	add	r3, r2
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	429a      	cmp	r2, r3
 800a768:	d10b      	bne.n	800a782 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a76a:	4a0b      	ldr	r2, [pc, #44]	; (800a798 <vQueueUnregisterQueue+0x4c>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2100      	movs	r1, #0
 800a770:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a774:	4a08      	ldr	r2, [pc, #32]	; (800a798 <vQueueUnregisterQueue+0x4c>)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	2200      	movs	r2, #0
 800a77e:	605a      	str	r2, [r3, #4]
				break;
 800a780:	e005      	b.n	800a78e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b07      	cmp	r3, #7
 800a78c:	d9e5      	bls.n	800a75a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a78e:	bf00      	nop
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr
 800a798:	200018cc 	.word	0x200018cc

0800a79c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08e      	sub	sp, #56	; 0x38
 800a7a0:	af04      	add	r7, sp, #16
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <xTaskCreateStatic+0x28>
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	623b      	str	r3, [r7, #32]
 800a7c2:	e7fe      	b.n	800a7c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <xTaskCreateStatic+0x42>
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e7fe      	b.n	800a7dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7de:	2354      	movs	r3, #84	; 0x54
 800a7e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	2b54      	cmp	r3, #84	; 0x54
 800a7e6:	d009      	beq.n	800a7fc <xTaskCreateStatic+0x60>
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e7fe      	b.n	800a7fa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d01e      	beq.n	800a840 <xTaskCreateStatic+0xa4>
 800a802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01b      	beq.n	800a840 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	2202      	movs	r2, #2
 800a816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a81a:	2300      	movs	r3, #0
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	f107 0314 	add.w	r3, r7, #20
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 f850 	bl	800a8d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a83a:	f000 f8cb 	bl	800a9d4 <prvAddNewTaskToReadyList>
 800a83e:	e001      	b.n	800a844 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a844:	697b      	ldr	r3, [r7, #20]
	}
 800a846:	4618      	mov	r0, r3
 800a848:	3728      	adds	r7, #40	; 0x28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b08c      	sub	sp, #48	; 0x30
 800a852:	af04      	add	r7, sp, #16
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	603b      	str	r3, [r7, #0]
 800a85a:	4613      	mov	r3, r2
 800a85c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4618      	mov	r0, r3
 800a864:	f001 f98e 	bl	800bb84 <pvPortMalloc>
 800a868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00e      	beq.n	800a88e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a870:	2054      	movs	r0, #84	; 0x54
 800a872:	f001 f987 	bl	800bb84 <pvPortMalloc>
 800a876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	631a      	str	r2, [r3, #48]	; 0x30
 800a884:	e005      	b.n	800a892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a886:	6978      	ldr	r0, [r7, #20]
 800a888:	f001 fa3e 	bl	800bd08 <vPortFree>
 800a88c:	e001      	b.n	800a892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d017      	beq.n	800a8c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8a0:	88fa      	ldrh	r2, [r7, #6]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9303      	str	r3, [sp, #12]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	9302      	str	r3, [sp, #8]
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	68b9      	ldr	r1, [r7, #8]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f80e 	bl	800a8d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8bc:	69f8      	ldr	r0, [r7, #28]
 800a8be:	f000 f889 	bl	800a9d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	61bb      	str	r3, [r7, #24]
 800a8c6:	e002      	b.n	800a8ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8ce:	69bb      	ldr	r3, [r7, #24]
	}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3720      	adds	r7, #32
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	f023 0307 	bic.w	r3, r3, #7
 800a8fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b00      	cmp	r3, #0
 800a908:	d009      	beq.n	800a91e <prvInitialiseNewTask+0x46>
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e7fe      	b.n	800a91c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a91e:	2300      	movs	r3, #0
 800a920:	61fb      	str	r3, [r7, #28]
 800a922:	e012      	b.n	800a94a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	4413      	add	r3, r2
 800a92a:	7819      	ldrb	r1, [r3, #0]
 800a92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	3334      	adds	r3, #52	; 0x34
 800a934:	460a      	mov	r2, r1
 800a936:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	4413      	add	r3, r2
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d006      	beq.n	800a952 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	3301      	adds	r3, #1
 800a948:	61fb      	str	r3, [r7, #28]
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2b0f      	cmp	r3, #15
 800a94e:	d9e9      	bls.n	800a924 <prvInitialiseNewTask+0x4c>
 800a950:	e000      	b.n	800a954 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a952:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	2b06      	cmp	r3, #6
 800a960:	d901      	bls.n	800a966 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a962:	2306      	movs	r3, #6
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a96a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a970:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	2200      	movs	r2, #0
 800a976:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fe ff5c 	bl	800983a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	3318      	adds	r3, #24
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe ff57 	bl	800983a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a990:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	f1c3 0207 	rsb	r2, r3, #7
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	68f9      	ldr	r1, [r7, #12]
 800a9b4:	69b8      	ldr	r0, [r7, #24]
 800a9b6:	f000 ff07 	bl	800b7c8 <pxPortInitialiseStack>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9cc:	bf00      	nop
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9dc:	f000 ffdc 	bl	800b998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9e0:	4b2a      	ldr	r3, [pc, #168]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	4a29      	ldr	r2, [pc, #164]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ea:	4b29      	ldr	r3, [pc, #164]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9f2:	4a27      	ldr	r2, [pc, #156]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9f8:	4b24      	ldr	r3, [pc, #144]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d110      	bne.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa00:	f000 fbe4 	bl	800b1cc <prvInitialiseTaskLists>
 800aa04:	e00d      	b.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa06:	4b23      	ldr	r3, [pc, #140]	; (800aa94 <prvAddNewTaskToReadyList+0xc0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d109      	bne.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa0e:	4b20      	ldr	r3, [pc, #128]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d802      	bhi.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa1c:	4a1c      	ldr	r2, [pc, #112]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <prvAddNewTaskToReadyList+0xc4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <prvAddNewTaskToReadyList+0xc4>)
 800aa2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <prvAddNewTaskToReadyList+0xc8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <prvAddNewTaskToReadyList+0xc8>)
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4a15      	ldr	r2, [pc, #84]	; (800aaa0 <prvAddNewTaskToReadyList+0xcc>)
 800aa4c:	441a      	add	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7fe fefc 	bl	8009852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa5a:	f000 ffcb 	bl	800b9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <prvAddNewTaskToReadyList+0xc0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d207      	bcs.n	800aa84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <prvAddNewTaskToReadyList+0xd0>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000690 	.word	0x20000690
 800aa90:	20000590 	.word	0x20000590
 800aa94:	2000069c 	.word	0x2000069c
 800aa98:	200006ac 	.word	0x200006ac
 800aa9c:	20000698 	.word	0x20000698
 800aaa0:	20000594 	.word	0x20000594
 800aaa4:	e000ed04 	.word	0xe000ed04

0800aaa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d016      	beq.n	800aae8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <vTaskDelay+0x60>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d009      	beq.n	800aad6 <vTaskDelay+0x2e>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	e7fe      	b.n	800aad4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800aad6:	f000 f879 	bl	800abcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aada:	2100      	movs	r1, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fe0d 	bl	800b6fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aae2:	f000 f881 	bl	800abe8 <xTaskResumeAll>
 800aae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d107      	bne.n	800aafe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <vTaskDelay+0x64>)
 800aaf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200006b8 	.word	0x200006b8
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	; 0x28
 800ab14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab1e:	463a      	mov	r2, r7
 800ab20:	1d39      	adds	r1, r7, #4
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f5 ff60 	bl	80009ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	9202      	str	r2, [sp, #8]
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	2300      	movs	r3, #0
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	460a      	mov	r2, r1
 800ab3e:	491d      	ldr	r1, [pc, #116]	; (800abb4 <vTaskStartScheduler+0xa4>)
 800ab40:	481d      	ldr	r0, [pc, #116]	; (800abb8 <vTaskStartScheduler+0xa8>)
 800ab42:	f7ff fe2b 	bl	800a79c <xTaskCreateStatic>
 800ab46:	4602      	mov	r2, r0
 800ab48:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <vTaskStartScheduler+0xac>)
 800ab4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab4c:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <vTaskStartScheduler+0xac>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e001      	b.n	800ab5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d115      	bne.n	800ab90 <vTaskStartScheduler+0x80>
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <vTaskStartScheduler+0xb0>)
 800ab78:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab7e:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <vTaskStartScheduler+0xb4>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ab84:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <vTaskStartScheduler+0xb8>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab8a:	f000 fe95 	bl	800b8b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab8e:	e00d      	b.n	800abac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d109      	bne.n	800abac <vTaskStartScheduler+0x9c>
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e7fe      	b.n	800abaa <vTaskStartScheduler+0x9a>
}
 800abac:	bf00      	nop
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	0800c0b8 	.word	0x0800c0b8
 800abb8:	0800b19d 	.word	0x0800b19d
 800abbc:	200006b4 	.word	0x200006b4
 800abc0:	200006b0 	.word	0x200006b0
 800abc4:	2000069c 	.word	0x2000069c
 800abc8:	20000694 	.word	0x20000694

0800abcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <vTaskSuspendAll+0x18>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	4a03      	ldr	r2, [pc, #12]	; (800abe4 <vTaskSuspendAll+0x18>)
 800abd8:	6013      	str	r3, [r2, #0]
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	bc80      	pop	{r7}
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	200006b8 	.word	0x200006b8

0800abe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abf6:	4b41      	ldr	r3, [pc, #260]	; (800acfc <xTaskResumeAll+0x114>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d109      	bne.n	800ac12 <xTaskResumeAll+0x2a>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	e7fe      	b.n	800ac10 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac12:	f000 fec1 	bl	800b998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac16:	4b39      	ldr	r3, [pc, #228]	; (800acfc <xTaskResumeAll+0x114>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	4a37      	ldr	r2, [pc, #220]	; (800acfc <xTaskResumeAll+0x114>)
 800ac1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac20:	4b36      	ldr	r3, [pc, #216]	; (800acfc <xTaskResumeAll+0x114>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d161      	bne.n	800acec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac28:	4b35      	ldr	r3, [pc, #212]	; (800ad00 <xTaskResumeAll+0x118>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d05d      	beq.n	800acec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac30:	e02e      	b.n	800ac90 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac32:	4b34      	ldr	r3, [pc, #208]	; (800ad04 <xTaskResumeAll+0x11c>)
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fe62 	bl	8009908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3304      	adds	r3, #4
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe fe5d 	bl	8009908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	2201      	movs	r2, #1
 800ac54:	409a      	lsls	r2, r3
 800ac56:	4b2c      	ldr	r3, [pc, #176]	; (800ad08 <xTaskResumeAll+0x120>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	4a2a      	ldr	r2, [pc, #168]	; (800ad08 <xTaskResumeAll+0x120>)
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <xTaskResumeAll+0x124>)
 800ac6e:	441a      	add	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3304      	adds	r3, #4
 800ac74:	4619      	mov	r1, r3
 800ac76:	4610      	mov	r0, r2
 800ac78:	f7fe fdeb 	bl	8009852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4b23      	ldr	r3, [pc, #140]	; (800ad10 <xTaskResumeAll+0x128>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d302      	bcc.n	800ac90 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800ac8a:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <xTaskResumeAll+0x12c>)
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac90:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <xTaskResumeAll+0x11c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1cc      	bne.n	800ac32 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac9e:	f000 fb2f 	bl	800b300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aca2:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <xTaskResumeAll+0x130>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d010      	beq.n	800acd0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acae:	f000 f857 	bl	800ad60 <xTaskIncrementTick>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800acb8:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <xTaskResumeAll+0x12c>)
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1f1      	bne.n	800acae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <xTaskResumeAll+0x130>)
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acd0:	4b10      	ldr	r3, [pc, #64]	; (800ad14 <xTaskResumeAll+0x12c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d009      	beq.n	800acec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acdc:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <xTaskResumeAll+0x134>)
 800acde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acec:	f000 fe82 	bl	800b9f4 <vPortExitCritical>

	return xAlreadyYielded;
 800acf0:	68bb      	ldr	r3, [r7, #8]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	200006b8 	.word	0x200006b8
 800ad00:	20000690 	.word	0x20000690
 800ad04:	20000650 	.word	0x20000650
 800ad08:	20000698 	.word	0x20000698
 800ad0c:	20000594 	.word	0x20000594
 800ad10:	20000590 	.word	0x20000590
 800ad14:	200006a4 	.word	0x200006a4
 800ad18:	200006a0 	.word	0x200006a0
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad26:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <xTaskGetTickCount+0x18>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad2c:	687b      	ldr	r3, [r7, #4]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bc80      	pop	{r7}
 800ad36:	4770      	bx	lr
 800ad38:	20000694 	.word	0x20000694

0800ad3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad42:	f000 fee3 	bl	800bb0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ad46:	2300      	movs	r3, #0
 800ad48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ad4a:	4b04      	ldr	r3, [pc, #16]	; (800ad5c <xTaskGetTickCountFromISR+0x20>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad50:	683b      	ldr	r3, [r7, #0]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000694 	.word	0x20000694

0800ad60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6a:	4b50      	ldr	r3, [pc, #320]	; (800aeac <xTaskIncrementTick+0x14c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f040 808c 	bne.w	800ae8c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad74:	4b4e      	ldr	r3, [pc, #312]	; (800aeb0 <xTaskIncrementTick+0x150>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad7c:	4a4c      	ldr	r2, [pc, #304]	; (800aeb0 <xTaskIncrementTick+0x150>)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11f      	bne.n	800adc8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad88:	4b4a      	ldr	r3, [pc, #296]	; (800aeb4 <xTaskIncrementTick+0x154>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d009      	beq.n	800ada6 <xTaskIncrementTick+0x46>
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	e7fe      	b.n	800ada4 <xTaskIncrementTick+0x44>
 800ada6:	4b43      	ldr	r3, [pc, #268]	; (800aeb4 <xTaskIncrementTick+0x154>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <xTaskIncrementTick+0x158>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a40      	ldr	r2, [pc, #256]	; (800aeb4 <xTaskIncrementTick+0x154>)
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	4a40      	ldr	r2, [pc, #256]	; (800aeb8 <xTaskIncrementTick+0x158>)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	4b40      	ldr	r3, [pc, #256]	; (800aebc <xTaskIncrementTick+0x15c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	4a3e      	ldr	r2, [pc, #248]	; (800aebc <xTaskIncrementTick+0x15c>)
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	f000 fa9c 	bl	800b300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adc8:	4b3d      	ldr	r3, [pc, #244]	; (800aec0 <xTaskIncrementTick+0x160>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	429a      	cmp	r2, r3
 800add0:	d34d      	bcc.n	800ae6e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add2:	4b38      	ldr	r3, [pc, #224]	; (800aeb4 <xTaskIncrementTick+0x154>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <xTaskIncrementTick+0x80>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <xTaskIncrementTick+0x82>
 800ade0:	2300      	movs	r3, #0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade6:	4b36      	ldr	r3, [pc, #216]	; (800aec0 <xTaskIncrementTick+0x160>)
 800ade8:	f04f 32ff 	mov.w	r2, #4294967295
 800adec:	601a      	str	r2, [r3, #0]
					break;
 800adee:	e03e      	b.n	800ae6e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800adf0:	4b30      	ldr	r3, [pc, #192]	; (800aeb4 <xTaskIncrementTick+0x154>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d203      	bcs.n	800ae10 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae08:	4a2d      	ldr	r2, [pc, #180]	; (800aec0 <xTaskIncrementTick+0x160>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6013      	str	r3, [r2, #0]
						break;
 800ae0e:	e02e      	b.n	800ae6e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe fd77 	bl	8009908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d004      	beq.n	800ae2c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	3318      	adds	r3, #24
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fd6e 	bl	8009908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	2201      	movs	r2, #1
 800ae32:	409a      	lsls	r2, r3
 800ae34:	4b23      	ldr	r3, [pc, #140]	; (800aec4 <xTaskIncrementTick+0x164>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	4a22      	ldr	r2, [pc, #136]	; (800aec4 <xTaskIncrementTick+0x164>)
 800ae3c:	6013      	str	r3, [r2, #0]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4a1f      	ldr	r2, [pc, #124]	; (800aec8 <xTaskIncrementTick+0x168>)
 800ae4c:	441a      	add	r2, r3
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	3304      	adds	r3, #4
 800ae52:	4619      	mov	r1, r3
 800ae54:	4610      	mov	r0, r2
 800ae56:	f7fe fcfc 	bl	8009852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5e:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <xTaskIncrementTick+0x16c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d3b4      	bcc.n	800add2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae6c:	e7b1      	b.n	800add2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae6e:	4b17      	ldr	r3, [pc, #92]	; (800aecc <xTaskIncrementTick+0x16c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae74:	4914      	ldr	r1, [pc, #80]	; (800aec8 <xTaskIncrementTick+0x168>)
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	440b      	add	r3, r1
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d907      	bls.n	800ae96 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ae86:	2301      	movs	r3, #1
 800ae88:	617b      	str	r3, [r7, #20]
 800ae8a:	e004      	b.n	800ae96 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae8c:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <xTaskIncrementTick+0x170>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	4a0f      	ldr	r2, [pc, #60]	; (800aed0 <xTaskIncrementTick+0x170>)
 800ae94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <xTaskIncrementTick+0x174>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aea2:	697b      	ldr	r3, [r7, #20]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	200006b8 	.word	0x200006b8
 800aeb0:	20000694 	.word	0x20000694
 800aeb4:	20000648 	.word	0x20000648
 800aeb8:	2000064c 	.word	0x2000064c
 800aebc:	200006a8 	.word	0x200006a8
 800aec0:	200006b0 	.word	0x200006b0
 800aec4:	20000698 	.word	0x20000698
 800aec8:	20000594 	.word	0x20000594
 800aecc:	20000590 	.word	0x20000590
 800aed0:	200006a0 	.word	0x200006a0
 800aed4:	200006a4 	.word	0x200006a4

0800aed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aede:	4b26      	ldr	r3, [pc, #152]	; (800af78 <vTaskSwitchContext+0xa0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aee6:	4b25      	ldr	r3, [pc, #148]	; (800af7c <vTaskSwitchContext+0xa4>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aeec:	e03e      	b.n	800af6c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800aeee:	4b23      	ldr	r3, [pc, #140]	; (800af7c <vTaskSwitchContext+0xa4>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800aef4:	4b22      	ldr	r3, [pc, #136]	; (800af80 <vTaskSwitchContext+0xa8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	fab3 f383 	clz	r3, r3
 800af00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af02:	7afb      	ldrb	r3, [r7, #11]
 800af04:	f1c3 031f 	rsb	r3, r3, #31
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	491e      	ldr	r1, [pc, #120]	; (800af84 <vTaskSwitchContext+0xac>)
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <vTaskSwitchContext+0x5a>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e7fe      	b.n	800af30 <vTaskSwitchContext+0x58>
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4a11      	ldr	r2, [pc, #68]	; (800af84 <vTaskSwitchContext+0xac>)
 800af3e:	4413      	add	r3, r2
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	3308      	adds	r3, #8
 800af54:	429a      	cmp	r2, r3
 800af56:	d104      	bne.n	800af62 <vTaskSwitchContext+0x8a>
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	4a07      	ldr	r2, [pc, #28]	; (800af88 <vTaskSwitchContext+0xb0>)
 800af6a:	6013      	str	r3, [r2, #0]
}
 800af6c:	bf00      	nop
 800af6e:	371c      	adds	r7, #28
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	200006b8 	.word	0x200006b8
 800af7c:	200006a4 	.word	0x200006a4
 800af80:	20000698 	.word	0x20000698
 800af84:	20000594 	.word	0x20000594
 800af88:	20000590 	.word	0x20000590

0800af8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <vTaskPlaceOnEventList+0x24>
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	e7fe      	b.n	800afae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afb0:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <vTaskPlaceOnEventList+0x44>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3318      	adds	r3, #24
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7fe fc6d 	bl	8009898 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afbe:	2101      	movs	r1, #1
 800afc0:	6838      	ldr	r0, [r7, #0]
 800afc2:	f000 fb9b 	bl	800b6fc <prvAddCurrentTaskToDelayedList>
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000590 	.word	0x20000590

0800afd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <xTaskRemoveFromEventList+0x2a>
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e7fe      	b.n	800affc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	3318      	adds	r3, #24
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fc80 	bl	8009908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b008:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <xTaskRemoveFromEventList+0xac>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11c      	bne.n	800b04a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	3304      	adds	r3, #4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fc77 	bl	8009908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	2201      	movs	r2, #1
 800b020:	409a      	lsls	r2, r3
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <xTaskRemoveFromEventList+0xb0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4313      	orrs	r3, r2
 800b028:	4a16      	ldr	r2, [pc, #88]	; (800b084 <xTaskRemoveFromEventList+0xb0>)
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4a13      	ldr	r2, [pc, #76]	; (800b088 <xTaskRemoveFromEventList+0xb4>)
 800b03a:	441a      	add	r2, r3
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	3304      	adds	r3, #4
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	f7fe fc05 	bl	8009852 <vListInsertEnd>
 800b048:	e005      	b.n	800b056 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	3318      	adds	r3, #24
 800b04e:	4619      	mov	r1, r3
 800b050:	480e      	ldr	r0, [pc, #56]	; (800b08c <xTaskRemoveFromEventList+0xb8>)
 800b052:	f7fe fbfe 	bl	8009852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05a:	4b0d      	ldr	r3, [pc, #52]	; (800b090 <xTaskRemoveFromEventList+0xbc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	429a      	cmp	r2, r3
 800b062:	d905      	bls.n	800b070 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b068:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <xTaskRemoveFromEventList+0xc0>)
 800b06a:	2201      	movs	r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	e001      	b.n	800b074 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b070:	2300      	movs	r3, #0
 800b072:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b074:	697b      	ldr	r3, [r7, #20]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200006b8 	.word	0x200006b8
 800b084:	20000698 	.word	0x20000698
 800b088:	20000594 	.word	0x20000594
 800b08c:	20000650 	.word	0x20000650
 800b090:	20000590 	.word	0x20000590
 800b094:	200006a4 	.word	0x200006a4

0800b098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <vTaskInternalSetTimeOutState+0x24>)
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <vTaskInternalSetTimeOutState+0x28>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	605a      	str	r2, [r3, #4]
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bc80      	pop	{r7}
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	200006a8 	.word	0x200006a8
 800b0c0:	20000694 	.word	0x20000694

0800b0c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d109      	bne.n	800b0e8 <xTaskCheckForTimeOut+0x24>
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	e7fe      	b.n	800b0e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <xTaskCheckForTimeOut+0x3e>
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	e7fe      	b.n	800b100 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b102:	f000 fc49 	bl	800b998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b106:	4b1d      	ldr	r3, [pc, #116]	; (800b17c <xTaskCheckForTimeOut+0xb8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11e:	d102      	bne.n	800b126 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]
 800b124:	e023      	b.n	800b16e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <xTaskCheckForTimeOut+0xbc>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d007      	beq.n	800b142 <xTaskCheckForTimeOut+0x7e>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d302      	bcc.n	800b142 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b13c:	2301      	movs	r3, #1
 800b13e:	61fb      	str	r3, [r7, #28]
 800b140:	e015      	b.n	800b16e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d20b      	bcs.n	800b164 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff ff9d 	bl	800b098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	e004      	b.n	800b16e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b16e:	f000 fc41 	bl	800b9f4 <vPortExitCritical>

	return xReturn;
 800b172:	69fb      	ldr	r3, [r7, #28]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20000694 	.word	0x20000694
 800b180:	200006a8 	.word	0x200006a8

0800b184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b188:	4b03      	ldr	r3, [pc, #12]	; (800b198 <vTaskMissedYield+0x14>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	601a      	str	r2, [r3, #0]
}
 800b18e:	bf00      	nop
 800b190:	46bd      	mov	sp, r7
 800b192:	bc80      	pop	{r7}
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	200006a4 	.word	0x200006a4

0800b19c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1a4:	f000 f852 	bl	800b24c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1a8:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <prvIdleTask+0x28>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d9f9      	bls.n	800b1a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1b0:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <prvIdleTask+0x2c>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1c0:	e7f0      	b.n	800b1a4 <prvIdleTask+0x8>
 800b1c2:	bf00      	nop
 800b1c4:	20000594 	.word	0x20000594
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	607b      	str	r3, [r7, #4]
 800b1d6:	e00c      	b.n	800b1f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4a12      	ldr	r2, [pc, #72]	; (800b22c <prvInitialiseTaskLists+0x60>)
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe fb08 	bl	80097fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	607b      	str	r3, [r7, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b06      	cmp	r3, #6
 800b1f6:	d9ef      	bls.n	800b1d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1f8:	480d      	ldr	r0, [pc, #52]	; (800b230 <prvInitialiseTaskLists+0x64>)
 800b1fa:	f7fe faff 	bl	80097fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1fe:	480d      	ldr	r0, [pc, #52]	; (800b234 <prvInitialiseTaskLists+0x68>)
 800b200:	f7fe fafc 	bl	80097fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b204:	480c      	ldr	r0, [pc, #48]	; (800b238 <prvInitialiseTaskLists+0x6c>)
 800b206:	f7fe faf9 	bl	80097fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b20a:	480c      	ldr	r0, [pc, #48]	; (800b23c <prvInitialiseTaskLists+0x70>)
 800b20c:	f7fe faf6 	bl	80097fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b210:	480b      	ldr	r0, [pc, #44]	; (800b240 <prvInitialiseTaskLists+0x74>)
 800b212:	f7fe faf3 	bl	80097fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b216:	4b0b      	ldr	r3, [pc, #44]	; (800b244 <prvInitialiseTaskLists+0x78>)
 800b218:	4a05      	ldr	r2, [pc, #20]	; (800b230 <prvInitialiseTaskLists+0x64>)
 800b21a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <prvInitialiseTaskLists+0x7c>)
 800b21e:	4a05      	ldr	r2, [pc, #20]	; (800b234 <prvInitialiseTaskLists+0x68>)
 800b220:	601a      	str	r2, [r3, #0]
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20000594 	.word	0x20000594
 800b230:	20000620 	.word	0x20000620
 800b234:	20000634 	.word	0x20000634
 800b238:	20000650 	.word	0x20000650
 800b23c:	20000664 	.word	0x20000664
 800b240:	2000067c 	.word	0x2000067c
 800b244:	20000648 	.word	0x20000648
 800b248:	2000064c 	.word	0x2000064c

0800b24c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b252:	e019      	b.n	800b288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b254:	f000 fba0 	bl	800b998 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b258:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <prvCheckTasksWaitingTermination+0x4c>)
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fb4f 	bl	8009908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b26a:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <prvCheckTasksWaitingTermination+0x50>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3b01      	subs	r3, #1
 800b270:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <prvCheckTasksWaitingTermination+0x50>)
 800b272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b274:	4b0a      	ldr	r3, [pc, #40]	; (800b2a0 <prvCheckTasksWaitingTermination+0x54>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3b01      	subs	r3, #1
 800b27a:	4a09      	ldr	r2, [pc, #36]	; (800b2a0 <prvCheckTasksWaitingTermination+0x54>)
 800b27c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b27e:	f000 fbb9 	bl	800b9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f80e 	bl	800b2a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <prvCheckTasksWaitingTermination+0x54>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e1      	bne.n	800b254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20000664 	.word	0x20000664
 800b29c:	20000690 	.word	0x20000690
 800b2a0:	20000678 	.word	0x20000678

0800b2a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d108      	bne.n	800b2c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fd24 	bl	800bd08 <vPortFree>
				vPortFree( pxTCB );
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fd21 	bl	800bd08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2c6:	e017      	b.n	800b2f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d103      	bne.n	800b2da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fd18 	bl	800bd08 <vPortFree>
	}
 800b2d8:	e00e      	b.n	800b2f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d009      	beq.n	800b2f8 <prvDeleteTCB+0x54>
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	60fb      	str	r3, [r7, #12]
 800b2f6:	e7fe      	b.n	800b2f6 <prvDeleteTCB+0x52>
	}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b306:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <prvResetNextTaskUnblockTime+0x40>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <prvResetNextTaskUnblockTime+0x14>
 800b310:	2301      	movs	r3, #1
 800b312:	e000      	b.n	800b316 <prvResetNextTaskUnblockTime+0x16>
 800b314:	2300      	movs	r3, #0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b31a:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <prvResetNextTaskUnblockTime+0x44>)
 800b31c:	f04f 32ff 	mov.w	r2, #4294967295
 800b320:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b322:	e008      	b.n	800b336 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b324:	4b06      	ldr	r3, [pc, #24]	; (800b340 <prvResetNextTaskUnblockTime+0x40>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	4a04      	ldr	r2, [pc, #16]	; (800b344 <prvResetNextTaskUnblockTime+0x44>)
 800b334:	6013      	str	r3, [r2, #0]
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bc80      	pop	{r7}
 800b33e:	4770      	bx	lr
 800b340:	20000648 	.word	0x20000648
 800b344:	200006b0 	.word	0x200006b0

0800b348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b34e:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <xTaskGetSchedulerState+0x34>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d102      	bne.n	800b35c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b356:	2301      	movs	r3, #1
 800b358:	607b      	str	r3, [r7, #4]
 800b35a:	e008      	b.n	800b36e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b35c:	4b08      	ldr	r3, [pc, #32]	; (800b380 <xTaskGetSchedulerState+0x38>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b364:	2302      	movs	r3, #2
 800b366:	607b      	str	r3, [r7, #4]
 800b368:	e001      	b.n	800b36e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b36a:	2300      	movs	r3, #0
 800b36c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b36e:	687b      	ldr	r3, [r7, #4]
	}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	2000069c 	.word	0x2000069c
 800b380:	200006b8 	.word	0x200006b8

0800b384 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d06e      	beq.n	800b478 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39e:	4b39      	ldr	r3, [pc, #228]	; (800b484 <xTaskPriorityInherit+0x100>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d25e      	bcs.n	800b466 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db06      	blt.n	800b3be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b0:	4b34      	ldr	r3, [pc, #208]	; (800b484 <xTaskPriorityInherit+0x100>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	f1c3 0207 	rsb	r2, r3, #7
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6959      	ldr	r1, [r3, #20]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4a2e      	ldr	r2, [pc, #184]	; (800b488 <xTaskPriorityInherit+0x104>)
 800b3d0:	4413      	add	r3, r2
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	d101      	bne.n	800b3da <xTaskPriorityInherit+0x56>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e000      	b.n	800b3dc <xTaskPriorityInherit+0x58>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d03a      	beq.n	800b456 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fa8f 	bl	8009908 <uxListRemove>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d115      	bne.n	800b41c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f4:	4924      	ldr	r1, [pc, #144]	; (800b488 <xTaskPriorityInherit+0x104>)
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10a      	bne.n	800b41c <xTaskPriorityInherit+0x98>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	2201      	movs	r2, #1
 800b40c:	fa02 f303 	lsl.w	r3, r2, r3
 800b410:	43da      	mvns	r2, r3
 800b412:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <xTaskPriorityInherit+0x108>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4013      	ands	r3, r2
 800b418:	4a1c      	ldr	r2, [pc, #112]	; (800b48c <xTaskPriorityInherit+0x108>)
 800b41a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b41c:	4b19      	ldr	r3, [pc, #100]	; (800b484 <xTaskPriorityInherit+0x100>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42a:	2201      	movs	r2, #1
 800b42c:	409a      	lsls	r2, r3
 800b42e:	4b17      	ldr	r3, [pc, #92]	; (800b48c <xTaskPriorityInherit+0x108>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4313      	orrs	r3, r2
 800b434:	4a15      	ldr	r2, [pc, #84]	; (800b48c <xTaskPriorityInherit+0x108>)
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4a10      	ldr	r2, [pc, #64]	; (800b488 <xTaskPriorityInherit+0x104>)
 800b446:	441a      	add	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3304      	adds	r3, #4
 800b44c:	4619      	mov	r1, r3
 800b44e:	4610      	mov	r0, r2
 800b450:	f7fe f9ff 	bl	8009852 <vListInsertEnd>
 800b454:	e004      	b.n	800b460 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <xTaskPriorityInherit+0x100>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e008      	b.n	800b478 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b46a:	4b06      	ldr	r3, [pc, #24]	; (800b484 <xTaskPriorityInherit+0x100>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	429a      	cmp	r2, r3
 800b472:	d201      	bcs.n	800b478 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b478:	68fb      	ldr	r3, [r7, #12]
	}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	20000590 	.word	0x20000590
 800b488:	20000594 	.word	0x20000594
 800b48c:	20000698 	.word	0x20000698

0800b490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d06c      	beq.n	800b580 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4a6:	4b39      	ldr	r3, [pc, #228]	; (800b58c <xTaskPriorityDisinherit+0xfc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d009      	beq.n	800b4c4 <xTaskPriorityDisinherit+0x34>
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	e7fe      	b.n	800b4c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <xTaskPriorityDisinherit+0x50>
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	60bb      	str	r3, [r7, #8]
 800b4de:	e7fe      	b.n	800b4de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4e4:	1e5a      	subs	r2, r3, #1
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d044      	beq.n	800b580 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d140      	bne.n	800b580 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3304      	adds	r3, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fa00 	bl	8009908 <uxListRemove>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d115      	bne.n	800b53a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b512:	491f      	ldr	r1, [pc, #124]	; (800b590 <xTaskPriorityDisinherit+0x100>)
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xTaskPriorityDisinherit+0xaa>
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	2201      	movs	r2, #1
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	43da      	mvns	r2, r3
 800b530:	4b18      	ldr	r3, [pc, #96]	; (800b594 <xTaskPriorityDisinherit+0x104>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4013      	ands	r3, r2
 800b536:	4a17      	ldr	r2, [pc, #92]	; (800b594 <xTaskPriorityDisinherit+0x104>)
 800b538:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b546:	f1c3 0207 	rsb	r2, r3, #7
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	2201      	movs	r2, #1
 800b554:	409a      	lsls	r2, r3
 800b556:	4b0f      	ldr	r3, [pc, #60]	; (800b594 <xTaskPriorityDisinherit+0x104>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	4a0d      	ldr	r2, [pc, #52]	; (800b594 <xTaskPriorityDisinherit+0x104>)
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b564:	4613      	mov	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <xTaskPriorityDisinherit+0x100>)
 800b56e:	441a      	add	r2, r3
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	3304      	adds	r3, #4
 800b574:	4619      	mov	r1, r3
 800b576:	4610      	mov	r0, r2
 800b578:	f7fe f96b 	bl	8009852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b57c:	2301      	movs	r3, #1
 800b57e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b580:	697b      	ldr	r3, [r7, #20]
	}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20000590 	.word	0x20000590
 800b590:	20000594 	.word	0x20000594
 800b594:	20000698 	.word	0x20000698

0800b598 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8086 	beq.w	800b6be <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <vTaskPriorityDisinheritAfterTimeout+0x36>
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	e7fe      	b.n	800b5cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d902      	bls.n	800b5de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	e002      	b.n	800b5e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	69fa      	ldr	r2, [r7, #28]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d067      	beq.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d162      	bne.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b5f8:	4b33      	ldr	r3, [pc, #204]	; (800b6c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d109      	bne.n	800b616 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	60bb      	str	r3, [r7, #8]
 800b614:	e7fe      	b.n	800b614 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	db04      	blt.n	800b634 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f1c3 0207 	rsb	r2, r3, #7
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	6959      	ldr	r1, [r3, #20]
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4a22      	ldr	r2, [pc, #136]	; (800b6cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b644:	4413      	add	r3, r2
 800b646:	4299      	cmp	r1, r3
 800b648:	d101      	bne.n	800b64e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e000      	b.n	800b650 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b64e:	2300      	movs	r3, #0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d034      	beq.n	800b6be <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe f955 	bl	8009908 <uxListRemove>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d115      	bne.n	800b690 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b668:	4918      	ldr	r1, [pc, #96]	; (800b6cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10a      	bne.n	800b690 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67e:	2201      	movs	r2, #1
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	43da      	mvns	r2, r3
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4013      	ands	r3, r2
 800b68c:	4a10      	ldr	r2, [pc, #64]	; (800b6d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b68e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	2201      	movs	r2, #1
 800b696:	409a      	lsls	r2, r3
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	4a0c      	ldr	r2, [pc, #48]	; (800b6d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4a07      	ldr	r2, [pc, #28]	; (800b6cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b6b0:	441a      	add	r2, r3
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	f7fe f8ca 	bl	8009852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6be:	bf00      	nop
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000590 	.word	0x20000590
 800b6cc:	20000594 	.word	0x20000594
 800b6d0:	20000698 	.word	0x20000698

0800b6d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b6d8:	4b07      	ldr	r3, [pc, #28]	; (800b6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b6e0:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6e6:	3201      	adds	r2, #1
 800b6e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
	}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	20000590 	.word	0x20000590

0800b6fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b706:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b70c:	4b28      	ldr	r3, [pc, #160]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3304      	adds	r3, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe f8f8 	bl	8009908 <uxListRemove>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10b      	bne.n	800b736 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b71e:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	2201      	movs	r2, #1
 800b726:	fa02 f303 	lsl.w	r3, r2, r3
 800b72a:	43da      	mvns	r2, r3
 800b72c:	4b21      	ldr	r3, [pc, #132]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4013      	ands	r3, r2
 800b732:	4a20      	ldr	r2, [pc, #128]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b734:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d10a      	bne.n	800b754 <prvAddCurrentTaskToDelayedList+0x58>
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b744:	4b1a      	ldr	r3, [pc, #104]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3304      	adds	r3, #4
 800b74a:	4619      	mov	r1, r3
 800b74c:	481a      	ldr	r0, [pc, #104]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b74e:	f7fe f880 	bl	8009852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b752:	e026      	b.n	800b7a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4413      	add	r3, r2
 800b75a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b75c:	4b14      	ldr	r3, [pc, #80]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d209      	bcs.n	800b780 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b76c:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fe f88d 	bl	8009898 <vListInsert>
}
 800b77e:	e010      	b.n	800b7a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b780:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3304      	adds	r3, #4
 800b78a:	4619      	mov	r1, r3
 800b78c:	4610      	mov	r0, r2
 800b78e:	f7fe f883 	bl	8009898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d202      	bcs.n	800b7a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b79c:	4a09      	ldr	r2, [pc, #36]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	6013      	str	r3, [r2, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000694 	.word	0x20000694
 800b7b0:	20000590 	.word	0x20000590
 800b7b4:	20000698 	.word	0x20000698
 800b7b8:	2000067c 	.word	0x2000067c
 800b7bc:	2000064c 	.word	0x2000064c
 800b7c0:	20000648 	.word	0x20000648
 800b7c4:	200006b0 	.word	0x200006b0

0800b7c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3b04      	subs	r3, #4
 800b7e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f023 0201 	bic.w	r2, r3, #1
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <pxPortInitialiseStack+0x54>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3b14      	subs	r3, #20
 800b802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3b20      	subs	r3, #32
 800b80e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b810:	68fb      	ldr	r3, [r7, #12]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	0800b821 	.word	0x0800b821

0800b820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b826:	2300      	movs	r3, #0
 800b828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b82a:	4b10      	ldr	r3, [pc, #64]	; (800b86c <prvTaskExitError+0x4c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b832:	d009      	beq.n	800b848 <prvTaskExitError+0x28>
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e7fe      	b.n	800b846 <prvTaskExitError+0x26>
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b85a:	bf00      	nop
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0fc      	beq.n	800b85c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b862:	bf00      	nop
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	bc80      	pop	{r7}
 800b86a:	4770      	bx	lr
 800b86c:	20000054 	.word	0x20000054

0800b870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <pxCurrentTCBConst2>)
 800b872:	6819      	ldr	r1, [r3, #0]
 800b874:	6808      	ldr	r0, [r1, #0]
 800b876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b87a:	f380 8809 	msr	PSP, r0
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f04f 0000 	mov.w	r0, #0
 800b886:	f380 8811 	msr	BASEPRI, r0
 800b88a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b88e:	4770      	bx	lr

0800b890 <pxCurrentTCBConst2>:
 800b890:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop

0800b898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b898:	4806      	ldr	r0, [pc, #24]	; (800b8b4 <prvPortStartFirstTask+0x1c>)
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	6800      	ldr	r0, [r0, #0]
 800b89e:	f380 8808 	msr	MSP, r0
 800b8a2:	b662      	cpsie	i
 800b8a4:	b661      	cpsie	f
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	df00      	svc	0
 800b8b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8b2:	bf00      	nop
 800b8b4:	e000ed08 	.word	0xe000ed08

0800b8b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8be:	4b31      	ldr	r3, [pc, #196]	; (800b984 <xPortStartScheduler+0xcc>)
 800b8c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	22ff      	movs	r2, #255	; 0xff
 800b8ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	4b29      	ldr	r3, [pc, #164]	; (800b988 <xPortStartScheduler+0xd0>)
 800b8e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8e6:	4b29      	ldr	r3, [pc, #164]	; (800b98c <xPortStartScheduler+0xd4>)
 800b8e8:	2207      	movs	r2, #7
 800b8ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8ec:	e009      	b.n	800b902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b8ee:	4b27      	ldr	r3, [pc, #156]	; (800b98c <xPortStartScheduler+0xd4>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	4a25      	ldr	r2, [pc, #148]	; (800b98c <xPortStartScheduler+0xd4>)
 800b8f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	b2db      	uxtb	r3, r3
 800b906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90a:	2b80      	cmp	r3, #128	; 0x80
 800b90c:	d0ef      	beq.n	800b8ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b90e:	4b1f      	ldr	r3, [pc, #124]	; (800b98c <xPortStartScheduler+0xd4>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f1c3 0307 	rsb	r3, r3, #7
 800b916:	2b04      	cmp	r3, #4
 800b918:	d009      	beq.n	800b92e <xPortStartScheduler+0x76>
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	60bb      	str	r3, [r7, #8]
 800b92c:	e7fe      	b.n	800b92c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b92e:	4b17      	ldr	r3, [pc, #92]	; (800b98c <xPortStartScheduler+0xd4>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	4a15      	ldr	r2, [pc, #84]	; (800b98c <xPortStartScheduler+0xd4>)
 800b936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b938:	4b14      	ldr	r3, [pc, #80]	; (800b98c <xPortStartScheduler+0xd4>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b940:	4a12      	ldr	r2, [pc, #72]	; (800b98c <xPortStartScheduler+0xd4>)
 800b942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	b2da      	uxtb	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b94c:	4b10      	ldr	r3, [pc, #64]	; (800b990 <xPortStartScheduler+0xd8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a0f      	ldr	r2, [pc, #60]	; (800b990 <xPortStartScheduler+0xd8>)
 800b952:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b958:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <xPortStartScheduler+0xd8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a0c      	ldr	r2, [pc, #48]	; (800b990 <xPortStartScheduler+0xd8>)
 800b95e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b964:	f000 f8b0 	bl	800bac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <xPortStartScheduler+0xdc>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b96e:	f7ff ff93 	bl	800b898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b972:	f7ff fab1 	bl	800aed8 <vTaskSwitchContext>
	prvTaskExitError();
 800b976:	f7ff ff53 	bl	800b820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	e000e400 	.word	0xe000e400
 800b988:	200006bc 	.word	0x200006bc
 800b98c:	200006c0 	.word	0x200006c0
 800b990:	e000ed20 	.word	0xe000ed20
 800b994:	20000054 	.word	0x20000054

0800b998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9b0:	4b0e      	ldr	r3, [pc, #56]	; (800b9ec <vPortEnterCritical+0x54>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	4a0d      	ldr	r2, [pc, #52]	; (800b9ec <vPortEnterCritical+0x54>)
 800b9b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <vPortEnterCritical+0x54>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d10e      	bne.n	800b9e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <vPortEnterCritical+0x58>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d009      	beq.n	800b9e0 <vPortEnterCritical+0x48>
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	603b      	str	r3, [r7, #0]
 800b9de:	e7fe      	b.n	800b9de <vPortEnterCritical+0x46>
	}
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bc80      	pop	{r7}
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000054 	.word	0x20000054
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9fa:	4b10      	ldr	r3, [pc, #64]	; (800ba3c <vPortExitCritical+0x48>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d109      	bne.n	800ba16 <vPortExitCritical+0x22>
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	607b      	str	r3, [r7, #4]
 800ba14:	e7fe      	b.n	800ba14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <vPortExitCritical+0x48>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	4a07      	ldr	r2, [pc, #28]	; (800ba3c <vPortExitCritical+0x48>)
 800ba1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba20:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <vPortExitCritical+0x48>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d104      	bne.n	800ba32 <vPortExitCritical+0x3e>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba32:	bf00      	nop
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bc80      	pop	{r7}
 800ba3a:	4770      	bx	lr
 800ba3c:	20000054 	.word	0x20000054

0800ba40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba40:	f3ef 8009 	mrs	r0, PSP
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <pxCurrentTCBConst>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba50:	6010      	str	r0, [r2, #0]
 800ba52:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ba56:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba5a:	f380 8811 	msr	BASEPRI, r0
 800ba5e:	f7ff fa3b 	bl	800aed8 <vTaskSwitchContext>
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8811 	msr	BASEPRI, r0
 800ba6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba6e:	6819      	ldr	r1, [r3, #0]
 800ba70:	6808      	ldr	r0, [r1, #0]
 800ba72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba76:	f380 8809 	msr	PSP, r0
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	4770      	bx	lr

0800ba80 <pxCurrentTCBConst>:
 800ba80:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800baa0:	f7ff f95e 	bl	800ad60 <xTaskIncrementTick>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800baaa:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <SysTick_Handler+0x3c>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	e000ed04 	.word	0xe000ed04

0800bac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bacc:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <vPortSetupTimerInterrupt+0x30>)
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bad2:	4b0a      	ldr	r3, [pc, #40]	; (800bafc <vPortSetupTimerInterrupt+0x34>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bad8:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <vPortSetupTimerInterrupt+0x38>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a09      	ldr	r2, [pc, #36]	; (800bb04 <vPortSetupTimerInterrupt+0x3c>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	099b      	lsrs	r3, r3, #6
 800bae4:	4a08      	ldr	r2, [pc, #32]	; (800bb08 <vPortSetupTimerInterrupt+0x40>)
 800bae6:	3b01      	subs	r3, #1
 800bae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800baea:	4b03      	ldr	r3, [pc, #12]	; (800baf8 <vPortSetupTimerInterrupt+0x30>)
 800baec:	2207      	movs	r2, #7
 800baee:	601a      	str	r2, [r3, #0]
}
 800baf0:	bf00      	nop
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bc80      	pop	{r7}
 800baf6:	4770      	bx	lr
 800baf8:	e000e010 	.word	0xe000e010
 800bafc:	e000e018 	.word	0xe000e018
 800bb00:	20000044 	.word	0x20000044
 800bb04:	10624dd3 	.word	0x10624dd3
 800bb08:	e000e014 	.word	0xe000e014

0800bb0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb12:	f3ef 8305 	mrs	r3, IPSR
 800bb16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b0f      	cmp	r3, #15
 800bb1c:	d913      	bls.n	800bb46 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb1e:	4a15      	ldr	r2, [pc, #84]	; (800bb74 <vPortValidateInterruptPriority+0x68>)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4413      	add	r3, r2
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb28:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <vPortValidateInterruptPriority+0x6c>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	7afa      	ldrb	r2, [r7, #11]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d209      	bcs.n	800bb46 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	607b      	str	r3, [r7, #4]
 800bb44:	e7fe      	b.n	800bb44 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb46:	4b0d      	ldr	r3, [pc, #52]	; (800bb7c <vPortValidateInterruptPriority+0x70>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <vPortValidateInterruptPriority+0x74>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d909      	bls.n	800bb6a <vPortValidateInterruptPriority+0x5e>
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	603b      	str	r3, [r7, #0]
 800bb68:	e7fe      	b.n	800bb68 <vPortValidateInterruptPriority+0x5c>
	}
 800bb6a:	bf00      	nop
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr
 800bb74:	e000e3f0 	.word	0xe000e3f0
 800bb78:	200006bc 	.word	0x200006bc
 800bb7c:	e000ed0c 	.word	0xe000ed0c
 800bb80:	200006c0 	.word	0x200006c0

0800bb84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08a      	sub	sp, #40	; 0x28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb90:	f7ff f81c 	bl	800abcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb94:	4b57      	ldr	r3, [pc, #348]	; (800bcf4 <pvPortMalloc+0x170>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb9c:	f000 f90c 	bl	800bdb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bba0:	4b55      	ldr	r3, [pc, #340]	; (800bcf8 <pvPortMalloc+0x174>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4013      	ands	r3, r2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f040 808c 	bne.w	800bcc6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01c      	beq.n	800bbee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bbb4:	2208      	movs	r2, #8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4413      	add	r3, r2
 800bbba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d013      	beq.n	800bbee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f023 0307 	bic.w	r3, r3, #7
 800bbcc:	3308      	adds	r3, #8
 800bbce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f003 0307 	and.w	r3, r3, #7
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d009      	beq.n	800bbee <pvPortMalloc+0x6a>
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	e7fe      	b.n	800bbec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d068      	beq.n	800bcc6 <pvPortMalloc+0x142>
 800bbf4:	4b41      	ldr	r3, [pc, #260]	; (800bcfc <pvPortMalloc+0x178>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d863      	bhi.n	800bcc6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbfe:	4b40      	ldr	r3, [pc, #256]	; (800bd00 <pvPortMalloc+0x17c>)
 800bc00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc02:	4b3f      	ldr	r3, [pc, #252]	; (800bd00 <pvPortMalloc+0x17c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc08:	e004      	b.n	800bc14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d903      	bls.n	800bc26 <pvPortMalloc+0xa2>
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f1      	bne.n	800bc0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc26:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <pvPortMalloc+0x170>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d04a      	beq.n	800bcc6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2208      	movs	r2, #8
 800bc36:	4413      	add	r3, r2
 800bc38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	1ad2      	subs	r2, r2, r3
 800bc4a:	2308      	movs	r3, #8
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d91e      	bls.n	800bc90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4413      	add	r3, r2
 800bc58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d009      	beq.n	800bc78 <pvPortMalloc+0xf4>
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	613b      	str	r3, [r7, #16]
 800bc76:	e7fe      	b.n	800bc76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc8a:	69b8      	ldr	r0, [r7, #24]
 800bc8c:	f000 f8f6 	bl	800be7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc90:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <pvPortMalloc+0x178>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	4a18      	ldr	r2, [pc, #96]	; (800bcfc <pvPortMalloc+0x178>)
 800bc9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc9e:	4b17      	ldr	r3, [pc, #92]	; (800bcfc <pvPortMalloc+0x178>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b18      	ldr	r3, [pc, #96]	; (800bd04 <pvPortMalloc+0x180>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d203      	bcs.n	800bcb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcaa:	4b14      	ldr	r3, [pc, #80]	; (800bcfc <pvPortMalloc+0x178>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a15      	ldr	r2, [pc, #84]	; (800bd04 <pvPortMalloc+0x180>)
 800bcb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	4b10      	ldr	r3, [pc, #64]	; (800bcf8 <pvPortMalloc+0x174>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bcc6:	f7fe ff8f 	bl	800abe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	f003 0307 	and.w	r3, r3, #7
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <pvPortMalloc+0x164>
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e7fe      	b.n	800bce6 <pvPortMalloc+0x162>
	return pvReturn;
 800bce8:	69fb      	ldr	r3, [r7, #28]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3728      	adds	r7, #40	; 0x28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	200012cc 	.word	0x200012cc
 800bcf8:	200012d8 	.word	0x200012d8
 800bcfc:	200012d0 	.word	0x200012d0
 800bd00:	200012c4 	.word	0x200012c4
 800bd04:	200012d4 	.word	0x200012d4

0800bd08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d046      	beq.n	800bda8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	425b      	negs	r3, r3
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	4413      	add	r3, r2
 800bd22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	4b20      	ldr	r3, [pc, #128]	; (800bdb0 <vPortFree+0xa8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4013      	ands	r3, r2
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d109      	bne.n	800bd4a <vPortFree+0x42>
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	e7fe      	b.n	800bd48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d009      	beq.n	800bd66 <vPortFree+0x5e>
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	60bb      	str	r3, [r7, #8]
 800bd64:	e7fe      	b.n	800bd64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	4b11      	ldr	r3, [pc, #68]	; (800bdb0 <vPortFree+0xa8>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d019      	beq.n	800bda8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d115      	bne.n	800bda8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <vPortFree+0xa8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	43db      	mvns	r3, r3
 800bd86:	401a      	ands	r2, r3
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd8c:	f7fe ff1e 	bl	800abcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <vPortFree+0xac>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4413      	add	r3, r2
 800bd9a:	4a06      	ldr	r2, [pc, #24]	; (800bdb4 <vPortFree+0xac>)
 800bd9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd9e:	6938      	ldr	r0, [r7, #16]
 800bda0:	f000 f86c 	bl	800be7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bda4:	f7fe ff20 	bl	800abe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bda8:	bf00      	nop
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	200012d8 	.word	0x200012d8
 800bdb4:	200012d0 	.word	0x200012d0

0800bdb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bdc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdc4:	4b27      	ldr	r3, [pc, #156]	; (800be64 <prvHeapInit+0xac>)
 800bdc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00c      	beq.n	800bdec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3307      	adds	r3, #7
 800bdd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f023 0307 	bic.w	r3, r3, #7
 800bdde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	4a1f      	ldr	r2, [pc, #124]	; (800be64 <prvHeapInit+0xac>)
 800bde8:	4413      	add	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <prvHeapInit+0xb0>)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdf6:	4b1c      	ldr	r3, [pc, #112]	; (800be68 <prvHeapInit+0xb0>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	4413      	add	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be04:	2208      	movs	r2, #8
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0307 	bic.w	r3, r3, #7
 800be12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4a15      	ldr	r2, [pc, #84]	; (800be6c <prvHeapInit+0xb4>)
 800be18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be1a:	4b14      	ldr	r3, [pc, #80]	; (800be6c <prvHeapInit+0xb4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2200      	movs	r2, #0
 800be20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be22:	4b12      	ldr	r3, [pc, #72]	; (800be6c <prvHeapInit+0xb4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	1ad2      	subs	r2, r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <prvHeapInit+0xb4>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	4a0a      	ldr	r2, [pc, #40]	; (800be70 <prvHeapInit+0xb8>)
 800be46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	4a09      	ldr	r2, [pc, #36]	; (800be74 <prvHeapInit+0xbc>)
 800be4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be50:	4b09      	ldr	r3, [pc, #36]	; (800be78 <prvHeapInit+0xc0>)
 800be52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be56:	601a      	str	r2, [r3, #0]
}
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bc80      	pop	{r7}
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	200006c4 	.word	0x200006c4
 800be68:	200012c4 	.word	0x200012c4
 800be6c:	200012cc 	.word	0x200012cc
 800be70:	200012d4 	.word	0x200012d4
 800be74:	200012d0 	.word	0x200012d0
 800be78:	200012d8 	.word	0x200012d8

0800be7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be84:	4b27      	ldr	r3, [pc, #156]	; (800bf24 <prvInsertBlockIntoFreeList+0xa8>)
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	e002      	b.n	800be90 <prvInsertBlockIntoFreeList+0x14>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d8f7      	bhi.n	800be8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d108      	bne.n	800bebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	441a      	add	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	441a      	add	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d118      	bne.n	800bf04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	4b14      	ldr	r3, [pc, #80]	; (800bf28 <prvInsertBlockIntoFreeList+0xac>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d00d      	beq.n	800befa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	441a      	add	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e008      	b.n	800bf0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800befa:	4b0b      	ldr	r3, [pc, #44]	; (800bf28 <prvInsertBlockIntoFreeList+0xac>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	e003      	b.n	800bf0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d002      	beq.n	800bf1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr
 800bf24:	200012c4 	.word	0x200012c4
 800bf28:	200012cc 	.word	0x200012cc

0800bf2c <__libc_init_array>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	2500      	movs	r5, #0
 800bf30:	4e0c      	ldr	r6, [pc, #48]	; (800bf64 <__libc_init_array+0x38>)
 800bf32:	4c0d      	ldr	r4, [pc, #52]	; (800bf68 <__libc_init_array+0x3c>)
 800bf34:	1ba4      	subs	r4, r4, r6
 800bf36:	10a4      	asrs	r4, r4, #2
 800bf38:	42a5      	cmp	r5, r4
 800bf3a:	d109      	bne.n	800bf50 <__libc_init_array+0x24>
 800bf3c:	f000 f82e 	bl	800bf9c <_init>
 800bf40:	2500      	movs	r5, #0
 800bf42:	4e0a      	ldr	r6, [pc, #40]	; (800bf6c <__libc_init_array+0x40>)
 800bf44:	4c0a      	ldr	r4, [pc, #40]	; (800bf70 <__libc_init_array+0x44>)
 800bf46:	1ba4      	subs	r4, r4, r6
 800bf48:	10a4      	asrs	r4, r4, #2
 800bf4a:	42a5      	cmp	r5, r4
 800bf4c:	d105      	bne.n	800bf5a <__libc_init_array+0x2e>
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf54:	4798      	blx	r3
 800bf56:	3501      	adds	r5, #1
 800bf58:	e7ee      	b.n	800bf38 <__libc_init_array+0xc>
 800bf5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf5e:	4798      	blx	r3
 800bf60:	3501      	adds	r5, #1
 800bf62:	e7f2      	b.n	800bf4a <__libc_init_array+0x1e>
 800bf64:	0800c178 	.word	0x0800c178
 800bf68:	0800c178 	.word	0x0800c178
 800bf6c:	0800c178 	.word	0x0800c178
 800bf70:	0800c17c 	.word	0x0800c17c

0800bf74 <memcpy>:
 800bf74:	b510      	push	{r4, lr}
 800bf76:	1e43      	subs	r3, r0, #1
 800bf78:	440a      	add	r2, r1
 800bf7a:	4291      	cmp	r1, r2
 800bf7c:	d100      	bne.n	800bf80 <memcpy+0xc>
 800bf7e:	bd10      	pop	{r4, pc}
 800bf80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf88:	e7f7      	b.n	800bf7a <memcpy+0x6>

0800bf8a <memset>:
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	4402      	add	r2, r0
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d100      	bne.n	800bf94 <memset+0xa>
 800bf92:	4770      	bx	lr
 800bf94:	f803 1b01 	strb.w	r1, [r3], #1
 800bf98:	e7f9      	b.n	800bf8e <memset+0x4>
	...

0800bf9c <_init>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	bf00      	nop
 800bfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa2:	bc08      	pop	{r3}
 800bfa4:	469e      	mov	lr, r3
 800bfa6:	4770      	bx	lr

0800bfa8 <_fini>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	bf00      	nop
 800bfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfae:	bc08      	pop	{r3}
 800bfb0:	469e      	mov	lr, r3
 800bfb2:	4770      	bx	lr
