
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08009be4  08009be4  00019be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08009d80  08009d80  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d80  08009d80  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d80  08009d80  00019d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08009d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001848  20000058  08009de0  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  08009de0  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb0d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f87  00000000  00000000  0003cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  00042090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba98  00000000  00000000  00043420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014112  00000000  00000000  0005eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a007c  00000000  00000000  00072fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  001130c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000058 	.word	0x20000058
 800015c:	00000000 	.word	0x00000000
 8000160:	08009bcc 	.word	0x08009bcc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000005c 	.word	0x2000005c
 800017c:	08009bcc 	.word	0x08009bcc

08000180 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000186:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <MX_DMA_Init+0x38>)
 8000188:	69db      	ldr	r3, [r3, #28]
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <MX_DMA_Init+0x38>)
 800018c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000190:	61d3      	str	r3, [r2, #28]
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <MX_DMA_Init+0x38>)
 8000194:	69db      	ldr	r3, [r3, #28]
 8000196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2035      	movs	r0, #53	; 0x35
 80001a4:	f000 fca3 	bl	8000aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80001a8:	2035      	movs	r0, #53	; 0x35
 80001aa:	f000 fcbc 	bl	8000b26 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40023800 	.word	0x40023800

080001bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <vApplicationGetIdleTaskMemory+0x28>)
 80001cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000078 	.word	0x20000078
 80001e8:	200000cc 	.word	0x200000cc

080001ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b096      	sub	sp, #88	; 0x58
 80001f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <MX_FREERTOS_Init+0x7c>)
 80001f4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f006 feff 	bl	8007010 <osThreadCreate>
 8000212:	4602      	mov	r2, r0
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <MX_FREERTOS_Init+0x80>)
 8000216:	601a      	str	r2, [r3, #0]

  /* definition and creation of testTask */
  osThreadDef(testTask, blinkingLED, osPriorityLow, 0, 128);
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_FREERTOS_Init+0x84>)
 800021a:	f107 0420 	add.w	r4, r7, #32
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800022c:	f107 0320 	add.w	r3, r7, #32
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f006 feec 	bl	8007010 <osThreadCreate>
 8000238:	4602      	mov	r2, r0
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_FREERTOS_Init+0x88>)
 800023c:	601a      	str	r2, [r3, #0]

  /* definition and creation of microSDTask */
  osThreadDef(microSDTask, microSD, osPriorityIdle, 0, 128);
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_FREERTOS_Init+0x8c>)
 8000240:	1d3c      	adds	r4, r7, #4
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  microSDTaskHandle = osThreadCreate(osThread(microSDTask), NULL);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f006 fedb 	bl	8007010 <osThreadCreate>
 800025a:	4602      	mov	r2, r0
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <MX_FREERTOS_Init+0x90>)
 800025e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000260:	bf00      	nop
 8000262:	3758      	adds	r7, #88	; 0x58
 8000264:	46bd      	mov	sp, r7
 8000266:	bdb0      	pop	{r4, r5, r7, pc}
 8000268:	08009bf0 	.word	0x08009bf0
 800026c:	200012d8 	.word	0x200012d8
 8000270:	08009c18 	.word	0x08009c18
 8000274:	20001750 	.word	0x20001750
 8000278:	08009c40 	.word	0x08009c40
 800027c:	200012e0 	.word	0x200012e0

08000280 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8000288:	f004 f848 	bl	800431c <MX_FATFS_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f006 ff0b 	bl	80070a8 <osDelay>
 8000292:	e7fb      	b.n	800028c <StartDefaultTask+0xc>

08000294 <blinkingLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkingLED */
void blinkingLED(void const * argument)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkingLED */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800029c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <blinkingLED+0x1c>)
 80002a2:	f001 f893 	bl	80013cc <HAL_GPIO_TogglePin>
    osDelay(100);
 80002a6:	2064      	movs	r0, #100	; 0x64
 80002a8:	f006 fefe 	bl	80070a8 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80002ac:	e7f6      	b.n	800029c <blinkingLED+0x8>
 80002ae:	bf00      	nop
 80002b0:	40020400 	.word	0x40020400

080002b4 <microSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_microSD */
void microSD(void const * argument)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN microSD */
	MX_FATFS_Init();
 80002bc:	f004 f82e 	bl	800431c <MX_FATFS_Init>
  /* Infinite loop */
  for(;;)
  {
	  if(fileOnce == 0){
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <microSD+0x9c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d13a      	bne.n	800033e <microSD+0x8a>
		  res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 1); // 1. Register a work area
 80002c8:	2201      	movs	r2, #1
 80002ca:	4922      	ldr	r1, [pc, #136]	; (8000354 <microSD+0xa0>)
 80002cc:	4822      	ldr	r0, [pc, #136]	; (8000358 <microSD+0xa4>)
 80002ce:	f006 f929 	bl	8006524 <f_mount>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b21      	ldr	r3, [pc, #132]	; (800035c <microSD+0xa8>)
 80002d8:	701a      	strb	r2, [r3, #0]
		  if (res == FR_OK){
 80002da:	4b20      	ldr	r3, [pc, #128]	; (800035c <microSD+0xa8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d12d      	bne.n	800033e <microSD+0x8a>
			  res = f_open(&SDFile, "freertos.txt", FA_CREATE_ALWAYS | FA_WRITE); // 2. Creating a new file for writing/reading later
 80002e2:	220a      	movs	r2, #10
 80002e4:	491e      	ldr	r1, [pc, #120]	; (8000360 <microSD+0xac>)
 80002e6:	481f      	ldr	r0, [pc, #124]	; (8000364 <microSD+0xb0>)
 80002e8:	f006 f980 	bl	80065ec <f_open>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <microSD+0xa8>)
 80002f2:	701a      	strb	r2, [r3, #0]
			  if(res == FR_OK){
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <microSD+0xa8>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d11d      	bne.n	8000338 <microSD+0x84>
				  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000302:	4819      	ldr	r0, [pc, #100]	; (8000368 <microSD+0xb4>)
 8000304:	f001 f84a 	bl	800139c <HAL_GPIO_WritePin>
				  res = f_write(&SDFile, wtext, sizeof(wtext), (void *) &byteswritten);
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <microSD+0xb8>)
 800030a:	2241      	movs	r2, #65	; 0x41
 800030c:	4918      	ldr	r1, [pc, #96]	; (8000370 <microSD+0xbc>)
 800030e:	4815      	ldr	r0, [pc, #84]	; (8000364 <microSD+0xb0>)
 8000310:	f006 fb31 	bl	8006976 <f_write>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <microSD+0xa8>)
 800031a:	701a      	strb	r2, [r3, #0]
				  if((res != FR_OK) || (byteswritten == 0)){
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <microSD+0xa8>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d103      	bne.n	800032c <microSD+0x78>
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <microSD+0xb8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d105      	bne.n	8000338 <microSD+0x84>
					  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <microSD+0xb4>)
 8000334:	f001 f832 	bl	800139c <HAL_GPIO_WritePin>
				  }
			  }
			  f_close(&SDFile);
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <microSD+0xb0>)
 800033a:	f006 fd49 	bl	8006dd0 <f_close>
		  }
	  }
	  fileOnce = 1;
 800033e:	4b04      	ldr	r3, [pc, #16]	; (8000350 <microSD+0x9c>)
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
    osDelay(500);
 8000344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000348:	f006 feae 	bl	80070a8 <osDelay>
	  if(fileOnce == 0){
 800034c:	e7b8      	b.n	80002c0 <microSD+0xc>
 800034e:	bf00      	nop
 8000350:	20000074 	.word	0x20000074
 8000354:	200012e4 	.word	0x200012e4
 8000358:	2000151c 	.word	0x2000151c
 800035c:	20001518 	.word	0x20001518
 8000360:	08009c5c 	.word	0x08009c5c
 8000364:	200012e8 	.word	0x200012e8
 8000368:	40020400 	.word	0x40020400
 800036c:	200012dc 	.word	0x200012dc
 8000370:	20000000 	.word	0x20000000

08000374 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_GPIO_Init+0x90>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <MX_GPIO_Init+0x90>)
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_GPIO_Init+0x90>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 0304 	and.w	r3, r3, #4
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_GPIO_Init+0x90>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_GPIO_Init+0x90>)
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_GPIO_Init+0x90>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 0308 	and.w	r3, r3, #8
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_GPIO_Init+0x90>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a11      	ldr	r2, [pc, #68]	; (8000404 <MX_GPIO_Init+0x90>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0x90>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003d8:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_GPIO_Init+0x94>)
 80003da:	f000 ffdf 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80003de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_GPIO_Init+0x94>)
 80003f8:	f000 fe42 	bl	8001080 <HAL_GPIO_Init>

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40023800 	.word	0x40023800
 8000408:	40020400 	.word	0x40020400

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fa61 	bl	80008d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f80c 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f7ff ffac 	bl	8000374 <MX_GPIO_Init>
  MX_DMA_Init();
 800041c:	f7ff feb0 	bl	8000180 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000420:	f000 f86a 	bl	80004f8 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000424:	f7ff fee2 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000428:	f006 fdcf 	bl	8006fca <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800042c:	e7fe      	b.n	800042c <main+0x20>
	...

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b092      	sub	sp, #72	; 0x48
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2234      	movs	r2, #52	; 0x34
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f009 fbbb 	bl	8009bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <SystemClock_Config+0x98>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800045a:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <SystemClock_Config+0x98>)
 800045c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000460:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046a:	2310      	movs	r3, #16
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000472:	2300      	movs	r3, #0
 8000474:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000476:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800047a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800047c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4618      	mov	r0, r3
 8000488:	f000 ffba 	bl	8001400 <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000492:	f000 f82a 	bl	80004ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2303      	movs	r3, #3
 800049c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004aa:	463b      	mov	r3, r7
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fad6 	bl	8001a60 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004ba:	f000 f816 	bl	80004ea <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3748      	adds	r7, #72	; 0x48
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40007000 	.word	0x40007000

080004cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004dc:	d101      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004de:	f000 fa13 	bl	8000908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sd_mmc;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <MX_SDIO_SD_Init+0x3c>)
 8000500:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <MX_SDIO_SD_Init+0x38>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]

}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20001798 	.word	0x20001798
 8000534:	40012c00 	.word	0x40012c00

08000538 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a41      	ldr	r2, [pc, #260]	; (800065c <HAL_SD_MspInit+0x124>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d17b      	bne.n	8000652 <HAL_SD_MspInit+0x11a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <HAL_SD_MspInit+0x128>)
 800055c:	6a1b      	ldr	r3, [r3, #32]
 800055e:	4a40      	ldr	r2, [pc, #256]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000564:	6213      	str	r3, [r2, #32]
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b3b      	ldr	r3, [pc, #236]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a3a      	ldr	r2, [pc, #232]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b38      	ldr	r3, [pc, #224]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <HAL_SD_MspInit+0x128>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a34      	ldr	r2, [pc, #208]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <HAL_SD_MspInit+0x128>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0308 	and.w	r3, r3, #8
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80005a2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80005a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80005b4:	230c      	movs	r3, #12
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4829      	ldr	r0, [pc, #164]	; (8000664 <HAL_SD_MspInit+0x12c>)
 80005c0:	f000 fd5e 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005c4:	2304      	movs	r3, #4
 80005c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80005d4:	230c      	movs	r3, #12
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4822      	ldr	r0, [pc, #136]	; (8000668 <HAL_SD_MspInit+0x130>)
 80005e0:	f000 fd4e 	bl	8001080 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SD_MMC Init */
    hdma_sd_mmc.Instance = DMA2_Channel4;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <HAL_SD_MspInit+0x134>)
 80005e6:	4a22      	ldr	r2, [pc, #136]	; (8000670 <HAL_SD_MspInit+0x138>)
 80005e8:	601a      	str	r2, [r3, #0]
    hdma_sd_mmc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <HAL_SD_MspInit+0x134>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    hdma_sd_mmc.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <HAL_SD_MspInit+0x134>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    hdma_sd_mmc.Init.MemInc = DMA_MINC_ENABLE;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <HAL_SD_MspInit+0x134>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	60da      	str	r2, [r3, #12]
    hdma_sd_mmc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_SD_MspInit+0x134>)
 80005fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000602:	611a      	str	r2, [r3, #16]
    hdma_sd_mmc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_SD_MspInit+0x134>)
 8000606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800060a:	615a      	str	r2, [r3, #20]
    hdma_sd_mmc.Init.Mode = DMA_NORMAL;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_SD_MspInit+0x134>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
    hdma_sd_mmc.Init.Priority = DMA_PRIORITY_HIGH;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <HAL_SD_MspInit+0x134>)
 8000614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000618:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sd_mmc) != HAL_OK)
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <HAL_SD_MspInit+0x134>)
 800061c:	f000 fa92 	bl	8000b44 <HAL_DMA_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_SD_MspInit+0xf2>
    {
      Error_Handler();
 8000626:	f7ff ff60 	bl	80004ea <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sd_mmc);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a0f      	ldr	r2, [pc, #60]	; (800066c <HAL_SD_MspInit+0x134>)
 800062e:	641a      	str	r2, [r3, #64]	; 0x40
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_SD_MspInit+0x134>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sd_mmc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <HAL_SD_MspInit+0x134>)
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <HAL_SD_MspInit+0x134>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	202d      	movs	r0, #45	; 0x2d
 8000648:	f000 fa51 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800064c:	202d      	movs	r0, #45	; 0x2d
 800064e:	f000 fa6a 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40012c00 	.word	0x40012c00
 8000660:	40023800 	.word	0x40023800
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00
 800066c:	20001754 	.word	0x20001754
 8000670:	40026444 	.word	0x40026444

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_MspInit+0x64>)
 800067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_MspInit+0x64>)
 8000680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000684:	6253      	str	r3, [r2, #36]	; 0x24
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_MspInit+0x64>)
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_MspInit+0x64>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <HAL_MspInit+0x64>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6213      	str	r3, [r2, #32]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x64>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_MspInit+0x64>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_MspInit+0x64>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6253      	str	r3, [r2, #36]	; 0x24
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x64>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	210f      	movs	r1, #15
 80006c6:	f06f 0001 	mvn.w	r0, #1
 80006ca:	f000 fa10 	bl	8000aee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	201c      	movs	r0, #28
 80006f2:	f000 f9fc 	bl	8000aee <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80006f6:	201c      	movs	r0, #28
 80006f8:	f000 fa15 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <HAL_InitTick+0xa0>)
 80006fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <HAL_InitTick+0xa0>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6253      	str	r3, [r2, #36]	; 0x24
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_InitTick+0xa0>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000714:	f107 0210 	add.w	r2, r7, #16
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fb48 	bl	8001db4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000724:	f001 fb32 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8000728:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_InitTick+0xa4>)
 800072e:	fba2 2303 	umull	r2, r3, r2, r3
 8000732:	0c9b      	lsrs	r3, r3, #18
 8000734:	3b01      	subs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0xa8>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_InitTick+0xa8>)
 8000742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_InitTick+0xa8>)
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_InitTick+0xa8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_InitTick+0xa8>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <HAL_InitTick+0xa8>)
 800075c:	f002 feba 	bl	80034d4 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d104      	bne.n	8000770 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <HAL_InitTick+0xa8>)
 8000768:	f002 fee8 	bl	800353c <HAL_TIM_Base_Start_IT>
 800076c:	4603      	mov	r3, r0
 800076e:	e000      	b.n	8000772 <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	431bde83 	.word	0x431bde83
 8000784:	2000181c 	.word	0x2000181c

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <HardFault_Handler+0x4>

0800079a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <BusFault_Handler+0x4>

080007a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <UsageFault_Handler+0x4>

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TIM2_IRQHandler+0x10>)
 80007be:	f002 fee0 	bl	8003582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000181c 	.word	0x2000181c

080007cc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <SDIO_IRQHandler+0x10>)
 80007d2:	f001 fdf3 	bl	80023bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20001798 	.word	0x20001798

080007e0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
	if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||(hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK))){
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	2b81      	cmp	r3, #129	; 0x81
 80007ea:	d003      	beq.n	80007f4 <DMA2_Channel4_IRQHandler+0x14>
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	2b82      	cmp	r3, #130	; 0x82
 80007f2:	d105      	bne.n	8000800 <DMA2_Channel4_IRQHandler+0x20>
			 HAL_DMA_IRQHandler(hsd.hdmarx);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fb63 	bl	8000ec4 <HAL_DMA_IRQHandler>
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_sd_mmc);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80007fe:	e00c      	b.n	800081a <DMA2_Channel4_IRQHandler+0x3a>
		else if((hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) || (hsd.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK))){
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	2b90      	cmp	r3, #144	; 0x90
 8000806:	d003      	beq.n	8000810 <DMA2_Channel4_IRQHandler+0x30>
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	2ba0      	cmp	r3, #160	; 0xa0
 800080e:	d104      	bne.n	800081a <DMA2_Channel4_IRQHandler+0x3a>
			 HAL_DMA_IRQHandler(hsd.hdmatx);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <DMA2_Channel4_IRQHandler+0x40>)
 8000812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fb55 	bl	8000ec4 <HAL_DMA_IRQHandler>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20001798 	.word	0x20001798

08000824 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <SystemInit+0x5c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <SystemInit+0x5c>)
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <SystemInit+0x5c>)
 8000836:	689a      	ldr	r2, [r3, #8]
 8000838:	4911      	ldr	r1, [pc, #68]	; (8000880 <SystemInit+0x5c>)
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <SystemInit+0x60>)
 800083c:	4013      	ands	r3, r2
 800083e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <SystemInit+0x5c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <SystemInit+0x5c>)
 8000846:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800084a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800084e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <SystemInit+0x5c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SystemInit+0x5c>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <SystemInit+0x5c>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <SystemInit+0x5c>)
 8000862:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000866:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SystemInit+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x64>)
 8000870:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000874:	609a      	str	r2, [r3, #8]
#endif
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	88ffc00c 	.word	0x88ffc00c
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800088c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ffb7 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f009 f951 	bl	8009b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fda7 	bl	800040c <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r3, =_sidata
 80008c0:	08009d88 	.word	0x08009d88
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c8:	20000058 	.word	0x20000058
  ldr r2, =_sbss
 80008cc:	20000058 	.word	0x20000058
  ldr r3, = _ebss
 80008d0:	200018a0 	.word	0x200018a0

080008d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_IRQHandler>

080008d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f8f9 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fef8 	bl	80006dc <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	e001      	b.n	80008fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f8:	f7ff febc 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4413      	add	r3, r2
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x1c>)
 8000918:	6013      	str	r3, [r2, #0]
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20001858 	.word	0x20001858
 8000928:	2000004c 	.word	0x2000004c

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20001858 	.word	0x20001858

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fff0 	bl	800092c <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d004      	beq.n	8000964 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_Delay+0x40>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000964:	bf00      	nop
 8000966:	f7ff ffe1 	bl	800092c <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	429a      	cmp	r2, r3
 8000974:	d8f7      	bhi.n	8000966 <HAL_Delay+0x26>
  {
  }
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000004c 	.word	0x2000004c

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4906      	ldr	r1, [pc, #24]	; (8000a1c <__NVIC_EnableIRQ+0x34>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff4f 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff64 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ffb2 	bl	8000a74 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff81 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff57 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e059      	b.n	8000c0a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_DMA_Init+0xd0>)
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d80f      	bhi.n	8000b82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_DMA_Init+0xd4>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <HAL_DMA_Init+0xd8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	009a      	lsls	r2, r3, #2
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_DMA_Init+0xdc>)
 8000b7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b80:	e00e      	b.n	8000ba0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <HAL_DMA_Init+0xe0>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <HAL_DMA_Init+0xd8>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	009a      	lsls	r2, r3, #2
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <HAL_DMA_Init+0xe4>)
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40026407 	.word	0x40026407
 8000c18:	bffd9ff8 	.word	0xbffd9ff8
 8000c1c:	cccccccd 	.word	0xcccccccd
 8000c20:	40026000 	.word	0x40026000
 8000c24:	bffd9bf8 	.word	0xbffd9bf8
 8000c28:	40026400 	.word	0x40026400

08000c2c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e052      	b.n	8000ce4 <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0201 	bic.w	r2, r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <HAL_DMA_DeInit+0xc4>)
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d80f      	bhi.n	8000c7a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DMA_DeInit+0xc8>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <HAL_DMA_DeInit+0xcc>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_DMA_DeInit+0xd0>)
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c78:	e00e      	b.n	8000c98 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_DMA_DeInit+0xd4>)
 8000c82:	4413      	add	r3, r2
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_DMA_DeInit+0xcc>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	009a      	lsls	r2, r3, #2
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_DMA_DeInit+0xd8>)
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 021c 	and.w	r2, r3, #28
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40026407 	.word	0x40026407
 8000cf4:	bffd9ff8 	.word	0xbffd9ff8
 8000cf8:	cccccccd 	.word	0xcccccccd
 8000cfc:	40026000 	.word	0x40026000
 8000d00:	bffd9bf8 	.word	0xbffd9bf8
 8000d04:	40026400 	.word	0x40026400

08000d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <HAL_DMA_Start_IT+0x20>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e04b      	b.n	8000dc0 <HAL_DMA_Start_IT+0xb8>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d13a      	bne.n	8000db2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f95e 	bl	8001022 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 020e 	orr.w	r2, r2, #14
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00f      	b.n	8000da0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0204 	bic.w	r2, r2, #4
 8000d8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 020a 	orr.w	r2, r2, #10
 8000d9e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e005      	b.n	8000dbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d008      	beq.n	8000df2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e022      	b.n	8000e38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 020e 	bic.w	r2, r2, #14
 8000e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 021c 	and.w	r2, r3, #28
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d005      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e029      	b.n	8000eba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020e 	bic.w	r2, r2, #14
 8000e74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 021c 	and.w	r2, r3, #28
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	4798      	blx	r3
    }
  }
  return status;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 031c 	and.w	r3, r3, #28
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d026      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x7a>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d021      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0204 	bic.w	r2, r2, #4
 8000f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f003 021c 	and.w	r2, r3, #28
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f24:	2104      	movs	r1, #4
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d071      	beq.n	8001018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f3c:	e06c      	b.n	8001018 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 031c 	and.w	r3, r3, #28
 8000f46:	2202      	movs	r2, #2
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02e      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0xec>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d029      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10b      	bne.n	8000f82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 020a 	bic.w	r2, r2, #10
 8000f78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 021c 	and.w	r2, r3, #28
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	2102      	movs	r1, #2
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d038      	beq.n	8001018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fae:	e033      	b.n	8001018 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 031c 	and.w	r3, r3, #28
 8000fb8:	2208      	movs	r2, #8
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d02a      	beq.n	800101a <HAL_DMA_IRQHandler+0x156>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d025      	beq.n	800101a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 020e 	bic.w	r2, r2, #14
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 021c 	and.w	r2, r3, #28
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001018:	bf00      	nop
 800101a:	bf00      	nop
}
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 021c 	and.w	r2, r3, #28
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b10      	cmp	r3, #16
 8001052:	d108      	bne.n	8001066 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001064:	e007      	b.n	8001076 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	60da      	str	r2, [r3, #12]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001096:	e160      	b.n	800135a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8152 	beq.w	8001354 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x40>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d00b      	beq.n	800115c <HAL_GPIO_Init+0xdc>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	2b11      	cmp	r3, #17
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d130      	bne.n	80011be <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001192:	2201      	movs	r2, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	f003 0201 	and.w	r2, r3, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80ac 	beq.w	8001354 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x2f4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a5c      	ldr	r2, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x2f4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <HAL_GPIO_Init+0x2f4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x2fc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d025      	beq.n	800128c <HAL_GPIO_Init+0x20c>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x300>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d01f      	beq.n	8001288 <HAL_GPIO_Init+0x208>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x304>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d019      	beq.n	8001284 <HAL_GPIO_Init+0x204>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x308>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x200>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x30c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1fc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x310>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1f8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <HAL_GPIO_Init+0x314>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1f4>
 8001270:	2306      	movs	r3, #6
 8001272:	e00c      	b.n	800128e <HAL_GPIO_Init+0x20e>
 8001274:	2307      	movs	r3, #7
 8001276:	e00a      	b.n	800128e <HAL_GPIO_Init+0x20e>
 8001278:	2305      	movs	r3, #5
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x20e>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x20e>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x20e>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x20e>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x20e>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800129e:	4936      	ldr	r1, [pc, #216]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x318>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d0:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x318>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x318>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012fa:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_GPIO_Init+0x318>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x318>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae97 	bne.w	8001098 <HAL_GPIO_Init+0x18>
  } 
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800
 8001378:	40010000 	.word	0x40010000
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e31d      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141c:	4b91      	ldr	r3, [pc, #580]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d07b      	beq.n	800152a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d006      	beq.n	8001446 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d10f      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b87      	ldr	r3, [pc, #540]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d06a      	beq.n	8001528 <HAL_RCC_OscConfig+0x128>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d166      	bne.n	8001528 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e2f7      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x74>
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e02d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd0>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x96>
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a78      	ldr	r2, [pc, #480]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e01c      	b.n	80014d0 <HAL_RCC_OscConfig+0xd0>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xb8>
 800149e:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a70      	ldr	r2, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd0>
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a69      	ldr	r2, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa28 	bl	800092c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fa24 	bl	800092c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e2ad      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fa14 	bl	800092c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fa10 	bl	800092c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e299      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800151a:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x108>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d05a      	beq.n	80015ec <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d119      	bne.n	8001576 <HAL_RCC_OscConfig+0x176>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d116      	bne.n	8001576 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x160>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e276      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	493d      	ldr	r1, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001574:	e03a      	b.n	80015ec <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d020      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x268>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff f9d2 	bl	800092c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff f9ce 	bl	800092c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e257      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	492a      	ldr	r1, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
 80015be:	e015      	b.n	80015ec <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_OscConfig+0x268>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff f9b1 	bl	800092c <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff f9ad 	bl	800092c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e236      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80b8 	beq.w	800176a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d170      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x218>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e21a      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001624:	429a      	cmp	r2, r3
 8001626:	d921      	bls.n	800166c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fbf1 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e208      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	4901      	ldr	r1, [pc, #4]	; (8001664 <HAL_RCC_OscConfig+0x264>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
 8001662:	e020      	b.n	80016a6 <HAL_RCC_OscConfig+0x2a6>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166c:	4ba4      	ldr	r3, [pc, #656]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	49a1      	ldr	r1, [pc, #644]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4ba0      	ldr	r3, [pc, #640]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	499c      	ldr	r1, [pc, #624]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fbbc 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1d3      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	3301      	adds	r3, #1
 80016ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016b6:	4a92      	ldr	r2, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80016b8:	6892      	ldr	r2, [r2, #8]
 80016ba:	0912      	lsrs	r2, r2, #4
 80016bc:	f002 020f 	and.w	r2, r2, #15
 80016c0:	4990      	ldr	r1, [pc, #576]	; (8001904 <HAL_RCC_OscConfig+0x504>)
 80016c2:	5c8a      	ldrb	r2, [r1, r2]
 80016c4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016c6:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_RCC_OscConfig+0x508>)
 80016c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x50c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f804 	bl	80006dc <HAL_InitTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d045      	beq.n	800176a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	e1b5      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d029      	beq.n	800173e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x510>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f91c 	bl	800092c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f8:	f7ff f918 	bl	800092c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1a1      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800170a:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001716:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4977      	ldr	r1, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4972      	ldr	r1, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800173e:	4b74      	ldr	r3, [pc, #464]	; (8001910 <HAL_RCC_OscConfig+0x510>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff f8f2 	bl	800092c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174c:	f7ff f8ee 	bl	800092c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e177      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800175e:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d030      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x514>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff f8d2 	bl	800092c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff f8ce 	bl	800092c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e157      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x38c>
 80017aa:	e015      	b.n	80017d8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_OscConfig+0x514>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f8bb 	bl	800092c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff f8b7 	bl	800092c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e140      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80b5 	beq.w	8001950 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10d      	bne.n	8001812 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	4a41      	ldr	r2, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6253      	str	r3, [r2, #36]	; 0x24
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x518>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_OscConfig+0x518>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_RCC_OscConfig+0x518>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff f87f 	bl	800092c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff f87b 	bl	800092c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e104      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_OscConfig+0x518>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x466>
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6353      	str	r3, [r2, #52]	; 0x34
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_OscConfig+0x4c2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x488>
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001878:	6353      	str	r3, [r2, #52]	; 0x34
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	4a20      	ldr	r2, [pc, #128]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001884:	6353      	str	r3, [r2, #52]	; 0x34
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x4c2>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x4aa>
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6353      	str	r3, [r2, #52]	; 0x34
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6353      	str	r3, [r2, #52]	; 0x34
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x4c2>
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b4:	6353      	str	r3, [r2, #52]	; 0x34
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018c0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f82f 	bl	800092c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f82b 	bl	800092c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0b2      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x4d2>
 80018f4:	e023      	b.n	800193e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f819 	bl	800092c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fc:	e019      	b.n	8001932 <HAL_RCC_OscConfig+0x532>
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	08009cd4 	.word	0x08009cd4
 8001908:	20000044 	.word	0x20000044
 800190c:	20000048 	.word	0x20000048
 8001910:	42470020 	.word	0x42470020
 8001914:	42470680 	.word	0x42470680
 8001918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7ff f806 	bl	800092c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e08d      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ee      	bne.n	800191c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d079      	beq.n	8001a4c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d056      	beq.n	8001a0c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	2b02      	cmp	r3, #2
 8001964:	d13b      	bne.n	80019de <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x65c>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe ffde 	bl	800092c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe ffda 	bl	800092c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e063      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	4319      	orrs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	430b      	orrs	r3, r1
 80019aa:	492b      	ldr	r1, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x65c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7fe ffb9 	bl	800092c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe ffb5 	bl	800092c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e03e      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x5be>
 80019dc:	e036      	b.n	8001a4c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x65c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe ffa2 	bl	800092c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7fe ff9e 	bl	800092c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e027      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x5ec>
 8001a0a:	e01f      	b.n	8001a4c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e01a      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_RCC_OscConfig+0x658>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d10d      	bne.n	8001a48 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	42470060 	.word	0x42470060

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e11a      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d919      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x34>
 8001a88:	4b8a      	ldr	r3, [pc, #552]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a89      	ldr	r2, [pc, #548]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b87      	ldr	r3, [pc, #540]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0201 	bic.w	r2, r3, #1
 8001a9c:	4985      	ldr	r1, [pc, #532]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0f9      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	497a      	ldr	r1, [pc, #488]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 808e 	beq.w	8001bfe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d121      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0d7      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0cb      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0bf      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0b7      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	495c      	ldr	r1, [pc, #368]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe feee 	bl	800092c <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe fee6 	bl	800092c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e09b      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d1ee      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xfc>
 8001b7e:	e03e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d112      	bne.n	8001bae <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7fe fecf 	bl	800092c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e084      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
 8001bac:	e027      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe feb8 	bl	800092c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06d      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x158>
 8001bda:	e010      	b.n	8001bfe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7fe fea6 	bl	800092c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e05b      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d219      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x1be>
 8001c12:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0201 	bic.w	r2, r3, #1
 8001c26:	4923      	ldr	r1, [pc, #140]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_RCC_ClockConfig+0x254>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e034      	b.n	8001caa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4917      	ldr	r1, [pc, #92]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	490f      	ldr	r1, [pc, #60]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7e:	f000 f823 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c82:	4601      	mov	r1, r0
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_ClockConfig+0x258>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	fa21 f303 	lsr.w	r3, r1, r3
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fd1c 	bl	80006dc <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08009cd4 	.word	0x08009cd4
 8001cc0:	20000044 	.word	0x20000044
 8001cc4:	20000048 	.word	0x20000048

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d006      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x24>
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d007      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x2a>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d12c      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ce8:	613b      	str	r3, [r7, #16]
      break;
 8001cea:	e037      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	e034      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0d9b      	lsrs	r3, r3, #22
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d1c:	fb02 f203 	mul.w	r2, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e007      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d2e:	fb02 f203 	mul.w	r2, r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
      break;
 8001d3e:	e00d      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0b5b      	lsrs	r3, r3, #13
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	613b      	str	r3, [r7, #16]
      break;
 8001d5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	016e3600 	.word	0x016e3600
 8001d74:	08009cc8 	.word	0x08009cc8

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000044 	.word	0x20000044

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff2 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d94:	4601      	mov	r1, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08009ce4 	.word	0x08009ce4

08001db4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_GetClockConfig+0x58>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCC_GetClockConfig+0x58>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_GetClockConfig+0x58>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_RCC_GetClockConfig+0x58>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d12c      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e016      	b.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6253      	str	r3, [r2, #36]	; 0x24
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e64:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e78:	d105      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e80:	d101      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001e82:	2301      	movs	r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0201 	bic.w	r2, r3, #1
 8001ea0:	490b      	ldr	r1, [pc, #44]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e022      	b.n	8001f2c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7fe fb1d 	bl	8000538 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f814 	bl	8001f34 <HAL_SD_InitCard>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00a      	b.n	8001f2c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b08e      	sub	sp, #56	; 0x38
 8001f38:	af04      	add	r7, sp, #16
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001f50:	2376      	movs	r3, #118	; 0x76
 8001f52:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681d      	ldr	r5, [r3, #0]
 8001f58:	466c      	mov	r4, sp
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f001 fc79 	bl	8003864 <SDIO_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e03a      	b.n	8001ffa <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_SD_InitCard+0xd0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fcae 	bl	80038f0 <SDIO_PowerState_ON>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e029      	b.n	8001ffa <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_SD_InitCard+0xd0>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 ffd5 	bl	8002f5c <SD_PowerON>
 8001fb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e013      	b.n	8001ffa <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fef4 	bl	8002dc0 <SD_InitCard>
 8001fd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdb0      	pop	{r4, r5, r7, pc}
 8002002:	bf00      	nop
 8002004:	422580a0 	.word	0x422580a0

08002008 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0c9      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 80c2 	bne.w	80021c2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	441a      	add	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	429a      	cmp	r2, r3
 8002050:	d907      	bls.n	8002062 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0b0      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800208c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8002094:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2200      	movs	r2, #0
 800209c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3380      	adds	r3, #128	; 0x80
 80020a8:	4619      	mov	r1, r3
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	f7fe fe29 	bl	8000d08 <HAL_DMA_Start_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80020ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e06b      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d002      	beq.n	8002100 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	025b      	lsls	r3, r3, #9
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002108:	4618      	mov	r0, r3
 800210a:	f001 fc7f 	bl	8003a0c <SDMMC_CmdBlockLength>
 800210e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00f      	beq.n	8002136 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e046      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002142:	2390      	movs	r3, #144	; 0x90
 8002144:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800214e:	2301      	movs	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f107 0210 	add.w	r2, r7, #16
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fc2a 	bl	80039b6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d90a      	bls.n	800217e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2282      	movs	r2, #130	; 0x82
 800216c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fc8d 	bl	8003a94 <SDMMC_CmdReadMultiBlock>
 800217a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800217c:	e009      	b.n	8002192 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2281      	movs	r2, #129	; 0x81
 8002182:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fc60 	bl	8003a50 <SDMMC_CmdReadSingleBlock>
 8002190:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e002      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3730      	adds	r7, #48	; 0x30
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	08002bdd 	.word	0x08002bdd
 80021d0:	08002c4d 	.word	0x08002c4d
 80021d4:	004005ff 	.word	0x004005ff
 80021d8:	4225858c 	.word	0x4225858c

080021dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0ce      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	f040 80c7 	bne.w	80023a0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	441a      	add	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	429a      	cmp	r2, r3
 8002224:	d907      	bls.n	8002236 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0b5      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	4a53      	ldr	r2, [pc, #332]	; (80023ac <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2200      	movs	r2, #0
 8002270:	635a      	str	r2, [r3, #52]	; 0x34

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fbbf 	bl	8003a0c <SDMMC_CmdBlockLength>
 800228e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00f      	beq.n	80022b6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a46      	ldr	r2, [pc, #280]	; (80023b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e075      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d90a      	bls.n	80022d2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	22a0      	movs	r2, #160	; 0xa0
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fc27 	bl	8003b1c <SDMMC_CmdWriteMultiBlock>
 80022ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80022d0:	e009      	b.n	80022e6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2290      	movs	r2, #144	; 0x90
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fbfa 	bl	8003ad8 <SDMMC_CmdWriteSingleBlock>
 80022e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e047      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3380      	adds	r3, #128	; 0x80
 8002324:	461a      	mov	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	025b      	lsls	r3, r3, #9
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f7fe fcec 	bl	8000d08 <HAL_DMA_Start_IT>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01c      	beq.n	8002370 <HAL_SD_WriteBlocks_DMA+0x194>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e018      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800237c:	2390      	movs	r3, #144	; 0x90
 800237e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f107 0210 	add.w	r2, r7, #16
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fb0d 	bl	80039b6 <SDIO_ConfigData>

      return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08002bb5 	.word	0x08002bb5
 80023b0:	08002c4d 	.word	0x08002c4d
 80023b4:	004005ff 	.word	0x004005ff
 80023b8:	4225858c 	.word	0x4225858c

080023bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_SD_IRQHandler+0x2e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 ffd0 	bl	8003388 <SD_Read_IT>
 80023e8:	e165      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 808f 	beq.w	8002518 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002412:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002416:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d039      	beq.n	80024a6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_SD_IRQHandler+0x8a>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d011      	beq.n	800246a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fb88 	bl	8003b60 <SDMMC_CmdStopTransfer>
 8002450:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f92f 	bl	80026c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002472:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_SD_IRQHandler+0xda>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f002 f80e 	bl	80044b8 <HAL_SD_RxCpltCallback>
 800249c:	e10b      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f002 f800 	bl	80044a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024a4:	e107      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8102 	beq.w	80026b6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d011      	beq.n	80024e0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fb4d 	bl	8003b60 <SDMMC_CmdStopTransfer>
 80024c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8f4 	bl	80026c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 80e5 	bne.w	80026b6 <HAL_SD_IRQHandler+0x2fa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80df 	bne.w	80026b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0208 	bic.w	r2, r2, #8
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f001 ffc7 	bl	80044a4 <HAL_SD_TxCpltCallback>
}
 8002516:	e0ce      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_SD_IRQHandler+0x17c>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 ff7a 	bl	800342a <SD_Write_IT>
 8002536:	e0be      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	f240 233a 	movw	r3, #570	; 0x23a
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b6 	beq.w	80026b6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	f043 0208 	orr.w	r2, r3, #8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f240 723a 	movw	r2, #1850	; 0x73a
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80025e4:	f023 0302 	bic.w	r3, r3, #2
 80025e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fab6 	bl	8003b60 <SDMMC_CmdStopTransfer>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f855 	bl	80026c8 <HAL_SD_ErrorCallback>
}
 800261e:	e04a      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d045      	beq.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <HAL_SD_IRQHandler+0x282>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d011      	beq.n	8002662 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_SD_IRQHandler+0x304>)
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fbf9 	bl	8000e42 <HAL_DMA_Abort_IT>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02f      	beq.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fb42 	bl	8002ce4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002660:	e029      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_SD_IRQHandler+0x2ba>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d011      	beq.n	800269a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_SD_IRQHandler+0x308>)
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fbdd 	bl	8000e42 <HAL_DMA_Abort_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d013      	beq.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fb5d 	bl	8002d52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002698:	e00d      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f001 feee 	bl	8004490 <HAL_SD_AbortCallback>
}
 80026b4:	e7ff      	b.n	80026b6 <HAL_SD_IRQHandler+0x2fa>
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	08002ce5 	.word	0x08002ce5
 80026c4:	08002d53 	.word	0x08002d53

080026c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ea:	0f9b      	lsrs	r3, r3, #30
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	b2da      	uxtb	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	b2da      	uxtb	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b2da      	uxtb	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002732:	b2da      	uxtb	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800273c:	0d1b      	lsrs	r3, r3, #20
 800273e:	b29a      	uxth	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	0bdb      	lsrs	r3, r3, #15
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800276c:	0b9b      	lsrs	r3, r3, #14
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277e:	0b5b      	lsrs	r3, r3, #13
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002790:	0b1b      	lsrs	r3, r3, #12
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	b2da      	uxtb	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d163      	bne.n	8002874 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b0:	009a      	lsls	r2, r3, #2
 80027b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80027bc:	0f92      	lsrs	r2, r2, #30
 80027be:	431a      	orrs	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c8:	0edb      	lsrs	r3, r3, #27
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	0e1b      	lsrs	r3, r3, #24
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	0d5b      	lsrs	r3, r3, #21
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	b2da      	uxtb	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002810:	0bdb      	lsrs	r3, r3, #15
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	b2da      	uxtb	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	3302      	adds	r3, #2
 8002834:	2201      	movs	r2, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800283e:	fb02 f203 	mul.w	r2, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7a1b      	ldrb	r3, [r3, #8]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002860:	0a52      	lsrs	r2, r2, #9
 8002862:	fb02 f203 	mul.w	r2, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002870:	661a      	str	r2, [r3, #96]	; 0x60
 8002872:	e031      	b.n	80028d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	2b01      	cmp	r3, #1
 800287a:	d11d      	bne.n	80028b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	431a      	orrs	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	3301      	adds	r3, #1
 8002898:	029a      	lsls	r2, r3, #10
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
 80028b6:	e00f      	b.n	80028d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_SD_GetCardCSD+0x344>)
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e09d      	b.n	8002a14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028dc:	0b9b      	lsrs	r3, r3, #14
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	09db      	lsrs	r3, r3, #7
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002906:	b2da      	uxtb	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	0fdb      	lsrs	r3, r3, #31
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	0f5b      	lsrs	r3, r3, #29
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	b2da      	uxtb	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	0d9b      	lsrs	r3, r3, #22
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	b2da      	uxtb	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	0d5b      	lsrs	r3, r3, #21
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	0bdb      	lsrs	r3, r3, #15
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	0b9b      	lsrs	r3, r3, #14
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	0b5b      	lsrs	r3, r3, #13
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	0b1b      	lsrs	r3, r3, #12
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	004005ff 	.word	0x004005ff

08002a24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af04      	add	r7, sp, #16
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d02e      	beq.n	8002af4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d106      	bne.n	8002aac <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aaa:	e029      	b.n	8002b00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab2:	d10a      	bne.n	8002aca <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fb07 	bl	80030c8 <SD_WideBus_Enable>
 8002aba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ac8:	e01a      	b.n	8002b00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fb44 	bl	800315e <SD_WideBus_Disable>
 8002ad6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae4:	e00c      	b.n	8002b00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
 8002af2:	e005      	b.n	8002b00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a18      	ldr	r2, [pc, #96]	; (8002b70 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e024      	b.n	8002b66 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681d      	ldr	r5, [r3, #0]
 8002b42:	466c      	mov	r4, sp
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 fe84 	bl	8003864 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	004005ff 	.word	0x004005ff

08002b74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa76 	bl	8003078 <SD_SendStatus>
 8002b8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002baa:	693b      	ldr	r3, [r7, #16]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	2b82      	cmp	r3, #130	; 0x82
 8002bf0:	d111      	bne.n	8002c16 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ffb2 	bl	8003b60 <SDMMC_CmdStopTransfer>
 8002bfc:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fd59 	bl	80026c8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0208 	bic.w	r2, r2, #8
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f001 fc3a 	bl	80044b8 <HAL_SD_RxCpltCallback>
#endif
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <SD_DMAError+0x2a>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12d      	bne.n	8002cd2 <SD_DMAError+0x86>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <SD_DMAError+0x94>)
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff6a 	bl	8002b74 <HAL_SD_GetCardState>
 8002ca0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d002      	beq.n	8002cae <SD_DMAError+0x62>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10a      	bne.n	8002cc4 <SD_DMAError+0x78>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 ff54 	bl	8003b60 <SDMMC_CmdStopTransfer>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff fcf8 	bl	80026c8 <HAL_SD_ErrorCallback>
#endif
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	004005ff 	.word	0x004005ff

08002ce4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f240 523a 	movw	r2, #1338	; 0x53a
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff ff39 	bl	8002b74 <HAL_SD_GetCardState>
 8002d02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d002      	beq.n	8002d1e <SD_DMATxAbort+0x3a>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10a      	bne.n	8002d34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 ff1c 	bl	8003b60 <SDMMC_CmdStopTransfer>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f001 fba7 	bl	8004490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002d42:	e002      	b.n	8002d4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fcbf 	bl	80026c8 <HAL_SD_ErrorCallback>
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff02 	bl	8002b74 <HAL_SD_GetCardState>
 8002d70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d002      	beq.n	8002d8c <SD_DMARxAbort+0x3a>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10a      	bne.n	8002da2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fee5 	bl	8003b60 <SDMMC_CmdStopTransfer>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f001 fb70 	bl	8004490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002db0:	e002      	b.n	8002db8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fc88 	bl	80026c8 <HAL_SD_ErrorCallback>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b094      	sub	sp, #80	; 0x50
 8002dc4:	af04      	add	r7, sp, #16
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fd9c 	bl	800390e <SDIO_GetPowerState>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002de0:	e0b7      	b.n	8002f52 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d02f      	beq.n	8002e4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ffc0 	bl	8003d74 <SDMMC_CmdSendCID>
 8002df4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <SD_InitCard+0x40>
    {
      return errorstate;
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	e0a8      	b.n	8002f52 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fdc3 	bl	8003992 <SDIO_GetResponse>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2104      	movs	r1, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fdba 	bl	8003992 <SDIO_GetResponse>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2108      	movs	r1, #8
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fdb1 	bl	8003992 <SDIO_GetResponse>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	210c      	movs	r1, #12
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fda8 	bl	8003992 <SDIO_GetResponse>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d00d      	beq.n	8002e6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f107 020e 	add.w	r2, r7, #14
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 ffc6 	bl	8003dee <SDMMC_CmdSetRelAdd>
 8002e62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <SD_InitCard+0xae>
    {
      return errorstate;
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	e071      	b.n	8002f52 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d036      	beq.n	8002ee4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 ff90 	bl	8003db0 <SDMMC_CmdSendCSD>
 8002e90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	e05a      	b.n	8002f52 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd75 	bl	8003992 <SDIO_GetResponse>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fd6c 	bl	8003992 <SDIO_GetResponse>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd63 	bl	8003992 <SDIO_GetResponse>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	210c      	movs	r1, #12
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd5a 	bl	8003992 <SDIO_GetResponse>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fd51 	bl	8003992 <SDIO_GetResponse>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	0d1a      	lsrs	r2, r3, #20
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fbec 	bl	80026dc <HAL_SD_GetCardCSD>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f0e:	e020      	b.n	8002f52 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	f04f 0400 	mov.w	r4, #0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4623      	mov	r3, r4
 8002f22:	4608      	mov	r0, r1
 8002f24:	f000 fe3e 	bl	8003ba4 <SDMMC_CmdSelDesel>
 8002f28:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SD_InitCard+0x174>
  {
    return errorstate;
 8002f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f32:	e00e      	b.n	8002f52 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681d      	ldr	r5, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	466c      	mov	r4, sp
 8002f3c:	f103 0210 	add.w	r2, r3, #16
 8002f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f46:	3304      	adds	r3, #4
 8002f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f000 fc8a 	bl	8003864 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3740      	adds	r7, #64	; 0x40
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fe38 	bl	8003bea <SDMMC_CmdGoIdleState>
 8002f7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	e072      	b.n	800306c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fe4b 	bl	8003c26 <SDMMC_CmdOperCond>
 8002f90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fe21 	bl	8003bea <SDMMC_CmdGoIdleState>
 8002fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <SD_PowerON+0x5e>
    {
      return errorstate;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e05b      	b.n	800306c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d137      	bne.n	8003032 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fe4b 	bl	8003c64 <SDMMC_CmdAppCommand>
 8002fce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d02d      	beq.n	8003032 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fda:	e047      	b.n	800306c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fe3e 	bl	8003c64 <SDMMC_CmdAppCommand>
 8002fe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <SD_PowerON+0x98>
    {
      return errorstate;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	e03b      	b.n	800306c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	491e      	ldr	r1, [pc, #120]	; (8003074 <SD_PowerON+0x118>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fe54 	bl	8003ca8 <SDMMC_CmdAppOperCommand>
 8003000:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800300c:	e02e      	b.n	800306c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fcbc 	bl	8003992 <SDIO_GetResponse>
 800301a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	0fdb      	lsrs	r3, r3, #31
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <SD_PowerON+0xcc>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <SD_PowerON+0xce>
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]

    count++;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3301      	adds	r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003038:	4293      	cmp	r3, r2
 800303a:	d802      	bhi.n	8003042 <SD_PowerON+0xe6>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0cc      	beq.n	8002fdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003048:	4293      	cmp	r3, r2
 800304a:	d902      	bls.n	8003052 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	e00c      	b.n	800306c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
 8003062:	e002      	b.n	800306a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	c1100000 	.word	0xc1100000

08003078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308c:	e018      	b.n	80030c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f000 fec8 	bl	8003e30 <SDMMC_CmdSendStatus>
 80030a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	e009      	b.n	80030c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc6d 	bl	8003992 <SDIO_GetResponse>
 80030b8:	4602      	mov	r2, r0
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fc57 	bl	8003992 <SDIO_GetResponse>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ee:	d102      	bne.n	80030f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80030f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f4:	e02f      	b.n	8003156 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f879 	bl	80031f4 <SD_FindSCR>
 8003102:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	e023      	b.n	8003156 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f000 fd9d 	bl	8003c64 <SDMMC_CmdAppCommand>
 800312a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	e00f      	b.n	8003156 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fdd6 	bl	8003cee <SDMMC_CmdBusWidth>
 8003142:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e003      	b.n	8003156 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800314e:	2300      	movs	r3, #0
 8003150:	e001      	b.n	8003156 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003152:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fc0c 	bl	8003992 <SDIO_GetResponse>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003184:	d102      	bne.n	800318c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800318a:	e02f      	b.n	80031ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f82e 	bl	80031f4 <SD_FindSCR>
 8003198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	e023      	b.n	80031ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01c      	beq.n	80031e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fd52 	bl	8003c64 <SDMMC_CmdAppCommand>
 80031c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	e00f      	b.n	80031ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fd8b 	bl	8003cee <SDMMC_CmdBusWidth>
 80031d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	e003      	b.n	80031ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e001      	b.n	80031ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80031e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b08f      	sub	sp, #60	; 0x3c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031fe:	f7fd fb95 	bl	800092c <HAL_GetTick>
 8003202:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2108      	movs	r1, #8
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fbf6 	bl	8003a0c <SDMMC_CmdBlockLength>
 8003220:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	e0a9      	b.n	8003380 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f000 fd13 	bl	8003c64 <SDMMC_CmdAppCommand>
 800323e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	e09a      	b.n	8003380 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003250:	2308      	movs	r3, #8
 8003252:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003254:	2330      	movs	r3, #48	; 0x30
 8003256:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003258:	2302      	movs	r3, #2
 800325a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800325c:	2300      	movs	r3, #0
 800325e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003260:	2301      	movs	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f107 0210 	add.w	r2, r7, #16
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fba1 	bl	80039b6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fd5a 	bl	8003d32 <SDMMC_CmdSendSCR>
 800327e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d022      	beq.n	80032cc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	e07a      	b.n	8003380 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f107 0208 	add.w	r2, r7, #8
 80032a4:	18d4      	adds	r4, r2, r3
 80032a6:	4608      	mov	r0, r1
 80032a8:	f000 fb06 	bl	80038b8 <SDIO_ReadFIFO>
 80032ac:	4603      	mov	r3, r0
 80032ae:	6023      	str	r3, [r4, #0]
      index++;
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	3301      	adds	r3, #1
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80032b6:	f7fd fb39 	bl	800092c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d102      	bne.n	80032cc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80032c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032ca:	e059      	b.n	8003380 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	f240 432a 	movw	r3, #1066	; 0x42a
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0d6      	beq.n	800328a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2208      	movs	r2, #8
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80032f2:	2308      	movs	r3, #8
 80032f4:	e044      	b.n	8003380 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2202      	movs	r2, #2
 800330a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800330c:	2302      	movs	r3, #2
 800330e:	e037      	b.n	8003380 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2220      	movs	r2, #32
 8003324:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003326:	2320      	movs	r3, #32
 8003328:	e02a      	b.n	8003380 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003332:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	061a      	lsls	r2, r3, #24
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003340:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800334a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	601a      	str	r2, [r3, #0]
    scr++;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	3304      	adds	r3, #4
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	061a      	lsls	r2, r3, #24
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003368:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003372:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	0e1b      	lsrs	r3, r3, #24
 8003378:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	373c      	adds	r7, #60	; 0x3c
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03f      	beq.n	8003422 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e033      	b.n	8003410 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa83 	bl	80038b8 <SDIO_ReadFIFO>
 80033b2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	3b01      	subs	r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3301      	adds	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3b01      	subs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b07      	cmp	r3, #7
 8003414:	d9c8      	bls.n	80033a8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d043      	beq.n	80034cc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e037      	b.n	80034ba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3b01      	subs	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	3b01      	subs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4313      	orrs	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3b01      	subs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	061a      	lsls	r2, r3, #24
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa0e 	bl	80038d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b07      	cmp	r3, #7
 80034be:	d9c4      	bls.n	800344a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e01d      	b.n	8003522 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f815 	bl	800352a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 f936 	bl	8003784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d007      	beq.n	8003576 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d122      	bne.n	80035de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d11b      	bne.n	80035de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0202 	mvn.w	r2, #2
 80035ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8c1 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 80035ca:	e005      	b.n	80035d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8b4 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8c3 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d122      	bne.n	8003632 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d11b      	bne.n	8003632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0204 	mvn.w	r2, #4
 8003602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f897 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 800361e:	e005      	b.n	800362c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f88a 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f899 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d122      	bne.n	8003686 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11b      	bne.n	8003686 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0208 	mvn.w	r2, #8
 8003656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f86d 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003672:	e005      	b.n	8003680 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f860 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f86f 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d122      	bne.n	80036da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d11b      	bne.n	80036da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0210 	mvn.w	r2, #16
 80036aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2208      	movs	r2, #8
 80036b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f843 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 80036c6:	e005      	b.n	80036d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f836 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f845 	bl	800375e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10e      	bne.n	8003706 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f06f 0201 	mvn.w	r2, #1
 80036fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fc fee3 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d10e      	bne.n	8003732 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d107      	bne.n	8003732 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f81f 	bl	8003770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d00f      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2b      	ldr	r2, [pc, #172]	; (800384c <TIM_Base_SetConfig+0xc8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00b      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <TIM_Base_SetConfig+0xcc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <TIM_Base_SetConfig+0xd0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a28      	ldr	r2, [pc, #160]	; (8003858 <TIM_Base_SetConfig+0xd4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d108      	bne.n	80037ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d017      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <TIM_Base_SetConfig+0xc8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <TIM_Base_SetConfig+0xcc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00f      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <TIM_Base_SetConfig+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <TIM_Base_SetConfig+0xd4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <TIM_Base_SetConfig+0xd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_Base_SetConfig+0x82>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <TIM_Base_SetConfig+0xdc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	615a      	str	r2, [r3, #20]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40010800 	.word	0x40010800
 800385c:	40010c00 	.word	0x40010c00
 8003860:	40011000 	.word	0x40011000

08003864 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003864:	b084      	sub	sp, #16
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	f107 001c 	add.w	r0, r7, #28
 8003872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800387a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800387c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800387e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003882:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003886:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800388a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800388e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800389e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	b004      	add	sp, #16
 80038b6:	4770      	bx	lr

080038b8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2203      	movs	r2, #3
 80038fc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80038fe:	2002      	movs	r0, #2
 8003900:	f7fd f81e 	bl	8000940 <HAL_Delay>
  
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0303 	and.w	r3, r3, #3
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003946:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800394c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003952:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003962:	f023 030f 	bic.w	r3, r3, #15
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	b2db      	uxtb	r3, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3314      	adds	r3, #20
 80039a0:	461a      	mov	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
}  
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039dc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80039e2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80039e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0

}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff78 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa40 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a46:	69fb      	ldr	r3, [r7, #28]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003a5e:	2311      	movs	r3, #17
 8003a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ff56 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	2111      	movs	r1, #17
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa1e 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003aa2:	2312      	movs	r3, #18
 8003aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aa6:	2340      	movs	r3, #64	; 0x40
 8003aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ff34 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	2112      	movs	r1, #18
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9fc 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ace:	69fb      	ldr	r3, [r7, #28]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003ae6:	2318      	movs	r3, #24
 8003ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff12 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	2118      	movs	r1, #24
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9da 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b12:	69fb      	ldr	r3, [r7, #28]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003b2a:	2319      	movs	r3, #25
 8003b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b2e:	2340      	movs	r3, #64	; 0x40
 8003b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fef0 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	2119      	movs	r1, #25
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9b8 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b56:	69fb      	ldr	r3, [r7, #28]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b70:	2340      	movs	r3, #64	; 0x40
 8003b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff fecf 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <SDMMC_CmdStopTransfer+0x40>)
 8003b8c:	210c      	movs	r1, #12
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f998 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b96:	69fb      	ldr	r3, [r7, #28]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	05f5e100 	.word	0x05f5e100

08003ba4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bb8:	2340      	movs	r3, #64	; 0x40
 8003bba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bc6:	f107 0310 	add.w	r3, r7, #16
 8003bca:	4619      	mov	r1, r3
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff feab 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	2107      	movs	r1, #7
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f973 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fe8a 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f92d 	bl	8003e74 <SDMMC_GetCmdError>
 8003c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003c2e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c34:	2308      	movs	r3, #8
 8003c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c38:	2340      	movs	r3, #64	; 0x40
 8003c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fe6b 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fb16 	bl	8004284 <SDMMC_GetCmdResp7>
 8003c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c72:	2337      	movs	r3, #55	; 0x37
 8003c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c76:	2340      	movs	r3, #64	; 0x40
 8003c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff fe4c 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	2137      	movs	r1, #55	; 0x37
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f914 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003cbe:	2329      	movs	r3, #41	; 0x29
 8003cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fe26 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa23 	bl	8004128 <SDMMC_GetCmdResp3>
 8003ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d00:	2340      	movs	r3, #64	; 0x40
 8003d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fe07 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	2106      	movs	r1, #6
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f8cf 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d28:	69fb      	ldr	r3, [r7, #28]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003d3e:	2333      	movs	r3, #51	; 0x33
 8003d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d42:	2340      	movs	r3, #64	; 0x40
 8003d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d50:	f107 0308 	add.w	r3, r7, #8
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fde6 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	2133      	movs	r1, #51	; 0x33
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8ae 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003d80:	2302      	movs	r3, #2
 8003d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d84:	23c0      	movs	r3, #192	; 0xc0
 8003d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff fdc5 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f97c 	bl	800409c <SDMMC_GetCmdResp2>
 8003da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003da6:	69fb      	ldr	r3, [r7, #28]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003dc2:	23c0      	movs	r3, #192	; 0xc0
 8003dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fda6 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f95d 	bl	800409c <SDMMC_GetCmdResp2>
 8003de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003de4:	69fb      	ldr	r3, [r7, #28]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b088      	sub	sp, #32
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fd87 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9bc 	bl	800419c <SDMMC_GetCmdResp6>
 8003e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e26:	69fb      	ldr	r3, [r7, #28]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003e3e:	230d      	movs	r3, #13
 8003e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e42:	2340      	movs	r3, #64	; 0x40
 8003e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fd66 	bl	8003928 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	210d      	movs	r1, #13
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f82e 	bl	8003ec4 <SDMMC_GetCmdResp1>
 8003e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003e74:	b490      	push	{r4, r7}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <SDMMC_GetCmdError+0x48>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <SDMMC_GetCmdError+0x4c>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0a5b      	lsrs	r3, r3, #9
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003e90:	4623      	mov	r3, r4
 8003e92:	1e5c      	subs	r4, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e9c:	e009      	b.n	8003eb2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f2      	beq.n	8003e90 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	22c5      	movs	r2, #197	; 0xc5
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc90      	pop	{r4, r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000044 	.word	0x20000044
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ed2:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <SDMMC_GetCmdResp1+0x1cc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <SDMMC_GetCmdResp1+0x1d0>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	1e5c      	subs	r4, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ef0:	e0c9      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <SDMMC_GetCmdResp1+0x20>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1eb      	bne.n	8003ee4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f1e:	2304      	movs	r3, #4
 8003f20:	e0b1      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0a6      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	22c5      	movs	r2, #197	; 0xc5
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fd1b 	bl	800397a <SDIO_GetCommandResponse>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	7afb      	ldrb	r3, [r7, #11]
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d001      	beq.n	8003f52 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e099      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003f52:	2100      	movs	r1, #0
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff fd1c 	bl	8003992 <SDIO_GetResponse>
 8003f5a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <SDMMC_GetCmdResp1+0x1d4>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e08d      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da02      	bge.n	8003f76 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f74:	e087      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003f80:	2340      	movs	r3, #64	; 0x40
 8003f82:	e080      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	e079      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa0:	e071      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb0:	e069      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc0:	e061      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd0:	e059      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe0:	e051      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff0:	e049      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004000:	e041      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800400c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004010:	e039      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800401c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004020:	e031      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800402c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004030:	e029      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800403c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004040:	e021      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800404c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004050:	e019      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800405c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004060:	e011      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800406c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004070:	e009      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800407c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004080:	e001      	b.n	8004086 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	20000044 	.word	0x20000044
 8004094:	10624dd3 	.word	0x10624dd3
 8004098:	fdffe008 	.word	0xfdffe008

0800409c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800409c:	b490      	push	{r4, r7}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040a4:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <SDMMC_GetCmdResp2+0x84>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <SDMMC_GetCmdResp2+0x88>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0a5b      	lsrs	r3, r3, #9
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80040b8:	4623      	mov	r3, r4
 80040ba:	1e5c      	subs	r4, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040c4:	e026      	b.n	8004114 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <SDMMC_GetCmdResp2+0x1c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1eb      	bne.n	80040b8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040f2:	2304      	movs	r3, #4
 80040f4:	e00e      	b.n	8004114 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004108:	2301      	movs	r3, #1
 800410a:	e003      	b.n	8004114 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22c5      	movs	r2, #197	; 0xc5
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bc90      	pop	{r4, r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000044 	.word	0x20000044
 8004124:	10624dd3 	.word	0x10624dd3

08004128 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004128:	b490      	push	{r4, r7}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <SDMMC_GetCmdResp3+0x6c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <SDMMC_GetCmdResp3+0x70>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004144:	4623      	mov	r3, r4
 8004146:	1e5c      	subs	r4, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800414c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004150:	e01b      	b.n	800418a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <SDMMC_GetCmdResp3+0x1c>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1eb      	bne.n	8004144 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2204      	movs	r2, #4
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800417e:	2304      	movs	r3, #4
 8004180:	e003      	b.n	800418a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	22c5      	movs	r2, #197	; 0xc5
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bc90      	pop	{r4, r7}
 8004192:	4770      	bx	lr
 8004194:	20000044 	.word	0x20000044
 8004198:	10624dd3 	.word	0x10624dd3

0800419c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	460b      	mov	r3, r1
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <SDMMC_GetCmdResp6+0xe0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a34      	ldr	r2, [pc, #208]	; (8004280 <SDMMC_GetCmdResp6+0xe4>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80041be:	4623      	mov	r3, r4
 80041c0:	1e5c      	subs	r4, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041ca:	e052      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <SDMMC_GetCmdResp6+0x22>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1eb      	bne.n	80041be <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2204      	movs	r2, #4
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041f8:	2304      	movs	r3, #4
 80041fa:	e03a      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800420e:	2301      	movs	r3, #1
 8004210:	e02f      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fbb1 	bl	800397a <SDIO_GetCommandResponse>
 8004218:	4603      	mov	r3, r0
 800421a:	461a      	mov	r2, r3
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	4293      	cmp	r3, r2
 8004220:	d001      	beq.n	8004226 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004222:	2301      	movs	r3, #1
 8004224:	e025      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22c5      	movs	r2, #197	; 0xc5
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800422c:	2100      	movs	r1, #0
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fbaf 	bl	8003992 <SDIO_GetResponse>
 8004234:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800424a:	2300      	movs	r3, #0
 800424c:	e011      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800425c:	e009      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426c:	e001      	b.n	8004272 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800426e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	20000044 	.word	0x20000044
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004284:	b490      	push	{r4, r7}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <SDMMC_GetCmdResp7+0x90>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a21      	ldr	r2, [pc, #132]	; (8004318 <SDMMC_GetCmdResp7+0x94>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0a5b      	lsrs	r3, r3, #9
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042a0:	4623      	mov	r3, r4
 80042a2:	1e5c      	subs	r4, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042ac:	e02c      	b.n	8004308 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <SDMMC_GetCmdResp7+0x1c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1eb      	bne.n	80042a0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2204      	movs	r2, #4
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042da:	2304      	movs	r3, #4
 80042dc:	e014      	b.n	8004308 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e009      	b.n	8004308 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2240      	movs	r2, #64	; 0x40
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004306:	2300      	movs	r3, #0
  
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bc90      	pop	{r4, r7}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000044 	.word	0x20000044
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <MX_FATFS_Init+0x18>)
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_FATFS_Init+0x1c>)
 8004324:	f002 fdce 	bl	8006ec4 <FATFS_LinkDriver>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <MX_FATFS_Init+0x20>)
 800432e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200012e4 	.word	0x200012e4
 8004338:	08009cec 	.word	0x08009cec
 800433c:	2000185c 	.word	0x2000185c

08004340 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004344:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800435a:	f000 f8bd 	bl	80044d8 <BSP_SD_IsDetected>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d001      	beq.n	8004368 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e011      	b.n	800438c <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004368:	480a      	ldr	r0, [pc, #40]	; (8004394 <BSP_SD_Init+0x44>)
 800436a:	f7fd fdb3 	bl	8001ed4 <HAL_SD_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 8004378:	2100      	movs	r1, #0
 800437a:	4806      	ldr	r0, [pc, #24]	; (8004394 <BSP_SD_Init+0x44>)
 800437c:	f7fe fb7e 	bl	8002a7c <HAL_SD_ConfigWideBusOperation>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800438a:	79fb      	ldrb	r3, [r7, #7]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20001798 	.word	0x20001798

08004398 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read  
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  hsd.hdmatx = NULL;
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigRx(&hsd);
 80043ae:	480d      	ldr	r0, [pc, #52]	; (80043e4 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80043b0:	f000 f89e 	bl	80044f0 <SD_DMAConfigRx>
 80043b4:	4603      	mov	r3, r0
 80043b6:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    state = HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4807      	ldr	r0, [pc, #28]	; (80043e4 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80043c6:	f7fd fe1f 	bl	8002008 <HAL_SD_ReadBlocks_DMA>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <BSP_SD_ReadBlocks_DMA+0x42>
  }    
  else
  {
    return MSD_ERROR;
 80043d8:	2301      	movs	r3, #1
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20001798 	.word	0x20001798

080043e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written  
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint8_t state = MSD_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  hsd.hdmarx = NULL;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <BSP_SD_WriteBlocks_DMA+0x4c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    
  /* Prepare the dma channel for a read operation */
  state = SD_DMAConfigTx(&hsd);
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8004400:	f000 f8be 	bl	8004580 <SD_DMAConfigTx>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]
  
  if(state == HAL_OK)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <BSP_SD_WriteBlocks_DMA+0x36>
  { 
    /* Write block(s) in DMA transfer mode */
    state = HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	4807      	ldr	r0, [pc, #28]	; (8004434 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8004416:	f7fd fee1 	bl	80021dc <HAL_SD_WriteBlocks_DMA>
 800441a:	4603      	mov	r3, r0
 800441c:	75fb      	strb	r3, [r7, #23]
  }
    
  if(state == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8004428:	2301      	movs	r3, #1
  } 
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20001798 	.word	0x20001798

08004438 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 800443e:	480c      	ldr	r0, [pc, #48]	; (8004470 <BSP_SD_GetCardState+0x38>)
 8004440:	f7fe fb98 	bl	8002b74 <HAL_SD_GetCardState>
 8004444:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b04      	cmp	r3, #4
 800444a:	d101      	bne.n	8004450 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 800444c:	2300      	movs	r3, #0
 800444e:	e00b      	b.n	8004468 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d005      	beq.n	8004462 <BSP_SD_GetCardState+0x2a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b06      	cmp	r3, #6
 800445a:	d002      	beq.n	8004462 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b07      	cmp	r3, #7
 8004460:	d101      	bne.n	8004466 <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20001798 	.word	0x20001798

08004474 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4803      	ldr	r0, [pc, #12]	; (800448c <BSP_SD_GetCardInfo+0x18>)
 8004480:	f7fe fad0 	bl	8002a24 <HAL_SD_GetCardInfo>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20001798 	.word	0x20001798

08004490 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004498:	f000 f818 	bl	80044cc <BSP_SD_AbortCallback>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80044ac:	f000 fab2 	bl	8004a14 <BSP_SD_WriteCpltCallback>
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80044c0:	f000 fab6 	bl	8004a30 <BSP_SD_ReadCpltCallback>
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0

}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80044de:	2301      	movs	r3, #1
 80044e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	b2db      	uxtb	r3, r3
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <SD_DMAConfigRx>:

/* USER CODE BEGIN DMAConfigCode */
HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	static DMA_HandleTypeDef hdma_rx;
		HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]

		HAL_DMA_DeInit(hsd->hdmatx);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fb93 	bl	8000c2c <HAL_DMA_DeInit>

		/* Configure the DMA Rx parameters */
		hdma_rx.Instance = DMA2_Channel4;
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <SD_DMAConfigRx+0x8c>)
 800450a:	601a      	str	r2, [r3, #0]
		hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <SD_DMAConfigRx+0x88>)
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
		hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
		hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <SD_DMAConfigRx+0x88>)
 800451a:	2280      	movs	r2, #128	; 0x80
 800451c:	60da      	str	r2, [r3, #12]
		hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	611a      	str	r2, [r3, #16]
		hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800452c:	615a      	str	r2, [r3, #20]
		hdma_rx.Init.Mode = DMA_NORMAL;
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
		hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004536:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800453a:	61da      	str	r2, [r3, #28]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsd,hdmarx,hdma_rx);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
 8004542:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6253      	str	r3, [r2, #36]	; 0x24

		/* Stop any ongoing transfer and reset the state*/
		  HAL_DMA_Abort(&hdma_rx);
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <SD_DMAConfigRx+0x88>)
 800454a:	f7fc fc3d 	bl	8000dc8 <HAL_DMA_Abort>

		/* Deinitialize the Channel for new transfer */
		  HAL_DMA_DeInit(&hdma_rx);
 800454e:	480a      	ldr	r0, [pc, #40]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004550:	f7fc fb6c 	bl	8000c2c <HAL_DMA_DeInit>

		/* Configure the DMA Channel */
		  status = HAL_DMA_Init(&hdma_rx);
 8004554:	4808      	ldr	r0, [pc, #32]	; (8004578 <SD_DMAConfigRx+0x88>)
 8004556:	f7fc faf5 	bl	8000b44 <HAL_DMA_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]

		/* NVIC configuration for DMA transfer complete interrupt */
		  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800455e:	2200      	movs	r2, #0
 8004560:	2105      	movs	r1, #5
 8004562:	2035      	movs	r0, #53	; 0x35
 8004564:	f7fc fac3 	bl	8000aee <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004568:	2035      	movs	r0, #53	; 0x35
 800456a:	f7fc fadc 	bl	8000b26 <HAL_NVIC_EnableIRQ>

		  return status;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
} 
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	200002cc 	.word	0x200002cc
 800457c:	40026444 	.word	0x40026444

08004580 <SD_DMAConfigTx>:

HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* function body to be changed by the user (if needed) */
	static DMA_HandleTypeDef hdma_tx;
	  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]

	  /* Configure the DMA Tx parameters */
	  	hdma_tx.Instance = DMA2_Channel4;
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <SD_DMAConfigTx+0x80>)
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <SD_DMAConfigTx+0x84>)
 8004590:	601a      	str	r2, [r3, #0]
	  	hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <SD_DMAConfigTx+0x80>)
 8004594:	2210      	movs	r2, #16
 8004596:	605a      	str	r2, [r3, #4]
	  	hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <SD_DMAConfigTx+0x80>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
	  	hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	60da      	str	r2, [r3, #12]
	  	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045aa:	611a      	str	r2, [r3, #16]
	  	hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b2:	615a      	str	r2, [r3, #20]
	  	hdma_tx.Init.Mode = DMA_NORMAL;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	619a      	str	r2, [r3, #24]
	  	hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80045c0:	61da      	str	r2, [r3, #28]

	  	/* Associate the DMA handle */
	  	__HAL_LINKDMA(hsd,hdmatx,hdma_tx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80045c8:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6253      	str	r3, [r2, #36]	; 0x24

	  	/* Stop any ongoing transfer and reset the state*/
	  	  HAL_DMA_Abort(&hdma_tx);
 80045ce:	480c      	ldr	r0, [pc, #48]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045d0:	f7fc fbfa 	bl	8000dc8 <HAL_DMA_Abort>

	  	/* Deinitialize the Channel for new transfer */
	  	  HAL_DMA_DeInit(&hdma_tx);
 80045d4:	480a      	ldr	r0, [pc, #40]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045d6:	f7fc fb29 	bl	8000c2c <HAL_DMA_DeInit>

	  	/* Configure the DMA Channel */
	  	  status = HAL_DMA_Init(&hdma_tx);
 80045da:	4809      	ldr	r0, [pc, #36]	; (8004600 <SD_DMAConfigTx+0x80>)
 80045dc:	f7fc fab2 	bl	8000b44 <HAL_DMA_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]

	  	 /* NVIC configuration for DMA transfer complete interrupt */
	  	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2105      	movs	r1, #5
 80045e8:	2035      	movs	r0, #53	; 0x35
 80045ea:	f7fc fa80 	bl	8000aee <HAL_NVIC_SetPriority>
	  	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80045ee:	2035      	movs	r0, #53	; 0x35
 80045f0:	f7fc fa99 	bl	8000b26 <HAL_NVIC_EnableIRQ>

	  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000310 	.word	0x20000310
 8004604:	40026444 	.word	0x40026444

08004608 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8004610:	f002 fcee 	bl	8006ff0 <osKernelSysTick>
 8004614:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8004616:	e006      	b.n	8004626 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004618:	f7ff ff0e 	bl	8004438 <BSP_SD_GetCardState>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004622:	2300      	movs	r3, #0
 8004624:	e009      	b.n	800463a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8004626:	f002 fce3 	bl	8006ff0 <osKernelSysTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d8f0      	bhi.n	8004618 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <SD_CheckStatus+0x38>)
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004654:	f7ff fef0 	bl	8004438 <BSP_SD_GetCardState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <SD_CheckStatus+0x38>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <SD_CheckStatus+0x38>)
 800466c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800466e:	4b03      	ldr	r3, [pc, #12]	; (800467c <SD_CheckStatus+0x38>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000050 	.word	0x20000050

08004680 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <SD_initialize+0x74>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8004690:	f002 fca2 	bl	8006fd8 <osKernelRunning>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d024      	beq.n	80046e4 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800469a:	f7ff fe59 	bl	8004350 <BSP_SD_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d107      	bne.n	80046b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ffcc 	bl	8004644 <SD_CheckStatus>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <SD_initialize+0x74>)
 80046b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <SD_initialize+0x74>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d012      	beq.n	80046e4 <SD_initialize+0x64>
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <SD_initialize+0x78>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <SD_initialize+0x7c>)
 80046c8:	f107 0408 	add.w	r4, r7, #8
 80046cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f002 fdc4 	bl	8007266 <osMessageCreate>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SD_initialize+0x78>)
 80046e2:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <SD_initialize+0x74>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd90      	pop	{r4, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000050 	.word	0x20000050
 80046f8:	20000554 	.word	0x20000554
 80046fc:	08009c6c 	.word	0x08009c6c

08004700 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff99 	bl	8004644 <SD_CheckStatus>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af00      	add	r7, sp, #0
 8004722:	61b9      	str	r1, [r7, #24]
 8004724:	617a      	str	r2, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	4603      	mov	r3, r0
 800472a:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004732:	f247 5030 	movw	r0, #30000	; 0x7530
 8004736:	f7ff ff67 	bl	8004608 <SD_CheckStatusWithTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	da02      	bge.n	8004746 <SD_read+0x2a>
  {
    return res;
 8004740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004744:	e06c      	b.n	8004820 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11e      	bne.n	800478e <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	69b8      	ldr	r0, [r7, #24]
 8004756:	f7ff fe1f 	bl	8004398 <BSP_SD_ReadBlocks_DMA>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8004760:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d159      	bne.n	800481c <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <SD_read+0x10c>)
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	f107 0320 	add.w	r3, r7, #32
 8004770:	f247 5230 	movw	r2, #30000	; 0x7530
 8004774:	4618      	mov	r0, r3
 8004776:	f002 fddf 	bl	8007338 <osMessageGet>
      if (event.status == osEventMessage) {
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2b10      	cmp	r3, #16
 800477e:	d14d      	bne.n	800481c <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2b01      	cmp	r3, #1
 8004784:	d14a      	bne.n	800481c <SD_read+0x100>
          res = RES_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800478c:	e046      	b.n	800481c <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800478e:	2300      	movs	r3, #0
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
 8004792:	e032      	b.n	80047fa <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	617a      	str	r2, [r7, #20]
 800479a:	2201      	movs	r2, #1
 800479c:	4619      	mov	r1, r3
 800479e:	4823      	ldr	r0, [pc, #140]	; (800482c <SD_read+0x110>)
 80047a0:	f7ff fdfa 	bl	8004398 <BSP_SD_ReadBlocks_DMA>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 80047aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d128      	bne.n	8004804 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <SD_read+0x10c>)
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	463b      	mov	r3, r7
 80047b8:	f247 5230 	movw	r2, #30000	; 0x7530
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 fdbb 	bl	8007338 <osMessageGet>
 80047c2:	f107 0320 	add.w	r3, r7, #32
 80047c6:	463a      	mov	r2, r7
 80047c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d10f      	bne.n	80047f4 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10c      	bne.n	80047f4 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <SD_read+0x110>)
 80047de:	4618      	mov	r0, r3
 80047e0:	4611      	mov	r1, r2
 80047e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e6:	461a      	mov	r2, r3
 80047e8:	f005 f9dc 	bl	8009ba4 <memcpy>
            buff += BLOCKSIZE;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047f2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	3301      	adds	r3, #1
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d8c8      	bhi.n	8004794 <SD_read+0x78>
 8004802:	e000      	b.n	8004806 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8004804:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d106      	bne.n	800481c <SD_read+0x100>
 800480e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <SD_read+0x100>
      res = RES_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800481c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8004820:	4618      	mov	r0, r3
 8004822:	3738      	adds	r7, #56	; 0x38
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000554 	.word	0x20000554
 800482c:	20000354 	.word	0x20000354

08004830 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b090      	sub	sp, #64	; 0x40
 8004834:	af00      	add	r7, sp, #0
 8004836:	61b9      	str	r1, [r7, #24]
 8004838:	617a      	str	r2, [r7, #20]
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	4603      	mov	r3, r0
 800483e:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004846:	f247 5030 	movw	r0, #30000	; 0x7530
 800484a:	f7ff fedd 	bl	8004608 <SD_CheckStatusWithTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	da02      	bge.n	800485a <SD_write+0x2a>
  {
    return res;
 8004854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004858:	e07c      	b.n	8004954 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d12e      	bne.n	80048c2 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	69b8      	ldr	r0, [r7, #24]
 800486a:	f7ff fdbd 	bl	80043e8 <BSP_SD_WriteBlocks_DMA>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d16d      	bne.n	8004950 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8004874:	4b39      	ldr	r3, [pc, #228]	; (800495c <SD_write+0x12c>)
 8004876:	6819      	ldr	r1, [r3, #0]
 8004878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487c:	f247 5230 	movw	r2, #30000	; 0x7530
 8004880:	4618      	mov	r0, r3
 8004882:	f002 fd59 	bl	8007338 <osMessageGet>

      if (event.status == osEventMessage)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b10      	cmp	r3, #16
 800488a:	d161      	bne.n	8004950 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b02      	cmp	r3, #2
 8004890:	d15e      	bne.n	8004950 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8004892:	f002 fbad 	bl	8006ff0 <osKernelSysTick>
 8004896:	4603      	mov	r3, r0
 8004898:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800489c:	3330      	adds	r3, #48	; 0x30
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80048a0:	e008      	b.n	80048b4 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80048a2:	f7ff fdc9 	bl	8004438 <BSP_SD_GetCardState>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <SD_write+0x84>
            {
              res = RES_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80048b2:	e04d      	b.n	8004950 <SD_write+0x120>
          while(timer > osKernelSysTick())
 80048b4:	f002 fb9c 	bl	8006ff0 <osKernelSysTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	4293      	cmp	r3, r2
 80048be:	d8f0      	bhi.n	80048a2 <SD_write+0x72>
 80048c0:	e046      	b.n	8004950 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 80048c2:	2300      	movs	r3, #0
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c6:	e032      	b.n	800492e <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	617a      	str	r2, [r7, #20]
 80048ce:	2201      	movs	r2, #1
 80048d0:	4619      	mov	r1, r3
 80048d2:	4823      	ldr	r0, [pc, #140]	; (8004960 <SD_write+0x130>)
 80048d4:	f7ff fd88 	bl	80043e8 <BSP_SD_WriteBlocks_DMA>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 80048de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d128      	bne.n	8004938 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <SD_write+0x12c>)
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	463b      	mov	r3, r7
 80048ec:	f247 5230 	movw	r2, #30000	; 0x7530
 80048f0:	4618      	mov	r0, r3
 80048f2:	f002 fd21 	bl	8007338 <osMessageGet>
 80048f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048fa:	463a      	mov	r2, r7
 80048fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80048fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	2b10      	cmp	r3, #16
 8004906:	d10f      	bne.n	8004928 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2b02      	cmp	r3, #2
 800490c:	d10c      	bne.n	8004928 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	4a13      	ldr	r2, [pc, #76]	; (8004960 <SD_write+0x130>)
 8004912:	4618      	mov	r0, r3
 8004914:	4611      	mov	r1, r2
 8004916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800491a:	461a      	mov	r2, r3
 800491c:	f005 f942 	bl	8009ba4 <memcpy>
            buff += BLOCKSIZE;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004926:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	3301      	adds	r3, #1
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	429a      	cmp	r2, r3
 8004934:	d8c8      	bhi.n	80048c8 <SD_write+0x98>
 8004936:	e000      	b.n	800493a <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8004938:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d106      	bne.n	8004950 <SD_write+0x120>
 8004942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <SD_write+0x120>
      res = RES_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8004950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8004954:	4618      	mov	r0, r3
 8004956:	3740      	adds	r7, #64	; 0x40
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000554 	.word	0x20000554
 8004960:	20000354 	.word	0x20000354

08004964 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	603a      	str	r2, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
 8004970:	460b      	mov	r3, r1
 8004972:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <SD_ioctl+0xac>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <SD_ioctl+0x28>
 8004988:	2303      	movs	r3, #3
 800498a:	e03c      	b.n	8004a06 <SD_ioctl+0xa2>

  switch (cmd)
 800498c:	79bb      	ldrb	r3, [r7, #6]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d834      	bhi.n	80049fc <SD_ioctl+0x98>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <SD_ioctl+0x34>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b1 	.word	0x080049b1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049e3 	.word	0x080049e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049ae:	e028      	b.n	8004a02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fd5d 	bl	8004474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049c6:	e01c      	b.n	8004a02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fd51 	bl	8004474 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049e0:	e00f      	b.n	8004a02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fd44 	bl	8004474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	0a5a      	lsrs	r2, r3, #9
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049fa:	e002      	b.n	8004a02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3730      	adds	r7, #48	; 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000050 	.word	0x20000050

08004a14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <BSP_SD_WriteCpltCallback+0x18>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fc48 	bl	80072b8 <osMessagePut>
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000554 	.word	0x20000554

08004a30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <BSP_SD_ReadCpltCallback+0x18>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f002 fc3a 	bl	80072b8 <osMessagePut>
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000554 	.word	0x20000554

08004a4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <disk_status+0x30>)
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	79fa      	ldrb	r2, [r7, #7]
 8004a64:	4905      	ldr	r1, [pc, #20]	; (8004a7c <disk_status+0x30>)
 8004a66:	440a      	add	r2, r1
 8004a68:	7a12      	ldrb	r2, [r2, #8]
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4798      	blx	r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000580 	.word	0x20000580

08004a80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <disk_initialize+0x48>)
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d111      	bne.n	8004abc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	4a0b      	ldr	r2, [pc, #44]	; (8004ac8 <disk_initialize+0x48>)
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <disk_initialize+0x48>)
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	79fa      	ldrb	r2, [r7, #7]
 8004aae:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <disk_initialize+0x48>)
 8004ab0:	440a      	add	r2, r1
 8004ab2:	7a12      	ldrb	r2, [r2, #8]
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4798      	blx	r3
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000580 	.word	0x20000580

08004acc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <disk_read+0x3c>)
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	689c      	ldr	r4, [r3, #8]
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <disk_read+0x3c>)
 8004aec:	4413      	add	r3, r2
 8004aee:	7a18      	ldrb	r0, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	47a0      	blx	r4
 8004af8:	4603      	mov	r3, r0
 8004afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000580 	.word	0x20000580

08004b0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <disk_write+0x3c>)
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	68dc      	ldr	r4, [r3, #12]
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	4a07      	ldr	r2, [pc, #28]	; (8004b48 <disk_write+0x3c>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	7a18      	ldrb	r0, [r3, #8]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	47a0      	blx	r4
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000580 	.word	0x20000580

08004b4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	603a      	str	r2, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <disk_ioctl+0x38>)
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	79fa      	ldrb	r2, [r7, #7]
 8004b6a:	4906      	ldr	r1, [pc, #24]	; (8004b84 <disk_ioctl+0x38>)
 8004b6c:	440a      	add	r2, r1
 8004b6e:	7a10      	ldrb	r0, [r2, #8]
 8004b70:	79b9      	ldrb	r1, [r7, #6]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4798      	blx	r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000580 	.word	0x20000580

08004b88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b98:	89fb      	ldrh	r3, [r7, #14]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	b21a      	sxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004baa:	89fb      	ldrh	r3, [r7, #14]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3303      	adds	r3, #3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	3202      	adds	r2, #2
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	3201      	adds	r2, #1
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	887a      	ldrh	r2, [r7, #2]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	1c53      	adds	r3, r2, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	6179      	str	r1, [r7, #20]
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f1      	bne.n	8004c9e <mem_cpy+0x1a>
	}
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	617a      	str	r2, [r7, #20]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f3      	bne.n	8004cd4 <mem_set+0x10>
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004cf6:	b480      	push	{r7}
 8004cf8:	b089      	sub	sp, #36	; 0x24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	61fa      	str	r2, [r7, #28]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	61ba      	str	r2, [r7, #24]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	1acb      	subs	r3, r1, r3
 8004d22:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <mem_cmp+0x40>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0eb      	beq.n	8004d0e <mem_cmp+0x18>

	return r;
 8004d36:	697b      	ldr	r3, [r7, #20]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3724      	adds	r7, #36	; 0x24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d4c:	e002      	b.n	8004d54 <chk_chr+0x12>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3301      	adds	r3, #1
 8004d52:	607b      	str	r3, [r7, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <chk_chr+0x26>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d1f2      	bne.n	8004d4e <chk_chr+0xc>
	return *str;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <lock_fs+0x22>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f002 f8d6 	bl	8006f3a <ff_req_grant>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <lock_fs+0x22>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <lock_fs+0x24>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <unlock_fs+0x2e>
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d00a      	beq.n	8004dd0 <unlock_fs+0x2e>
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	2b0b      	cmp	r3, #11
 8004dbe:	d007      	beq.n	8004dd0 <unlock_fs+0x2e>
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	d004      	beq.n	8004dd0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f002 f8ca 	bl	8006f64 <ff_rel_grant>
	}
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e029      	b.n	8004e40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <chk_lock+0xb0>)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01d      	beq.n	8004e36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004dfa:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <chk_lock+0xb0>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d116      	bne.n	8004e3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <chk_lock+0xb0>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d10c      	bne.n	8004e3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <chk_lock+0xb0>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	3308      	adds	r3, #8
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d102      	bne.n	8004e3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e34:	e007      	b.n	8004e46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d9d2      	bls.n	8004dec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d109      	bne.n	8004e60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <chk_lock+0x80>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d101      	bne.n	8004e5c <chk_lock+0x84>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e010      	b.n	8004e7e <chk_lock+0xa6>
 8004e5c:	2312      	movs	r3, #18
 8004e5e:	e00e      	b.n	8004e7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <chk_lock+0xa0>
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <chk_lock+0xb0>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4413      	add	r3, r2
 8004e6e:	330c      	adds	r3, #12
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e76:	d101      	bne.n	8004e7c <chk_lock+0xa4>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	e000      	b.n	8004e7e <chk_lock+0xa6>
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	20000560 	.word	0x20000560

08004e8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	e002      	b.n	8004e9e <enq_lock+0x12>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d806      	bhi.n	8004eb2 <enq_lock+0x26>
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <enq_lock+0x3c>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	4413      	add	r3, r2
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f2      	bne.n	8004e98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	20000560 	.word	0x20000560

08004ecc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e01f      	b.n	8004f1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004edc:	4a41      	ldr	r2, [pc, #260]	; (8004fe4 <inc_lock+0x118>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d113      	bne.n	8004f16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004eee:	4a3d      	ldr	r2, [pc, #244]	; (8004fe4 <inc_lock+0x118>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004f02:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <inc_lock+0x118>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	4413      	add	r3, r2
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d006      	beq.n	8004f24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d9dc      	bls.n	8004edc <inc_lock+0x10>
 8004f22:	e000      	b.n	8004f26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004f24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d132      	bne.n	8004f92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e002      	b.n	8004f38 <inc_lock+0x6c>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d806      	bhi.n	8004f4c <inc_lock+0x80>
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <inc_lock+0x118>)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f2      	bne.n	8004f32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d101      	bne.n	8004f56 <inc_lock+0x8a>
 8004f52:	2300      	movs	r3, #0
 8004f54:	e040      	b.n	8004fd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4922      	ldr	r1, [pc, #136]	; (8004fe4 <inc_lock+0x118>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	440b      	add	r3, r1
 8004f62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	491e      	ldr	r1, [pc, #120]	; (8004fe4 <inc_lock+0x118>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	440b      	add	r3, r1
 8004f70:	3304      	adds	r3, #4
 8004f72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <inc_lock+0x118>)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	440b      	add	r3, r1
 8004f80:	3308      	adds	r3, #8
 8004f82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f84:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <inc_lock+0x118>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	4413      	add	r3, r2
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	2200      	movs	r2, #0
 8004f90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <inc_lock+0xe0>
 8004f98:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <inc_lock+0x118>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <inc_lock+0xe0>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e015      	b.n	8004fd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <inc_lock+0xf8>
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <inc_lock+0x118>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4413      	add	r3, r2
 8004fba:	330c      	adds	r3, #12
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	e001      	b.n	8004fc8 <inc_lock+0xfc>
 8004fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <inc_lock+0x118>)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	440b      	add	r3, r1
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000560 	.word	0x20000560

08004fe8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d825      	bhi.n	8005048 <dec_lock+0x60>
		n = Files[i].ctr;
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <dec_lock+0x70>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4413      	add	r3, r2
 8005004:	330c      	adds	r3, #12
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005010:	d101      	bne.n	8005016 <dec_lock+0x2e>
 8005012:	2300      	movs	r3, #0
 8005014:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005016:	89fb      	ldrh	r3, [r7, #14]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <dec_lock+0x3a>
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	3b01      	subs	r3, #1
 8005020:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005022:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <dec_lock+0x70>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4413      	add	r3, r2
 800502a:	330c      	adds	r3, #12
 800502c:	89fa      	ldrh	r2, [r7, #14]
 800502e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005030:	89fb      	ldrh	r3, [r7, #14]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <dec_lock+0x5a>
 8005036:	4a08      	ldr	r2, [pc, #32]	; (8005058 <dec_lock+0x70>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	4413      	add	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	737b      	strb	r3, [r7, #13]
 8005046:	e001      	b.n	800504c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005048:	2302      	movs	r3, #2
 800504a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800504c:	7b7b      	ldrb	r3, [r7, #13]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	20000560 	.word	0x20000560

0800505c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e010      	b.n	800508c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800506a:	4a0c      	ldr	r2, [pc, #48]	; (800509c <clear_lock+0x40>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4413      	add	r3, r2
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d105      	bne.n	8005086 <clear_lock+0x2a>
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <clear_lock+0x40>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d9eb      	bls.n	800506a <clear_lock+0xe>
	}
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	20000560 	.word	0x20000560

080050a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	78db      	ldrb	r3, [r3, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d034      	beq.n	800511e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7858      	ldrb	r0, [r3, #1]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80050c4:	2301      	movs	r3, #1
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	f7ff fd20 	bl	8004b0c <disk_write>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	e022      	b.n	800511e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d217      	bcs.n	800511e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	789b      	ldrb	r3, [r3, #2]
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	e010      	b.n	8005118 <sync_window+0x78>
					wsect += fs->fsize;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	7858      	ldrb	r0, [r3, #1]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800510a:	2301      	movs	r3, #1
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	f7ff fcfd 	bl	8004b0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3b01      	subs	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d8eb      	bhi.n	80050f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d01b      	beq.n	8005178 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff ffad 	bl	80050a0 <sync_window>
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d113      	bne.n	8005178 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7858      	ldrb	r0, [r3, #1]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800515a:	2301      	movs	r3, #1
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	f7ff fcb5 	bl	8004acc <disk_read>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ff87 	bl	80050a0 <sync_window>
 8005192:	4603      	mov	r3, r0
 8005194:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d158      	bne.n	800524e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d148      	bne.n	8005236 <sync_fs+0xb2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	791b      	ldrb	r3, [r3, #4]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d144      	bne.n	8005236 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3334      	adds	r3, #52	; 0x34
 80051b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fd84 	bl	8004cc4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3334      	adds	r3, #52	; 0x34
 80051c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80051c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fd16 	bl	8004bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3334      	adds	r3, #52	; 0x34
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <sync_fs+0xd4>)
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fd2a 	bl	8004c2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3334      	adds	r3, #52	; 0x34
 80051de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80051e2:	491e      	ldr	r1, [pc, #120]	; (800525c <sync_fs+0xd8>)
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fd22 	bl	8004c2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3334      	adds	r3, #52	; 0x34
 80051ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff fd18 	bl	8004c2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3334      	adds	r3, #52	; 0x34
 8005202:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7ff fd0e 	bl	8004c2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7858      	ldrb	r0, [r3, #1]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	2301      	movs	r3, #1
 800522c:	f7ff fc6e 	bl	8004b0c <disk_write>
			fs->fsi_flag = 0;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2200      	movs	r2, #0
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fc84 	bl	8004b4c <disk_ioctl>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <sync_fs+0xca>
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	41615252 	.word	0x41615252
 800525c:	61417272 	.word	0x61417272

08005260 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3b02      	subs	r3, #2
 800526e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	3b02      	subs	r3, #2
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d301      	bcc.n	8005280 <clust2sect+0x20>
 800527c:	2300      	movs	r3, #0
 800527e:	e008      	b.n	8005292 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	895b      	ldrh	r3, [r3, #10]
 8005284:	461a      	mov	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	fb03 f202 	mul.w	r2, r3, r2
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4413      	add	r3, r2
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d904      	bls.n	80052bc <get_fat+0x20>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e08c      	b.n	80053dc <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d045      	beq.n	800535c <get_fat+0xc0>
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d05d      	beq.n	8005390 <get_fat+0xf4>
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d177      	bne.n	80053c8 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	0a5b      	lsrs	r3, r3, #9
 80052ee:	4413      	add	r3, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	6938      	ldr	r0, [r7, #16]
 80052f4:	f7ff ff18 	bl	8005128 <move_window>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d167      	bne.n	80053ce <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	60fa      	str	r2, [r7, #12]
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005310:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	0a5b      	lsrs	r3, r3, #9
 800531a:	4413      	add	r3, r2
 800531c:	4619      	mov	r1, r3
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f7ff ff02 	bl	8005128 <move_window>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d153      	bne.n	80053d2 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <get_fat+0xb6>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	e002      	b.n	8005358 <get_fat+0xbc>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005358:	617b      	str	r3, [r7, #20]
			break;
 800535a:	e03f      	b.n	80053dc <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	4413      	add	r3, r2
 8005366:	4619      	mov	r1, r3
 8005368:	6938      	ldr	r0, [r7, #16]
 800536a:	f7ff fedd 	bl	8005128 <move_window>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d130      	bne.n	80053d6 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005382:	4413      	add	r3, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fbff 	bl	8004b88 <ld_word>
 800538a:	4603      	mov	r3, r0
 800538c:	617b      	str	r3, [r7, #20]
			break;
 800538e:	e025      	b.n	80053dc <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	09db      	lsrs	r3, r3, #7
 8005398:	4413      	add	r3, r2
 800539a:	4619      	mov	r1, r3
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7ff fec3 	bl	8005128 <move_window>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d118      	bne.n	80053da <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80053b6:	4413      	add	r3, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fbfc 	bl	8004bb6 <ld_dword>
 80053be:	4603      	mov	r3, r0
 80053c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053c4:	617b      	str	r3, [r7, #20]
			break;
 80053c6:	e009      	b.n	80053dc <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e006      	b.n	80053dc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ce:	bf00      	nop
 80053d0:	e004      	b.n	80053dc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053d2:	bf00      	nop
 80053d4:	e002      	b.n	80053dc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053da:	bf00      	nop
		}
	}

	return val;
 80053dc:	697b      	ldr	r3, [r7, #20]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80053e6:	b590      	push	{r4, r7, lr}
 80053e8:	b089      	sub	sp, #36	; 0x24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80053f2:	2302      	movs	r3, #2
 80053f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f240 80d6 	bls.w	80055aa <put_fat+0x1c4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	f080 80d0 	bcs.w	80055aa <put_fat+0x1c4>
		switch (fs->fs_type) {
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d073      	beq.n	80054fa <put_fat+0x114>
 8005412:	2b03      	cmp	r3, #3
 8005414:	f000 8091 	beq.w	800553a <put_fat+0x154>
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 80c6 	bne.w	80055aa <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4413      	add	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	0a5b      	lsrs	r3, r3, #9
 8005434:	4413      	add	r3, r2
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fe75 	bl	8005128 <move_window>
 800543e:	4603      	mov	r3, r0
 8005440:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005442:	7ffb      	ldrb	r3, [r7, #31]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 80a9 	bne.w	800559c <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	61b9      	str	r1, [r7, #24]
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	4413      	add	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <put_fat+0x9e>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	b25a      	sxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	b25b      	sxtb	r3, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	b25b      	sxtb	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e001      	b.n	8005488 <put_fat+0xa2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	4413      	add	r3, r2
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fe42 	bl	8005128 <move_window>
 80054a4:	4603      	mov	r3, r0
 80054a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054a8:	7ffb      	ldrb	r3, [r7, #31]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d178      	bne.n	80055a0 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	4413      	add	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <put_fat+0xea>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e00e      	b.n	80054ee <put_fat+0x108>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	f023 030f 	bic.w	r3, r3, #15
 80054da:	b25a      	sxtb	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	4313      	orrs	r3, r2
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	70da      	strb	r2, [r3, #3]
			break;
 80054f8:	e057      	b.n	80055aa <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	4413      	add	r3, r2
 8005504:	4619      	mov	r1, r3
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff fe0e 	bl	8005128 <move_window>
 800550c:	4603      	mov	r3, r0
 800550e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005510:	7ffb      	ldrb	r3, [r7, #31]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d146      	bne.n	80055a4 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005524:	4413      	add	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	b292      	uxth	r2, r2
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fb64 	bl	8004bfa <st_word>
			fs->wflag = 1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	70da      	strb	r2, [r3, #3]
			break;
 8005538:	e037      	b.n	80055aa <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	4413      	add	r3, r2
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fdee 	bl	8005128 <move_window>
 800554c:	4603      	mov	r3, r0
 800554e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005550:	7ffb      	ldrb	r3, [r7, #31]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d128      	bne.n	80055a8 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800556a:	4413      	add	r3, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fb22 	bl	8004bb6 <ld_dword>
 8005572:	4603      	mov	r3, r0
 8005574:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005578:	4323      	orrs	r3, r4
 800557a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800558a:	4413      	add	r3, r2
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fb4d 	bl	8004c2e <st_dword>
			fs->wflag = 1;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	70da      	strb	r2, [r3, #3]
			break;
 800559a:	e006      	b.n	80055aa <put_fat+0x1c4>
			if (res != FR_OK) break;
 800559c:	bf00      	nop
 800559e:	e004      	b.n	80055aa <put_fat+0x1c4>
			if (res != FR_OK) break;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <put_fat+0x1c4>
			if (res != FR_OK) break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <put_fat+0x1c4>
			if (res != FR_OK) break;
 80055a8:	bf00      	nop
		}
	}
	return res;
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3724      	adds	r7, #36	; 0x24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd90      	pop	{r4, r7, pc}

080055b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d904      	bls.n	80055da <remove_chain+0x26>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d301      	bcc.n	80055de <remove_chain+0x2a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e04b      	b.n	8005676 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00c      	beq.n	80055fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	69b8      	ldr	r0, [r7, #24]
 80055ec:	f7ff fefb 	bl	80053e6 <put_fat>
 80055f0:	4603      	mov	r3, r0
 80055f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80055f4:	7ffb      	ldrb	r3, [r7, #31]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <remove_chain+0x4a>
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	e03b      	b.n	8005676 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fe4b 	bl	800529c <get_fat>
 8005606:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d031      	beq.n	8005672 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <remove_chain+0x64>
 8005614:	2302      	movs	r3, #2
 8005616:	e02e      	b.n	8005676 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d101      	bne.n	8005624 <remove_chain+0x70>
 8005620:	2301      	movs	r3, #1
 8005622:	e028      	b.n	8005676 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005624:	2200      	movs	r2, #0
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	69b8      	ldr	r0, [r7, #24]
 800562a:	f7ff fedc 	bl	80053e6 <put_fat>
 800562e:	4603      	mov	r3, r0
 8005630:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <remove_chain+0x88>
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	e01c      	b.n	8005676 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	3b02      	subs	r3, #2
 8005646:	429a      	cmp	r2, r3
 8005648:	d20b      	bcs.n	8005662 <remove_chain+0xae>
			fs->free_clst++;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	791b      	ldrb	r3, [r3, #4]
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3c6      	bcc.n	80055fe <remove_chain+0x4a>
 8005670:	e000      	b.n	8005674 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005672:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <create_chain+0x2c>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d31b      	bcc.n	80056e2 <create_chain+0x64>
 80056aa:	2301      	movs	r3, #1
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	e018      	b.n	80056e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fdf2 	bl	800529c <get_fat>
 80056b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d801      	bhi.n	80056c4 <create_chain+0x46>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e070      	b.n	80057a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d101      	bne.n	80056d0 <create_chain+0x52>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	e06a      	b.n	80057a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d201      	bcs.n	80056de <create_chain+0x60>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	e063      	b.n	80057a6 <create_chain+0x128>
		scl = clst;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d307      	bcc.n	8005706 <create_chain+0x88>
				ncl = 2;
 80056f6:	2302      	movs	r3, #2
 80056f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d901      	bls.n	8005706 <create_chain+0x88>
 8005702:	2300      	movs	r3, #0
 8005704:	e04f      	b.n	80057a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fdc7 	bl	800529c <get_fat>
 800570e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00e      	beq.n	8005734 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d003      	beq.n	8005724 <create_chain+0xa6>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d101      	bne.n	8005728 <create_chain+0xaa>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	e03e      	b.n	80057a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	429a      	cmp	r2, r3
 800572e:	d1da      	bne.n	80056e6 <create_chain+0x68>
 8005730:	2300      	movs	r3, #0
 8005732:	e038      	b.n	80057a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005734:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005736:	f04f 32ff 	mov.w	r2, #4294967295
 800573a:	69f9      	ldr	r1, [r7, #28]
 800573c:	6938      	ldr	r0, [r7, #16]
 800573e:	f7ff fe52 	bl	80053e6 <put_fat>
 8005742:	4603      	mov	r3, r0
 8005744:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <create_chain+0xe2>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d006      	beq.n	8005760 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6938      	ldr	r0, [r7, #16]
 8005758:	f7ff fe45 	bl	80053e6 <put_fat>
 800575c:	4603      	mov	r3, r0
 800575e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <create_chain+0x116>
		fs->last_clst = ncl;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	3b02      	subs	r3, #2
 8005776:	429a      	cmp	r2, r3
 8005778:	d804      	bhi.n	8005784 <create_chain+0x106>
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	711a      	strb	r2, [r3, #4]
 8005792:	e007      	b.n	80057a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <create_chain+0x122>
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	e000      	b.n	80057a2 <create_chain+0x124>
 80057a0:	2301      	movs	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80057a4:	69fb      	ldr	r3, [r7, #28]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	3304      	adds	r3, #4
 80057c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	0a5b      	lsrs	r3, r3, #9
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	8952      	ldrh	r2, [r2, #10]
 80057ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	613a      	str	r2, [r7, #16]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <clmt_clust+0x3a>
 80057e4:	2300      	movs	r3, #0
 80057e6:	e010      	b.n	800580a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d307      	bcc.n	8005800 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3304      	adds	r3, #4
 80057fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057fe:	e7e9      	b.n	80057d4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005800:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582a:	d204      	bcs.n	8005836 <dir_sdi+0x22>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005836:	2302      	movs	r3, #2
 8005838:	e063      	b.n	8005902 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <dir_sdi+0x46>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d902      	bls.n	800585a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10c      	bne.n	800587a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	8912      	ldrh	r2, [r2, #8]
 8005868:	4293      	cmp	r3, r2
 800586a:	d301      	bcc.n	8005870 <dir_sdi+0x5c>
 800586c:	2302      	movs	r3, #2
 800586e:	e048      	b.n	8005902 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	61da      	str	r2, [r3, #28]
 8005878:	e029      	b.n	80058ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	025b      	lsls	r3, r3, #9
 8005880:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005882:	e019      	b.n	80058b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6979      	ldr	r1, [r7, #20]
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fd07 	bl	800529c <get_fat>
 800588e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d101      	bne.n	800589c <dir_sdi+0x88>
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d904      	bls.n	80058ac <dir_sdi+0x98>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d301      	bcc.n	80058b0 <dir_sdi+0x9c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e028      	b.n	8005902 <dir_sdi+0xee>
			ofs -= csz;
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d2e1      	bcs.n	8005884 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	6938      	ldr	r0, [r7, #16]
 80058c4:	f7ff fccc 	bl	8005260 <clust2sect>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <dir_sdi+0xcc>
 80058dc:	2302      	movs	r3, #2
 80058de:	e010      	b.n	8005902 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	441a      	add	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	3320      	adds	r3, #32
 8005920:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <dir_next+0x28>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005930:	d301      	bcc.n	8005936 <dir_next+0x2c>
 8005932:	2304      	movs	r3, #4
 8005934:	e0aa      	b.n	8005a8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 8098 	bne.w	8005a72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	8912      	ldrh	r2, [r2, #8]
 800595c:	4293      	cmp	r3, r2
 800595e:	f0c0 8088 	bcc.w	8005a72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	61da      	str	r2, [r3, #28]
 8005968:	2304      	movs	r3, #4
 800596a:	e08f      	b.n	8005a8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	0a5b      	lsrs	r3, r3, #9
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	8952      	ldrh	r2, [r2, #10]
 8005974:	3a01      	subs	r2, #1
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d17a      	bne.n	8005a72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7ff fc89 	bl	800529c <get_fat>
 800598a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d801      	bhi.n	8005996 <dir_next+0x8c>
 8005992:	2302      	movs	r3, #2
 8005994:	e07a      	b.n	8005a8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d101      	bne.n	80059a2 <dir_next+0x98>
 800599e:	2301      	movs	r3, #1
 80059a0:	e074      	b.n	8005a8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d358      	bcc.n	8005a5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	61da      	str	r2, [r3, #28]
 80059b8:	2304      	movs	r3, #4
 80059ba:	e067      	b.n	8005a8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7ff fe5a 	bl	800567e <create_chain>
 80059ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <dir_next+0xcc>
 80059d2:	2307      	movs	r3, #7
 80059d4:	e05a      	b.n	8005a8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <dir_next+0xd6>
 80059dc:	2302      	movs	r3, #2
 80059de:	e055      	b.n	8005a8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d101      	bne.n	80059ec <dir_next+0xe2>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e04f      	b.n	8005a8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff fb57 	bl	80050a0 <sync_window>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <dir_next+0xf2>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e047      	b.n	8005a8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3334      	adds	r3, #52	; 0x34
 8005a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f95c 	bl	8004cc4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	6979      	ldr	r1, [r7, #20]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fc24 	bl	8005260 <clust2sect>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a1e:	e012      	b.n	8005a46 <dir_next+0x13c>
						fs->wflag = 1;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fb3a 	bl	80050a0 <sync_window>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <dir_next+0x12c>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02a      	b.n	8005a8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	895b      	ldrh	r3, [r3, #10]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d3e6      	bcc.n	8005a20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fbfa 	bl	8005260 <clust2sect>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff feb4 	bl	8005814 <dir_sdi>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d12b      	bne.n	8005b0e <dir_alloc+0x7a>
		n = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fb31 	bl	8005128 <move_window>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11d      	bne.n	8005b0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2be5      	cmp	r3, #229	; 0xe5
 8005ad8:	d004      	beq.n	8005ae4 <dir_alloc+0x50>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d102      	bne.n	8005af8 <dir_alloc+0x64>
 8005af2:	e00c      	b.n	8005b0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005af8:	2101      	movs	r1, #1
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff05 	bl	800590a <dir_next>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0d7      	beq.n	8005aba <dir_alloc+0x26>
 8005b0a:	e000      	b.n	8005b0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d101      	bne.n	8005b18 <dir_alloc+0x84>
 8005b14:	2307      	movs	r3, #7
 8005b16:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	331a      	adds	r3, #26
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff f829 	bl	8004b88 <ld_word>
 8005b36:	4603      	mov	r3, r0
 8005b38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d109      	bne.n	8005b56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff f81e 	bl	8004b88 <ld_word>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005b56:	68fb      	ldr	r3, [r7, #12]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	331a      	adds	r3, #26
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	b292      	uxth	r2, r2
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff f83f 	bl	8004bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d109      	bne.n	8005b98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f103 0214 	add.w	r2, r3, #20
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7ff f831 	bl	8004bfa <st_word>
	}
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fe2f 	bl	8005814 <dir_sdi>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <dir_find+0x24>
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	e03e      	b.n	8005c42 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6938      	ldr	r0, [r7, #16]
 8005bcc:	f7ff faac 	bl	8005128 <move_window>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d12f      	bne.n	8005c3a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <dir_find+0x4e>
 8005be8:	2304      	movs	r3, #4
 8005bea:	75fb      	strb	r3, [r7, #23]
 8005bec:	e028      	b.n	8005c40 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	330b      	adds	r3, #11
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	330b      	adds	r3, #11
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <dir_find+0x86>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a18      	ldr	r0, [r3, #32]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	220b      	movs	r2, #11
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f7ff f86b 	bl	8004cf6 <mem_cmp>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c26:	2100      	movs	r1, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fe6e 	bl	800590a <dir_next>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0c5      	beq.n	8005bc4 <dir_find+0x24>
 8005c38:	e002      	b.n	8005c40 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005c3e:	bf00      	nop

	return res;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005c58:	2101      	movs	r1, #1
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff ff1a 	bl	8005a94 <dir_alloc>
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11c      	bne.n	8005ca4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68b8      	ldr	r0, [r7, #8]
 8005c72:	f7ff fa59 	bl	8005128 <move_window>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d111      	bne.n	8005ca4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	2220      	movs	r2, #32
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff f81b 	bl	8004cc4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a18      	ldr	r0, [r3, #32]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3324      	adds	r3, #36	; 0x24
 8005c96:	220b      	movs	r2, #11
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fe fff3 	bl	8004c84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3324      	adds	r3, #36	; 0x24
 8005cc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005cc6:	220b      	movs	r2, #11
 8005cc8:	2120      	movs	r1, #32
 8005cca:	68b8      	ldr	r0, [r7, #8]
 8005ccc:	f7fe fffa 	bl	8004cc4 <mem_set>
	si = i = 0; ni = 8;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	2308      	movs	r3, #8
 8005cda:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	617a      	str	r2, [r7, #20]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d94e      	bls.n	8005d8e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8005cf4:	d006      	beq.n	8005d04 <create_name+0x54>
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8005cfa:	d110      	bne.n	8005d1e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005cfc:	e002      	b.n	8005d04 <create_name+0x54>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	3301      	adds	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d0e:	d0f6      	beq.n	8005cfe <create_name+0x4e>
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b5c      	cmp	r3, #92	; 0x5c
 8005d1a:	d0f0      	beq.n	8005cfe <create_name+0x4e>
			break;
 8005d1c:	e038      	b.n	8005d90 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	2b2e      	cmp	r3, #46	; 0x2e
 8005d22:	d003      	beq.n	8005d2c <create_name+0x7c>
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d30c      	bcc.n	8005d46 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b0b      	cmp	r3, #11
 8005d30:	d002      	beq.n	8005d38 <create_name+0x88>
 8005d32:	7ffb      	ldrb	r3, [r7, #31]
 8005d34:	2b2e      	cmp	r3, #46	; 0x2e
 8005d36:	d001      	beq.n	8005d3c <create_name+0x8c>
 8005d38:	2306      	movs	r3, #6
 8005d3a:	e044      	b.n	8005dc6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	230b      	movs	r3, #11
 8005d42:	61bb      	str	r3, [r7, #24]
			continue;
 8005d44:	e022      	b.n	8005d8c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da04      	bge.n	8005d58 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	3b80      	subs	r3, #128	; 0x80
 8005d52:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <create_name+0x120>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
 8005d56:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	481d      	ldr	r0, [pc, #116]	; (8005dd4 <create_name+0x124>)
 8005d5e:	f7fe fff0 	bl	8004d42 <chk_chr>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <create_name+0xbc>
 8005d68:	2306      	movs	r3, #6
 8005d6a:	e02c      	b.n	8005dc6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	2b60      	cmp	r3, #96	; 0x60
 8005d70:	d905      	bls.n	8005d7e <create_name+0xce>
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	2b7a      	cmp	r3, #122	; 0x7a
 8005d76:	d802      	bhi.n	8005d7e <create_name+0xce>
 8005d78:	7ffb      	ldrb	r3, [r7, #31]
 8005d7a:	3b20      	subs	r3, #32
 8005d7c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	613a      	str	r2, [r7, #16]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4413      	add	r3, r2
 8005d88:	7ffa      	ldrb	r2, [r7, #31]
 8005d8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005d8c:	e7a6      	b.n	8005cdc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005d8e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	441a      	add	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <create_name+0xf4>
 8005da0:	2306      	movs	r3, #6
 8005da2:	e010      	b.n	8005dc6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2be5      	cmp	r3, #229	; 0xe5
 8005daa:	d102      	bne.n	8005db2 <create_name+0x102>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2205      	movs	r2, #5
 8005db0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d801      	bhi.n	8005dbc <create_name+0x10c>
 8005db8:	2204      	movs	r2, #4
 8005dba:	e000      	b.n	8005dbe <create_name+0x10e>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	330b      	adds	r3, #11
 8005dc2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005dc4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	08009d00 	.word	0x08009d00
 8005dd4:	08009c7c 	.word	0x08009c7c

08005dd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005dec:	e002      	b.n	8005df4 <follow_path+0x1c>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dfa:	d0f8      	beq.n	8005dee <follow_path+0x16>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b5c      	cmp	r3, #92	; 0x5c
 8005e02:	d0f4      	beq.n	8005dee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b1f      	cmp	r3, #31
 8005e10:	d80a      	bhi.n	8005e28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fcf9 	bl	8005814 <dir_sdi>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]
 8005e26:	e043      	b.n	8005eb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff3f 	bl	8005cb0 <create_name>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d134      	bne.n	8005ea6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff feaf 	bl	8005ba0 <dir_find>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d127      	bne.n	8005eaa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d122      	bne.n	8005eaa <follow_path+0xd2>
 8005e64:	2305      	movs	r3, #5
 8005e66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005e68:	e01f      	b.n	8005eaa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11c      	bne.n	8005eae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	799b      	ldrb	r3, [r3, #6]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005e80:	2305      	movs	r3, #5
 8005e82:	75fb      	strb	r3, [r7, #23]
 8005e84:	e014      	b.n	8005eb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	4413      	add	r3, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fe42 	bl	8005b22 <ld_clust>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ea4:	e7c0      	b.n	8005e28 <follow_path+0x50>
			if (res != FR_OK) break;
 8005ea6:	bf00      	nop
 8005ea8:	e002      	b.n	8005eb0 <follow_path+0xd8>
				break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005eae:	bf00      	nop
			}
		}
	}

	return res;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d031      	beq.n	8005f34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e002      	b.n	8005ede <get_ldnumber+0x24>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3301      	adds	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d903      	bls.n	8005eee <get_ldnumber+0x34>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b3a      	cmp	r3, #58	; 0x3a
 8005eec:	d1f4      	bne.n	8005ed8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b3a      	cmp	r3, #58	; 0x3a
 8005ef4:	d11c      	bne.n	8005f30 <get_ldnumber+0x76>
			tp = *path;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	60fa      	str	r2, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	3b30      	subs	r3, #48	; 0x30
 8005f06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b09      	cmp	r3, #9
 8005f0c:	d80e      	bhi.n	8005f2c <get_ldnumber+0x72>
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d10a      	bne.n	8005f2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d107      	bne.n	8005f2c <get_ldnumber+0x72>
					vol = (int)i;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3301      	adds	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	e002      	b.n	8005f36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f34:	693b      	ldr	r3, [r7, #16]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	70da      	strb	r2, [r3, #3]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff f8e4 	bl	8005128 <move_window>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <check_fs+0x2a>
 8005f66:	2304      	movs	r3, #4
 8005f68:	e038      	b.n	8005fdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3334      	adds	r3, #52	; 0x34
 8005f6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fe08 	bl	8004b88 <ld_word>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <check_fs+0x48>
 8005f84:	2303      	movs	r3, #3
 8005f86:	e029      	b.n	8005fdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f8e:	2be9      	cmp	r3, #233	; 0xe9
 8005f90:	d009      	beq.n	8005fa6 <check_fs+0x66>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f98:	2beb      	cmp	r3, #235	; 0xeb
 8005f9a:	d11e      	bne.n	8005fda <check_fs+0x9a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fa2:	2b90      	cmp	r3, #144	; 0x90
 8005fa4:	d119      	bne.n	8005fda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3334      	adds	r3, #52	; 0x34
 8005faa:	3336      	adds	r3, #54	; 0x36
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe fe02 	bl	8004bb6 <ld_dword>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <check_fs+0xa4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <check_fs+0x82>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e00c      	b.n	8005fdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3334      	adds	r3, #52	; 0x34
 8005fc6:	3352      	adds	r3, #82	; 0x52
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fdf4 	bl	8004bb6 <ld_dword>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <check_fs+0xa8>)
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d101      	bne.n	8005fda <check_fs+0x9a>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005fda:	2302      	movs	r3, #2
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	00544146 	.word	0x00544146
 8005fe8:	33544146 	.word	0x33544146

08005fec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b096      	sub	sp, #88	; 0x58
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff ff5a 	bl	8005eba <get_ldnumber>
 8006006:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	da01      	bge.n	8006012 <find_volume+0x26>
 800600e:	230b      	movs	r3, #11
 8006010:	e236      	b.n	8006480 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006012:	4aac      	ldr	r2, [pc, #688]	; (80062c4 <find_volume+0x2d8>)
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <find_volume+0x3a>
 8006022:	230c      	movs	r3, #12
 8006024:	e22c      	b.n	8006480 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8006026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006028:	f7fe fea5 	bl	8004d76 <lock_fs>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <find_volume+0x4a>
 8006032:	230f      	movs	r3, #15
 8006034:	e224      	b.n	8006480 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fcfb 	bl	8004a4c <disk_status>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800605c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10c      	bne.n	8006082 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <find_volume+0x92>
 800606e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800607a:	230a      	movs	r3, #10
 800607c:	e200      	b.n	8006480 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800607e:	2300      	movs	r3, #0
 8006080:	e1fe      	b.n	8006480 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fcf3 	bl	8004a80 <disk_initialize>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80060a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80060ac:	2303      	movs	r3, #3
 80060ae:	e1e7      	b.n	8006480 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <find_volume+0xda>
 80060b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80060c2:	230a      	movs	r3, #10
 80060c4:	e1dc      	b.n	8006480 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80060ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060ce:	f7ff ff37 	bl	8005f40 <check_fs>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d14b      	bne.n	8006178 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80060e0:	2300      	movs	r3, #0
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40
 80060e4:	e01f      	b.n	8006126 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80060f4:	4413      	add	r3, r2
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3304      	adds	r3, #4
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <find_volume+0x124>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	3308      	adds	r3, #8
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fd55 	bl	8004bb6 <ld_dword>
 800610c:	4602      	mov	r2, r0
 800610e:	e000      	b.n	8006112 <find_volume+0x126>
 8006110:	2200      	movs	r2, #0
 8006112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800611a:	440b      	add	r3, r1
 800611c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006122:	3301      	adds	r3, #1
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
 8006126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006128:	2b03      	cmp	r3, #3
 800612a:	d9dc      	bls.n	80060e6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800612c:	2300      	movs	r3, #0
 800612e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <find_volume+0x150>
 8006136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006138:	3b01      	subs	r3, #1
 800613a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800613c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006144:	4413      	add	r3, r2
 8006146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800614a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800614c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <find_volume+0x172>
 8006152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006156:	f7ff fef3 	bl	8005f40 <check_fs>
 800615a:	4603      	mov	r3, r0
 800615c:	e000      	b.n	8006160 <find_volume+0x174>
 800615e:	2303      	movs	r3, #3
 8006160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006168:	2b01      	cmp	r3, #1
 800616a:	d905      	bls.n	8006178 <find_volume+0x18c>
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	3301      	adds	r3, #1
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006174:	2b03      	cmp	r3, #3
 8006176:	d9e1      	bls.n	800613c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800617c:	2b04      	cmp	r3, #4
 800617e:	d101      	bne.n	8006184 <find_volume+0x198>
 8006180:	2301      	movs	r3, #1
 8006182:	e17d      	b.n	8006480 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006188:	2b01      	cmp	r3, #1
 800618a:	d901      	bls.n	8006190 <find_volume+0x1a4>
 800618c:	230d      	movs	r3, #13
 800618e:	e177      	b.n	8006480 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	3334      	adds	r3, #52	; 0x34
 8006194:	330b      	adds	r3, #11
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fcf6 	bl	8004b88 <ld_word>
 800619c:	4603      	mov	r3, r0
 800619e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a2:	d001      	beq.n	80061a8 <find_volume+0x1bc>
 80061a4:	230d      	movs	r3, #13
 80061a6:	e16b      	b.n	8006480 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	3334      	adds	r3, #52	; 0x34
 80061ac:	3316      	adds	r3, #22
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fcea 	bl	8004b88 <ld_word>
 80061b4:	4603      	mov	r3, r0
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <find_volume+0x1e0>
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	3334      	adds	r3, #52	; 0x34
 80061c2:	3324      	adds	r3, #36	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fcf6 	bl	8004bb6 <ld_dword>
 80061ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	789b      	ldrb	r3, [r3, #2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d005      	beq.n	80061f0 <find_volume+0x204>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	789b      	ldrb	r3, [r3, #2]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d001      	beq.n	80061f0 <find_volume+0x204>
 80061ec:	230d      	movs	r3, #13
 80061ee:	e147      	b.n	8006480 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	789b      	ldrb	r3, [r3, #2]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006204:	b29a      	uxth	r2, r3
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	895b      	ldrh	r3, [r3, #10]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <find_volume+0x238>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	895b      	ldrh	r3, [r3, #10]
 8006216:	461a      	mov	r2, r3
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	895b      	ldrh	r3, [r3, #10]
 800621c:	3b01      	subs	r3, #1
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <find_volume+0x23c>
 8006224:	230d      	movs	r3, #13
 8006226:	e12b      	b.n	8006480 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	3334      	adds	r3, #52	; 0x34
 800622c:	3311      	adds	r3, #17
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fcaa 	bl	8004b88 <ld_word>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	891b      	ldrh	r3, [r3, #8]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <find_volume+0x262>
 800624a:	230d      	movs	r3, #13
 800624c:	e118      	b.n	8006480 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	3334      	adds	r3, #52	; 0x34
 8006252:	3313      	adds	r3, #19
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe fc97 	bl	8004b88 <ld_word>
 800625a:	4603      	mov	r3, r0
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <find_volume+0x286>
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	3334      	adds	r3, #52	; 0x34
 8006268:	3320      	adds	r3, #32
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fca3 	bl	8004bb6 <ld_dword>
 8006270:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	3334      	adds	r3, #52	; 0x34
 8006276:	330e      	adds	r3, #14
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fc85 	bl	8004b88 <ld_word>
 800627e:	4603      	mov	r3, r0
 8006280:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <find_volume+0x2a0>
 8006288:	230d      	movs	r3, #13
 800628a:	e0f9      	b.n	8006480 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800628c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	4413      	add	r3, r2
 8006292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006294:	8912      	ldrh	r2, [r2, #8]
 8006296:	0912      	lsrs	r2, r2, #4
 8006298:	b292      	uxth	r2, r2
 800629a:	4413      	add	r3, r2
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800629e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d201      	bcs.n	80062aa <find_volume+0x2be>
 80062a6:	230d      	movs	r3, #13
 80062a8:	e0ea      	b.n	8006480 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80062aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b2:	8952      	ldrh	r2, [r2, #10]
 80062b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <find_volume+0x2dc>
 80062c0:	230d      	movs	r3, #13
 80062c2:	e0dd      	b.n	8006480 <find_volume+0x494>
 80062c4:	20000558 	.word	0x20000558
		fmt = FS_FAT32;
 80062c8:	2303      	movs	r3, #3
 80062ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d802      	bhi.n	80062de <find_volume+0x2f2>
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d802      	bhi.n	80062ee <find_volume+0x302>
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062fa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80062fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80062fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006300:	441a      	add	r2, r3
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	441a      	add	r2, r3
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006314:	2b03      	cmp	r3, #3
 8006316:	d11e      	bne.n	8006356 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	3334      	adds	r3, #52	; 0x34
 800631c:	332a      	adds	r3, #42	; 0x2a
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fc32 	bl	8004b88 <ld_word>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <find_volume+0x342>
 800632a:	230d      	movs	r3, #13
 800632c:	e0a8      	b.n	8006480 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	891b      	ldrh	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <find_volume+0x34e>
 8006336:	230d      	movs	r3, #13
 8006338:	e0a2      	b.n	8006480 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	3334      	adds	r3, #52	; 0x34
 800633e:	332c      	adds	r3, #44	; 0x2c
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fc38 	bl	8004bb6 <ld_dword>
 8006346:	4602      	mov	r2, r0
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
 8006354:	e01f      	b.n	8006396 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	891b      	ldrh	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <find_volume+0x376>
 800635e:	230d      	movs	r3, #13
 8006360:	e08e      	b.n	8006480 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006368:	441a      	add	r2, r3
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800636e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006372:	2b02      	cmp	r3, #2
 8006374:	d103      	bne.n	800637e <find_volume+0x392>
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	e00a      	b.n	8006394 <find_volume+0x3a8>
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	085a      	lsrs	r2, r3, #1
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063a0:	0a5b      	lsrs	r3, r3, #9
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d201      	bcs.n	80063aa <find_volume+0x3be>
 80063a6:	230d      	movs	r3, #13
 80063a8:	e06a      	b.n	8006480 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295
 80063b0:	615a      	str	r2, [r3, #20]
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2280      	movs	r2, #128	; 0x80
 80063be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80063c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d149      	bne.n	800645c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	3334      	adds	r3, #52	; 0x34
 80063cc:	3330      	adds	r3, #48	; 0x30
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fbda 	bl	8004b88 <ld_word>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d140      	bne.n	800645c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	3301      	adds	r3, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063e2:	f7fe fea1 	bl	8005128 <move_window>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d137      	bne.n	800645c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	2200      	movs	r2, #0
 80063f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	3334      	adds	r3, #52	; 0x34
 80063f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fbc4 	bl	8004b88 <ld_word>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006408:	429a      	cmp	r2, r3
 800640a:	d127      	bne.n	800645c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	3334      	adds	r3, #52	; 0x34
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fbd0 	bl	8004bb6 <ld_dword>
 8006416:	4602      	mov	r2, r0
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <find_volume+0x49c>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d11e      	bne.n	800645c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	3334      	adds	r3, #52	; 0x34
 8006422:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fbc5 	bl	8004bb6 <ld_dword>
 800642c:	4602      	mov	r2, r0
 800642e:	4b17      	ldr	r3, [pc, #92]	; (800648c <find_volume+0x4a0>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d113      	bne.n	800645c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	3334      	adds	r3, #52	; 0x34
 8006438:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fbba 	bl	8004bb6 <ld_dword>
 8006442:	4602      	mov	r2, r0
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	3334      	adds	r3, #52	; 0x34
 800644c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fbb0 	bl	8004bb6 <ld_dword>
 8006456:	4602      	mov	r2, r0
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006462:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <find_volume+0x4a4>)
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <find_volume+0x4a4>)
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <find_volume+0x4a4>)
 8006472:	881a      	ldrh	r2, [r3, #0]
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006478:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800647a:	f7fe fdef 	bl	800505c <clear_lock>
#endif
	return FR_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3758      	adds	r7, #88	; 0x58
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	41615252 	.word	0x41615252
 800648c:	61417272 	.word	0x61417272
 8006490:	2000055c 	.word	0x2000055c

08006494 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800649e:	2309      	movs	r3, #9
 80064a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02e      	beq.n	8006506 <validate+0x72>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d02a      	beq.n	8006506 <validate+0x72>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d025      	beq.n	8006506 <validate+0x72>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	889a      	ldrh	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	88db      	ldrh	r3, [r3, #6]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d11e      	bne.n	8006506 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fc52 	bl	8004d76 <lock_fs>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d014      	beq.n	8006502 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fab4 	bl	8004a4c <disk_status>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <validate+0x60>
				res = FR_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
 80064f2:	e008      	b.n	8006506 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fc51 	bl	8004da2 <unlock_fs>
 8006500:	e001      	b.n	8006506 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006502:	230f      	movs	r3, #15
 8006504:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <validate+0x7e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	e000      	b.n	8006514 <validate+0x80>
 8006512:	2300      	movs	r3, #0
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	6013      	str	r3, [r2, #0]
	return res;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006536:	f107 0310 	add.w	r3, r7, #16
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fcbd 	bl	8005eba <get_ldnumber>
 8006540:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da01      	bge.n	800654c <f_mount+0x28>
 8006548:	230b      	movs	r3, #11
 800654a:	e048      	b.n	80065de <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800654c:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <f_mount+0xc4>)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006554:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00f      	beq.n	800657c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800655c:	69b8      	ldr	r0, [r7, #24]
 800655e:	f7fe fd7d 	bl	800505c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fcdb 	bl	8006f22 <ff_del_syncobj>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <f_mount+0x52>
 8006572:	2302      	movs	r3, #2
 8006574:	e033      	b.n	80065de <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00f      	beq.n	80065a2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	330c      	adds	r3, #12
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f000 fca5 	bl	8006ee2 <ff_cre_syncobj>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <f_mount+0x7e>
 800659e:	2302      	movs	r3, #2
 80065a0:	e01d      	b.n	80065de <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4910      	ldr	r1, [pc, #64]	; (80065e8 <f_mount+0xc4>)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <f_mount+0x94>
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <f_mount+0x98>
 80065b8:	2300      	movs	r3, #0
 80065ba:	e010      	b.n	80065de <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80065bc:	f107 010c 	add.w	r1, r7, #12
 80065c0:	f107 0308 	add.w	r3, r7, #8
 80065c4:	2200      	movs	r2, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fd10 	bl	8005fec <find_volume>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	7dfa      	ldrb	r2, [r7, #23]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fbe3 	bl	8004da2 <unlock_fs>
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000558 	.word	0x20000558

080065ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b098      	sub	sp, #96	; 0x60
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <f_open+0x18>
 8006600:	2309      	movs	r3, #9
 8006602:	e1b4      	b.n	800696e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800660a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800660c:	79fa      	ldrb	r2, [r7, #7]
 800660e:	f107 0110 	add.w	r1, r7, #16
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fce8 	bl	8005fec <find_volume>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 8191 	bne.w	800694e <f_open+0x362>
		dj.obj.fs = fs;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fbcd 	bl	8005dd8 <follow_path>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006648:	2b00      	cmp	r3, #0
 800664a:	d11a      	bne.n	8006682 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800664c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	da03      	bge.n	800665e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006656:	2306      	movs	r3, #6
 8006658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800665c:	e011      	b.n	8006682 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fbae 	bl	8004dd8 <chk_lock>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	f003 031c 	and.w	r3, r3, #28
 8006688:	2b00      	cmp	r3, #0
 800668a:	d07f      	beq.n	800678c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800668c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006698:	2b04      	cmp	r3, #4
 800669a:	d10e      	bne.n	80066ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800669c:	f7fe fbf6 	bl	8004e8c <enq_lock>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <f_open+0xc8>
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff facd 	bl	8005c4a <dir_register>
 80066b0:	4603      	mov	r3, r0
 80066b2:	e000      	b.n	80066b6 <f_open+0xca>
 80066b4:	2312      	movs	r3, #18
 80066b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f043 0308 	orr.w	r3, r3, #8
 80066c0:	71fb      	strb	r3, [r7, #7]
 80066c2:	e010      	b.n	80066e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066c4:	7ebb      	ldrb	r3, [r7, #26]
 80066c6:	f003 0311 	and.w	r3, r3, #17
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <f_open+0xea>
					res = FR_DENIED;
 80066ce:	2307      	movs	r3, #7
 80066d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80066d4:	e007      	b.n	80066e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <f_open+0xfa>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80066e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d168      	bne.n	80067c0 <f_open+0x1d4>
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d063      	beq.n	80067c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80066f8:	f7fd fe22 	bl	8004340 <get_fattime>
 80066fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	330e      	adds	r3, #14
 8006702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fa92 	bl	8004c2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	3316      	adds	r3, #22
 800670e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fa8c 	bl	8004c2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	330b      	adds	r3, #11
 800671a:	2220      	movs	r2, #32
 800671c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff f9fc 	bl	8005b22 <ld_clust>
 800672a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006730:	2200      	movs	r2, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fa14 	bl	8005b60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	331c      	adds	r3, #28
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fa75 	bl	8004c2e <st_dword>
					fs->wflag = 1;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2201      	movs	r2, #1
 8006748:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d037      	beq.n	80067c0 <f_open+0x1d4>
						dw = fs->winsect;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	2200      	movs	r2, #0
 800675c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe ff28 	bl	80055b4 <remove_chain>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800676a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d126      	bne.n	80067c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fcd6 	bl	8005128 <move_window>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006786:	3a01      	subs	r2, #1
 8006788:	611a      	str	r2, [r3, #16]
 800678a:	e019      	b.n	80067c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800678c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d115      	bne.n	80067c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006794:	7ebb      	ldrb	r3, [r7, #26]
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800679e:	2304      	movs	r3, #4
 80067a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80067a4:	e00c      	b.n	80067c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80067a6:	79fb      	ldrb	r3, [r7, #7]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <f_open+0x1d4>
 80067b0:	7ebb      	ldrb	r3, [r7, #26]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <f_open+0x1d4>
						res = FR_DENIED;
 80067ba:	2307      	movs	r3, #7
 80067bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80067c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d128      	bne.n	800681a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80067e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fb63 	bl	8004ecc <inc_lock>
 8006806:	4602      	mov	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <f_open+0x22e>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800681a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8095 	bne.w	800694e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff f979 	bl	8005b22 <ld_clust>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	331c      	adds	r3, #28
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe f9bb 	bl	8004bb6 <ld_dword>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	88da      	ldrh	r2, [r3, #6]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	79fa      	ldrb	r2, [r7, #7]
 800685e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3330      	adds	r3, #48	; 0x30
 8006876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fa21 	bl	8004cc4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d060      	beq.n	800694e <f_open+0x362>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05c      	beq.n	800694e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	895b      	ldrh	r3, [r3, #10]
 80068a0:	025b      	lsls	r3, r3, #9
 80068a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	657b      	str	r3, [r7, #84]	; 0x54
 80068b0:	e016      	b.n	80068e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fcf0 	bl	800529c <get_fat>
 80068bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80068be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d802      	bhi.n	80068ca <f_open+0x2de>
 80068c4:	2302      	movs	r3, #2
 80068c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80068ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d102      	bne.n	80068d8 <f_open+0x2ec>
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80068d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	657b      	str	r3, [r7, #84]	; 0x54
 80068e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d103      	bne.n	80068f0 <f_open+0x304>
 80068e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d8e0      	bhi.n	80068b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80068f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d127      	bne.n	800694e <f_open+0x362>
 80068fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006904:	2b00      	cmp	r3, #0
 8006906:	d022      	beq.n	800694e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fca7 	bl	8005260 <clust2sect>
 8006912:	6478      	str	r0, [r7, #68]	; 0x44
 8006914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <f_open+0x336>
						res = FR_INT_ERR;
 800691a:	2302      	movs	r3, #2
 800691c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006920:	e015      	b.n	800694e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006924:	0a5a      	lsrs	r2, r3, #9
 8006926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	7858      	ldrb	r0, [r3, #1]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	2301      	movs	r3, #1
 800693e:	f7fe f8c5 	bl	8004acc <disk_read>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <f_open+0x362>
 8006948:	2301      	movs	r3, #1
 800694a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800694e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <f_open+0x370>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fa1c 	bl	8004da2 <unlock_fs>
 800696a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800696e:	4618      	mov	r0, r3
 8006970:	3760      	adds	r7, #96	; 0x60
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b08c      	sub	sp, #48	; 0x30
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f107 0210 	add.w	r2, r7, #16
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fd7c 	bl	8006494 <validate>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80069a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <f_write+0x44>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	7d5b      	ldrb	r3, [r3, #21]
 80069ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80069b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <f_write+0x58>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f9ed 	bl	8004da2 <unlock_fs>
 80069c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069cc:	e173      	b.n	8006cb6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	7d1b      	ldrb	r3, [r3, #20]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <f_write+0x72>
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2107      	movs	r1, #7
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe f9df 	bl	8004da2 <unlock_fs>
 80069e4:	2307      	movs	r3, #7
 80069e6:	e166      	b.n	8006cb6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	441a      	add	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	f080 814b 	bcs.w	8006c90 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	43db      	mvns	r3, r3
 8006a00:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006a02:	e145      	b.n	8006c90 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 8101 	bne.w	8006c14 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	0a5b      	lsrs	r3, r3, #9
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	8952      	ldrh	r2, [r2, #10]
 8006a1c:	3a01      	subs	r2, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d14d      	bne.n	8006ac4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10c      	bne.n	8006a4a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11a      	bne.n	8006a72 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fe1c 	bl	800567e <create_chain>
 8006a46:	62b8      	str	r0, [r7, #40]	; 0x28
 8006a48:	e013      	b.n	8006a72 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7fe fea8 	bl	80057ae <clmt_clust>
 8006a5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006a60:	e007      	b.n	8006a72 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fe fe07 	bl	800567e <create_chain>
 8006a70:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8110 	beq.w	8006c9a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d109      	bne.n	8006a94 <f_write+0x11e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2202      	movs	r2, #2
 8006a84:	755a      	strb	r2, [r3, #21]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2102      	movs	r1, #2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f989 	bl	8004da2 <unlock_fs>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e110      	b.n	8006cb6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d109      	bne.n	8006ab0 <f_write+0x13a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	755a      	strb	r2, [r3, #21]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe f97b 	bl	8004da2 <unlock_fs>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e102      	b.n	8006cb6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <f_write+0x14e>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7d1b      	ldrb	r3, [r3, #20]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da1d      	bge.n	8006b0a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	7858      	ldrb	r0, [r3, #1]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1a      	ldr	r2, [r3, #32]
 8006adc:	2301      	movs	r3, #1
 8006ade:	f7fe f815 	bl	8004b0c <disk_write>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <f_write+0x186>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	755a      	strb	r2, [r3, #21]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe f955 	bl	8004da2 <unlock_fs>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0dc      	b.n	8006cb6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7d1b      	ldrb	r3, [r3, #20]
 8006b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f7fe fba4 	bl	8005260 <clust2sect>
 8006b18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d109      	bne.n	8006b34 <f_write+0x1be>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2202      	movs	r2, #2
 8006b24:	755a      	strb	r2, [r3, #21]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f939 	bl	8004da2 <unlock_fs>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e0c0      	b.n	8006cb6 <f_write+0x340>
			sect += csect;
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	4413      	add	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0a5b      	lsrs	r3, r3, #9
 8006b40:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d041      	beq.n	8006bcc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	8952      	ldrh	r2, [r2, #10]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d905      	bls.n	8006b62 <f_write+0x1ec>
					cc = fs->csize - csect;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	895b      	ldrh	r3, [r3, #10]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	7858      	ldrb	r0, [r3, #1]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	69f9      	ldr	r1, [r7, #28]
 8006b6c:	f7fd ffce 	bl	8004b0c <disk_write>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <f_write+0x214>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	755a      	strb	r2, [r3, #21]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe f90e 	bl	8004da2 <unlock_fs>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e095      	b.n	8006cb6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d915      	bls.n	8006bc4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1a      	ldr	r2, [r3, #32]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	025b      	lsls	r3, r3, #9
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f7fe f867 	bl	8004c84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	7d1b      	ldrb	r3, [r3, #20]
 8006bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	025b      	lsls	r3, r3, #9
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006bca:	e044      	b.n	8006c56 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d01b      	beq.n	8006c0e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d215      	bcs.n	8006c0e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	7858      	ldrb	r0, [r3, #1]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bec:	2301      	movs	r3, #1
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	f7fd ff6c 	bl	8004acc <disk_read>
 8006bf4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	755a      	strb	r2, [r3, #21]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe f8cc 	bl	8004da2 <unlock_fs>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e053      	b.n	8006cb6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d901      	bls.n	8006c2e <f_write+0x2b8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	4413      	add	r3, r2
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c40:	69f9      	ldr	r1, [r7, #28]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe f81e 	bl	8004c84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7d1b      	ldrb	r3, [r3, #20]
 8006c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	4413      	add	r3, r2
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	619a      	str	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	bf38      	it	cc
 8006c76:	461a      	movcc	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	441a      	add	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f47f aeb6 	bne.w	8006a04 <f_write+0x8e>
 8006c98:	e000      	b.n	8006c9c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe f877 	bl	8004da2 <unlock_fs>
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3730      	adds	r7, #48	; 0x30
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b086      	sub	sp, #24
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f107 0208 	add.w	r2, r7, #8
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fbe0 	bl	8006494 <validate>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d16d      	bne.n	8006dba <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7d1b      	ldrb	r3, [r3, #20]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d067      	beq.n	8006dba <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	7d1b      	ldrb	r3, [r3, #20]
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da1a      	bge.n	8006d2a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	7858      	ldrb	r0, [r3, #1]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	2301      	movs	r3, #1
 8006d04:	f7fd ff02 	bl	8004b0c <disk_write>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <f_sync+0x5e>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f845 	bl	8004da2 <unlock_fs>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e055      	b.n	8006dc8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7d1b      	ldrb	r3, [r3, #20]
 8006d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d2a:	f7fd fb09 	bl	8004340 <get_fattime>
 8006d2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7fe f9f5 	bl	8005128 <move_window>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d138      	bne.n	8006dba <f_sync+0xfc>
					dir = fp->dir_ptr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	330b      	adds	r3, #11
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	330b      	adds	r3, #11
 8006d58:	f042 0220 	orr.w	r2, r2, #32
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	f7fe fef8 	bl	8005b60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f103 021c 	add.w	r2, r3, #28
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7fd ff56 	bl	8004c2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3316      	adds	r3, #22
 8006d86:	6939      	ldr	r1, [r7, #16]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fd ff50 	bl	8004c2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3312      	adds	r3, #18
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd ff30 	bl	8004bfa <st_word>
					fs->wflag = 1;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe f9ee 	bl	8005184 <sync_fs>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7dfa      	ldrb	r2, [r7, #23]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fd ffee 	bl	8004da2 <unlock_fs>
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff ff70 	bl	8006cbe <f_sync>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11d      	bne.n	8006e24 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f107 0208 	add.w	r2, r7, #8
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fb4f 	bl	8006494 <validate>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d111      	bne.n	8006e24 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe f8ef 	bl	8004fe8 <dec_lock>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd ffbf 	bl	8004da2 <unlock_fs>
#endif
		}
	}
	return res;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e46:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e48:	7a5b      	ldrb	r3, [r3, #9]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d131      	bne.n	8006eb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e50:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e52:	7a5b      	ldrb	r3, [r3, #9]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e60:	7a5b      	ldrb	r3, [r3, #9]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e70:	7a5b      	ldrb	r3, [r3, #9]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	79fa      	ldrb	r2, [r7, #7]
 8006e7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e80:	7a5b      	ldrb	r3, [r3, #9]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	b2d1      	uxtb	r1, r2
 8006e88:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <FATFS_LinkDriverEx+0x90>)
 8006e8a:	7251      	strb	r1, [r2, #9]
 8006e8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e8e:	7dbb      	ldrb	r3, [r7, #22]
 8006e90:	3330      	adds	r3, #48	; 0x30
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	223a      	movs	r2, #58	; 0x3a
 8006e9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	222f      	movs	r2, #47	; 0x2f
 8006ea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3303      	adds	r3, #3
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr
 8006ec0:	20000580 	.word	0x20000580

08006ec4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ffac 	bl	8006e30 <FATFS_LinkDriverEx>
 8006ed8:	4603      	mov	r3, r0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	4603      	mov	r3, r0
 8006eea:	6039      	str	r1, [r7, #0]
 8006eec:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006ef6:	f107 030c 	add.w	r3, r7, #12
 8006efa:	2101      	movs	r1, #1
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f8e7 	bl	80070d0 <osSemaphoreCreate>
 8006f02:	4602      	mov	r2, r0
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	617b      	str	r3, [r7, #20]

    return ret;
 8006f18:	697b      	ldr	r3, [r7, #20]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f988 	bl	8007240 <osSemaphoreDelete>
    return 1;
 8006f30:	2301      	movs	r3, #1
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006f46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8f4 	bl	8007138 <osSemaphoreWait>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <ff_req_grant+0x20>
  {
    ret = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f931 	bl	80071d4 <osSemaphoreRelease>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	4603      	mov	r3, r0
 8006f82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f8c:	2b84      	cmp	r3, #132	; 0x84
 8006f8e:	d005      	beq.n	8006f9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	3303      	adds	r3, #3
 8006f9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fae:	f3ef 8305 	mrs	r3, IPSR
 8006fb2:	607b      	str	r3, [r7, #4]
  return(result);
 8006fb4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fce:	f001 fbb1 	bl	8008734 <vTaskStartScheduler>
  
  return osOK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8006fdc:	f001 ffc6 	bl	8008f6c <xTaskGetSchedulerState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <osKernelRunning+0x12>
    return 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e000      	b.n	8006fec <osKernelRunning+0x14>
  else
    return 1;
 8006fea:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006ff4:	f7ff ffd8 	bl	8006fa8 <inHandlerMode>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006ffe:	f001 fcaf 	bl	8008960 <xTaskGetTickCountFromISR>
 8007002:	4603      	mov	r3, r0
 8007004:	e002      	b.n	800700c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007006:	f001 fc9d 	bl	8008944 <xTaskGetTickCount>
 800700a:	4603      	mov	r3, r0
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}

08007010 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007012:	b089      	sub	sp, #36	; 0x24
 8007014:	af04      	add	r7, sp, #16
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d020      	beq.n	8007064 <osThreadCreate+0x54>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01c      	beq.n	8007064 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685c      	ldr	r4, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691e      	ldr	r6, [r3, #16]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff9c 	bl	8006f7a <makeFreeRtosPriority>
 8007042:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	9100      	str	r1, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	4632      	mov	r2, r6
 8007056:	4629      	mov	r1, r5
 8007058:	4620      	mov	r0, r4
 800705a:	f001 f9b1 	bl	80083c0 <xTaskCreateStatic>
 800705e:	4603      	mov	r3, r0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e01c      	b.n	800709e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685c      	ldr	r4, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007070:	b29e      	uxth	r6, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff ff7e 	bl	8006f7a <makeFreeRtosPriority>
 800707e:	4602      	mov	r2, r0
 8007080:	f107 030c 	add.w	r3, r7, #12
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	9200      	str	r2, [sp, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4632      	mov	r2, r6
 800708c:	4629      	mov	r1, r5
 800708e:	4620      	mov	r0, r4
 8007090:	f001 f9ef 	bl	8008472 <xTaskCreate>
 8007094:	4603      	mov	r3, r0
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	e000      	b.n	80070a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <osDelay+0x16>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	e000      	b.n	80070c0 <osDelay+0x18>
 80070be:	2301      	movs	r3, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 fb03 	bl	80086cc <vTaskDelay>
  
  return osOK;
 80070c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d010      	beq.n	8007104 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d10b      	bne.n	8007100 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	2303      	movs	r3, #3
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	2100      	movs	r1, #0
 80070f6:	2001      	movs	r0, #1
 80070f8:	f000 faaa 	bl	8007650 <xQueueGenericCreateStatic>
 80070fc:	4603      	mov	r3, r0
 80070fe:	e016      	b.n	800712e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	e014      	b.n	800712e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d110      	bne.n	800712c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800710a:	2203      	movs	r2, #3
 800710c:	2100      	movs	r1, #0
 800710e:	2001      	movs	r0, #1
 8007110:	f000 fb10 	bl	8007734 <xQueueGenericCreate>
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <osSemaphoreCreate+0x58>
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fb62 	bl	80077ec <xQueueGenericSend>
      return sema;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e000      	b.n	800712e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800712c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800714c:	2380      	movs	r3, #128	; 0x80
 800714e:	e03a      	b.n	80071c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d103      	bne.n	8007164 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e009      	b.n	8007178 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <osSemaphoreWait+0x40>
      ticks = 1;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007178:	f7ff ff16 	bl	8006fa8 <inHandlerMode>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d017      	beq.n	80071b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	461a      	mov	r2, r3
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 ff2a 	bl	8007fe4 <xQueueReceiveFromISR>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007196:	23ff      	movs	r3, #255	; 0xff
 8007198:	e015      	b.n	80071c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d011      	beq.n	80071c4 <osSemaphoreWait+0x8c>
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <osSemaphoreWait+0x98>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	e008      	b.n	80071c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fe0d 	bl	8007dd4 <xQueueSemaphoreTake>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d001      	beq.n	80071c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80071c0:	23ff      	movs	r3, #255	; 0xff
 80071c2:	e000      	b.n	80071c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80071e4:	f7ff fee0 	bl	8006fa8 <inHandlerMode>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d016      	beq.n	800721c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc87 	bl	8007b08 <xQueueGiveFromISR>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007200:	23ff      	movs	r3, #255	; 0xff
 8007202:	e017      	b.n	8007234 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d013      	beq.n	8007232 <osSemaphoreRelease+0x5e>
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <osSemaphoreRelease+0x68>)
 800720c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	e00a      	b.n	8007232 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800721c:	2300      	movs	r3, #0
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fae2 	bl	80077ec <xQueueGenericSend>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d001      	beq.n	8007232 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800722e:	23ff      	movs	r3, #255	; 0xff
 8007230:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007248:	f7ff feae 	bl	8006fa8 <inHandlerMode>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007252:	2382      	movs	r3, #130	; 0x82
 8007254:	e003      	b.n	800725e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 ff41 	bl	80080de <vQueueDelete>

  return osOK; 
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007266:	b590      	push	{r4, r7, lr}
 8007268:	b085      	sub	sp, #20
 800726a:	af02      	add	r7, sp, #8
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d012      	beq.n	800729e <osMessageCreate+0x38>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00e      	beq.n	800729e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6859      	ldr	r1, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68dc      	ldr	r4, [r3, #12]
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4623      	mov	r3, r4
 8007296:	f000 f9db 	bl	8007650 <xQueueGenericCreateStatic>
 800729a:	4603      	mov	r3, r0
 800729c:	e008      	b.n	80072b0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	4619      	mov	r1, r3
 80072aa:	f000 fa43 	bl	8007734 <xQueueGenericCreate>
 80072ae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd90      	pop	{r4, r7, pc}

080072b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <osMessagePut+0x1e>
    ticks = 1;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80072d6:	f7ff fe67 	bl	8006fa8 <inHandlerMode>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d018      	beq.n	8007312 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80072e0:	f107 0210 	add.w	r2, r7, #16
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	2300      	movs	r3, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fb78 	bl	80079e0 <xQueueGenericSendFromISR>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d001      	beq.n	80072fa <osMessagePut+0x42>
      return osErrorOS;
 80072f6:	23ff      	movs	r3, #255	; 0xff
 80072f8:	e018      	b.n	800732c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d014      	beq.n	800732a <osMessagePut+0x72>
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <osMessagePut+0x7c>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	e00b      	b.n	800732a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007312:	f107 0108 	add.w	r1, r7, #8
 8007316:	2300      	movs	r3, #0
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa66 	bl	80077ec <xQueueGenericSend>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <osMessagePut+0x72>
      return osErrorOS;
 8007326:	23ff      	movs	r3, #255	; 0xff
 8007328:	e000      	b.n	800732c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b08b      	sub	sp, #44	; 0x2c
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007352:	2380      	movs	r3, #128	; 0x80
 8007354:	617b      	str	r3, [r7, #20]
    return event;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	461c      	mov	r4, r3
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007366:	e054      	b.n	8007412 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d103      	bne.n	8007380 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
 800737e:	e009      	b.n	8007394 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <osMessageGet+0x5c>
      ticks = 1;
 8007390:	2301      	movs	r3, #1
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007394:	f7ff fe08 	bl	8006fa8 <inHandlerMode>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01c      	beq.n	80073d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800739e:	f107 0220 	add.w	r2, r7, #32
 80073a2:	f107 0314 	add.w	r3, r7, #20
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f000 fe1a 	bl	8007fe4 <xQueueReceiveFromISR>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d102      	bne.n	80073bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80073b6:	2310      	movs	r3, #16
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e001      	b.n	80073c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01d      	beq.n	8007402 <osMessageGet+0xca>
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <osMessageGet+0xe4>)
 80073c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	e014      	b.n	8007402 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	3304      	adds	r3, #4
 80073de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e0:	4619      	mov	r1, r3
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f000 fc1a 	bl	8007c1c <xQueueReceive>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d102      	bne.n	80073f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80073ee:	2310      	movs	r3, #16
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e006      	b.n	8007402 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <osMessageGet+0xc6>
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <osMessageGet+0xc8>
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	461c      	mov	r4, r3
 8007406:	f107 0314 	add.w	r3, r7, #20
 800740a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800740e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	372c      	adds	r7, #44	; 0x2c
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f103 0208 	add.w	r2, r3, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f04f 32ff 	mov.w	r2, #4294967295
 8007438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f103 0208 	add.w	r2, r3, #8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 0208 	add.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d103      	bne.n	80074dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e00c      	b.n	80074f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3308      	adds	r3, #8
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e002      	b.n	80074ea <vListInsert+0x2e>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d2f6      	bcs.n	80074e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6892      	ldr	r2, [r2, #8]
 8007542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6852      	ldr	r2, [r2, #4]
 800754c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d103      	bne.n	8007560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	1e5a      	subs	r2, r3, #1
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr
	...

08007580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	e7fe      	b.n	80075a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80075a8:	f002 f80e 	bl	80095c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b4:	68f9      	ldr	r1, [r7, #12]
 80075b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	3b01      	subs	r3, #1
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	22ff      	movs	r2, #255	; 0xff
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	22ff      	movs	r2, #255	; 0xff
 80075f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d114      	bne.n	8007628 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01a      	beq.n	800763c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3310      	adds	r3, #16
 800760a:	4618      	mov	r0, r3
 800760c:	f001 faf4 	bl	8008bf8 <xTaskRemoveFromEventList>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d012      	beq.n	800763c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <xQueueGenericReset+0xcc>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	e009      	b.n	800763c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3310      	adds	r3, #16
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fef7 	bl	8007420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3324      	adds	r3, #36	; 0x24
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fef2 	bl	8007420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800763c:	f001 fff2 	bl	8009624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007640:	2301      	movs	r3, #1
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	; 0x38
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <xQueueGenericCreateStatic+0x28>
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
 8007676:	e7fe      	b.n	8007676 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <xQueueGenericCreateStatic+0x42>
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
 8007690:	e7fe      	b.n	8007690 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <xQueueGenericCreateStatic+0x4e>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <xQueueGenericCreateStatic+0x52>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueGenericCreateStatic+0x54>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <xQueueGenericCreateStatic+0x6c>
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	623b      	str	r3, [r7, #32]
 80076ba:	e7fe      	b.n	80076ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <xQueueGenericCreateStatic+0x78>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <xQueueGenericCreateStatic+0x7c>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <xQueueGenericCreateStatic+0x7e>
 80076cc:	2300      	movs	r3, #0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <xQueueGenericCreateStatic+0x96>
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e7fe      	b.n	80076e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e6:	2348      	movs	r3, #72	; 0x48
 80076e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b48      	cmp	r3, #72	; 0x48
 80076ee:	d009      	beq.n	8007704 <xQueueGenericCreateStatic+0xb4>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e7fe      	b.n	8007702 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007716:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4613      	mov	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f842 	bl	80077ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800772c:	4618      	mov	r0, r3
 800772e:	3730      	adds	r7, #48	; 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d109      	bne.n	800775c <xQueueGenericCreate+0x28>
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	e7fe      	b.n	800775a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	e004      	b.n	8007772 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3348      	adds	r3, #72	; 0x48
 8007776:	4618      	mov	r0, r3
 8007778:	f002 f81c 	bl	80097b4 <pvPortMalloc>
 800777c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00f      	beq.n	80077a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	3348      	adds	r3, #72	; 0x48
 8007788:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007792:	79fa      	ldrb	r2, [r7, #7]
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	4613      	mov	r3, r2
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f805 	bl	80077ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077a4:	69bb      	ldr	r3, [r7, #24]
	}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d103      	bne.n	80077ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077dc:	2101      	movs	r1, #1
 80077de:	69b8      	ldr	r0, [r7, #24]
 80077e0:	f7ff fece 	bl	8007580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077fa:	2300      	movs	r3, #0
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <xQueueGenericSend+0x30>
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
 800781a:	e7fe      	b.n	800781a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <xQueueGenericSend+0x3e>
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <xQueueGenericSend+0x42>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericSend+0x44>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <xQueueGenericSend+0x5c>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
 8007846:	e7fe      	b.n	8007846 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x6a>
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <xQueueGenericSend+0x6e>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueGenericSend+0x70>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <xQueueGenericSend+0x88>
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	623b      	str	r3, [r7, #32]
 8007872:	e7fe      	b.n	8007872 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007874:	f001 fb7a 	bl	8008f6c <xTaskGetSchedulerState>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <xQueueGenericSend+0x98>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <xQueueGenericSend+0x9c>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <xQueueGenericSend+0x9e>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <xQueueGenericSend+0xb6>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078a2:	f001 fe91 	bl	80095c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <xQueueGenericSend+0xcc>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d129      	bne.n	800790c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078be:	f000 fc47 	bl	8008150 <prvCopyDataToQueue>
 80078c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f991 	bl	8008bf8 <xTaskRemoveFromEventList>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d013      	beq.n	8007904 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078dc:	4b3f      	ldr	r3, [pc, #252]	; (80079dc <xQueueGenericSend+0x1f0>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	e00a      	b.n	8007904 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078f4:	4b39      	ldr	r3, [pc, #228]	; (80079dc <xQueueGenericSend+0x1f0>)
 80078f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007904:	f001 fe8e 	bl	8009624 <vPortExitCritical>
				return pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	e063      	b.n	80079d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007912:	f001 fe87 	bl	8009624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007916:	2300      	movs	r3, #0
 8007918:	e05c      	b.n	80079d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	2b00      	cmp	r3, #0
 800791e:	d106      	bne.n	800792e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	4618      	mov	r0, r3
 8007926:	f001 f9c9 	bl	8008cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800792a:	2301      	movs	r3, #1
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800792e:	f001 fe79 	bl	8009624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007932:	f000 ff5d 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007936:	f001 fe47 	bl	80095c8 <vPortEnterCritical>
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007940:	b25b      	sxtb	r3, r3
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d103      	bne.n	8007950 <xQueueGenericSend+0x164>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007956:	b25b      	sxtb	r3, r3
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d103      	bne.n	8007966 <xQueueGenericSend+0x17a>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007966:	f001 fe5d 	bl	8009624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800796a:	1d3a      	adds	r2, r7, #4
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f001 f9b8 	bl	8008ce8 <xTaskCheckForTimeOut>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d124      	bne.n	80079c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800797e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007980:	f000 fcde 	bl	8008340 <prvIsQueueFull>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d018      	beq.n	80079bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	3310      	adds	r3, #16
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f90c 	bl	8008bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800799a:	f000 fc69 	bl	8008270 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800799e:	f000 ff35 	bl	800880c <xTaskResumeAll>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f47f af7c 	bne.w	80078a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079aa:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <xQueueGenericSend+0x1f0>)
 80079ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	e772      	b.n	80078a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079be:	f000 fc57 	bl	8008270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079c2:	f000 ff23 	bl	800880c <xTaskResumeAll>
 80079c6:	e76c      	b.n	80078a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ca:	f000 fc51 	bl	8008270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ce:	f000 ff1d 	bl	800880c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079d2:	2300      	movs	r3, #0
		}
	}
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3738      	adds	r7, #56	; 0x38
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <xQueueGenericSendFromISR+0x2c>
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <xQueueGenericSendFromISR+0x3a>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <xQueueGenericSendFromISR+0x3e>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <xQueueGenericSendFromISR+0x40>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <xQueueGenericSendFromISR+0x58>
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	623b      	str	r3, [r7, #32]
 8007a36:	e7fe      	b.n	8007a36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d103      	bne.n	8007a46 <xQueueGenericSendFromISR+0x66>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <xQueueGenericSendFromISR+0x6a>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <xQueueGenericSendFromISR+0x6c>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <xQueueGenericSendFromISR+0x84>
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e7fe      	b.n	8007a62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a64:	f001 fe6a 	bl	800973c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a68:	f3ef 8211 	mrs	r2, BASEPRI
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	61ba      	str	r2, [r7, #24]
 8007a7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d302      	bcc.n	8007a96 <xQueueGenericSendFromISR+0xb6>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d12c      	bne.n	8007af0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa6:	f000 fb53 	bl	8008150 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aaa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d112      	bne.n	8007ada <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d016      	beq.n	8007aea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 f899 	bl	8008bf8 <xTaskRemoveFromEventList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e007      	b.n	8007aea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ade:	3301      	adds	r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	b25a      	sxtb	r2, r3
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007aea:	2301      	movs	r3, #1
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007aee:	e001      	b.n	8007af4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3738      	adds	r7, #56	; 0x38
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08e      	sub	sp, #56	; 0x38
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	623b      	str	r3, [r7, #32]
 8007b2e:	e7fe      	b.n	8007b2e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <xQueueGiveFromISR+0x44>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	e7fe      	b.n	8007b4a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <xQueueGiveFromISR+0x54>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <xQueueGiveFromISR+0x58>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <xQueueGiveFromISR+0x5a>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <xQueueGiveFromISR+0x72>
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	e7fe      	b.n	8007b78 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b7a:	f001 fddf 	bl	800973c <vPortValidateInterruptPriority>
	__asm volatile
 8007b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	617a      	str	r2, [r7, #20]
 8007b94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d22b      	bcs.n	8007c02 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d112      	bne.n	8007bec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	3324      	adds	r3, #36	; 0x24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 f810 	bl	8008bf8 <xTaskRemoveFromEventList>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00e      	beq.n	8007bfc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2201      	movs	r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e007      	b.n	8007bfc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	b25a      	sxtb	r2, r3
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	e001      	b.n	8007c06 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3738      	adds	r7, #56	; 0x38
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <xQueueReceive+0x2e>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	e7fe      	b.n	8007c48 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <xQueueReceive+0x3c>
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <xQueueReceive+0x40>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <xQueueReceive+0x42>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <xQueueReceive+0x5a>
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	e7fe      	b.n	8007c74 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c76:	f001 f979 	bl	8008f6c <xTaskGetSchedulerState>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xQueueReceive+0x6a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <xQueueReceive+0x6e>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueReceive+0x70>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <xQueueReceive+0x88>
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e7fe      	b.n	8007ca2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca4:	f001 fc90 	bl	80095c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01f      	beq.n	8007cf4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb8:	f000 fab4 	bl	8008224 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	1e5a      	subs	r2, r3, #1
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00f      	beq.n	8007cec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	3310      	adds	r3, #16
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 ff91 	bl	8008bf8 <xTaskRemoveFromEventList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cdc:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <xQueueReceive+0x1b4>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cec:	f001 fc9a 	bl	8009624 <vPortExitCritical>
				return pdPASS;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e069      	b.n	8007dc8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cfa:	f001 fc93 	bl	8009624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e062      	b.n	8007dc8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 ffd5 	bl	8008cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d16:	f001 fc85 	bl	8009624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d1a:	f000 fd69 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d1e:	f001 fc53 	bl	80095c8 <vPortEnterCritical>
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d28:	b25b      	sxtb	r3, r3
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2e:	d103      	bne.n	8007d38 <xQueueReceive+0x11c>
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3e:	b25b      	sxtb	r3, r3
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d103      	bne.n	8007d4e <xQueueReceive+0x132>
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d4e:	f001 fc69 	bl	8009624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d52:	1d3a      	adds	r2, r7, #4
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 ffc4 	bl	8008ce8 <xTaskCheckForTimeOut>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d123      	bne.n	8007dae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d68:	f000 fad4 	bl	8008314 <prvIsQueueEmpty>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d017      	beq.n	8007da2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	3324      	adds	r3, #36	; 0x24
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ff18 	bl	8008bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d82:	f000 fa75 	bl	8008270 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d86:	f000 fd41 	bl	800880c <xTaskResumeAll>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d189      	bne.n	8007ca4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <xQueueReceive+0x1b4>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	e780      	b.n	8007ca4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da4:	f000 fa64 	bl	8008270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da8:	f000 fd30 	bl	800880c <xTaskResumeAll>
 8007dac:	e77a      	b.n	8007ca4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db0:	f000 fa5e 	bl	8008270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007db4:	f000 fd2a 	bl	800880c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dba:	f000 faab 	bl	8008314 <prvIsQueueEmpty>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f43f af6f 	beq.w	8007ca4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3730      	adds	r7, #48	; 0x30
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08e      	sub	sp, #56	; 0x38
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <xQueueSemaphoreTake+0x30>
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	e7fe      	b.n	8007e02 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <xQueueSemaphoreTake+0x4c>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e7fe      	b.n	8007e1e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e20:	f001 f8a4 	bl	8008f6c <xTaskGetSchedulerState>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <xQueueSemaphoreTake+0x5c>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <xQueueSemaphoreTake+0x60>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <xQueueSemaphoreTake+0x62>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <xQueueSemaphoreTake+0x7a>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e7fe      	b.n	8007e4c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e4e:	f001 fbbb 	bl	80095c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	1e5a      	subs	r2, r3, #1
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007e6e:	f001 fa43 	bl	80092f8 <pvTaskIncrementMutexHeldCount>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00f      	beq.n	8007ea0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	3310      	adds	r3, #16
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 feb7 	bl	8008bf8 <xTaskRemoveFromEventList>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e90:	4b53      	ldr	r3, [pc, #332]	; (8007fe0 <xQueueSemaphoreTake+0x20c>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ea0:	f001 fbc0 	bl	8009624 <vPortExitCritical>
				return pdPASS;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e096      	b.n	8007fd6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d110      	bne.n	8007ed0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d009      	beq.n	8007ec8 <xQueueSemaphoreTake+0xf4>
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	e7fe      	b.n	8007ec6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ec8:	f001 fbac 	bl	8009624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e082      	b.n	8007fd6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 feee 	bl	8008cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee4:	f001 fb9e 	bl	8009624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ee8:	f000 fc82 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eec:	f001 fb6c 	bl	80095c8 <vPortEnterCritical>
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d103      	bne.n	8007f06 <xQueueSemaphoreTake+0x132>
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0c:	b25b      	sxtb	r3, r3
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d103      	bne.n	8007f1c <xQueueSemaphoreTake+0x148>
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1c:	f001 fb82 	bl	8009624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f20:	463a      	mov	r2, r7
 8007f22:	f107 030c 	add.w	r3, r7, #12
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fedd 	bl	8008ce8 <xTaskCheckForTimeOut>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d132      	bne.n	8007f9a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f36:	f000 f9ed 	bl	8008314 <prvIsQueueEmpty>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d026      	beq.n	8007f8e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007f48:	f001 fb3e 	bl	80095c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 f829 	bl	8008fa8 <xTaskPriorityInherit>
 8007f56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f58:	f001 fb64 	bl	8009624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fe23 	bl	8008bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6c:	f000 f980 	bl	8008270 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f70:	f000 fc4c 	bl	800880c <xTaskResumeAll>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f47f af69 	bne.w	8007e4e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007f7c:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <xQueueSemaphoreTake+0x20c>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	e75f      	b.n	8007e4e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f90:	f000 f96e 	bl	8008270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f94:	f000 fc3a 	bl	800880c <xTaskResumeAll>
 8007f98:	e759      	b.n	8007e4e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f9c:	f000 f968 	bl	8008270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa0:	f000 fc34 	bl	800880c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa6:	f000 f9b5 	bl	8008314 <prvIsQueueEmpty>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f43f af4e 	beq.w	8007e4e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007fb8:	f001 fb06 	bl	80095c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fbe:	f000 f8b0 	bl	8008122 <prvGetDisinheritPriorityAfterTimeout>
 8007fc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f8f6 	bl	80091bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007fd0:	f001 fb28 	bl	8009624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3738      	adds	r7, #56	; 0x38
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	e000ed04 	.word	0xe000ed04

08007fe4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08e      	sub	sp, #56	; 0x38
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <xQueueReceiveFromISR+0x2a>
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	623b      	str	r3, [r7, #32]
 800800c:	e7fe      	b.n	800800c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <xQueueReceiveFromISR+0x38>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <xQueueReceiveFromISR+0x3c>
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <xQueueReceiveFromISR+0x3e>
 8008020:	2300      	movs	r3, #0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <xQueueReceiveFromISR+0x56>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	e7fe      	b.n	8008038 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800803a:	f001 fb7f 	bl	800973c <vPortValidateInterruptPriority>
	__asm volatile
 800803e:	f3ef 8211 	mrs	r2, BASEPRI
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	61ba      	str	r2, [r7, #24]
 8008054:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008056:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d02f      	beq.n	80080c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800806c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008074:	f000 f8d6 	bl	8008224 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d112      	bne.n	80080b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	3310      	adds	r3, #16
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fdae 	bl	8008bf8 <xTaskRemoveFromEventList>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00e      	beq.n	80080c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e007      	b.n	80080c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b4:	3301      	adds	r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	b25a      	sxtb	r2, r3
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
 80080c4:	e001      	b.n	80080ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3738      	adds	r7, #56	; 0x38
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <vQueueDelete+0x26>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	e7fe      	b.n	8008102 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f933 	bl	8008370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f001 fc0f 	bl	8009938 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d006      	beq.n	8008140 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f1c3 0307 	rsb	r3, r3, #7
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e001      	b.n	8008144 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008144:	68fb      	ldr	r3, [r7, #12]
	}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10d      	bne.n	800818a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d14d      	bne.n	8008212 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 ff9a 	bl	80090b4 <xTaskPriorityDisinherit>
 8008180:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	e043      	b.n	8008212 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d119      	bne.n	80081c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6898      	ldr	r0, [r3, #8]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	461a      	mov	r2, r3
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	f001 fd02 	bl	8009ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	441a      	add	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d32b      	bcc.n	8008212 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	e026      	b.n	8008212 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68d8      	ldr	r0, [r3, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	461a      	mov	r2, r3
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	f001 fce8 	bl	8009ba4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	425b      	negs	r3, r3
 80081de:	441a      	add	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d207      	bcs.n	8008200 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	425b      	negs	r3, r3
 80081fa:	441a      	add	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d105      	bne.n	8008212 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	3b01      	subs	r3, #1
 8008210:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800821a:	697b      	ldr	r3, [r7, #20]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d018      	beq.n	8008268 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	441a      	add	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d303      	bcc.n	8008258 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68d9      	ldr	r1, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	461a      	mov	r2, r3
 8008262:	6838      	ldr	r0, [r7, #0]
 8008264:	f001 fc9e 	bl	8009ba4 <memcpy>
	}
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008278:	f001 f9a6 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008282:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008284:	e011      	b.n	80082aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d012      	beq.n	80082b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3324      	adds	r3, #36	; 0x24
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fcb0 	bl	8008bf8 <xTaskRemoveFromEventList>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800829e:	f000 fd83 	bl	8008da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dce9      	bgt.n	8008286 <prvUnlockQueue+0x16>
 80082b2:	e000      	b.n	80082b6 <prvUnlockQueue+0x46>
					break;
 80082b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	22ff      	movs	r2, #255	; 0xff
 80082ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082be:	f001 f9b1 	bl	8009624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082c2:	f001 f981 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ce:	e011      	b.n	80082f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d012      	beq.n	80082fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3310      	adds	r3, #16
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fc8b 	bl	8008bf8 <xTaskRemoveFromEventList>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082e8:	f000 fd5e 	bl	8008da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dce9      	bgt.n	80082d0 <prvUnlockQueue+0x60>
 80082fc:	e000      	b.n	8008300 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	22ff      	movs	r2, #255	; 0xff
 8008304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008308:	f001 f98c 	bl	8009624 <vPortExitCritical>
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800831c:	f001 f954 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e001      	b.n	8008332 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008332:	f001 f977 	bl	8009624 <vPortExitCritical>

	return xReturn;
 8008336:	68fb      	ldr	r3, [r7, #12]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008348:	f001 f93e 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008354:	429a      	cmp	r2, r3
 8008356:	d102      	bne.n	800835e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e001      	b.n	8008362 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008362:	f001 f95f 	bl	8009624 <vPortExitCritical>

	return xReturn;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e016      	b.n	80083ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800837e:	4a0f      	ldr	r2, [pc, #60]	; (80083bc <vQueueUnregisterQueue+0x4c>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4413      	add	r3, r2
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d10b      	bne.n	80083a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800838e:	4a0b      	ldr	r2, [pc, #44]	; (80083bc <vQueueUnregisterQueue+0x4c>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2100      	movs	r1, #0
 8008394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008398:	4a08      	ldr	r2, [pc, #32]	; (80083bc <vQueueUnregisterQueue+0x4c>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	4413      	add	r3, r2
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
				break;
 80083a4:	e005      	b.n	80083b2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b07      	cmp	r3, #7
 80083b0:	d9e5      	bls.n	800837e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083b2:	bf00      	nop
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr
 80083bc:	20001860 	.word	0x20001860

080083c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08e      	sub	sp, #56	; 0x38
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <xTaskCreateStatic+0x28>
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	623b      	str	r3, [r7, #32]
 80083e6:	e7fe      	b.n	80083e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <xTaskCreateStatic+0x42>
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	e7fe      	b.n	8008400 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008402:	2354      	movs	r3, #84	; 0x54
 8008404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b54      	cmp	r3, #84	; 0x54
 800840a:	d009      	beq.n	8008420 <xTaskCreateStatic+0x60>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e7fe      	b.n	800841e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01e      	beq.n	8008464 <xTaskCreateStatic+0xa4>
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01b      	beq.n	8008464 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	2202      	movs	r2, #2
 800843a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800843e:	2300      	movs	r3, #0
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	f107 0314 	add.w	r3, r7, #20
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f850 	bl	80084fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800845c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800845e:	f000 f8cb 	bl	80085f8 <prvAddNewTaskToReadyList>
 8008462:	e001      	b.n	8008468 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008468:	697b      	ldr	r3, [r7, #20]
	}
 800846a:	4618      	mov	r0, r3
 800846c:	3728      	adds	r7, #40	; 0x28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008472:	b580      	push	{r7, lr}
 8008474:	b08c      	sub	sp, #48	; 0x30
 8008476:	af04      	add	r7, sp, #16
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	603b      	str	r3, [r7, #0]
 800847e:	4613      	mov	r3, r2
 8008480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4618      	mov	r0, r3
 8008488:	f001 f994 	bl	80097b4 <pvPortMalloc>
 800848c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00e      	beq.n	80084b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008494:	2054      	movs	r0, #84	; 0x54
 8008496:	f001 f98d 	bl	80097b4 <pvPortMalloc>
 800849a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
 80084a8:	e005      	b.n	80084b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f001 fa44 	bl	8009938 <vPortFree>
 80084b0:	e001      	b.n	80084b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d017      	beq.n	80084ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	9302      	str	r3, [sp, #8]
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f80e 	bl	80084fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084e0:	69f8      	ldr	r0, [r7, #28]
 80084e2:	f000 f889 	bl	80085f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084e6:	2301      	movs	r3, #1
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e002      	b.n	80084f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084ec:	f04f 33ff 	mov.w	r3, #4294967295
 80084f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084f2:	69bb      	ldr	r3, [r7, #24]
	}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008514:	3b01      	subs	r3, #1
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <prvInitialiseNewTask+0x46>
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e7fe      	b.n	8008540 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	e012      	b.n	800856e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	7819      	ldrb	r1, [r3, #0]
 8008550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	3334      	adds	r3, #52	; 0x34
 8008558:	460a      	mov	r2, r1
 800855a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	3301      	adds	r3, #1
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2b0f      	cmp	r3, #15
 8008572:	d9e9      	bls.n	8008548 <prvInitialiseNewTask+0x4c>
 8008574:	e000      	b.n	8008578 <prvInitialiseNewTask+0x7c>
		{
			break;
 8008576:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	2b06      	cmp	r3, #6
 8008584:	d901      	bls.n	800858a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008586:	2306      	movs	r3, #6
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008594:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	2200      	movs	r2, #0
 800859a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	3304      	adds	r3, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe ff5c 	bl	800745e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	3318      	adds	r3, #24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe ff57 	bl	800745e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	f1c3 0207 	rsb	r2, r3, #7
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	69b8      	ldr	r0, [r7, #24]
 80085da:	f000 ff07 	bl	80093ec <pxPortInitialiseStack>
 80085de:	4602      	mov	r2, r0
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f0:	bf00      	nop
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008600:	f000 ffe2 	bl	80095c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008604:	4b2a      	ldr	r3, [pc, #168]	; (80086b0 <prvAddNewTaskToReadyList+0xb8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <prvAddNewTaskToReadyList+0xb8>)
 800860c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800860e:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <prvAddNewTaskToReadyList+0xbc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008616:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <prvAddNewTaskToReadyList+0xbc>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800861c:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <prvAddNewTaskToReadyList+0xb8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d110      	bne.n	8008646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008624:	f000 fbe4 	bl	8008df0 <prvInitialiseTaskLists>
 8008628:	e00d      	b.n	8008646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800862a:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <prvAddNewTaskToReadyList+0xc0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008632:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <prvAddNewTaskToReadyList+0xbc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	429a      	cmp	r2, r3
 800863e:	d802      	bhi.n	8008646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008640:	4a1c      	ldr	r2, [pc, #112]	; (80086b4 <prvAddNewTaskToReadyList+0xbc>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008646:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <prvAddNewTaskToReadyList+0xc4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	4a1b      	ldr	r2, [pc, #108]	; (80086bc <prvAddNewTaskToReadyList+0xc4>)
 800864e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	2201      	movs	r2, #1
 8008656:	409a      	lsls	r2, r3
 8008658:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4313      	orrs	r3, r2
 800865e:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <prvAddNewTaskToReadyList+0xcc>)
 8008670:	441a      	add	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3304      	adds	r3, #4
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fe fefc 	bl	8007476 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800867e:	f000 ffd1 	bl	8009624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008682:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <prvAddNewTaskToReadyList+0xc0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <prvAddNewTaskToReadyList+0xbc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	429a      	cmp	r2, r3
 8008696:	d207      	bcs.n	80086a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008698:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <prvAddNewTaskToReadyList+0xd0>)
 800869a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	2000068c 	.word	0x2000068c
 80086b4:	2000058c 	.word	0x2000058c
 80086b8:	20000698 	.word	0x20000698
 80086bc:	200006a8 	.word	0x200006a8
 80086c0:	20000694 	.word	0x20000694
 80086c4:	20000590 	.word	0x20000590
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d016      	beq.n	800870c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086de:	4b13      	ldr	r3, [pc, #76]	; (800872c <vTaskDelay+0x60>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <vTaskDelay+0x2e>
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	e7fe      	b.n	80086f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80086fa:	f000 f879 	bl	80087f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086fe:	2100      	movs	r1, #0
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fe0d 	bl	8009320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008706:	f000 f881 	bl	800880c <xTaskResumeAll>
 800870a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <vTaskDelay+0x64>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008722:	bf00      	nop
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200006b4 	.word	0x200006b4
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008742:	463a      	mov	r2, r7
 8008744:	1d39      	adds	r1, r7, #4
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	4618      	mov	r0, r3
 800874c:	f7f7 fd36 	bl	80001bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	9202      	str	r2, [sp, #8]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	2300      	movs	r3, #0
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	460a      	mov	r2, r1
 8008762:	491d      	ldr	r1, [pc, #116]	; (80087d8 <vTaskStartScheduler+0xa4>)
 8008764:	481d      	ldr	r0, [pc, #116]	; (80087dc <vTaskStartScheduler+0xa8>)
 8008766:	f7ff fe2b 	bl	80083c0 <xTaskCreateStatic>
 800876a:	4602      	mov	r2, r0
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <vTaskStartScheduler+0xac>)
 800876e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008770:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <vTaskStartScheduler+0xac>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008778:	2301      	movs	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	e001      	b.n	8008782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800877e:	2300      	movs	r3, #0
 8008780:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d115      	bne.n	80087b4 <vTaskStartScheduler+0x80>
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <vTaskStartScheduler+0xb0>)
 800879c:	f04f 32ff 	mov.w	r2, #4294967295
 80087a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087a2:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <vTaskStartScheduler+0xb4>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <vTaskStartScheduler+0xb8>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087ae:	f000 fe9b 	bl	80094e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087b2:	e00d      	b.n	80087d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ba:	d109      	bne.n	80087d0 <vTaskStartScheduler+0x9c>
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	e7fe      	b.n	80087ce <vTaskStartScheduler+0x9a>
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	08009cc0 	.word	0x08009cc0
 80087dc:	08008dc1 	.word	0x08008dc1
 80087e0:	200006b0 	.word	0x200006b0
 80087e4:	200006ac 	.word	0x200006ac
 80087e8:	20000698 	.word	0x20000698
 80087ec:	20000690 	.word	0x20000690

080087f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <vTaskSuspendAll+0x18>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a03      	ldr	r2, [pc, #12]	; (8008808 <vTaskSuspendAll+0x18>)
 80087fc:	6013      	str	r3, [r2, #0]
}
 80087fe:	bf00      	nop
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	200006b4 	.word	0x200006b4

0800880c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <xTaskResumeAll+0x114>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <xTaskResumeAll+0x2a>
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	e7fe      	b.n	8008834 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008836:	f000 fec7 	bl	80095c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800883a:	4b39      	ldr	r3, [pc, #228]	; (8008920 <xTaskResumeAll+0x114>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	4a37      	ldr	r2, [pc, #220]	; (8008920 <xTaskResumeAll+0x114>)
 8008842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008844:	4b36      	ldr	r3, [pc, #216]	; (8008920 <xTaskResumeAll+0x114>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d161      	bne.n	8008910 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800884c:	4b35      	ldr	r3, [pc, #212]	; (8008924 <xTaskResumeAll+0x118>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d05d      	beq.n	8008910 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008854:	e02e      	b.n	80088b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008856:	4b34      	ldr	r3, [pc, #208]	; (8008928 <xTaskResumeAll+0x11c>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3318      	adds	r3, #24
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fe62 	bl	800752c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3304      	adds	r3, #4
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fe5d 	bl	800752c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	2201      	movs	r2, #1
 8008878:	409a      	lsls	r2, r3
 800887a:	4b2c      	ldr	r3, [pc, #176]	; (800892c <xTaskResumeAll+0x120>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4313      	orrs	r3, r2
 8008880:	4a2a      	ldr	r2, [pc, #168]	; (800892c <xTaskResumeAll+0x120>)
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4a27      	ldr	r2, [pc, #156]	; (8008930 <xTaskResumeAll+0x124>)
 8008892:	441a      	add	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3304      	adds	r3, #4
 8008898:	4619      	mov	r1, r3
 800889a:	4610      	mov	r0, r2
 800889c:	f7fe fdeb 	bl	8007476 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4b23      	ldr	r3, [pc, #140]	; (8008934 <xTaskResumeAll+0x128>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80088ae:	4b22      	ldr	r3, [pc, #136]	; (8008938 <xTaskResumeAll+0x12c>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088b4:	4b1c      	ldr	r3, [pc, #112]	; (8008928 <xTaskResumeAll+0x11c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1cc      	bne.n	8008856 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088c2:	f000 fb2f 	bl	8008f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088c6:	4b1d      	ldr	r3, [pc, #116]	; (800893c <xTaskResumeAll+0x130>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d010      	beq.n	80088f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088d2:	f000 f857 	bl	8008984 <xTaskIncrementTick>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80088dc:	4b16      	ldr	r3, [pc, #88]	; (8008938 <xTaskResumeAll+0x12c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f1      	bne.n	80088d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <xTaskResumeAll+0x130>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088f4:	4b10      	ldr	r3, [pc, #64]	; (8008938 <xTaskResumeAll+0x12c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088fc:	2301      	movs	r3, #1
 80088fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xTaskResumeAll+0x134>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008910:	f000 fe88 	bl	8009624 <vPortExitCritical>

	return xAlreadyYielded;
 8008914:	68bb      	ldr	r3, [r7, #8]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	200006b4 	.word	0x200006b4
 8008924:	2000068c 	.word	0x2000068c
 8008928:	2000064c 	.word	0x2000064c
 800892c:	20000694 	.word	0x20000694
 8008930:	20000590 	.word	0x20000590
 8008934:	2000058c 	.word	0x2000058c
 8008938:	200006a0 	.word	0x200006a0
 800893c:	2000069c 	.word	0x2000069c
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800894a:	4b04      	ldr	r3, [pc, #16]	; (800895c <xTaskGetTickCount+0x18>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr
 800895c:	20000690 	.word	0x20000690

08008960 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008966:	f000 fee9 	bl	800973c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800896e:	4b04      	ldr	r3, [pc, #16]	; (8008980 <xTaskGetTickCountFromISR+0x20>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008974:	683b      	ldr	r3, [r7, #0]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000690 	.word	0x20000690

08008984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800898e:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <xTaskIncrementTick+0x14c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 808c 	bne.w	8008ab0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008998:	4b4e      	ldr	r3, [pc, #312]	; (8008ad4 <xTaskIncrementTick+0x150>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3301      	adds	r3, #1
 800899e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089a0:	4a4c      	ldr	r2, [pc, #304]	; (8008ad4 <xTaskIncrementTick+0x150>)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11f      	bne.n	80089ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80089ac:	4b4a      	ldr	r3, [pc, #296]	; (8008ad8 <xTaskIncrementTick+0x154>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <xTaskIncrementTick+0x46>
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	e7fe      	b.n	80089c8 <xTaskIncrementTick+0x44>
 80089ca:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <xTaskIncrementTick+0x154>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	4b42      	ldr	r3, [pc, #264]	; (8008adc <xTaskIncrementTick+0x158>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a40      	ldr	r2, [pc, #256]	; (8008ad8 <xTaskIncrementTick+0x154>)
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	4a40      	ldr	r2, [pc, #256]	; (8008adc <xTaskIncrementTick+0x158>)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	4b40      	ldr	r3, [pc, #256]	; (8008ae0 <xTaskIncrementTick+0x15c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	4a3e      	ldr	r2, [pc, #248]	; (8008ae0 <xTaskIncrementTick+0x15c>)
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f000 fa9c 	bl	8008f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089ec:	4b3d      	ldr	r3, [pc, #244]	; (8008ae4 <xTaskIncrementTick+0x160>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d34d      	bcc.n	8008a92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f6:	4b38      	ldr	r3, [pc, #224]	; (8008ad8 <xTaskIncrementTick+0x154>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <xTaskIncrementTick+0x80>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <xTaskIncrementTick+0x82>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d004      	beq.n	8008a14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0a:	4b36      	ldr	r3, [pc, #216]	; (8008ae4 <xTaskIncrementTick+0x160>)
 8008a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a10:	601a      	str	r2, [r3, #0]
					break;
 8008a12:	e03e      	b.n	8008a92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a14:	4b30      	ldr	r3, [pc, #192]	; (8008ad8 <xTaskIncrementTick+0x154>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d203      	bcs.n	8008a34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ae4 <xTaskIncrementTick+0x160>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
						break;
 8008a32:	e02e      	b.n	8008a92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fd77 	bl	800752c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3318      	adds	r3, #24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd6e 	bl	800752c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	2201      	movs	r2, #1
 8008a56:	409a      	lsls	r2, r3
 8008a58:	4b23      	ldr	r3, [pc, #140]	; (8008ae8 <xTaskIncrementTick+0x164>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	4a22      	ldr	r2, [pc, #136]	; (8008ae8 <xTaskIncrementTick+0x164>)
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a1f      	ldr	r2, [pc, #124]	; (8008aec <xTaskIncrementTick+0x168>)
 8008a70:	441a      	add	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7fe fcfc 	bl	8007476 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a82:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <xTaskIncrementTick+0x16c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d3b4      	bcc.n	80089f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a90:	e7b1      	b.n	80089f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <xTaskIncrementTick+0x16c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4914      	ldr	r1, [pc, #80]	; (8008aec <xTaskIncrementTick+0x168>)
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d907      	bls.n	8008aba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	e004      	b.n	8008aba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008ab0:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <xTaskIncrementTick+0x170>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <xTaskIncrementTick+0x170>)
 8008ab8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008aba:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <xTaskIncrementTick+0x174>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ac6:	697b      	ldr	r3, [r7, #20]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200006b4 	.word	0x200006b4
 8008ad4:	20000690 	.word	0x20000690
 8008ad8:	20000644 	.word	0x20000644
 8008adc:	20000648 	.word	0x20000648
 8008ae0:	200006a4 	.word	0x200006a4
 8008ae4:	200006ac 	.word	0x200006ac
 8008ae8:	20000694 	.word	0x20000694
 8008aec:	20000590 	.word	0x20000590
 8008af0:	2000058c 	.word	0x2000058c
 8008af4:	2000069c 	.word	0x2000069c
 8008af8:	200006a0 	.word	0x200006a0

08008afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b02:	4b26      	ldr	r3, [pc, #152]	; (8008b9c <vTaskSwitchContext+0xa0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b0a:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <vTaskSwitchContext+0xa4>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b10:	e03e      	b.n	8008b90 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008b12:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <vTaskSwitchContext+0xa4>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b18:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <vTaskSwitchContext+0xa8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	fab3 f383 	clz	r3, r3
 8008b24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	f1c3 031f 	rsb	r3, r3, #31
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	491e      	ldr	r1, [pc, #120]	; (8008ba8 <vTaskSwitchContext+0xac>)
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	e7fe      	b.n	8008b54 <vTaskSwitchContext+0x58>
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <vTaskSwitchContext+0xac>)
 8008b62:	4413      	add	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	605a      	str	r2, [r3, #4]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	3308      	adds	r3, #8
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d104      	bne.n	8008b86 <vTaskSwitchContext+0x8a>
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	4a07      	ldr	r2, [pc, #28]	; (8008bac <vTaskSwitchContext+0xb0>)
 8008b8e:	6013      	str	r3, [r2, #0]
}
 8008b90:	bf00      	nop
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	200006b4 	.word	0x200006b4
 8008ba0:	200006a0 	.word	0x200006a0
 8008ba4:	20000694 	.word	0x20000694
 8008ba8:	20000590 	.word	0x20000590
 8008bac:	2000058c 	.word	0x2000058c

08008bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <vTaskPlaceOnEventList+0x24>
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e7fe      	b.n	8008bd2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <vTaskPlaceOnEventList+0x44>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3318      	adds	r3, #24
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fe fc6d 	bl	80074bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008be2:	2101      	movs	r1, #1
 8008be4:	6838      	ldr	r0, [r7, #0]
 8008be6:	f000 fb9b 	bl	8009320 <prvAddCurrentTaskToDelayedList>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000058c 	.word	0x2000058c

08008bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <xTaskRemoveFromEventList+0x2a>
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e7fe      	b.n	8008c20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3318      	adds	r3, #24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fc80 	bl	800752c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <xTaskRemoveFromEventList+0xac>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d11c      	bne.n	8008c6e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe fc77 	bl	800752c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	2201      	movs	r2, #1
 8008c44:	409a      	lsls	r2, r3
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <xTaskRemoveFromEventList+0xb0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	4a16      	ldr	r2, [pc, #88]	; (8008ca8 <xTaskRemoveFromEventList+0xb0>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4a13      	ldr	r2, [pc, #76]	; (8008cac <xTaskRemoveFromEventList+0xb4>)
 8008c5e:	441a      	add	r2, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fe fc05 	bl	8007476 <vListInsertEnd>
 8008c6c:	e005      	b.n	8008c7a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3318      	adds	r3, #24
 8008c72:	4619      	mov	r1, r3
 8008c74:	480e      	ldr	r0, [pc, #56]	; (8008cb0 <xTaskRemoveFromEventList+0xb8>)
 8008c76:	f7fe fbfe 	bl	8007476 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <xTaskRemoveFromEventList+0xbc>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d905      	bls.n	8008c94 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <xTaskRemoveFromEventList+0xc0>)
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e001      	b.n	8008c98 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008c98:	697b      	ldr	r3, [r7, #20]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200006b4 	.word	0x200006b4
 8008ca8:	20000694 	.word	0x20000694
 8008cac:	20000590 	.word	0x20000590
 8008cb0:	2000064c 	.word	0x2000064c
 8008cb4:	2000058c 	.word	0x2000058c
 8008cb8:	200006a0 	.word	0x200006a0

08008cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <vTaskInternalSetTimeOutState+0x24>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <vTaskInternalSetTimeOutState+0x28>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	200006a4 	.word	0x200006a4
 8008ce4:	20000690 	.word	0x20000690

08008ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <xTaskCheckForTimeOut+0x24>
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	e7fe      	b.n	8008d0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d109      	bne.n	8008d26 <xTaskCheckForTimeOut+0x3e>
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e7fe      	b.n	8008d24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d26:	f000 fc4f 	bl	80095c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <xTaskCheckForTimeOut+0xb8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d102      	bne.n	8008d4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
 8008d48:	e023      	b.n	8008d92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <xTaskCheckForTimeOut+0xbc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d007      	beq.n	8008d66 <xTaskCheckForTimeOut+0x7e>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d302      	bcc.n	8008d66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	61fb      	str	r3, [r7, #28]
 8008d64:	e015      	b.n	8008d92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d20b      	bcs.n	8008d88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff ff9d 	bl	8008cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e004      	b.n	8008d92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d92:	f000 fc47 	bl	8009624 <vPortExitCritical>

	return xReturn;
 8008d96:	69fb      	ldr	r3, [r7, #28]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3720      	adds	r7, #32
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20000690 	.word	0x20000690
 8008da4:	200006a4 	.word	0x200006a4

08008da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dac:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <vTaskMissedYield+0x14>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]
}
 8008db2:	bf00      	nop
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200006a0 	.word	0x200006a0

08008dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dc8:	f000 f852 	bl	8008e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <prvIdleTask+0x28>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d9f9      	bls.n	8008dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dd4:	4b05      	ldr	r3, [pc, #20]	; (8008dec <prvIdleTask+0x2c>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008de4:	e7f0      	b.n	8008dc8 <prvIdleTask+0x8>
 8008de6:	bf00      	nop
 8008de8:	20000590 	.word	0x20000590
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e00c      	b.n	8008e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <prvInitialiseTaskLists+0x60>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fb08 	bl	8007420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3301      	adds	r3, #1
 8008e14:	607b      	str	r3, [r7, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	d9ef      	bls.n	8008dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e1c:	480d      	ldr	r0, [pc, #52]	; (8008e54 <prvInitialiseTaskLists+0x64>)
 8008e1e:	f7fe faff 	bl	8007420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e22:	480d      	ldr	r0, [pc, #52]	; (8008e58 <prvInitialiseTaskLists+0x68>)
 8008e24:	f7fe fafc 	bl	8007420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e28:	480c      	ldr	r0, [pc, #48]	; (8008e5c <prvInitialiseTaskLists+0x6c>)
 8008e2a:	f7fe faf9 	bl	8007420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e2e:	480c      	ldr	r0, [pc, #48]	; (8008e60 <prvInitialiseTaskLists+0x70>)
 8008e30:	f7fe faf6 	bl	8007420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e34:	480b      	ldr	r0, [pc, #44]	; (8008e64 <prvInitialiseTaskLists+0x74>)
 8008e36:	f7fe faf3 	bl	8007420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <prvInitialiseTaskLists+0x78>)
 8008e3c:	4a05      	ldr	r2, [pc, #20]	; (8008e54 <prvInitialiseTaskLists+0x64>)
 8008e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <prvInitialiseTaskLists+0x7c>)
 8008e42:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <prvInitialiseTaskLists+0x68>)
 8008e44:	601a      	str	r2, [r3, #0]
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000590 	.word	0x20000590
 8008e54:	2000061c 	.word	0x2000061c
 8008e58:	20000630 	.word	0x20000630
 8008e5c:	2000064c 	.word	0x2000064c
 8008e60:	20000660 	.word	0x20000660
 8008e64:	20000678 	.word	0x20000678
 8008e68:	20000644 	.word	0x20000644
 8008e6c:	20000648 	.word	0x20000648

08008e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e76:	e019      	b.n	8008eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e78:	f000 fba6 	bl	80095c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e7c:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <prvCheckTasksWaitingTermination+0x4c>)
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fb4f 	bl	800752c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <prvCheckTasksWaitingTermination+0x50>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <prvCheckTasksWaitingTermination+0x50>)
 8008e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <prvCheckTasksWaitingTermination+0x54>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	4a09      	ldr	r2, [pc, #36]	; (8008ec4 <prvCheckTasksWaitingTermination+0x54>)
 8008ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ea2:	f000 fbbf 	bl	8009624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f80e 	bl	8008ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <prvCheckTasksWaitingTermination+0x54>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e1      	bne.n	8008e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000660 	.word	0x20000660
 8008ec0:	2000068c 	.word	0x2000068c
 8008ec4:	20000674 	.word	0x20000674

08008ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d108      	bne.n	8008eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fd2a 	bl	8009938 <vPortFree>
				vPortFree( pxTCB );
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fd27 	bl	8009938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eea:	e017      	b.n	8008f1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d103      	bne.n	8008efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fd1e 	bl	8009938 <vPortFree>
	}
 8008efc:	e00e      	b.n	8008f1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d009      	beq.n	8008f1c <prvDeleteTCB+0x54>
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e7fe      	b.n	8008f1a <prvDeleteTCB+0x52>
	}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <prvResetNextTaskUnblockTime+0x40>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <prvResetNextTaskUnblockTime+0x14>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <prvResetNextTaskUnblockTime+0x16>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <prvResetNextTaskUnblockTime+0x44>)
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295
 8008f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f46:	e008      	b.n	8008f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <prvResetNextTaskUnblockTime+0x40>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <prvResetNextTaskUnblockTime+0x44>)
 8008f58:	6013      	str	r3, [r2, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr
 8008f64:	20000644 	.word	0x20000644
 8008f68:	200006ac 	.word	0x200006ac

08008f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f72:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <xTaskGetSchedulerState+0x34>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	e008      	b.n	8008f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <xTaskGetSchedulerState+0x38>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	607b      	str	r3, [r7, #4]
 8008f8c:	e001      	b.n	8008f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f92:	687b      	ldr	r3, [r7, #4]
	}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000698 	.word	0x20000698
 8008fa4:	200006b4 	.word	0x200006b4

08008fa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d06e      	beq.n	800909c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	4b39      	ldr	r3, [pc, #228]	; (80090a8 <xTaskPriorityInherit+0x100>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d25e      	bcs.n	800908a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db06      	blt.n	8008fe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd4:	4b34      	ldr	r3, [pc, #208]	; (80090a8 <xTaskPriorityInherit+0x100>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	f1c3 0207 	rsb	r2, r3, #7
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6959      	ldr	r1, [r3, #20]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4a2e      	ldr	r2, [pc, #184]	; (80090ac <xTaskPriorityInherit+0x104>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	d101      	bne.n	8008ffe <xTaskPriorityInherit+0x56>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <xTaskPriorityInherit+0x58>
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d03a      	beq.n	800907a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fa8f 	bl	800752c <uxListRemove>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d115      	bne.n	8009040 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009018:	4924      	ldr	r1, [pc, #144]	; (80090ac <xTaskPriorityInherit+0x104>)
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <xTaskPriorityInherit+0x98>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	2201      	movs	r2, #1
 8009030:	fa02 f303 	lsl.w	r3, r2, r3
 8009034:	43da      	mvns	r2, r3
 8009036:	4b1e      	ldr	r3, [pc, #120]	; (80090b0 <xTaskPriorityInherit+0x108>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4013      	ands	r3, r2
 800903c:	4a1c      	ldr	r2, [pc, #112]	; (80090b0 <xTaskPriorityInherit+0x108>)
 800903e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009040:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <xTaskPriorityInherit+0x100>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	2201      	movs	r2, #1
 8009050:	409a      	lsls	r2, r3
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <xTaskPriorityInherit+0x108>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4313      	orrs	r3, r2
 8009058:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <xTaskPriorityInherit+0x108>)
 800905a:	6013      	str	r3, [r2, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4a10      	ldr	r2, [pc, #64]	; (80090ac <xTaskPriorityInherit+0x104>)
 800906a:	441a      	add	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3304      	adds	r3, #4
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f7fe f9ff 	bl	8007476 <vListInsertEnd>
 8009078:	e004      	b.n	8009084 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <xTaskPriorityInherit+0x100>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e008      	b.n	800909c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <xTaskPriorityInherit+0x100>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	429a      	cmp	r2, r3
 8009096:	d201      	bcs.n	800909c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800909c:	68fb      	ldr	r3, [r7, #12]
	}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	2000058c 	.word	0x2000058c
 80090ac:	20000590 	.word	0x20000590
 80090b0:	20000694 	.word	0x20000694

080090b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d06c      	beq.n	80091a4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090ca:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <xTaskPriorityDisinherit+0xfc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d009      	beq.n	80090e8 <xTaskPriorityDisinherit+0x34>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e7fe      	b.n	80090e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <xTaskPriorityDisinherit+0x50>
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	e7fe      	b.n	8009102 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	429a      	cmp	r2, r3
 8009118:	d044      	beq.n	80091a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911e:	2b00      	cmp	r3, #0
 8009120:	d140      	bne.n	80091a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3304      	adds	r3, #4
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fa00 	bl	800752c <uxListRemove>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d115      	bne.n	800915e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009136:	491f      	ldr	r1, [pc, #124]	; (80091b4 <xTaskPriorityDisinherit+0x100>)
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xTaskPriorityDisinherit+0xaa>
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	2201      	movs	r2, #1
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	43da      	mvns	r2, r3
 8009154:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <xTaskPriorityDisinherit+0x104>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4013      	ands	r3, r2
 800915a:	4a17      	ldr	r2, [pc, #92]	; (80091b8 <xTaskPriorityDisinherit+0x104>)
 800915c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916a:	f1c3 0207 	rsb	r2, r3, #7
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	2201      	movs	r2, #1
 8009178:	409a      	lsls	r2, r3
 800917a:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <xTaskPriorityDisinherit+0x104>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4313      	orrs	r3, r2
 8009180:	4a0d      	ldr	r2, [pc, #52]	; (80091b8 <xTaskPriorityDisinherit+0x104>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4a08      	ldr	r2, [pc, #32]	; (80091b4 <xTaskPriorityDisinherit+0x100>)
 8009192:	441a      	add	r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe f96b 	bl	8007476 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091a4:	697b      	ldr	r3, [r7, #20]
	}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000058c 	.word	0x2000058c
 80091b4:	20000590 	.word	0x20000590
 80091b8:	20000694 	.word	0x20000694

080091bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80091ca:	2301      	movs	r3, #1
 80091cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8086 	beq.w	80092e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e7fe      	b.n	80091f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d902      	bls.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	e002      	b.n	8009208 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009206:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	429a      	cmp	r2, r3
 8009210:	d067      	beq.n	80092e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	429a      	cmp	r2, r3
 800921a:	d162      	bne.n	80092e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800921c:	4b33      	ldr	r3, [pc, #204]	; (80092ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	429a      	cmp	r2, r3
 8009224:	d109      	bne.n	800923a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	60bb      	str	r3, [r7, #8]
 8009238:	e7fe      	b.n	8009238 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	db04      	blt.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f1c3 0207 	rsb	r2, r3, #7
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6959      	ldr	r1, [r3, #20]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a22      	ldr	r2, [pc, #136]	; (80092f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009268:	4413      	add	r3, r2
 800926a:	4299      	cmp	r1, r3
 800926c:	d101      	bne.n	8009272 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d034      	beq.n	80092e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe f955 	bl	800752c <uxListRemove>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d115      	bne.n	80092b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4918      	ldr	r1, [pc, #96]	; (80092f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	2201      	movs	r2, #1
 80092a4:	fa02 f303 	lsl.w	r3, r2, r3
 80092a8:	43da      	mvns	r2, r3
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4013      	ands	r3, r2
 80092b0:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092b2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	2201      	movs	r2, #1
 80092ba:	409a      	lsls	r2, r3
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80092d4:	441a      	add	r2, r3
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	3304      	adds	r3, #4
 80092da:	4619      	mov	r1, r3
 80092dc:	4610      	mov	r0, r2
 80092de:	f7fe f8ca 	bl	8007476 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092e2:	bf00      	nop
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	2000058c 	.word	0x2000058c
 80092f0:	20000590 	.word	0x20000590
 80092f4:	20000694 	.word	0x20000694

080092f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80092fc:	4b07      	ldr	r3, [pc, #28]	; (800931c <pvTaskIncrementMutexHeldCount+0x24>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <pvTaskIncrementMutexHeldCount+0x24>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800930a:	3201      	adds	r2, #1
 800930c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800930e:	4b03      	ldr	r3, [pc, #12]	; (800931c <pvTaskIncrementMutexHeldCount+0x24>)
 8009310:	681b      	ldr	r3, [r3, #0]
	}
 8009312:	4618      	mov	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	2000058c 	.word	0x2000058c

08009320 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800932a:	4b29      	ldr	r3, [pc, #164]	; (80093d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3304      	adds	r3, #4
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe f8f8 	bl	800752c <uxListRemove>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	2201      	movs	r2, #1
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43da      	mvns	r2, r3
 8009350:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4013      	ands	r3, r2
 8009356:	4a20      	ldr	r2, [pc, #128]	; (80093d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009358:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009360:	d10a      	bne.n	8009378 <prvAddCurrentTaskToDelayedList+0x58>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009368:	4b1a      	ldr	r3, [pc, #104]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3304      	adds	r3, #4
 800936e:	4619      	mov	r1, r3
 8009370:	481a      	ldr	r0, [pc, #104]	; (80093dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009372:	f7fe f880 	bl	8007476 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009376:	e026      	b.n	80093c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4413      	add	r3, r2
 800937e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009380:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	429a      	cmp	r2, r3
 800938e:	d209      	bcs.n	80093a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe f88d 	bl	80074bc <vListInsert>
}
 80093a2:	e010      	b.n	80093c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f7fe f883 	bl	80074bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d202      	bcs.n	80093c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093c0:	4a09      	ldr	r2, [pc, #36]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6013      	str	r3, [r2, #0]
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000690 	.word	0x20000690
 80093d4:	2000058c 	.word	0x2000058c
 80093d8:	20000694 	.word	0x20000694
 80093dc:	20000678 	.word	0x20000678
 80093e0:	20000648 	.word	0x20000648
 80093e4:	20000644 	.word	0x20000644
 80093e8:	200006ac 	.word	0x200006ac

080093ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3b04      	subs	r3, #4
 80093fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3b04      	subs	r3, #4
 800940a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f023 0201 	bic.w	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3b04      	subs	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800941c:	4a08      	ldr	r2, [pc, #32]	; (8009440 <pxPortInitialiseStack+0x54>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3b14      	subs	r3, #20
 8009426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3b20      	subs	r3, #32
 8009432:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr
 8009440:	08009445 	.word	0x08009445

08009444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800944a:	2300      	movs	r3, #0
 800944c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800944e:	4b10      	ldr	r3, [pc, #64]	; (8009490 <prvTaskExitError+0x4c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d009      	beq.n	800946c <prvTaskExitError+0x28>
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e7fe      	b.n	800946a <prvTaskExitError+0x26>
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800947e:	bf00      	nop
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0fc      	beq.n	8009480 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr
 8009490:	20000054 	.word	0x20000054
	...

080094a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <pxCurrentTCBConst2>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	6808      	ldr	r0, [r1, #0]
 80094a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094aa:	f380 8809 	msr	PSP, r0
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80094be:	4770      	bx	lr

080094c0 <pxCurrentTCBConst2>:
 80094c0:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80094c8:	4806      	ldr	r0, [pc, #24]	; (80094e4 <prvPortStartFirstTask+0x1c>)
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	6800      	ldr	r0, [r0, #0]
 80094ce:	f380 8808 	msr	MSP, r0
 80094d2:	b662      	cpsie	i
 80094d4:	b661      	cpsie	f
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	df00      	svc	0
 80094e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094e2:	bf00      	nop
 80094e4:	e000ed08 	.word	0xe000ed08

080094e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094ee:	4b31      	ldr	r3, [pc, #196]	; (80095b4 <xPortStartScheduler+0xcc>)
 80094f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009510:	b2da      	uxtb	r2, r3
 8009512:	4b29      	ldr	r3, [pc, #164]	; (80095b8 <xPortStartScheduler+0xd0>)
 8009514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009516:	4b29      	ldr	r3, [pc, #164]	; (80095bc <xPortStartScheduler+0xd4>)
 8009518:	2207      	movs	r2, #7
 800951a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800951c:	e009      	b.n	8009532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800951e:	4b27      	ldr	r3, [pc, #156]	; (80095bc <xPortStartScheduler+0xd4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3b01      	subs	r3, #1
 8009524:	4a25      	ldr	r2, [pc, #148]	; (80095bc <xPortStartScheduler+0xd4>)
 8009526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953a:	2b80      	cmp	r3, #128	; 0x80
 800953c:	d0ef      	beq.n	800951e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <xPortStartScheduler+0xd4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f1c3 0307 	rsb	r3, r3, #7
 8009546:	2b04      	cmp	r3, #4
 8009548:	d009      	beq.n	800955e <xPortStartScheduler+0x76>
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	60bb      	str	r3, [r7, #8]
 800955c:	e7fe      	b.n	800955c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800955e:	4b17      	ldr	r3, [pc, #92]	; (80095bc <xPortStartScheduler+0xd4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	4a15      	ldr	r2, [pc, #84]	; (80095bc <xPortStartScheduler+0xd4>)
 8009566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009568:	4b14      	ldr	r3, [pc, #80]	; (80095bc <xPortStartScheduler+0xd4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009570:	4a12      	ldr	r2, [pc, #72]	; (80095bc <xPortStartScheduler+0xd4>)
 8009572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	b2da      	uxtb	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <xPortStartScheduler+0xd8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0f      	ldr	r2, [pc, #60]	; (80095c0 <xPortStartScheduler+0xd8>)
 8009582:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <xPortStartScheduler+0xd8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <xPortStartScheduler+0xd8>)
 800958e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009594:	f000 f8b0 	bl	80096f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <xPortStartScheduler+0xdc>)
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800959e:	f7ff ff93 	bl	80094c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095a2:	f7ff faab 	bl	8008afc <vTaskSwitchContext>
	prvTaskExitError();
 80095a6:	f7ff ff4d 	bl	8009444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	e000e400 	.word	0xe000e400
 80095b8:	200006b8 	.word	0x200006b8
 80095bc:	200006bc 	.word	0x200006bc
 80095c0:	e000ed20 	.word	0xe000ed20
 80095c4:	20000054 	.word	0x20000054

080095c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <vPortEnterCritical+0x54>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a0d      	ldr	r2, [pc, #52]	; (800961c <vPortEnterCritical+0x54>)
 80095e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <vPortEnterCritical+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10e      	bne.n	8009610 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <vPortEnterCritical+0x58>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <vPortEnterCritical+0x48>
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	e7fe      	b.n	800960e <vPortEnterCritical+0x46>
	}
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	bc80      	pop	{r7}
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20000054 	.word	0x20000054
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800962a:	4b10      	ldr	r3, [pc, #64]	; (800966c <vPortExitCritical+0x48>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <vPortExitCritical+0x22>
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e7fe      	b.n	8009644 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <vPortExitCritical+0x48>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3b01      	subs	r3, #1
 800964c:	4a07      	ldr	r2, [pc, #28]	; (800966c <vPortExitCritical+0x48>)
 800964e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <vPortExitCritical+0x48>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d104      	bne.n	8009662 <vPortExitCritical+0x3e>
 8009658:	2300      	movs	r3, #0
 800965a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr
 800966c:	20000054 	.word	0x20000054

08009670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009670:	f3ef 8009 	mrs	r0, PSP
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <pxCurrentTCBConst>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009680:	6010      	str	r0, [r2, #0]
 8009682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800968a:	f380 8811 	msr	BASEPRI, r0
 800968e:	f7ff fa35 	bl	8008afc <vTaskSwitchContext>
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f380 8811 	msr	BASEPRI, r0
 800969a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	6808      	ldr	r0, [r1, #0]
 80096a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80096a6:	f380 8809 	msr	PSP, r0
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	4770      	bx	lr

080096b0 <pxCurrentTCBConst>:
 80096b0:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096d0:	f7ff f958 	bl	8008984 <xTaskIncrementTick>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <SysTick_Handler+0x3c>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	2300      	movs	r3, #0
 80096e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <vPortSetupTimerInterrupt+0x30>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <vPortSetupTimerInterrupt+0x34>)
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <vPortSetupTimerInterrupt+0x38>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a09      	ldr	r2, [pc, #36]	; (8009734 <vPortSetupTimerInterrupt+0x3c>)
 800970e:	fba2 2303 	umull	r2, r3, r2, r3
 8009712:	099b      	lsrs	r3, r3, #6
 8009714:	4a08      	ldr	r2, [pc, #32]	; (8009738 <vPortSetupTimerInterrupt+0x40>)
 8009716:	3b01      	subs	r3, #1
 8009718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <vPortSetupTimerInterrupt+0x30>)
 800971c:	2207      	movs	r2, #7
 800971e:	601a      	str	r2, [r3, #0]
}
 8009720:	bf00      	nop
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr
 8009728:	e000e010 	.word	0xe000e010
 800972c:	e000e018 	.word	0xe000e018
 8009730:	20000044 	.word	0x20000044
 8009734:	10624dd3 	.word	0x10624dd3
 8009738:	e000e014 	.word	0xe000e014

0800973c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009742:	f3ef 8305 	mrs	r3, IPSR
 8009746:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b0f      	cmp	r3, #15
 800974c:	d913      	bls.n	8009776 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800974e:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <vPortValidateInterruptPriority+0x68>)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009758:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <vPortValidateInterruptPriority+0x6c>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	7afa      	ldrb	r2, [r7, #11]
 800975e:	429a      	cmp	r2, r3
 8009760:	d209      	bcs.n	8009776 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	607b      	str	r3, [r7, #4]
 8009774:	e7fe      	b.n	8009774 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009776:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <vPortValidateInterruptPriority+0x70>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <vPortValidateInterruptPriority+0x74>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d909      	bls.n	800979a <vPortValidateInterruptPriority+0x5e>
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	e7fe      	b.n	8009798 <vPortValidateInterruptPriority+0x5c>
	}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr
 80097a4:	e000e3f0 	.word	0xe000e3f0
 80097a8:	200006b8 	.word	0x200006b8
 80097ac:	e000ed0c 	.word	0xe000ed0c
 80097b0:	200006bc 	.word	0x200006bc

080097b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	; 0x28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097bc:	2300      	movs	r3, #0
 80097be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097c0:	f7ff f816 	bl	80087f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097c4:	4b57      	ldr	r3, [pc, #348]	; (8009924 <pvPortMalloc+0x170>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097cc:	f000 f90c 	bl	80099e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097d0:	4b55      	ldr	r3, [pc, #340]	; (8009928 <pvPortMalloc+0x174>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4013      	ands	r3, r2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 808c 	bne.w	80098f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01c      	beq.n	800981e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80097e4:	2208      	movs	r2, #8
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4413      	add	r3, r2
 80097ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d013      	beq.n	800981e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f023 0307 	bic.w	r3, r3, #7
 80097fc:	3308      	adds	r3, #8
 80097fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <pvPortMalloc+0x6a>
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e7fe      	b.n	800981c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d068      	beq.n	80098f6 <pvPortMalloc+0x142>
 8009824:	4b41      	ldr	r3, [pc, #260]	; (800992c <pvPortMalloc+0x178>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d863      	bhi.n	80098f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800982e:	4b40      	ldr	r3, [pc, #256]	; (8009930 <pvPortMalloc+0x17c>)
 8009830:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009832:	4b3f      	ldr	r3, [pc, #252]	; (8009930 <pvPortMalloc+0x17c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009838:	e004      	b.n	8009844 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d903      	bls.n	8009856 <pvPortMalloc+0xa2>
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f1      	bne.n	800983a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009856:	4b33      	ldr	r3, [pc, #204]	; (8009924 <pvPortMalloc+0x170>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985c:	429a      	cmp	r2, r3
 800985e:	d04a      	beq.n	80098f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2208      	movs	r2, #8
 8009866:	4413      	add	r3, r2
 8009868:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	1ad2      	subs	r2, r2, r3
 800987a:	2308      	movs	r3, #8
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	429a      	cmp	r2, r3
 8009880:	d91e      	bls.n	80098c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4413      	add	r3, r2
 8009888:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <pvPortMalloc+0xf4>
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	e7fe      	b.n	80098a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098ba:	69b8      	ldr	r0, [r7, #24]
 80098bc:	f000 f8f6 	bl	8009aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c0:	4b1a      	ldr	r3, [pc, #104]	; (800992c <pvPortMalloc+0x178>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	4a18      	ldr	r2, [pc, #96]	; (800992c <pvPortMalloc+0x178>)
 80098cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098ce:	4b17      	ldr	r3, [pc, #92]	; (800992c <pvPortMalloc+0x178>)
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b18      	ldr	r3, [pc, #96]	; (8009934 <pvPortMalloc+0x180>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d203      	bcs.n	80098e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098da:	4b14      	ldr	r3, [pc, #80]	; (800992c <pvPortMalloc+0x178>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a15      	ldr	r2, [pc, #84]	; (8009934 <pvPortMalloc+0x180>)
 80098e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	4b10      	ldr	r3, [pc, #64]	; (8009928 <pvPortMalloc+0x174>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098f6:	f7fe ff89 	bl	800880c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	2b00      	cmp	r3, #0
 8009902:	d009      	beq.n	8009918 <pvPortMalloc+0x164>
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	e7fe      	b.n	8009916 <pvPortMalloc+0x162>
	return pvReturn;
 8009918:	69fb      	ldr	r3, [r7, #28]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3728      	adds	r7, #40	; 0x28
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200012c8 	.word	0x200012c8
 8009928:	200012d4 	.word	0x200012d4
 800992c:	200012cc 	.word	0x200012cc
 8009930:	200012c0 	.word	0x200012c0
 8009934:	200012d0 	.word	0x200012d0

08009938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d046      	beq.n	80099d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800994a:	2308      	movs	r3, #8
 800994c:	425b      	negs	r3, r3
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	4b20      	ldr	r3, [pc, #128]	; (80099e0 <vPortFree+0xa8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4013      	ands	r3, r2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <vPortFree+0x42>
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e7fe      	b.n	8009978 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <vPortFree+0x5e>
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	60bb      	str	r3, [r7, #8]
 8009994:	e7fe      	b.n	8009994 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <vPortFree+0xa8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4013      	ands	r3, r2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d019      	beq.n	80099d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d115      	bne.n	80099d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <vPortFree+0xa8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	43db      	mvns	r3, r3
 80099b6:	401a      	ands	r2, r3
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099bc:	f7fe ff18 	bl	80087f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <vPortFree+0xac>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4413      	add	r3, r2
 80099ca:	4a06      	ldr	r2, [pc, #24]	; (80099e4 <vPortFree+0xac>)
 80099cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ce:	6938      	ldr	r0, [r7, #16]
 80099d0:	f000 f86c 	bl	8009aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80099d4:	f7fe ff1a 	bl	800880c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099d8:	bf00      	nop
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200012d4 	.word	0x200012d4
 80099e4:	200012cc 	.word	0x200012cc

080099e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80099f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <prvHeapInit+0xac>)
 80099f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3307      	adds	r3, #7
 8009a06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0307 	bic.w	r3, r3, #7
 8009a0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <prvHeapInit+0xac>)
 8009a18:	4413      	add	r3, r2
 8009a1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a20:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <prvHeapInit+0xb0>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a26:	4b1c      	ldr	r3, [pc, #112]	; (8009a98 <prvHeapInit+0xb0>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a34:	2208      	movs	r2, #8
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0307 	bic.w	r3, r3, #7
 8009a42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <prvHeapInit+0xb4>)
 8009a48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a4a:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <prvHeapInit+0xb4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <prvHeapInit+0xb4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	1ad2      	subs	r2, r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <prvHeapInit+0xb4>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4a0a      	ldr	r2, [pc, #40]	; (8009aa0 <prvHeapInit+0xb8>)
 8009a76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <prvHeapInit+0xbc>)
 8009a7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a80:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <prvHeapInit+0xc0>)
 8009a82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a86:	601a      	str	r2, [r3, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	200006c0 	.word	0x200006c0
 8009a98:	200012c0 	.word	0x200012c0
 8009a9c:	200012c8 	.word	0x200012c8
 8009aa0:	200012d0 	.word	0x200012d0
 8009aa4:	200012cc 	.word	0x200012cc
 8009aa8:	200012d4 	.word	0x200012d4

08009aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ab4:	4b27      	ldr	r3, [pc, #156]	; (8009b54 <prvInsertBlockIntoFreeList+0xa8>)
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e002      	b.n	8009ac0 <prvInsertBlockIntoFreeList+0x14>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d8f7      	bhi.n	8009aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d108      	bne.n	8009aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	441a      	add	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	441a      	add	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d118      	bne.n	8009b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <prvInsertBlockIntoFreeList+0xac>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d00d      	beq.n	8009b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	441a      	add	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e008      	b.n	8009b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <prvInsertBlockIntoFreeList+0xac>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e003      	b.n	8009b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d002      	beq.n	8009b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr
 8009b54:	200012c0 	.word	0x200012c0
 8009b58:	200012c8 	.word	0x200012c8

08009b5c <__libc_init_array>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	2500      	movs	r5, #0
 8009b60:	4e0c      	ldr	r6, [pc, #48]	; (8009b94 <__libc_init_array+0x38>)
 8009b62:	4c0d      	ldr	r4, [pc, #52]	; (8009b98 <__libc_init_array+0x3c>)
 8009b64:	1ba4      	subs	r4, r4, r6
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	42a5      	cmp	r5, r4
 8009b6a:	d109      	bne.n	8009b80 <__libc_init_array+0x24>
 8009b6c:	f000 f82e 	bl	8009bcc <_init>
 8009b70:	2500      	movs	r5, #0
 8009b72:	4e0a      	ldr	r6, [pc, #40]	; (8009b9c <__libc_init_array+0x40>)
 8009b74:	4c0a      	ldr	r4, [pc, #40]	; (8009ba0 <__libc_init_array+0x44>)
 8009b76:	1ba4      	subs	r4, r4, r6
 8009b78:	10a4      	asrs	r4, r4, #2
 8009b7a:	42a5      	cmp	r5, r4
 8009b7c:	d105      	bne.n	8009b8a <__libc_init_array+0x2e>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b84:	4798      	blx	r3
 8009b86:	3501      	adds	r5, #1
 8009b88:	e7ee      	b.n	8009b68 <__libc_init_array+0xc>
 8009b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b8e:	4798      	blx	r3
 8009b90:	3501      	adds	r5, #1
 8009b92:	e7f2      	b.n	8009b7a <__libc_init_array+0x1e>
 8009b94:	08009d80 	.word	0x08009d80
 8009b98:	08009d80 	.word	0x08009d80
 8009b9c:	08009d80 	.word	0x08009d80
 8009ba0:	08009d84 	.word	0x08009d84

08009ba4 <memcpy>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	1e43      	subs	r3, r0, #1
 8009ba8:	440a      	add	r2, r1
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d100      	bne.n	8009bb0 <memcpy+0xc>
 8009bae:	bd10      	pop	{r4, pc}
 8009bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bb8:	e7f7      	b.n	8009baa <memcpy+0x6>

08009bba <memset>:
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4402      	add	r2, r0
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d100      	bne.n	8009bc4 <memset+0xa>
 8009bc2:	4770      	bx	lr
 8009bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc8:	e7f9      	b.n	8009bbe <memset+0x4>
	...

08009bcc <_init>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr

08009bd8 <_fini>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	bf00      	nop
 8009bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bde:	bc08      	pop	{r3}
 8009be0:	469e      	mov	lr, r3
 8009be2:	4770      	bx	lr
