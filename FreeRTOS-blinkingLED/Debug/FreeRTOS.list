
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004204  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004398  08004398  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004398  08004398  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ac  20000010  080043b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  080043b0  000219bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013319  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002801  00000000  00000000  00033352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  00035b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00036ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e31  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdd4  00000000  00000000  0004f711  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000981b2  00000000  00000000  0005c4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  000f4714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800432c 	.word	0x0800432c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800432c 	.word	0x0800432c

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b092      	sub	sp, #72	; 0x48
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 8000186:	f001 fc05 	bl	8001994 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800018a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800018e:	2224      	movs	r2, #36	; 0x24
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f004 f8c1 	bl	800431a <memset>
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <MX_FREERTOS_Init+0x6c>)
 800019a:	627b      	str	r3, [r7, #36]	; 0x24
 800019c:	2380      	movs	r3, #128	; 0x80
 800019e:	63bb      	str	r3, [r7, #56]	; 0x38
 80001a0:	2318      	movs	r3, #24
 80001a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001a8:	461a      	mov	r2, r3
 80001aa:	2100      	movs	r1, #0
 80001ac:	4810      	ldr	r0, [pc, #64]	; (80001f0 <MX_FREERTOS_Init+0x70>)
 80001ae:	f001 fc57 	bl	8001a60 <osThreadNew>
 80001b2:	4602      	mov	r2, r0
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <MX_FREERTOS_Init+0x74>)
 80001b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of testTask */
  const osThreadAttr_t testTask_attributes = {
 80001b8:	463b      	mov	r3, r7
 80001ba:	2224      	movs	r2, #36	; 0x24
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f004 f8ab 	bl	800431a <memset>
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <MX_FREERTOS_Init+0x78>)
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	2380      	movs	r3, #128	; 0x80
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	2308      	movs	r3, #8
 80001ce:	61bb      	str	r3, [r7, #24]
    .name = "testTask",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 128
  };
  testTaskHandle = osThreadNew(blinkingLED, NULL, &testTask_attributes);
 80001d0:	463b      	mov	r3, r7
 80001d2:	461a      	mov	r2, r3
 80001d4:	2100      	movs	r1, #0
 80001d6:	4809      	ldr	r0, [pc, #36]	; (80001fc <MX_FREERTOS_Init+0x7c>)
 80001d8:	f001 fc42 	bl	8001a60 <osThreadNew>
 80001dc:	4602      	mov	r2, r0
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <MX_FREERTOS_Init+0x80>)
 80001e0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001e2:	bf00      	nop
 80001e4:	3748      	adds	r7, #72	; 0x48
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	08004344 	.word	0x08004344
 80001f0:	08000205 	.word	0x08000205
 80001f4:	20001934 	.word	0x20001934
 80001f8:	08004350 	.word	0x08004350
 80001fc:	08000215 	.word	0x08000215
 8000200:	20001938 	.word	0x20001938

08000204 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f001 fcd1 	bl	8001bb4 <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <blinkingLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkingLED */
void blinkingLED(void *argument)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkingLED */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <blinkingLED+0x1c>)
 8000222:	f000 fc6b 	bl	8000afc <HAL_GPIO_TogglePin>
    osDelay(100);
 8000226:	2064      	movs	r0, #100	; 0x64
 8000228:	f001 fcc4 	bl	8001bb4 <osDelay>
	 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800022c:	e7f6      	b.n	800021c <blinkingLED+0x8>
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_GPIO_Init+0x5c>)
 800024a:	69db      	ldr	r3, [r3, #28]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <MX_GPIO_Init+0x5c>)
 800024e:	f043 0302 	orr.w	r3, r3, #2
 8000252:	61d3      	str	r3, [r2, #28]
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_GPIO_Init+0x5c>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	f003 0302 	and.w	r3, r3, #2
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000266:	480b      	ldr	r0, [pc, #44]	; (8000294 <MX_GPIO_Init+0x60>)
 8000268:	f000 fc30 	bl	8000acc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800026c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000270:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	2301      	movs	r3, #1
 8000274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_GPIO_Init+0x60>)
 8000284:	f000 fa94 	bl	80007b0 <HAL_GPIO_Init>

}
 8000288:	bf00      	nop
 800028a:	3718      	adds	r7, #24
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40023800 	.word	0x40023800
 8000294:	40020400 	.word	0x40020400

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 f973 	bl	8000586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f808 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ffc6 	bl	8000234 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80002a8:	f7ff ff6a 	bl	8000180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002ac:	f001 fba4 	bl	80019f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <main+0x18>
	...

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b092      	sub	sp, #72	; 0x48
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	2234      	movs	r2, #52	; 0x34
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f004 f829 	bl	800431a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d6:	4b1d      	ldr	r3, [pc, #116]	; (800034c <SystemClock_Config+0x98>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002de:	4a1b      	ldr	r2, [pc, #108]	; (800034c <SystemClock_Config+0x98>)
 80002e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000300:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000304:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0314 	add.w	r3, r7, #20
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fc10 	bl	8000b30 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000316:	f000 f82a 	bl	800036e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2303      	movs	r3, #3
 8000320:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	463b      	mov	r3, r7
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f000 ff2c 	bl	8001190 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800033e:	f000 f816 	bl	800036e <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3748      	adds	r7, #72	; 0x48
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40007000 	.word	0x40007000

08000350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000360:	d101      	bne.n	8000366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000362:	f000 f929 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <HAL_MspInit+0x64>)
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <HAL_MspInit+0x64>)
 8000388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800038c:	6253      	str	r3, [r2, #36]	; 0x24
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HAL_MspInit+0x64>)
 8000390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <HAL_MspInit+0x64>)
 800039c:	6a1b      	ldr	r3, [r3, #32]
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <HAL_MspInit+0x64>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6213      	str	r3, [r2, #32]
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <HAL_MspInit+0x64>)
 80003a8:	6a1b      	ldr	r3, [r3, #32]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <HAL_MspInit+0x64>)
 80003b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <HAL_MspInit+0x64>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003bc:	6253      	str	r3, [r2, #36]	; 0x24
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <HAL_MspInit+0x64>)
 80003c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	210f      	movs	r1, #15
 80003ce:	f06f 0001 	mvn.w	r0, #1
 80003d2:	f000 f9c2 	bl	800075a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800

080003e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80003f4:	2200      	movs	r2, #0
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	201c      	movs	r0, #28
 80003fa:	f000 f9ae 	bl	800075a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80003fe:	201c      	movs	r0, #28
 8000400:	f000 f9c7 	bl	8000792 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <HAL_InitTick+0xa0>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <HAL_InitTick+0xa0>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <HAL_InitTick+0xa0>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800041c:	f107 0210 	add.w	r2, r7, #16
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4611      	mov	r1, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f001 f85c 	bl	80014e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800042c:	f001 f846 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8000430:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000434:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_InitTick+0xa4>)
 8000436:	fba2 2303 	umull	r2, r3, r2, r3
 800043a:	0c9b      	lsrs	r3, r3, #18
 800043c:	3b01      	subs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_InitTick+0xa8>)
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_InitTick+0xa8>)
 800044a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800044e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_InitTick+0xa8>)
 8000452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000454:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <HAL_InitTick+0xa8>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_InitTick+0xa8>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000462:	480a      	ldr	r0, [pc, #40]	; (800048c <HAL_InitTick+0xa8>)
 8000464:	f001 f8ce 	bl	8001604 <HAL_TIM_Base_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d104      	bne.n	8000478 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <HAL_InitTick+0xa8>)
 8000470:	f001 f8fc 	bl	800166c <HAL_TIM_Base_Start_IT>
 8000474:	4603      	mov	r3, r0
 8000476:	e000      	b.n	800047a <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000478:	2301      	movs	r3, #1
}
 800047a:	4618      	mov	r0, r3
 800047c:	3730      	adds	r7, #48	; 0x30
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	431bde83 	.word	0x431bde83
 800048c:	2000193c 	.word	0x2000193c

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <HardFault_Handler+0x4>

080004a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <BusFault_Handler+0x4>

080004ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <UsageFault_Handler+0x4>

080004b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <TIM2_IRQHandler+0x10>)
 80004c6:	f001 f8f4 	bl	80016b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000193c 	.word	0x2000193c

080004d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <SystemInit+0x5c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <SystemInit+0x5c>)
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <SystemInit+0x5c>)
 80004e6:	689a      	ldr	r2, [r3, #8]
 80004e8:	4911      	ldr	r1, [pc, #68]	; (8000530 <SystemInit+0x5c>)
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <SystemInit+0x60>)
 80004ec:	4013      	ands	r3, r2
 80004ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <SystemInit+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <SystemInit+0x5c>)
 80004f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80004fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80004fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <SystemInit+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <SystemInit+0x5c>)
 8000506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <SystemInit+0x5c>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <SystemInit+0x5c>)
 8000512:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000516:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <SystemInit+0x5c>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SystemInit+0x64>)
 8000520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000524:	609a      	str	r2, [r3, #8]
#endif
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800
 8000534:	88ffc00c 	.word	0x88ffc00c
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800053c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800053e:	e003      	b.n	8000548 <LoopCopyDataInit>

08000540 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000542:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000544:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000546:	3104      	adds	r1, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800054c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800054e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000550:	d3f6      	bcc.n	8000540 <CopyDataInit>
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000554:	e002      	b.n	800055c <LoopFillZerobss>

08000556 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000558:	f842 3b04 	str.w	r3, [r2], #4

0800055c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800055e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000560:	d3f9      	bcc.n	8000556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000562:	f7ff ffb7 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000566:	f003 fea9 	bl	80042bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe95 	bl	8000298 <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r3, =_sidata
 8000570:	080043a0 	.word	0x080043a0
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000578:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800057c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000580:	200019bc 	.word	0x200019bc

08000584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_IRQHandler>

08000586 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f8d7 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff24 	bl	80003e4 <HAL_InitTick>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	e001      	b.n	80005ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a8:	f7ff fee8 	bl	800037c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x1c>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20001978 	.word	0x20001978
 80005d8:	20000008 	.word	0x20000008

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20001978 	.word	0x20001978

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <__NVIC_EnableIRQ+0x34>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff4f 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800076c:	f7ff ff64 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ffb2 	bl	80006e0 <NVIC_EncodePriority>
 800077c:	4602      	mov	r2, r0
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff81 	bl	800068c <__NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff57 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007c6:	e160      	b.n	8000a8a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f000 8152 	beq.w	8000a84 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d003      	beq.n	80007f0 <HAL_GPIO_Init+0x40>
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b12      	cmp	r3, #18
 80007ee:	d123      	bne.n	8000838 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	08da      	lsrs	r2, r3, #3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3208      	adds	r2, #8
 80007f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	220f      	movs	r2, #15
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4313      	orrs	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	08da      	lsrs	r2, r3, #3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3208      	adds	r2, #8
 8000832:	6939      	ldr	r1, [r7, #16]
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2203      	movs	r2, #3
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f003 0203 	and.w	r2, r3, #3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d00b      	beq.n	800088c <HAL_GPIO_Init+0xdc>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d007      	beq.n	800088c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000880:	2b11      	cmp	r3, #17
 8000882:	d003      	beq.n	800088c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b12      	cmp	r3, #18
 800088a:	d130      	bne.n	80008ee <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	2203      	movs	r2, #3
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80008c2:	2201      	movs	r2, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	091b      	lsrs	r3, r3, #4
 80008d8:	f003 0201 	and.w	r2, r3, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 80ac 	beq.w	8000a84 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <HAL_GPIO_Init+0x2f4>)
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4a5c      	ldr	r2, [pc, #368]	; (8000aa4 <HAL_GPIO_Init+0x2f4>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6213      	str	r3, [r2, #32]
 8000938:	4b5a      	ldr	r3, [pc, #360]	; (8000aa4 <HAL_GPIO_Init+0x2f4>)
 800093a:	6a1b      	ldr	r3, [r3, #32]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000944:	4a58      	ldr	r2, [pc, #352]	; (8000aa8 <HAL_GPIO_Init+0x2f8>)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	3302      	adds	r3, #2
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	220f      	movs	r2, #15
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a50      	ldr	r2, [pc, #320]	; (8000aac <HAL_GPIO_Init+0x2fc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d025      	beq.n	80009bc <HAL_GPIO_Init+0x20c>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a4f      	ldr	r2, [pc, #316]	; (8000ab0 <HAL_GPIO_Init+0x300>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d01f      	beq.n	80009b8 <HAL_GPIO_Init+0x208>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <HAL_GPIO_Init+0x304>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d019      	beq.n	80009b4 <HAL_GPIO_Init+0x204>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <HAL_GPIO_Init+0x308>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <HAL_GPIO_Init+0x200>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <HAL_GPIO_Init+0x30c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00d      	beq.n	80009ac <HAL_GPIO_Init+0x1fc>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <HAL_GPIO_Init+0x310>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d007      	beq.n	80009a8 <HAL_GPIO_Init+0x1f8>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4a      	ldr	r2, [pc, #296]	; (8000ac4 <HAL_GPIO_Init+0x314>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <HAL_GPIO_Init+0x1f4>
 80009a0:	2306      	movs	r3, #6
 80009a2:	e00c      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009a4:	2307      	movs	r3, #7
 80009a6:	e00a      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009a8:	2305      	movs	r3, #5
 80009aa:	e008      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e006      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009b0:	2303      	movs	r3, #3
 80009b2:	e004      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009b4:	2302      	movs	r3, #2
 80009b6:	e002      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <HAL_GPIO_Init+0x20e>
 80009bc:	2300      	movs	r3, #0
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	f002 0203 	and.w	r2, r2, #3
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	4093      	lsls	r3, r2
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009ce:	4936      	ldr	r1, [pc, #216]	; (8000aa8 <HAL_GPIO_Init+0x2f8>)
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a00:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a06:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a2a:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a54:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_GPIO_Init+0x318>)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	fa22 f303 	lsr.w	r3, r2, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f47f ae97 	bne.w	80007c8 <HAL_GPIO_Init+0x18>
  } 
}
 8000a9a:	bf00      	nop
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40021400 	.word	0x40021400
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000adc:	787b      	ldrb	r3, [r7, #1]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ae8:	e003      	b.n	8000af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	041a      	lsls	r2, r3, #16
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	619a      	str	r2, [r3, #24]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	041a      	lsls	r2, r3, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b1c:	e002      	b.n	8000b24 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	619a      	str	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e31d      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b42:	4b94      	ldr	r3, [pc, #592]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b4c:	4b91      	ldr	r3, [pc, #580]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b54:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d07b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d006      	beq.n	8000b76 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2b0c      	cmp	r3, #12
 8000b6c:	d10f      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d10b      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b76:	4b87      	ldr	r3, [pc, #540]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d06a      	beq.n	8000c58 <HAL_RCC_OscConfig+0x128>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d166      	bne.n	8000c58 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e2f7      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d106      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x74>
 8000b96:	4b7f      	ldr	r3, [pc, #508]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a7e      	ldr	r2, [pc, #504]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e02d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10c      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x96>
 8000bac:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a78      	ldr	r2, [pc, #480]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b76      	ldr	r3, [pc, #472]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a75      	ldr	r2, [pc, #468]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e01c      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xb8>
 8000bce:	4b71      	ldr	r3, [pc, #452]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a70      	ldr	r2, [pc, #448]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6d      	ldr	r2, [pc, #436]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000be8:	4b6a      	ldr	r3, [pc, #424]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a69      	ldr	r2, [pc, #420]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b67      	ldr	r3, [pc, #412]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a66      	ldr	r2, [pc, #408]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fce8 	bl	80005dc <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fce4 	bl	80005dc <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e2ad      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe0>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcd4 	bl	80005dc <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcd0 	bl	80005dc <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e299      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x108>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d05a      	beq.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d119      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x176>
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d116      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_OscConfig+0x160>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e276      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	493d      	ldr	r1, [pc, #244]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca4:	e03a      	b.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d020      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cae:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <HAL_RCC_OscConfig+0x268>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fc92 	bl	80005dc <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc8e 	bl	80005dc <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e257      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	492a      	ldr	r1, [pc, #168]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
 8000cee:	e015      	b.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <HAL_RCC_OscConfig+0x268>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc71 	bl	80005dc <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc6d 	bl	80005dc <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e236      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f0      	bne.n	8000cfe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80b8 	beq.w	8000e9a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d170      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_OscConfig+0x218>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e21a      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d921      	bls.n	8000d9c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fbf1 	bl	8001544 <RCC_SetFlashLatencyFromMSIRange>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e208      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	061b      	lsls	r3, r3, #24
 8000d8c:	4901      	ldr	r1, [pc, #4]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]
 8000d92:	e020      	b.n	8000dd6 <HAL_RCC_OscConfig+0x2a6>
 8000d94:	40023800 	.word	0x40023800
 8000d98:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9c:	4ba4      	ldr	r3, [pc, #656]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	49a1      	ldr	r1, [pc, #644]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dae:	4ba0      	ldr	r3, [pc, #640]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	061b      	lsls	r3, r3, #24
 8000dbc:	499c      	ldr	r1, [pc, #624]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fbbc 	bl	8001544 <RCC_SetFlashLatencyFromMSIRange>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1d3      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	0b5b      	lsrs	r3, r3, #13
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000de6:	4a92      	ldr	r2, [pc, #584]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000de8:	6892      	ldr	r2, [r2, #8]
 8000dea:	0912      	lsrs	r2, r2, #4
 8000dec:	f002 020f 	and.w	r2, r2, #15
 8000df0:	4990      	ldr	r1, [pc, #576]	; (8001034 <HAL_RCC_OscConfig+0x504>)
 8000df2:	5c8a      	ldrb	r2, [r1, r2]
 8000df4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000df6:	4a90      	ldr	r2, [pc, #576]	; (8001038 <HAL_RCC_OscConfig+0x508>)
 8000df8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dfa:	4b90      	ldr	r3, [pc, #576]	; (800103c <HAL_RCC_OscConfig+0x50c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff faf0 	bl	80003e4 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d045      	beq.n	8000e9a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	e1b5      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d029      	beq.n	8000e6e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e1a:	4b89      	ldr	r3, [pc, #548]	; (8001040 <HAL_RCC_OscConfig+0x510>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fbdc 	bl	80005dc <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e28:	f7ff fbd8 	bl	80005dc <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1a1      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e3a:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e46:	4b7a      	ldr	r3, [pc, #488]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4977      	ldr	r1, [pc, #476]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e58:	4b75      	ldr	r3, [pc, #468]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	061b      	lsls	r3, r3, #24
 8000e66:	4972      	ldr	r1, [pc, #456]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e6e:	4b74      	ldr	r3, [pc, #464]	; (8001040 <HAL_RCC_OscConfig+0x510>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fbb2 	bl	80005dc <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fbae 	bl	80005dc <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e177      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e8e:	4b68      	ldr	r3, [pc, #416]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d030      	beq.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d016      	beq.n	8000edc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eae:	4b65      	ldr	r3, [pc, #404]	; (8001044 <HAL_RCC_OscConfig+0x514>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fb92 	bl	80005dc <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fb8e 	bl	80005dc <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e157      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ece:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x38c>
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <HAL_RCC_OscConfig+0x514>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fb7b 	bl	80005dc <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eea:	f7ff fb77 	bl	80005dc <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e140      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000efc:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b5 	beq.w	8001080 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10d      	bne.n	8000f42 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	4a41      	ldr	r2, [pc, #260]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6253      	str	r3, [r2, #36]	; 0x24
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d118      	bne.n	8000f80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb3f 	bl	80005dc <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f62:	f7ff fb3b 	bl	80005dc <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	; 0x64
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e104      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x466>
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
 8000f94:	e02d      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x488>
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb6:	e01c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x4aa>
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6353      	str	r3, [r2, #52]	; 0x34
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8000fd8:	e00b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ff0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff faef 	bl	80005dc <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff faeb 	bl	80005dc <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e0b2      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 800101a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ee      	beq.n	8001002 <HAL_RCC_OscConfig+0x4d2>
 8001024:	e023      	b.n	800106e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fad9 	bl	80005dc <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800102c:	e019      	b.n	8001062 <HAL_RCC_OscConfig+0x532>
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	08004380 	.word	0x08004380
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004
 8001040:	42470020 	.word	0x42470020
 8001044:	42470680 	.word	0x42470680
 8001048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff fac6 	bl	80005dc <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f241 3288 	movw	r2, #5000	; 0x1388
 800105a:	4293      	cmp	r3, r2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e08d      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ee      	bne.n	800104c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 800107a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800107e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2b00      	cmp	r3, #0
 8001086:	d079      	beq.n	800117c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d056      	beq.n	800113c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2b02      	cmp	r3, #2
 8001094:	d13b      	bne.n	800110e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fa9e 	bl	80005dc <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fa9a 	bl	80005dc <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e063      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4319      	orrs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	430b      	orrs	r3, r1
 80010da:	492b      	ldr	r1, [pc, #172]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa79 	bl	80005dc <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fa75 	bl	80005dc <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e03e      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x5be>
 800110c:	e036      	b.n	800117c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fa62 	bl	80005dc <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fa5e 	bl	80005dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e027      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x5ec>
 800113a:	e01f      	b.n	800117c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e01a      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	429a      	cmp	r2, r3
 800115a:	d10d      	bne.n	8001178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	429a      	cmp	r2, r3
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	42470060 	.word	0x42470060

08001190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e11a      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d919      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x34>
 80011b8:	4b8a      	ldr	r3, [pc, #552]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 0201 	bic.w	r2, r3, #1
 80011cc:	4985      	ldr	r1, [pc, #532]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0f9      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f2:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	497a      	ldr	r1, [pc, #488]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 808e 	beq.w	800132e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d7      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d115      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0cb      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0bf      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0b7      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f023 0203 	bic.w	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	495c      	ldr	r1, [pc, #368]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800127c:	f7ff f9ae 	bl	80005dc <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff f9a6 	bl	80005dc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e09b      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d1ee      	bne.n	800128c <HAL_RCC_ClockConfig+0xfc>
 80012ae:	e03e      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d112      	bne.n	80012de <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ba:	f7ff f98f 	bl	80005dc <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e084      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d1ee      	bne.n	80012ba <HAL_RCC_ClockConfig+0x12a>
 80012dc:	e027      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11d      	bne.n	8001322 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff f978 	bl	80005dc <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e06d      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d1ee      	bne.n	80012e8 <HAL_RCC_ClockConfig+0x158>
 800130a:	e010      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff f966 	bl	80005dc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e05b      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d219      	bcs.n	8001370 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <HAL_RCC_ClockConfig+0x1be>
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0201 	bic.w	r2, r3, #1
 8001356:	4923      	ldr	r1, [pc, #140]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e034      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4917      	ldr	r1, [pc, #92]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	490f      	ldr	r1, [pc, #60]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ae:	f000 f823 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80013b2:	4601      	mov	r1, r0
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x25c>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	fa21 f303 	lsr.w	r3, r1, r3
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x260>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_ClockConfig+0x264>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f808 	bl	80003e4 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80013d8:	7afb      	ldrb	r3, [r7, #11]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08004380 	.word	0x08004380
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d006      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x24>
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d007      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x2a>
 8001412:	2b04      	cmp	r3, #4
 8001414:	d12c      	bne.n	8001470 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	e037      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	e034      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xac>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	0d9b      	lsrs	r3, r3, #22
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa0>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800144c:	fb02 f203 	mul.w	r2, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e007      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_GetSysClockFreq+0xa4>)
 800145e:	fb02 f203 	mul.w	r2, r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	613b      	str	r3, [r7, #16]
      break;
 800146e:	e00d      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0b5b      	lsrs	r3, r3, #13
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	613b      	str	r3, [r7, #16]
      break;
 800148a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148c:	693b      	ldr	r3, [r7, #16]
}
 800148e:	4618      	mov	r0, r3
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	00f42400 	.word	0x00f42400
 80014a0:	016e3600 	.word	0x016e3600
 80014a4:	08004374 	.word	0x08004374

080014a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff2 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08004390 	.word	0x08004390

080014e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_RCC_GetClockConfig+0x58>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	40023c00 	.word	0x40023c00

08001544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d12c      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e016      	b.n	80015a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6253      	str	r3, [r2, #36]	; 0x24
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001594:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80015a8:	d105      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015b0:	d101      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 0201 	bic.w	r2, r3, #1
 80015d0:	490b      	ldr	r1, [pc, #44]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e01d      	b.n	8001652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f815 	bl	800165a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f000 f936 	bl	80018b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d007      	beq.n	80016a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d122      	bne.n	800170e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d11b      	bne.n	800170e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f06f 0202 	mvn.w	r2, #2
 80016de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8c1 	bl	800187c <HAL_TIM_IC_CaptureCallback>
 80016fa:	e005      	b.n	8001708 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f8b4 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8c3 	bl	800188e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d122      	bne.n	8001762 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	d11b      	bne.n	8001762 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0204 	mvn.w	r2, #4
 8001732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f897 	bl	800187c <HAL_TIM_IC_CaptureCallback>
 800174e:	e005      	b.n	800175c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f88a 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f899 	bl	800188e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b08      	cmp	r3, #8
 800176e:	d122      	bne.n	80017b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11b      	bne.n	80017b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f06f 0208 	mvn.w	r2, #8
 8001786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2204      	movs	r2, #4
 800178c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f86d 	bl	800187c <HAL_TIM_IC_CaptureCallback>
 80017a2:	e005      	b.n	80017b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f860 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f86f 	bl	800188e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d122      	bne.n	800180a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d11b      	bne.n	800180a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f06f 0210 	mvn.w	r2, #16
 80017da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2208      	movs	r2, #8
 80017e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f843 	bl	800187c <HAL_TIM_IC_CaptureCallback>
 80017f6:	e005      	b.n	8001804 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f836 	bl	800186a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f845 	bl	800188e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10e      	bne.n	8001836 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0201 	mvn.w	r2, #1
 800182e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fd8d 	bl	8000350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	d10e      	bne.n	8001862 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d107      	bne.n	8001862 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800185a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f81f 	bl	80018a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ca:	d00f      	beq.n	80018ec <TIM_Base_SetConfig+0x38>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a2b      	ldr	r2, [pc, #172]	; (800197c <TIM_Base_SetConfig+0xc8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00b      	beq.n	80018ec <TIM_Base_SetConfig+0x38>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <TIM_Base_SetConfig+0xcc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <TIM_Base_SetConfig+0x38>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <TIM_Base_SetConfig+0xd0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d003      	beq.n	80018ec <TIM_Base_SetConfig+0x38>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a28      	ldr	r2, [pc, #160]	; (8001988 <TIM_Base_SetConfig+0xd4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d017      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <TIM_Base_SetConfig+0xc8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <TIM_Base_SetConfig+0xcc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00f      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <TIM_Base_SetConfig+0xd0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00b      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <TIM_Base_SetConfig+0xd4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <TIM_Base_SetConfig+0xd8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <TIM_Base_SetConfig+0x82>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <TIM_Base_SetConfig+0xdc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	615a      	str	r2, [r3, #20]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40000400 	.word	0x40000400
 8001980:	40000800 	.word	0x40000800
 8001984:	40000c00 	.word	0x40000c00
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000

08001994 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800199a:	f3ef 8305 	mrs	r3, IPSR
 800199e:	60bb      	str	r3, [r7, #8]
  return(result);
 80019a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019a6:	f3ef 8310 	mrs	r3, PRIMASK
 80019aa:	607b      	str	r3, [r7, #4]
  return(result);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <osKernelInitialize+0x32>
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <osKernelInitialize+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d109      	bne.n	80019ce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019ba:	f3ef 8311 	mrs	r3, BASEPRI
 80019be:	603b      	str	r3, [r7, #0]
  return(result);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019c6:	f06f 0305 	mvn.w	r3, #5
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e00c      	b.n	80019e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <osKernelInitialize+0x60>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <osKernelInitialize+0x60>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e002      	b.n	80019e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	2000002c 	.word	0x2000002c

080019f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019fe:	f3ef 8305 	mrs	r3, IPSR
 8001a02:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0e:	607b      	str	r3, [r7, #4]
  return(result);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <osKernelStart+0x32>
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <osKernelStart+0x64>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d109      	bne.n	8001a32 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a22:	603b      	str	r3, [r7, #0]
  return(result);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a2a:	f06f 0305 	mvn.w	r3, #5
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e00e      	b.n	8001a50 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <osKernelStart+0x64>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <osKernelStart+0x64>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a40:	f001 f864 	bl	8002b0c <vTaskStartScheduler>
      stat = osOK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e002      	b.n	8001a50 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000002c 	.word	0x2000002c

08001a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b092      	sub	sp, #72	; 0x48
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a70:	f3ef 8305 	mrs	r3, IPSR
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8094 	bne.w	8001ba6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a82:	623b      	str	r3, [r7, #32]
  return(result);
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 808d 	bne.w	8001ba6 <osThreadNew+0x146>
 8001a8c:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <osThreadNew+0x150>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d106      	bne.n	8001aa2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a94:	f3ef 8311 	mrs	r3, BASEPRI
 8001a98:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 8082 	bne.w	8001ba6 <osThreadNew+0x146>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d07e      	beq.n	8001ba6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001aac:	2318      	movs	r3, #24
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ab4:	f107 031b 	add.w	r3, r7, #27
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d045      	beq.n	8001b52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <osThreadNew+0x74>
        name = attr->name;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <osThreadNew+0x9a>
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	2b38      	cmp	r3, #56	; 0x38
 8001aec:	d805      	bhi.n	8001afa <osThreadNew+0x9a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <osThreadNew+0x9e>
        return (NULL);
 8001afa:	2300      	movs	r3, #0
 8001afc:	e054      	b.n	8001ba8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00e      	beq.n	8001b34 <osThreadNew+0xd4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b1c:	d90a      	bls.n	8001b34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <osThreadNew+0xd4>
        mem = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b32:	e010      	b.n	8001b56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10c      	bne.n	8001b56 <osThreadNew+0xf6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d108      	bne.n	8001b56 <osThreadNew+0xf6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d104      	bne.n	8001b56 <osThreadNew+0xf6>
          mem = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b50:	e001      	b.n	8001b56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d110      	bne.n	8001b7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b64:	9202      	str	r2, [sp, #8]
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fe02 	bl	800277c <xTaskCreateStatic>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e013      	b.n	8001ba6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d110      	bne.n	8001ba6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fe49 	bl	800282e <xTaskCreate>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <osThreadNew+0x146>
          hTask = NULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ba6:	697b      	ldr	r3, [r7, #20]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3738      	adds	r7, #56	; 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000002c 	.word	0x2000002c

08001bb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bbc:	f3ef 8305 	mrs	r3, IPSR
 8001bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8001bc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10f      	bne.n	8001be8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8001bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <osDelay+0x34>
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <osDelay+0x58>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d109      	bne.n	8001bf0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8001be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <osDelay+0x3c>
    stat = osErrorISR;
 8001be8:	f06f 0305 	mvn.w	r3, #5
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e007      	b.n	8001c00 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ff52 	bl	8002aa4 <vTaskDelay>
    }
  }

  return (stat);
 8001c00:	697b      	ldr	r3, [r7, #20]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000002c 	.word	0x2000002c

08001c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <vApplicationGetIdleTaskMemory+0x28>)
 8001c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8001c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000030 	.word	0x20000030
 8001c3c:	2000008c 	.word	0x2000008c

08001c40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8001c50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <vApplicationGetTimerTaskMemory+0x30>)
 8001c56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000028c 	.word	0x2000028c
 8001c70:	200002e8 	.word	0x200002e8

08001c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 0208 	add.w	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 0208 	add.w	r2, r3, #8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0208 	add.w	r2, r3, #8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d103      	bne.n	8001d30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e00c      	b.n	8001d4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3308      	adds	r3, #8
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e002      	b.n	8001d3e <vListInsert+0x2e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d2f6      	bcs.n	8001d38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6892      	ldr	r2, [r2, #8]
 8001d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6852      	ldr	r2, [r2, #4]
 8001da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d103      	bne.n	8001db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
	...

08001dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	e7fe      	b.n	8001dfa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001dfc:	f001 ff94 	bl	8003d28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	441a      	add	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	441a      	add	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	22ff      	movs	r2, #255	; 0xff
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d114      	bne.n	8001e7c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01a      	beq.n	8001e90 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f8d8 	bl	8003014 <xTaskRemoveFromEventList>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <xQueueGenericReset+0xcc>)
 8001e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	e009      	b.n	8001e90 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3310      	adds	r3, #16
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fef7 	bl	8001c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3324      	adds	r3, #36	; 0x24
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fef2 	bl	8001c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e90:	f001 ff78 	bl	8003d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <xQueueGenericCreateStatic+0x28>
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eca:	e7fe      	b.n	8001eca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <xQueueGenericCreateStatic+0x42>
 8001ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	e7fe      	b.n	8001ee4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x4e>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <xQueueGenericCreateStatic+0x52>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericCreateStatic+0x54>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <xQueueGenericCreateStatic+0x6c>
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	e7fe      	b.n	8001f0e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <xQueueGenericCreateStatic+0x78>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <xQueueGenericCreateStatic+0x7c>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <xQueueGenericCreateStatic+0x7e>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <xQueueGenericCreateStatic+0x96>
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	e7fe      	b.n	8001f38 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f3a:	2350      	movs	r3, #80	; 0x50
 8001f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b50      	cmp	r3, #80	; 0x50
 8001f42:	d009      	beq.n	8001f58 <xQueueGenericCreateStatic+0xb4>
 8001f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	e7fe      	b.n	8001f56 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f805 	bl	8001f88 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e002      	b.n	8001faa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	69b8      	ldr	r0, [r7, #24]
 8001fba:	f7ff ff0b 	bl	8001dd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <xQueueGenericSend+0x30>
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	e7fe      	b.n	8001ffe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <xQueueGenericSend+0x3e>
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <xQueueGenericSend+0x42>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <xQueueGenericSend+0x44>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <xQueueGenericSend+0x5c>
 8002018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7fe      	b.n	800202a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d103      	bne.n	800203a <xQueueGenericSend+0x6a>
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <xQueueGenericSend+0x6e>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <xQueueGenericSend+0x70>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <xQueueGenericSend+0x88>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	e7fe      	b.n	8002056 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002058:	f001 f996 	bl	8003388 <xTaskGetSchedulerState>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <xQueueGenericSend+0x98>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <xQueueGenericSend+0x9c>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <xQueueGenericSend+0x9e>
 800206c:	2300      	movs	r3, #0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <xQueueGenericSend+0xb6>
 8002072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e7fe      	b.n	8002084 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002086:	f001 fe4f 	bl	8003d28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <xQueueGenericSend+0xcc>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d129      	bne.n	80020f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020a2:	f000 f9ff 	bl	80024a4 <prvCopyDataToQueue>
 80020a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	3324      	adds	r3, #36	; 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 ffad 	bl	8003014 <xTaskRemoveFromEventList>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <xQueueGenericSend+0x1f0>)
 80020c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	e00a      	b.n	80020e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <xQueueGenericSend+0x1f0>)
 80020da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020e8:	f001 fe4c 	bl	8003d84 <vPortExitCritical>
				return pdPASS;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e063      	b.n	80021b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020f6:	f001 fe45 	bl	8003d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e05c      	b.n	80021b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4618      	mov	r0, r3
 800210a:	f000 ffe5 	bl	80030d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800210e:	2301      	movs	r3, #1
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002112:	f001 fe37 	bl	8003d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002116:	f000 fd5d 	bl	8002bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800211a:	f001 fe05 	bl	8003d28 <vPortEnterCritical>
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002124:	b25b      	sxtb	r3, r3
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d103      	bne.n	8002134 <xQueueGenericSend+0x164>
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800213a:	b25b      	sxtb	r3, r3
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d103      	bne.n	800214a <xQueueGenericSend+0x17a>
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800214a:	f001 fe1b 	bl	8003d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800214e:	1d3a      	adds	r2, r7, #4
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 ffd4 	bl	8003104 <xTaskCheckForTimeOut>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d124      	bne.n	80021ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002164:	f000 fa96 	bl	8002694 <prvIsQueueFull>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d018      	beq.n	80021a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	3310      	adds	r3, #16
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fefe 	bl	8002f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800217c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217e:	f000 fa21 	bl	80025c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002182:	f000 fd35 	bl	8002bf0 <xTaskResumeAll>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f47f af7c 	bne.w	8002086 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <xQueueGenericSend+0x1f0>)
 8002190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	e772      	b.n	8002086 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021a2:	f000 fa0f 	bl	80025c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021a6:	f000 fd23 	bl	8002bf0 <xTaskResumeAll>
 80021aa:	e76c      	b.n	8002086 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ae:	f000 fa09 	bl	80025c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021b2:	f000 fd1d 	bl	8002bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021b6:	2300      	movs	r3, #0
		}
	}
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3738      	adds	r7, #56	; 0x38
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	e000ed04 	.word	0xe000ed04

080021c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	; 0x38
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <xQueueGenericSendFromISR+0x2c>
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e7fe      	b.n	80021ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <xQueueGenericSendFromISR+0x3a>
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <xQueueGenericSendFromISR+0x3e>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <xQueueGenericSendFromISR+0x40>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <xQueueGenericSendFromISR+0x58>
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	e7fe      	b.n	800221a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d103      	bne.n	800222a <xQueueGenericSendFromISR+0x66>
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <xQueueGenericSendFromISR+0x6a>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <xQueueGenericSendFromISR+0x6c>
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <xQueueGenericSendFromISR+0x84>
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e7fe      	b.n	8002246 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002248:	f001 fe28 	bl	8003e9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800224c:	f3ef 8211 	mrs	r2, BASEPRI
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	61ba      	str	r2, [r7, #24]
 8002262:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002264:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <xQueueGenericSendFromISR+0xb6>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d12c      	bne.n	80022d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228a:	f000 f90b 	bl	80024a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800228e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d112      	bne.n	80022be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	3324      	adds	r3, #36	; 0x24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 feb5 	bl	8003014 <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	b25a      	sxtb	r2, r3
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022ce:	2301      	movs	r3, #1
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80022d2:	e001      	b.n	80022d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3738      	adds	r7, #56	; 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <xQueueReceive+0x2e>
	__asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	e7fe      	b.n	8002318 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <xQueueReceive+0x3c>
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <xQueueReceive+0x40>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <xQueueReceive+0x42>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <xQueueReceive+0x5a>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	e7fe      	b.n	8002344 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002346:	f001 f81f 	bl	8003388 <xTaskGetSchedulerState>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <xQueueReceive+0x6a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <xQueueReceive+0x6e>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <xQueueReceive+0x70>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <xQueueReceive+0x88>
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e7fe      	b.n	8002372 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002374:	f001 fcd8 	bl	8003d28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01f      	beq.n	80023c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002388:	f000 f8f6 	bl	8002578 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00f      	beq.n	80023bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	3310      	adds	r3, #16
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fe37 	bl	8003014 <xTaskRemoveFromEventList>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023ac:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <xQueueReceive+0x1b4>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023bc:	f001 fce2 	bl	8003d84 <vPortExitCritical>
				return pdPASS;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e069      	b.n	8002498 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023ca:	f001 fcdb 	bl	8003d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e062      	b.n	8002498 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fe7b 	bl	80030d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023e6:	f001 fccd 	bl	8003d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023ea:	f000 fbf3 	bl	8002bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023ee:	f001 fc9b 	bl	8003d28 <vPortEnterCritical>
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d103      	bne.n	8002408 <xQueueReceive+0x11c>
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240e:	b25b      	sxtb	r3, r3
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d103      	bne.n	800241e <xQueueReceive+0x132>
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800241e:	f001 fcb1 	bl	8003d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002422:	1d3a      	adds	r2, r7, #4
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fe6a 	bl	8003104 <xTaskCheckForTimeOut>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d123      	bne.n	800247e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f000 f916 	bl	8002668 <prvIsQueueEmpty>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d017      	beq.n	8002472 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	3324      	adds	r3, #36	; 0x24
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fd94 	bl	8002f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002452:	f000 f8b7 	bl	80025c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002456:	f000 fbcb 	bl	8002bf0 <xTaskResumeAll>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d189      	bne.n	8002374 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <xQueueReceive+0x1b4>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	e780      	b.n	8002374 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002474:	f000 f8a6 	bl	80025c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002478:	f000 fbba 	bl	8002bf0 <xTaskResumeAll>
 800247c:	e77a      	b.n	8002374 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800247e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002480:	f000 f8a0 	bl	80025c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002484:	f000 fbb4 	bl	8002bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f000 f8ed 	bl	8002668 <prvIsQueueEmpty>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f43f af6f 	beq.w	8002374 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002496:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002498:	4618      	mov	r0, r3
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d14d      	bne.n	8002566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 ff78 	bl	80033c4 <xTaskPriorityDisinherit>
 80024d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	e043      	b.n	8002566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d119      	bne.n	8002518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6898      	ldr	r0, [r3, #8]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	461a      	mov	r2, r3
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	f001 ff08 	bl	8004304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	441a      	add	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d32b      	bcc.n	8002566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	e026      	b.n	8002566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68d8      	ldr	r0, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	461a      	mov	r2, r3
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	f001 feee 	bl	8004304 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	425b      	negs	r3, r3
 8002532:	441a      	add	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	425b      	negs	r3, r3
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d105      	bne.n	8002566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	3b01      	subs	r3, #1
 8002564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800256e:	697b      	ldr	r3, [r7, #20]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	441a      	add	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d303      	bcc.n	80025ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	461a      	mov	r2, r3
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	f001 fea4 	bl	8004304 <memcpy>
	}
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025cc:	f001 fbac 	bl	8003d28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025d8:	e011      	b.n	80025fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd14 	bl	8003014 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025f2:	f000 fde7 	bl	80031c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dce9      	bgt.n	80025da <prvUnlockQueue+0x16>
 8002606:	e000      	b.n	800260a <prvUnlockQueue+0x46>
					break;
 8002608:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	22ff      	movs	r2, #255	; 0xff
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002612:	f001 fbb7 	bl	8003d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002616:	f001 fb87 	bl	8003d28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002620:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002622:	e011      	b.n	8002648 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fcef 	bl	8003014 <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800263c:	f000 fdc2 	bl	80031c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	3b01      	subs	r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800264c:	2b00      	cmp	r3, #0
 800264e:	dce9      	bgt.n	8002624 <prvUnlockQueue+0x60>
 8002650:	e000      	b.n	8002654 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002652:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800265c:	f001 fb92 	bl	8003d84 <vPortExitCritical>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002670:	f001 fb5a 	bl	8003d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e001      	b.n	8002686 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002686:	f001 fb7d 	bl	8003d84 <vPortExitCritical>

	return xReturn;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800269c:	f001 fb44 	bl	8003d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d102      	bne.n	80026b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026b6:	f001 fb65 	bl	8003d84 <vPortExitCritical>

	return xReturn;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e014      	b.n	80026fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026f6:	e005      	b.n	8002704 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d9e7      	bls.n	80026d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000197c 	.word	0x2000197c

08002714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002724:	f001 fb00 	bl	8003d28 <vPortEnterCritical>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d103      	bne.n	800273e <vQueueWaitForMessageRestricted+0x2a>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <vQueueWaitForMessageRestricted+0x40>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	f001 fb16 	bl	8003d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fc29 	bl	8002fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff28 	bl	80025c4 <prvUnlockQueue>
	}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af04      	add	r7, sp, #16
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <xTaskCreateStatic+0x28>
 8002790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	e7fe      	b.n	80027a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <xTaskCreateStatic+0x42>
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	e7fe      	b.n	80027bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027be:	235c      	movs	r3, #92	; 0x5c
 80027c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b5c      	cmp	r3, #92	; 0x5c
 80027c6:	d009      	beq.n	80027dc <xTaskCreateStatic+0x60>
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e7fe      	b.n	80027da <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01e      	beq.n	8002820 <xTaskCreateStatic+0xa4>
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027fa:	2300      	movs	r3, #0
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f850 	bl	80028b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800281a:	f000 f8d3 	bl	80029c4 <prvAddNewTaskToReadyList>
 800281e:	e001      	b.n	8002824 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002824:	697b      	ldr	r3, [r7, #20]
	}
 8002826:	4618      	mov	r0, r3
 8002828:	3728      	adds	r7, #40	; 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800282e:	b580      	push	{r7, lr}
 8002830:	b08c      	sub	sp, #48	; 0x30
 8002832:	af04      	add	r7, sp, #16
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fb66 	bl	8003f14 <pvPortMalloc>
 8002848:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002850:	205c      	movs	r0, #92	; 0x5c
 8002852:	f001 fb5f 	bl	8003f14 <pvPortMalloc>
 8002856:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
 8002864:	e005      	b.n	8002872 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002866:	6978      	ldr	r0, [r7, #20]
 8002868:	f001 fc16 	bl	8004098 <vPortFree>
 800286c:	e001      	b.n	8002872 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	2300      	movs	r3, #0
 8002884:	9303      	str	r3, [sp, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f80e 	bl	80028b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800289c:	69f8      	ldr	r0, [r7, #28]
 800289e:	f000 f891 	bl	80029c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e002      	b.n	80028ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028ae:	69bb      	ldr	r3, [r7, #24]
	}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	461a      	mov	r2, r3
 80028d0:	21a5      	movs	r1, #165	; 0xa5
 80028d2:	f001 fd22 	bl	800431a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028e0:	3b01      	subs	r3, #1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <prvInitialiseNewTask+0x56>
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e7fe      	b.n	800290c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e012      	b.n	800293a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	7819      	ldrb	r1, [r3, #0]
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	3334      	adds	r3, #52	; 0x34
 8002924:	460a      	mov	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d9e9      	bls.n	8002914 <prvInitialiseNewTask+0x5c>
 8002940:	e000      	b.n	8002944 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002942:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2b37      	cmp	r3, #55	; 0x37
 8002950:	d901      	bls.n	8002956 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002952:	2337      	movs	r3, #55	; 0x37
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	3304      	adds	r3, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff f9a0 	bl	8001cb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	3318      	adds	r3, #24
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f99b 	bl	8001cb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002980:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	69b8      	ldr	r0, [r7, #24]
 80029a6:	f001 f8d7 	bl	8003b58 <pxPortInitialiseStack>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029cc:	f001 f9ac 	bl	8003d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <prvAddNewTaskToReadyList+0xc4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <prvAddNewTaskToReadyList+0xc4>)
 80029d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029e2:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <prvAddNewTaskToReadyList+0xc4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d110      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029f0:	f000 fc0c 	bl	800320c <prvInitialiseTaskLists>
 80029f4:	e00d      	b.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <prvAddNewTaskToReadyList+0xcc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d802      	bhi.n	8002a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <prvAddNewTaskToReadyList+0xd0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <prvAddNewTaskToReadyList+0xd0>)
 8002a1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <prvAddNewTaskToReadyList+0xd0>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <prvAddNewTaskToReadyList+0xd4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d903      	bls.n	8002a38 <prvAddNewTaskToReadyList+0x74>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <prvAddNewTaskToReadyList+0xd4>)
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <prvAddNewTaskToReadyList+0xd8>)
 8002a46:	441a      	add	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7ff f93b 	bl	8001cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a54:	f001 f996 	bl	8003d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <prvAddNewTaskToReadyList+0xcc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvAddNewTaskToReadyList+0xc8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d207      	bcs.n	8002a7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <prvAddNewTaskToReadyList+0xdc>)
 8002a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000bbc 	.word	0x20000bbc
 8002a8c:	200006e8 	.word	0x200006e8
 8002a90:	20000bc8 	.word	0x20000bc8
 8002a94:	20000bd8 	.word	0x20000bd8
 8002a98:	20000bc4 	.word	0x20000bc4
 8002a9c:	200006ec 	.word	0x200006ec
 8002aa0:	e000ed04 	.word	0xe000ed04

08002aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <vTaskDelay+0x60>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <vTaskDelay+0x2e>
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	e7fe      	b.n	8002ad0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002ad2:	f000 f87f 	bl	8002bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fcdf 	bl	800349c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ade:	f000 f887 	bl	8002bf0 <xTaskResumeAll>
 8002ae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <vTaskDelay+0x64>)
 8002aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000be4 	.word	0x20000be4
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b1a:	463a      	mov	r2, r7
 8002b1c:	1d39      	adds	r1, r7, #4
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f874 	bl	8001c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	9202      	str	r2, [sp, #8]
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	460a      	mov	r2, r1
 8002b3a:	4920      	ldr	r1, [pc, #128]	; (8002bbc <vTaskStartScheduler+0xb0>)
 8002b3c:	4820      	ldr	r0, [pc, #128]	; (8002bc0 <vTaskStartScheduler+0xb4>)
 8002b3e:	f7ff fe1d 	bl	800277c <xTaskCreateStatic>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <vTaskStartScheduler+0xb8>)
 8002b46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <vTaskStartScheduler+0xb8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e001      	b.n	8002b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b60:	f000 fcf0 	bl	8003544 <xTimerCreateTimerTask>
 8002b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d115      	bne.n	8002b98 <vTaskStartScheduler+0x8c>
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <vTaskStartScheduler+0xbc>)
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <vTaskStartScheduler+0xc0>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <vTaskStartScheduler+0xc4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b92:	f001 f859 	bl	8003c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b96:	e00d      	b.n	8002bb4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d109      	bne.n	8002bb4 <vTaskStartScheduler+0xa8>
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e7fe      	b.n	8002bb2 <vTaskStartScheduler+0xa6>
}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	0800435c 	.word	0x0800435c
 8002bc0:	080031dd 	.word	0x080031dd
 8002bc4:	20000be0 	.word	0x20000be0
 8002bc8:	20000bdc 	.word	0x20000bdc
 8002bcc:	20000bc8 	.word	0x20000bc8
 8002bd0:	20000bc0 	.word	0x20000bc0

08002bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <vTaskSuspendAll+0x18>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <vTaskSuspendAll+0x18>)
 8002be0:	6013      	str	r3, [r2, #0]
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000be4 	.word	0x20000be4

08002bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <xTaskResumeAll+0x114>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <xTaskResumeAll+0x2a>
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	e7fe      	b.n	8002c18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c1a:	f001 f885 	bl	8003d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <xTaskResumeAll+0x114>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <xTaskResumeAll+0x114>)
 8002c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <xTaskResumeAll+0x114>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d162      	bne.n	8002cf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <xTaskResumeAll+0x118>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05e      	beq.n	8002cf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c38:	e02f      	b.n	8002c9a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c3a:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3318      	adds	r3, #24
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f89a 	bl	8001d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f895 	bl	8001d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <xTaskResumeAll+0x120>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d903      	bls.n	8002c6a <xTaskResumeAll+0x7a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <xTaskResumeAll+0x120>)
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <xTaskResumeAll+0x124>)
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7ff f822 	bl	8001cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <xTaskResumeAll+0x128>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <xTaskResumeAll+0x12c>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1cb      	bne.n	8002c3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ca8:	f000 fb4a 	bl	8003340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <xTaskResumeAll+0x130>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cb8:	f000 f844 	bl	8002d44 <xTaskIncrementTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <xTaskResumeAll+0x12c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f1      	bne.n	8002cb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <xTaskResumeAll+0x130>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <xTaskResumeAll+0x12c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <xTaskResumeAll+0x134>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cf6:	f001 f845 	bl	8003d84 <vPortExitCritical>

	return xAlreadyYielded;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000be4 	.word	0x20000be4
 8002d08:	20000bbc 	.word	0x20000bbc
 8002d0c:	20000b7c 	.word	0x20000b7c
 8002d10:	20000bc4 	.word	0x20000bc4
 8002d14:	200006ec 	.word	0x200006ec
 8002d18:	200006e8 	.word	0x200006e8
 8002d1c:	20000bd0 	.word	0x20000bd0
 8002d20:	20000bcc 	.word	0x20000bcc
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <xTaskGetTickCount+0x18>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000bc0 	.word	0x20000bc0

08002d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d4e:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <xTaskIncrementTick+0x150>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 808d 	bne.w	8002e72 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d58:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <xTaskIncrementTick+0x154>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <xTaskIncrementTick+0x154>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11f      	bne.n	8002dac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <xTaskIncrementTick+0x158>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <xTaskIncrementTick+0x46>
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	e7fe      	b.n	8002d88 <xTaskIncrementTick+0x44>
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <xTaskIncrementTick+0x158>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <xTaskIncrementTick+0x15c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a41      	ldr	r2, [pc, #260]	; (8002e9c <xTaskIncrementTick+0x158>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <xTaskIncrementTick+0x15c>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <xTaskIncrementTick+0x160>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <xTaskIncrementTick+0x160>)
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	f000 faca 	bl	8003340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <xTaskIncrementTick+0x164>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d34e      	bcc.n	8002e54 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <xTaskIncrementTick+0x158>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xTaskIncrementTick+0x80>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xTaskIncrementTick+0x82>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <xTaskIncrementTick+0x164>)
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	601a      	str	r2, [r3, #0]
					break;
 8002dd2:	e03f      	b.n	8002e54 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <xTaskIncrementTick+0x158>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d203      	bcs.n	8002df4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dec:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <xTaskIncrementTick+0x164>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
						break;
 8002df2:	e02f      	b.n	8002e54 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe ffc1 	bl	8001d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe ffb8 	bl	8001d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <xTaskIncrementTick+0x168>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d903      	bls.n	8002e24 <xTaskIncrementTick+0xe0>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <xTaskIncrementTick+0x168>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <xTaskIncrementTick+0x16c>)
 8002e32:	441a      	add	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fe ff45 	bl	8001cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <xTaskIncrementTick+0x170>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3b3      	bcc.n	8002db6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e52:	e7b0      	b.n	8002db6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <xTaskIncrementTick+0x170>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <xTaskIncrementTick+0x16c>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d907      	bls.n	8002e7c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e004      	b.n	8002e7c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <xTaskIncrementTick+0x174>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <xTaskIncrementTick+0x174>)
 8002e7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <xTaskIncrementTick+0x178>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e88:	697b      	ldr	r3, [r7, #20]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000be4 	.word	0x20000be4
 8002e98:	20000bc0 	.word	0x20000bc0
 8002e9c:	20000b74 	.word	0x20000b74
 8002ea0:	20000b78 	.word	0x20000b78
 8002ea4:	20000bd4 	.word	0x20000bd4
 8002ea8:	20000bdc 	.word	0x20000bdc
 8002eac:	20000bc4 	.word	0x20000bc4
 8002eb0:	200006ec 	.word	0x200006ec
 8002eb4:	200006e8 	.word	0x200006e8
 8002eb8:	20000bcc 	.word	0x20000bcc
 8002ebc:	20000bd0 	.word	0x20000bd0

08002ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <vTaskSwitchContext+0xa4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <vTaskSwitchContext+0xa8>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ed4:	e040      	b.n	8002f58 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <vTaskSwitchContext+0xa8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <vTaskSwitchContext+0xac>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e00f      	b.n	8002f04 <vTaskSwitchContext+0x44>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <vTaskSwitchContext+0x3e>
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	e7fe      	b.n	8002efc <vTaskSwitchContext+0x3c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	491a      	ldr	r1, [pc, #104]	; (8002f70 <vTaskSwitchContext+0xb0>)
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0e5      	beq.n	8002ee4 <vTaskSwitchContext+0x24>
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <vTaskSwitchContext+0xb0>)
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d104      	bne.n	8002f48 <vTaskSwitchContext+0x88>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <vTaskSwitchContext+0xb4>)
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <vTaskSwitchContext+0xac>)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000be4 	.word	0x20000be4
 8002f68:	20000bd0 	.word	0x20000bd0
 8002f6c:	20000bc4 	.word	0x20000bc4
 8002f70:	200006ec 	.word	0x200006ec
 8002f74:	200006e8 	.word	0x200006e8

08002f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <vTaskPlaceOnEventList+0x24>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e7fe      	b.n	8002f9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <vTaskPlaceOnEventList+0x44>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe feb3 	bl	8001d10 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002faa:	2101      	movs	r1, #1
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	f000 fa75 	bl	800349c <prvAddCurrentTaskToDelayedList>
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200006e8 	.word	0x200006e8

08002fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <vTaskPlaceOnEventListRestricted+0x26>
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e7fe      	b.n	8002fe4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <vTaskPlaceOnEventListRestricted+0x50>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4619      	mov	r1, r3
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7fe fe6b 	bl	8001cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	68b8      	ldr	r0, [r7, #8]
 8003004:	f000 fa4a 	bl	800349c <prvAddCurrentTaskToDelayedList>
	}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200006e8 	.word	0x200006e8

08003014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <xTaskRemoveFromEventList+0x2a>
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e7fe      	b.n	800303c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3318      	adds	r3, #24
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fe9c 	bl	8001d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <xTaskRemoveFromEventList+0xac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11d      	bne.n	800308c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3304      	adds	r3, #4
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fe93 	bl	8001d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <xTaskRemoveFromEventList+0xb0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d903      	bls.n	800306e <xTaskRemoveFromEventList+0x5a>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <xTaskRemoveFromEventList+0xb0>)
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <xTaskRemoveFromEventList+0xb4>)
 800307c:	441a      	add	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3304      	adds	r3, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7fe fe20 	bl	8001cca <vListInsertEnd>
 800308a:	e005      	b.n	8003098 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	3318      	adds	r3, #24
 8003090:	4619      	mov	r1, r3
 8003092:	480e      	ldr	r0, [pc, #56]	; (80030cc <xTaskRemoveFromEventList+0xb8>)
 8003094:	f7fe fe19 	bl	8001cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <xTaskRemoveFromEventList+0xbc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d905      	bls.n	80030b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <xTaskRemoveFromEventList+0xc0>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e001      	b.n	80030b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80030b6:	697b      	ldr	r3, [r7, #20]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000be4 	.word	0x20000be4
 80030c4:	20000bc4 	.word	0x20000bc4
 80030c8:	200006ec 	.word	0x200006ec
 80030cc:	20000b7c 	.word	0x20000b7c
 80030d0:	200006e8 	.word	0x200006e8
 80030d4:	20000bd0 	.word	0x20000bd0

080030d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <vTaskInternalSetTimeOutState+0x24>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <vTaskInternalSetTimeOutState+0x28>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	605a      	str	r2, [r3, #4]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000bd4 	.word	0x20000bd4
 8003100:	20000bc0 	.word	0x20000bc0

08003104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <xTaskCheckForTimeOut+0x24>
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	e7fe      	b.n	8003126 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <xTaskCheckForTimeOut+0x3e>
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e7fe      	b.n	8003140 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003142:	f000 fdf1 	bl	8003d28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <xTaskCheckForTimeOut+0xb8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d102      	bne.n	8003166 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	e023      	b.n	80031ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <xTaskCheckForTimeOut+0xbc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d007      	beq.n	8003182 <xTaskCheckForTimeOut+0x7e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e015      	b.n	80031ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d20b      	bcs.n	80031a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff9d 	bl	80030d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e004      	b.n	80031ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031ae:	f000 fde9 	bl	8003d84 <vPortExitCritical>

	return xReturn;
 80031b2:	69fb      	ldr	r3, [r7, #28]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000bc0 	.word	0x20000bc0
 80031c0:	20000bd4 	.word	0x20000bd4

080031c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <vTaskMissedYield+0x14>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000bd0 	.word	0x20000bd0

080031dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031e4:	f000 f852 	bl	800328c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <prvIdleTask+0x28>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d9f9      	bls.n	80031e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <prvIdleTask+0x2c>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003200:	e7f0      	b.n	80031e4 <prvIdleTask+0x8>
 8003202:	bf00      	nop
 8003204:	200006ec 	.word	0x200006ec
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	e00c      	b.n	8003232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <prvInitialiseTaskLists+0x60>)
 8003224:	4413      	add	r3, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd24 	bl	8001c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b37      	cmp	r3, #55	; 0x37
 8003236:	d9ef      	bls.n	8003218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <prvInitialiseTaskLists+0x64>)
 800323a:	f7fe fd1b 	bl	8001c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <prvInitialiseTaskLists+0x68>)
 8003240:	f7fe fd18 	bl	8001c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <prvInitialiseTaskLists+0x6c>)
 8003246:	f7fe fd15 	bl	8001c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800324a:	480c      	ldr	r0, [pc, #48]	; (800327c <prvInitialiseTaskLists+0x70>)
 800324c:	f7fe fd12 	bl	8001c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <prvInitialiseTaskLists+0x74>)
 8003252:	f7fe fd0f 	bl	8001c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <prvInitialiseTaskLists+0x78>)
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <prvInitialiseTaskLists+0x64>)
 800325a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <prvInitialiseTaskLists+0x7c>)
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <prvInitialiseTaskLists+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200006ec 	.word	0x200006ec
 8003270:	20000b4c 	.word	0x20000b4c
 8003274:	20000b60 	.word	0x20000b60
 8003278:	20000b7c 	.word	0x20000b7c
 800327c:	20000b90 	.word	0x20000b90
 8003280:	20000ba8 	.word	0x20000ba8
 8003284:	20000b74 	.word	0x20000b74
 8003288:	20000b78 	.word	0x20000b78

0800328c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003292:	e019      	b.n	80032c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003294:	f000 fd48 	bl	8003d28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <prvCheckTasksWaitingTermination+0x4c>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fd6b 	bl	8001d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <prvCheckTasksWaitingTermination+0x50>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <prvCheckTasksWaitingTermination+0x50>)
 80032b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <prvCheckTasksWaitingTermination+0x54>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <prvCheckTasksWaitingTermination+0x54>)
 80032bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032be:	f000 fd61 	bl	8003d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f80e 	bl	80032e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <prvCheckTasksWaitingTermination+0x54>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e1      	bne.n	8003294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000b90 	.word	0x20000b90
 80032dc:	20000bbc 	.word	0x20000bbc
 80032e0:	20000ba4 	.word	0x20000ba4

080032e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fecc 	bl	8004098 <vPortFree>
				vPortFree( pxTCB );
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fec9 	bl	8004098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003306:	e017      	b.n	8003338 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800330e:	2b01      	cmp	r3, #1
 8003310:	d103      	bne.n	800331a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fec0 	bl	8004098 <vPortFree>
	}
 8003318:	e00e      	b.n	8003338 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003320:	2b02      	cmp	r3, #2
 8003322:	d009      	beq.n	8003338 <prvDeleteTCB+0x54>
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e7fe      	b.n	8003336 <prvDeleteTCB+0x52>
	}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <prvResetNextTaskUnblockTime+0x40>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <prvResetNextTaskUnblockTime+0x14>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <prvResetNextTaskUnblockTime+0x16>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <prvResetNextTaskUnblockTime+0x44>)
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003362:	e008      	b.n	8003376 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <prvResetNextTaskUnblockTime+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <prvResetNextTaskUnblockTime+0x44>)
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20000b74 	.word	0x20000b74
 8003384:	20000bdc 	.word	0x20000bdc

08003388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <xTaskGetSchedulerState+0x34>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003396:	2301      	movs	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	e008      	b.n	80033ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <xTaskGetSchedulerState+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033a4:	2302      	movs	r3, #2
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e001      	b.n	80033ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033ae:	687b      	ldr	r3, [r7, #4]
	}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000bc8 	.word	0x20000bc8
 80033c0:	20000be4 	.word	0x20000be4

080033c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d054      	beq.n	8003484 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <xTaskPriorityDisinherit+0xcc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d009      	beq.n	80033f8 <xTaskPriorityDisinherit+0x34>
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e7fe      	b.n	80033f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <xTaskPriorityDisinherit+0x50>
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	e7fe      	b.n	8003412 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	1e5a      	subs	r2, r3, #1
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	429a      	cmp	r2, r3
 8003428:	d02c      	beq.n	8003484 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d128      	bne.n	8003484 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe fca2 	bl	8001d80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <xTaskPriorityDisinherit+0xd0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d903      	bls.n	8003464 <xTaskPriorityDisinherit+0xa0>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <xTaskPriorityDisinherit+0xd0>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4a09      	ldr	r2, [pc, #36]	; (8003498 <xTaskPriorityDisinherit+0xd4>)
 8003472:	441a      	add	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f7fe fc25 	bl	8001cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003484:	697b      	ldr	r3, [r7, #20]
	}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200006e8 	.word	0x200006e8
 8003494:	20000bc4 	.word	0x20000bc4
 8003498:	200006ec 	.word	0x200006ec

0800349c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <prvAddCurrentTaskToDelayedList+0x90>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <prvAddCurrentTaskToDelayedList+0x94>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3304      	adds	r3, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fc64 	bl	8001d80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d10a      	bne.n	80034d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <prvAddCurrentTaskToDelayedList+0x94>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4819      	ldr	r0, [pc, #100]	; (8003534 <prvAddCurrentTaskToDelayedList+0x98>)
 80034d0:	f7fe fbfb 	bl	8001cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034d4:	e026      	b.n	8003524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <prvAddCurrentTaskToDelayedList+0x94>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d209      	bcs.n	8003502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <prvAddCurrentTaskToDelayedList+0x9c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <prvAddCurrentTaskToDelayedList+0x94>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7fe fc08 	bl	8001d10 <vListInsert>
}
 8003500:	e010      	b.n	8003524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <prvAddCurrentTaskToDelayedList+0x94>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7fe fbfe 	bl	8001d10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d202      	bcs.n	8003524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000bc0 	.word	0x20000bc0
 8003530:	200006e8 	.word	0x200006e8
 8003534:	20000ba8 	.word	0x20000ba8
 8003538:	20000b78 	.word	0x20000b78
 800353c:	20000b74 	.word	0x20000b74
 8003540:	20000bdc 	.word	0x20000bdc

08003544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800354e:	f000 fac3 	bl	8003ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <xTimerCreateTimerTask+0x80>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d021      	beq.n	800359e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003562:	1d3a      	adds	r2, r7, #4
 8003564:	f107 0108 	add.w	r1, r7, #8
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fb67 	bl	8001c40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	9202      	str	r2, [sp, #8]
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	2302      	movs	r3, #2
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	460a      	mov	r2, r1
 8003584:	4910      	ldr	r1, [pc, #64]	; (80035c8 <xTimerCreateTimerTask+0x84>)
 8003586:	4811      	ldr	r0, [pc, #68]	; (80035cc <xTimerCreateTimerTask+0x88>)
 8003588:	f7ff f8f8 	bl	800277c <xTaskCreateStatic>
 800358c:	4602      	mov	r2, r0
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <xTimerCreateTimerTask+0x8c>)
 8003590:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <xTimerCreateTimerTask+0x8c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <xTimerCreateTimerTask+0x74>
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e7fe      	b.n	80035b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80035b8:	697b      	ldr	r3, [r7, #20]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000c18 	.word	0x20000c18
 80035c8:	08004364 	.word	0x08004364
 80035cc:	080036ed 	.word	0x080036ed
 80035d0:	20000c1c 	.word	0x20000c1c

080035d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xTimerGenericCommand+0x2c>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	e7fe      	b.n	80035fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <xTimerGenericCommand+0x94>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02a      	beq.n	800365e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b05      	cmp	r3, #5
 8003618:	dc18      	bgt.n	800364c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800361a:	f7ff feb5 	bl	8003388 <xTaskGetSchedulerState>
 800361e:	4603      	mov	r3, r0
 8003620:	2b02      	cmp	r3, #2
 8003622:	d109      	bne.n	8003638 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xTimerGenericCommand+0x94>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	f107 0110 	add.w	r1, r7, #16
 800362c:	2300      	movs	r3, #0
 800362e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003630:	f7fe fcce 	bl	8001fd0 <xQueueGenericSend>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24
 8003636:	e012      	b.n	800365e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <xTimerGenericCommand+0x94>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	f107 0110 	add.w	r1, r7, #16
 8003640:	2300      	movs	r3, #0
 8003642:	2200      	movs	r2, #0
 8003644:	f7fe fcc4 	bl	8001fd0 <xQueueGenericSend>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24
 800364a:	e008      	b.n	800365e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <xTimerGenericCommand+0x94>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f107 0110 	add.w	r1, r7, #16
 8003654:	2300      	movs	r3, #0
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	f7fe fdb4 	bl	80021c4 <xQueueGenericSendFromISR>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000c18 	.word	0x20000c18

0800366c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <prvProcessExpiredTimer+0x7c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fb7b 	bl	8001d80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d121      	bne.n	80036d6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	18d1      	adds	r1, r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f000 f8c8 	bl	8003834 <prvInsertTimerInActiveList>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	2100      	movs	r1, #0
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7ff ff8d 	bl	80035d4 <xTimerGenericCommand>
 80036ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvProcessExpiredTimer+0x6a>
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e7fe      	b.n	80036d4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	4798      	blx	r3
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000c10 	.word	0x20000c10

080036ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f857 	bl	80037ac <prvGetNextExpireTime>
 80036fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4619      	mov	r1, r3
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f803 	bl	8003710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800370a:	f000 f8d5 	bl	80038b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800370e:	e7f1      	b.n	80036f4 <prvTimerTask+0x8>

08003710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800371a:	f7ff fa5b 	bl	8002bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f866 	bl	80037f4 <prvSampleTimeNow>
 8003728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d130      	bne.n	8003792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <prvProcessTimerOrBlockTask+0x3c>
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	429a      	cmp	r2, r3
 800373c:	d806      	bhi.n	800374c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800373e:	f7ff fa57 	bl	8002bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff91 	bl	800366c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800374a:	e024      	b.n	8003796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <prvProcessTimerOrBlockTask+0x90>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <prvProcessTimerOrBlockTask+0x94>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	f7fe ffcf 	bl	8002714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003776:	f7ff fa3b 	bl	8002bf0 <xTaskResumeAll>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <prvProcessTimerOrBlockTask+0x98>)
 8003782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	f3bf 8f6f 	isb	sy
}
 8003790:	e001      	b.n	8003796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003792:	f7ff fa2d 	bl	8002bf0 <xTaskResumeAll>
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000c14 	.word	0x20000c14
 80037a4:	20000c18 	.word	0x20000c18
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <prvGetNextExpireTime+0x44>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <prvGetNextExpireTime+0x44>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e001      	b.n	80037e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000c10 	.word	0x20000c10

080037f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037fc:	f7ff fa94 	bl	8002d28 <xTaskGetTickCount>
 8003800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <prvSampleTimeNow+0x3c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d205      	bcs.n	8003818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800380c:	f000 f904 	bl	8003a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e002      	b.n	800381e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <prvSampleTimeNow+0x3c>)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000c20 	.word	0x20000c20

08003834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d812      	bhi.n	8003880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad2      	subs	r2, r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e01b      	b.n	80038a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <prvInsertTimerInActiveList+0x7c>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7fe fa49 	bl	8001d10 <vListInsert>
 800387e:	e012      	b.n	80038a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d206      	bcs.n	8003896 <prvInsertTimerInActiveList+0x62>
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e007      	b.n	80038a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <prvInsertTimerInActiveList+0x80>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7fe fa35 	bl	8001d10 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000c14 	.word	0x20000c14
 80038b4:	20000c10 	.word	0x20000c10

080038b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	; 0x38
 80038bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038be:	e099      	b.n	80039f4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da17      	bge.n	80038f6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	3304      	adds	r3, #4
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <prvProcessReceivedCommands+0x2e>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e7fe      	b.n	80038e4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ec:	6850      	ldr	r0, [r2, #4]
 80038ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db7a      	blt.n	80039f2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fa37 	bl	8001d80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003912:	463b      	mov	r3, r7
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff6d 	bl	80037f4 <prvSampleTimeNow>
 800391a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b09      	cmp	r3, #9
 8003920:	d868      	bhi.n	80039f4 <prvProcessReceivedCommands+0x13c>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <prvProcessReceivedCommands+0x70>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003951 	.word	0x08003951
 800392c:	08003951 	.word	0x08003951
 8003930:	08003951 	.word	0x08003951
 8003934:	080039f5 	.word	0x080039f5
 8003938:	080039ab 	.word	0x080039ab
 800393c:	080039e1 	.word	0x080039e1
 8003940:	08003951 	.word	0x08003951
 8003944:	08003951 	.word	0x08003951
 8003948:	080039f5 	.word	0x080039f5
 800394c:	080039ab 	.word	0x080039ab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	18d1      	adds	r1, r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395e:	f7ff ff69 	bl	8003834 <prvInsertTimerInActiveList>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d045      	beq.n	80039f4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d13d      	bne.n	80039f4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	441a      	add	r2, r3
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	2100      	movs	r1, #0
 8003988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800398a:	f7ff fe23 	bl	80035d4 <xTimerGenericCommand>
 800398e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12e      	bne.n	80039f4 <prvProcessReceivedCommands+0x13c>
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e7fe      	b.n	80039a8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <prvProcessReceivedCommands+0x114>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e7fe      	b.n	80039ca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	18d1      	adds	r1, r2, r3
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039da:	f7ff ff2b 	bl	8003834 <prvInsertTimerInActiveList>
					break;
 80039de:	e009      	b.n	80039f4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80039ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ec:	f000 fb54 	bl	8004098 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039f0:	e000      	b.n	80039f4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80039f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <prvProcessReceivedCommands+0x15c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1d39      	adds	r1, r7, #4
 80039fa:	2200      	movs	r2, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fc75 	bl	80022ec <xQueueReceive>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af5b 	bne.w	80038c0 <prvProcessReceivedCommands+0x8>
	}
}
 8003a0a:	bf00      	nop
 8003a0c:	3730      	adds	r7, #48	; 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000c18 	.word	0x20000c18

08003a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a1e:	e044      	b.n	8003aaa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a2a:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe f9a1 	bl	8001d80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d12d      	bne.n	8003aaa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d90e      	bls.n	8003a7e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fe f94a 	bl	8001d10 <vListInsert>
 8003a7c:	e015      	b.n	8003aaa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	2100      	movs	r1, #0
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff fda3 	bl	80035d4 <xTimerGenericCommand>
 8003a8e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <prvSwitchTimerLists+0x92>
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	e7fe      	b.n	8003aa8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1b5      	bne.n	8003a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <prvSwitchTimerLists+0xbc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvSwitchTimerLists+0xb8>)
 8003ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <prvSwitchTimerLists+0xbc>)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000c10 	.word	0x20000c10
 8003ad4:	20000c14 	.word	0x20000c14

08003ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ade:	f000 f923 	bl	8003d28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d120      	bne.n	8003b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003aea:	4814      	ldr	r0, [pc, #80]	; (8003b3c <prvCheckForValidListAndQueue+0x64>)
 8003aec:	f7fe f8c2 	bl	8001c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003af0:	4813      	ldr	r0, [pc, #76]	; (8003b40 <prvCheckForValidListAndQueue+0x68>)
 8003af2:	f7fe f8bf 	bl	8001c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <prvCheckForValidListAndQueue+0x6c>)
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <prvCheckForValidListAndQueue+0x64>)
 8003afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <prvCheckForValidListAndQueue+0x70>)
 8003afe:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <prvCheckForValidListAndQueue+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <prvCheckForValidListAndQueue+0x74>)
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <prvCheckForValidListAndQueue+0x78>)
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7fe f9c9 	bl	8001ea4 <xQueueGenericCreateStatic>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <prvCheckForValidListAndQueue+0x60>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	490b      	ldr	r1, [pc, #44]	; (8003b54 <prvCheckForValidListAndQueue+0x7c>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fdcc 	bl	80026c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b2c:	f000 f92a 	bl	8003d84 <vPortExitCritical>
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000c18 	.word	0x20000c18
 8003b3c:	20000be8 	.word	0x20000be8
 8003b40:	20000bfc 	.word	0x20000bfc
 8003b44:	20000c10 	.word	0x20000c10
 8003b48:	20000c14 	.word	0x20000c14
 8003b4c:	20000cc4 	.word	0x20000cc4
 8003b50:	20000c24 	.word	0x20000c24
 8003b54:	0800436c 	.word	0x0800436c

08003b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3b04      	subs	r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b04      	subs	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b04      	subs	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <pxPortInitialiseStack+0x54>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3b14      	subs	r3, #20
 8003b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b20      	subs	r3, #32
 8003b9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	08003bb1 	.word	0x08003bb1

08003bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <prvTaskExitError+0x4c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d009      	beq.n	8003bd8 <prvTaskExitError+0x28>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e7fe      	b.n	8003bd6 <prvTaskExitError+0x26>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bea:	bf00      	nop
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0fc      	beq.n	8003bec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	2000000c 	.word	0x2000000c

08003c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <pxCurrentTCBConst2>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c0a:	f380 8809 	msr	PSP, r0
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f380 8811 	msr	BASEPRI, r0
 8003c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c1e:	4770      	bx	lr

08003c20 <pxCurrentTCBConst2>:
 8003c20:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop

08003c28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c28:	4806      	ldr	r0, [pc, #24]	; (8003c44 <prvPortStartFirstTask+0x1c>)
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f380 8808 	msr	MSP, r0
 8003c32:	b662      	cpsie	i
 8003c34:	b661      	cpsie	f
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	df00      	svc	0
 8003c40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c42:	bf00      	nop
 8003c44:	e000ed08 	.word	0xe000ed08

08003c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <xPortStartScheduler+0xcc>)
 8003c50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <xPortStartScheduler+0xd0>)
 8003c74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003c78:	2207      	movs	r2, #7
 8003c7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c7c:	e009      	b.n	8003c92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003c86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d0ef      	beq.n	8003c7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d009      	beq.n	8003cbe <xPortStartScheduler+0x76>
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	e7fe      	b.n	8003cbc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003cc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd0:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <xPortStartScheduler+0xd4>)
 8003cd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003ce2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <xPortStartScheduler+0xd8>)
 8003cee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cf4:	f000 f8b0 	bl	8003e58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <xPortStartScheduler+0xdc>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cfe:	f7ff ff93 	bl	8003c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d02:	f7ff f8dd 	bl	8002ec0 <vTaskSwitchContext>
	prvTaskExitError();
 8003d06:	f7ff ff53 	bl	8003bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	e000e400 	.word	0xe000e400
 8003d18:	20000d14 	.word	0x20000d14
 8003d1c:	20000d18 	.word	0x20000d18
 8003d20:	e000ed20 	.word	0xe000ed20
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <vPortEnterCritical+0x54>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <vPortEnterCritical+0x54>)
 8003d48:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <vPortEnterCritical+0x54>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10e      	bne.n	8003d70 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <vPortEnterCritical+0x58>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <vPortEnterCritical+0x48>
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	e7fe      	b.n	8003d6e <vPortEnterCritical+0x46>
	}
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <vPortExitCritical+0x48>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <vPortExitCritical+0x22>
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	e7fe      	b.n	8003da4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <vPortExitCritical+0x48>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <vPortExitCritical+0x48>)
 8003dae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <vPortExitCritical+0x48>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <vPortExitCritical+0x3e>
 8003db8:	2300      	movs	r3, #0
 8003dba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003de0:	6010      	str	r0, [r2, #0]
 8003de2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003de6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dea:	f380 8811 	msr	BASEPRI, r0
 8003dee:	f7ff f867 	bl	8002ec0 <vTaskSwitchContext>
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	6808      	ldr	r0, [r1, #0]
 8003e02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e06:	f380 8809 	msr	PSP, r0
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	4770      	bx	lr

08003e10 <pxCurrentTCBConst>:
 8003e10:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e30:	f7fe ff88 	bl	8002d44 <xTaskIncrementTick>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <SysTick_Handler+0x3c>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <vPortSetupTimerInterrupt+0x30>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <vPortSetupTimerInterrupt+0x34>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <vPortSetupTimerInterrupt+0x38>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <vPortSetupTimerInterrupt+0x3c>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <vPortSetupTimerInterrupt+0x40>)
 8003e76:	3b01      	subs	r3, #1
 8003e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7a:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <vPortSetupTimerInterrupt+0x30>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	e000e010 	.word	0xe000e010
 8003e8c:	e000e018 	.word	0xe000e018
 8003e90:	20000000 	.word	0x20000000
 8003e94:	10624dd3 	.word	0x10624dd3
 8003e98:	e000e014 	.word	0xe000e014

08003e9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ea2:	f3ef 8305 	mrs	r3, IPSR
 8003ea6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d913      	bls.n	8003ed6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <vPortValidateInterruptPriority+0x68>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <vPortValidateInterruptPriority+0x6c>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	7afa      	ldrb	r2, [r7, #11]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d209      	bcs.n	8003ed6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e7fe      	b.n	8003ed4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <vPortValidateInterruptPriority+0x70>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <vPortValidateInterruptPriority+0x74>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d909      	bls.n	8003efa <vPortValidateInterruptPriority+0x5e>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	e7fe      	b.n	8003ef8 <vPortValidateInterruptPriority+0x5c>
	}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	e000e3f0 	.word	0xe000e3f0
 8003f08:	20000d14 	.word	0x20000d14
 8003f0c:	e000ed0c 	.word	0xe000ed0c
 8003f10:	20000d18 	.word	0x20000d18

08003f14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f20:	f7fe fe58 	bl	8002bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <pvPortMalloc+0x170>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f2c:	f000 f90c 	bl	8004148 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f30:	4b55      	ldr	r3, [pc, #340]	; (8004088 <pvPortMalloc+0x174>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 808c 	bne.w	8004056 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01c      	beq.n	8003f7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f44:	2208      	movs	r2, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f023 0307 	bic.w	r3, r3, #7
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <pvPortMalloc+0x6a>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e7fe      	b.n	8003f7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d068      	beq.n	8004056 <pvPortMalloc+0x142>
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <pvPortMalloc+0x178>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d863      	bhi.n	8004056 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <pvPortMalloc+0x17c>)
 8003f90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <pvPortMalloc+0x17c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f98:	e004      	b.n	8003fa4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d903      	bls.n	8003fb6 <pvPortMalloc+0xa2>
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f1      	bne.n	8003f9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fb6:	4b33      	ldr	r3, [pc, #204]	; (8004084 <pvPortMalloc+0x170>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d04a      	beq.n	8004056 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4413      	add	r3, r2
 8003fc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad2      	subs	r2, r2, r3
 8003fda:	2308      	movs	r3, #8
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d91e      	bls.n	8004020 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <pvPortMalloc+0xf4>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e7fe      	b.n	8004006 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800401a:	69b8      	ldr	r0, [r7, #24]
 800401c:	f000 f8f6 	bl	800420c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <pvPortMalloc+0x178>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <pvPortMalloc+0x178>)
 800402c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <pvPortMalloc+0x178>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <pvPortMalloc+0x180>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d203      	bcs.n	8004042 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <pvPortMalloc+0x178>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a15      	ldr	r2, [pc, #84]	; (8004094 <pvPortMalloc+0x180>)
 8004040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <pvPortMalloc+0x174>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	431a      	orrs	r2, r3
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004056:	f7fe fdcb 	bl	8002bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <pvPortMalloc+0x164>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e7fe      	b.n	8004076 <pvPortMalloc+0x162>
	return pvReturn;
 8004078:	69fb      	ldr	r3, [r7, #28]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20001924 	.word	0x20001924
 8004088:	20001930 	.word	0x20001930
 800408c:	20001928 	.word	0x20001928
 8004090:	2000191c 	.word	0x2000191c
 8004094:	2000192c 	.word	0x2000192c

08004098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d046      	beq.n	8004138 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040aa:	2308      	movs	r3, #8
 80040ac:	425b      	negs	r3, r3
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <vPortFree+0xa8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <vPortFree+0x42>
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e7fe      	b.n	80040d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <vPortFree+0x5e>
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e7fe      	b.n	80040f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <vPortFree+0xa8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d019      	beq.n	8004138 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d115      	bne.n	8004138 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <vPortFree+0xa8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800411c:	f7fe fd5a 	bl	8002bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <vPortFree+0xac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4413      	add	r3, r2
 800412a:	4a06      	ldr	r2, [pc, #24]	; (8004144 <vPortFree+0xac>)
 800412c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800412e:	6938      	ldr	r0, [r7, #16]
 8004130:	f000 f86c 	bl	800420c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004134:	f7fe fd5c 	bl	8002bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20001930 	.word	0x20001930
 8004144:	20001928 	.word	0x20001928

08004148 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800414e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004152:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <prvHeapInit+0xac>)
 8004156:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3307      	adds	r3, #7
 8004166:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <prvHeapInit+0xac>)
 8004178:	4413      	add	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004180:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <prvHeapInit+0xb0>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004186:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <prvHeapInit+0xb0>)
 8004188:	2200      	movs	r2, #0
 800418a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4413      	add	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004194:	2208      	movs	r2, #8
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <prvHeapInit+0xb4>)
 80041a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <prvHeapInit+0xb4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvHeapInit+0xb4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <prvHeapInit+0xb4>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <prvHeapInit+0xb8>)
 80041d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <prvHeapInit+0xbc>)
 80041de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <prvHeapInit+0xc0>)
 80041e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000d1c 	.word	0x20000d1c
 80041f8:	2000191c 	.word	0x2000191c
 80041fc:	20001924 	.word	0x20001924
 8004200:	2000192c 	.word	0x2000192c
 8004204:	20001928 	.word	0x20001928
 8004208:	20001930 	.word	0x20001930

0800420c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <prvInsertBlockIntoFreeList+0x14>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d8f7      	bhi.n	800421a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d108      	bne.n	800424e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d118      	bne.n	8004294 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <prvInsertBlockIntoFreeList+0xac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d00d      	beq.n	800428a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e008      	b.n	800429c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <prvInsertBlockIntoFreeList+0xac>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e003      	b.n	800429c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d002      	beq.n	80042aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	2000191c 	.word	0x2000191c
 80042b8:	20001924 	.word	0x20001924

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	2500      	movs	r5, #0
 80042c0:	4e0c      	ldr	r6, [pc, #48]	; (80042f4 <__libc_init_array+0x38>)
 80042c2:	4c0d      	ldr	r4, [pc, #52]	; (80042f8 <__libc_init_array+0x3c>)
 80042c4:	1ba4      	subs	r4, r4, r6
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	42a5      	cmp	r5, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	f000 f82e 	bl	800432c <_init>
 80042d0:	2500      	movs	r5, #0
 80042d2:	4e0a      	ldr	r6, [pc, #40]	; (80042fc <__libc_init_array+0x40>)
 80042d4:	4c0a      	ldr	r4, [pc, #40]	; (8004300 <__libc_init_array+0x44>)
 80042d6:	1ba4      	subs	r4, r4, r6
 80042d8:	10a4      	asrs	r4, r4, #2
 80042da:	42a5      	cmp	r5, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e4:	4798      	blx	r3
 80042e6:	3501      	adds	r5, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ee:	4798      	blx	r3
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	08004398 	.word	0x08004398
 80042f8:	08004398 	.word	0x08004398
 80042fc:	08004398 	.word	0x08004398
 8004300:	0800439c 	.word	0x0800439c

08004304 <memcpy>:
 8004304:	b510      	push	{r4, lr}
 8004306:	1e43      	subs	r3, r0, #1
 8004308:	440a      	add	r2, r1
 800430a:	4291      	cmp	r1, r2
 800430c:	d100      	bne.n	8004310 <memcpy+0xc>
 800430e:	bd10      	pop	{r4, pc}
 8004310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004318:	e7f7      	b.n	800430a <memcpy+0x6>

0800431a <memset>:
 800431a:	4603      	mov	r3, r0
 800431c:	4402      	add	r2, r0
 800431e:	4293      	cmp	r3, r2
 8004320:	d100      	bne.n	8004324 <memset+0xa>
 8004322:	4770      	bx	lr
 8004324:	f803 1b01 	strb.w	r1, [r3], #1
 8004328:	e7f9      	b.n	800431e <memset+0x4>
	...

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
