
stm32l162-FatFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006558  08006558  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006558  08006558  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006558  08006558  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000970  20000010  08006570  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08006570  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feb7  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d3  00000000  00000000  0002fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198af  00000000  00000000  00033c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb6e  00000000  00000000  0004d52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000977d4  00000000  00000000  0005a09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000f18ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08006410 	.word	0x08006410

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08006410 	.word	0x08006410

0800017c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b088      	sub	sp, #32
 8000180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000182:	f107 030c 	add.w	r3, r7, #12
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000192:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <MX_GPIO_Init+0x8c>)
 8000194:	69db      	ldr	r3, [r3, #28]
 8000196:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <MX_GPIO_Init+0x8c>)
 8000198:	f043 0304 	orr.w	r3, r3, #4
 800019c:	61d3      	str	r3, [r2, #28]
 800019e:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f003 0304 	and.w	r3, r3, #4
 80001a6:	60bb      	str	r3, [r7, #8]
 80001a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001aa:	4b17      	ldr	r3, [pc, #92]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001ac:	69db      	ldr	r3, [r3, #28]
 80001ae:	4a16      	ldr	r2, [pc, #88]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001b0:	f043 0308 	orr.w	r3, r3, #8
 80001b4:	61d3      	str	r3, [r2, #28]
 80001b6:	4b14      	ldr	r3, [pc, #80]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001b8:	69db      	ldr	r3, [r3, #28]
 80001ba:	f003 0308 	and.w	r3, r3, #8
 80001be:	607b      	str	r3, [r7, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001c4:	69db      	ldr	r3, [r3, #28]
 80001c6:	4a10      	ldr	r2, [pc, #64]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001c8:	f043 0302 	orr.w	r3, r3, #2
 80001cc:	61d3      	str	r3, [r2, #28]
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <MX_GPIO_Init+0x8c>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	f003 0302 	and.w	r3, r3, #2
 80001d6:	603b      	str	r3, [r7, #0]
 80001d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2130      	movs	r1, #48	; 0x30
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <MX_GPIO_Init+0x90>)
 80001e0:	f000 fd94 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80001e4:	2330      	movs	r3, #48	; 0x30
 80001e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f4:	f107 030c 	add.w	r3, r7, #12
 80001f8:	4619      	mov	r1, r3
 80001fa:	4804      	ldr	r0, [pc, #16]	; (800020c <MX_GPIO_Init+0x90>)
 80001fc:	f000 fbf8 	bl	80009f0 <HAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3720      	adds	r7, #32
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40023800 	.word	0x40023800
 800020c:	40020400 	.word	0x40020400

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b5b0      	push	{r4, r5, r7, lr}
 8000212:	b08c      	sub	sp, #48	; 0x30
 8000214:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fa76 	bl	8000706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f867 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f7ff ffad 	bl	800017c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000222:	f000 f93d 	bl	80004a0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000226:	f003 fcad 	bl	8003b84 <MX_FATFS_Init>
  MX_RTC_Init();
 800022a:	f000 f8c9 	bl	80003c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t wtext[] = "test text to check fs win + BA_55AA content"; /* File write buffer */
 800022e:	4b27      	ldr	r3, [pc, #156]	; (80002cc <main+0xbc>)
 8000230:	1d3c      	adds	r4, r7, #4
 8000232:	461d      	mov	r5, r3
 8000234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  // 1. Register a work area
      res = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	4922      	ldr	r1, [pc, #136]	; (80002d0 <main+0xc0>)
 8000248:	4822      	ldr	r0, [pc, #136]	; (80002d4 <main+0xc4>)
 800024a:	f005 fc0d 	bl	8005a68 <f_mount>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <main+0xc8>)
 8000254:	701a      	strb	r2, [r3, #0]
      if(res == FR_OK ){
 8000256:	4b20      	ldr	r3, [pc, #128]	; (80002d8 <main+0xc8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d135      	bne.n	80002ca <main+0xba>
          	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2110      	movs	r1, #16
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <main+0xcc>)
 8000264:	f000 fd52 	bl	8000d0c <HAL_GPIO_WritePin>
          	  // 3. Creating a new file for writing/reading later
          	  	 //res = f_open(&SDFile, "test1.txt", FA_OPEN_ALWAYS | FA_READ); // Reading
          	  	  res = f_open(&SDFile, "080120958.txt", FA_CREATE_ALWAYS | FA_WRITE); //Writing
 8000268:	220a      	movs	r2, #10
 800026a:	491d      	ldr	r1, [pc, #116]	; (80002e0 <main+0xd0>)
 800026c:	481d      	ldr	r0, [pc, #116]	; (80002e4 <main+0xd4>)
 800026e:	f005 fc41 	bl	8005af4 <f_open>
 8000272:	4603      	mov	r3, r0
 8000274:	461a      	mov	r2, r3
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <main+0xc8>)
 8000278:	701a      	strb	r2, [r3, #0]
          	  	  if(res == FR_OK){
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <main+0xc8>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d120      	bne.n	80002c4 <main+0xb4>
          	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2120      	movs	r1, #32
 8000286:	4815      	ldr	r0, [pc, #84]	; (80002dc <main+0xcc>)
 8000288:	f000 fd40 	bl	8000d0c <HAL_GPIO_WritePin>
          	  		  //res = f_read(&SDFile, &rtext, 15, &bytesread);
          	  		  res = f_write(&SDFile, wtext, sizeof(wtext), (void *) &byteswritten);
 800028c:	1d39      	adds	r1, r7, #4
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xd8>)
 8000290:	222c      	movs	r2, #44	; 0x2c
 8000292:	4814      	ldr	r0, [pc, #80]	; (80002e4 <main+0xd4>)
 8000294:	f005 fdfa 	bl	8005e8c <f_write>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0xc8>)
 800029e:	701a      	strb	r2, [r3, #0]

          	  		  if((res != FR_OK) || (byteswritten == 0)){
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0xc8>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d103      	bne.n	80002b0 <main+0xa0>
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <main+0xd8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d109      	bne.n	80002c4 <main+0xb4>
          	  			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2110      	movs	r1, #16
 80002b4:	4809      	ldr	r0, [pc, #36]	; (80002dc <main+0xcc>)
 80002b6:	f000 fd29 	bl	8000d0c <HAL_GPIO_WritePin>
          	  			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2120      	movs	r1, #32
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <main+0xcc>)
 80002c0:	f000 fd24 	bl	8000d0c <HAL_GPIO_WritePin>
          	  		  }
          	  		  //HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
          	  		  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
          	  	  }
          	  	f_close(&SDFile);
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <main+0xd4>)
 80002c6:	f005 fff3 	bl	80062b0 <f_close>
          }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <main+0xba>
 80002cc:	08006438 	.word	0x08006438
 80002d0:	20000068 	.word	0x20000068
 80002d4:	200004a0 	.word	0x200004a0
 80002d8:	2000049c 	.word	0x2000049c
 80002dc:	40020400 	.word	0x40020400
 80002e0:	08006428 	.word	0x08006428
 80002e4:	2000006c 	.word	0x2000006c
 80002e8:	20000060 	.word	0x20000060

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	; 0x58
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002f6:	2234      	movs	r2, #52	; 0x34
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f006 f880 	bl	8006400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <SystemClock_Config+0xc4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000322:	4a23      	ldr	r2, [pc, #140]	; (80003b0 <SystemClock_Config+0xc4>)
 8000324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000328:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800032a:	230a      	movs	r3, #10
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000342:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000346:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000348:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fcf2 	bl	8000d3c <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800035e:	f000 f829 	bl	80003b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2101      	movs	r1, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f80d 	bl	800139c <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000388:	f000 f814 	bl	80003b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800038c:	2301      	movs	r3, #1
 800038e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000394:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f9eb 	bl	8001774 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003a4:	f000 f806 	bl	80003b4 <Error_Handler>
  }
}
 80003a8:	bf00      	nop
 80003aa:	3758      	adds	r7, #88	; 0x58
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40007000 	.word	0x40007000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003d4:	2300      	movs	r3, #0
 80003d6:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_RTC_Init+0xac>)
 80003da:	4a25      	ldr	r2, [pc, #148]	; (8000470 <MX_RTC_Init+0xb0>)
 80003dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_RTC_Init+0xac>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_RTC_Init+0xac>)
 80003e6:	227f      	movs	r2, #127	; 0x7f
 80003e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003ea:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_RTC_Init+0xac>)
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_RTC_Init+0xac>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_RTC_Init+0xac>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_RTC_Init+0xac>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000402:	481a      	ldr	r0, [pc, #104]	; (800046c <MX_RTC_Init+0xac>)
 8000404:	f001 fa98 	bl	8001938 <HAL_RTC_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800040e:	f7ff ffd1 	bl	80003b4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x17;
 8000412:	2317      	movs	r3, #23
 8000414:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 8000416:	2350      	movs	r3, #80	; 0x50
 8000418:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x45;
 800041a:	2345      	movs	r3, #69	; 0x45
 800041c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <MX_RTC_Init+0xac>)
 800042e:	f001 fafe 	bl	8001a2e <HAL_RTC_SetTime>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000438:	f7ff ffbc 	bl	80003b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800043c:	2305      	movs	r3, #5
 800043e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000440:	2312      	movs	r3, #18
 8000442:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x13;
 8000444:	2313      	movs	r3, #19
 8000446:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000448:	2300      	movs	r3, #0
 800044a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	2201      	movs	r2, #1
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_RTC_Init+0xac>)
 8000454:	f001 fb9f 	bl	8001b96 <HAL_RTC_SetDate>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800045e:	f7ff ffa9 	bl	80003b4 <Error_Handler>
  }

}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200008d4 	.word	0x200008d4
 8000470:	40002800 	.word	0x40002800

08000474 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <HAL_RTC_MspInit+0x24>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d102      	bne.n	800048c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_RTC_MspInit+0x28>)
 8000488:	2201      	movs	r2, #1
 800048a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40002800 	.word	0x40002800
 800049c:	424706d8 	.word	0x424706d8

080004a0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <MX_SDIO_SD_Init+0x3c>)
 80004a8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <MX_SDIO_SD_Init+0x38>)
 80004ca:	220a      	movs	r2, #10
 80004cc:	619a      	str	r2, [r3, #24]

}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	200008f4 	.word	0x200008f4
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a25      	ldr	r2, [pc, #148]	; (8000594 <HAL_SD_MspInit+0xb4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d144      	bne.n	800058c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000504:	6a1b      	ldr	r3, [r3, #32]
 8000506:	4a24      	ldr	r2, [pc, #144]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800050c:	6213      	str	r3, [r2, #32]
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000510:	6a1b      	ldr	r3, [r3, #32]
 8000512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <HAL_SD_MspInit+0xb8>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <HAL_SD_MspInit+0xb8>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0308 	and.w	r3, r3, #8
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800054a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800054e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	2302      	movs	r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000558:	2303      	movs	r3, #3
 800055a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800055c:	230c      	movs	r3, #12
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <HAL_SD_MspInit+0xbc>)
 8000568:	f000 fa42 	bl	80009f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800056c:	2304      	movs	r3, #4
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800057c:	230c      	movs	r3, #12
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <HAL_SD_MspInit+0xc0>)
 8000588:	f000 fa32 	bl	80009f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40012c00 	.word	0x40012c00
 8000598:	40023800 	.word	0x40023800
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_MspInit+0x58>)
 80005ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <HAL_MspInit+0x58>)
 80005b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005b4:	6253      	str	r3, [r2, #36]	; 0x24
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_MspInit+0x58>)
 80005b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_MspInit+0x58>)
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <HAL_MspInit+0x58>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6213      	str	r3, [r2, #32]
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_MspInit+0x58>)
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_MspInit+0x58>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_MspInit+0x58>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6253      	str	r3, [r2, #36]	; 0x24
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_MspInit+0x58>)
 80005e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40023800 	.word	0x40023800

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <HardFault_Handler+0x4>

08000612 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <BusFault_Handler+0x4>

0800061e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <UsageFault_Handler+0x4>

08000624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8ae 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <SystemInit+0x5c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <SystemInit+0x5c>)
 800065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000662:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <SystemInit+0x5c>)
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	4911      	ldr	r1, [pc, #68]	; (80006b0 <SystemInit+0x5c>)
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <SystemInit+0x60>)
 800066c:	4013      	ands	r3, r2
 800066e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <SystemInit+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <SystemInit+0x5c>)
 8000676:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800067a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800067e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <SystemInit+0x5c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <SystemInit+0x5c>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <SystemInit+0x5c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <SystemInit+0x5c>)
 8000692:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000696:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SystemInit+0x5c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <SystemInit+0x64>)
 80006a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a4:	609a      	str	r2, [r3, #8]
#endif
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	88ffc00c 	.word	0x88ffc00c
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006be:	e003      	b.n	80006c8 <LoopCopyDataInit>

080006c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006c6:	3104      	adds	r1, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d0:	d3f6      	bcc.n	80006c0 <CopyDataInit>
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006d4:	e002      	b.n	80006dc <LoopFillZerobss>

080006d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006d8:	f842 3b04 	str.w	r3, [r2], #4

080006dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e0:	d3f9      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff ffb7 	bl	8000654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f005 fe67 	bl	80063b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd91 	bl	8000210 <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r3, =_sidata
 80006f0:	08006560 	.word	0x08006560
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006f8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80006fc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000700:	20000980 	.word	0x20000980

08000704 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_IRQHandler>

08000706 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f939 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000716:	2000      	movs	r0, #0
 8000718:	f000 f80e 	bl	8000738 <HAL_InitTick>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	e001      	b.n	800072c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000728:	f7ff ff3c 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800072c:	79fb      	ldrb	r3, [r7, #7]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_InitTick+0x68>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d022      	beq.n	8000792 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_InitTick+0x6c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_InitTick+0x68>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000758:	fbb1 f3f3 	udiv	r3, r1, r3
 800075c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f938 	bl	80009d6 <HAL_SYSTICK_Config>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10f      	bne.n	800078c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d809      	bhi.n	8000786 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000772:	2200      	movs	r2, #0
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	f04f 30ff 	mov.w	r0, #4294967295
 800077a:	f000 f910 	bl	800099e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_InitTick+0x70>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e007      	b.n	8000796 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	e004      	b.n	8000796 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e001      	b.n	8000796 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x20>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x1c>)
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000978 	.word	0x20000978
 80007cc:	20000008 	.word	0x20000008

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000978 	.word	0x20000978

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d004      	beq.n	8000808 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_Delay+0x40>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000808:	bf00      	nop
 800080a:	f7ff ffe1 	bl	80007d0 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d8f7      	bhi.n	800080a <HAL_Delay+0x26>
  {
  }
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff49 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb0 	bl	8000944 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a06:	e160      	b.n	8000cca <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8152 	beq.w	8000cc4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b12      	cmp	r3, #18
 8000a2e:	d123      	bne.n	8000a78 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	08da      	lsrs	r2, r3, #3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3208      	adds	r2, #8
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0203 	and.w	r2, r3, #3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d00b      	beq.n	8000acc <HAL_GPIO_Init+0xdc>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac0:	2b11      	cmp	r3, #17
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b12      	cmp	r3, #18
 8000aca:	d130      	bne.n	8000b2e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b02:	2201      	movs	r2, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	f003 0201 	and.w	r2, r3, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80ac 	beq.w	8000cc4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <HAL_GPIO_Init+0x2f4>)
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	4a5c      	ldr	r2, [pc, #368]	; (8000ce4 <HAL_GPIO_Init+0x2f4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6213      	str	r3, [r2, #32]
 8000b78:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <HAL_GPIO_Init+0x2f4>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000b84:	4a58      	ldr	r2, [pc, #352]	; (8000ce8 <HAL_GPIO_Init+0x2f8>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a50      	ldr	r2, [pc, #320]	; (8000cec <HAL_GPIO_Init+0x2fc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d025      	beq.n	8000bfc <HAL_GPIO_Init+0x20c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d01f      	beq.n	8000bf8 <HAL_GPIO_Init+0x208>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <HAL_GPIO_Init+0x304>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d019      	beq.n	8000bf4 <HAL_GPIO_Init+0x204>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x308>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x200>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <HAL_GPIO_Init+0x30c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1fc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <HAL_GPIO_Init+0x310>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1f8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4a      	ldr	r2, [pc, #296]	; (8000d04 <HAL_GPIO_Init+0x314>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1f4>
 8000be0:	2306      	movs	r3, #6
 8000be2:	e00c      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000be4:	2307      	movs	r3, #7
 8000be6:	e00a      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000be8:	2305      	movs	r3, #5
 8000bea:	e008      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e004      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <HAL_GPIO_Init+0x20e>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c0e:	4936      	ldr	r1, [pc, #216]	; (8000ce8 <HAL_GPIO_Init+0x2f8>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_GPIO_Init+0x318>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f47f ae97 	bne.w	8000a08 <HAL_GPIO_Init+0x18>
  } 
}
 8000cda:	bf00      	nop
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40021400 	.word	0x40021400
 8000d04:	40021800 	.word	0x40021800
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000d28:	e003      	b.n	8000d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000d2a:	887b      	ldrh	r3, [r7, #2]
 8000d2c:	041a      	lsls	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	619a      	str	r2, [r3, #24]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e31d      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4e:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d58:	4b91      	ldr	r3, [pc, #580]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d07b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d006      	beq.n	8000d82 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b0c      	cmp	r3, #12
 8000d78:	d10f      	bne.n	8000d9a <HAL_RCC_OscConfig+0x5e>
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d80:	d10b      	bne.n	8000d9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d82:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d06a      	beq.n	8000e64 <HAL_RCC_OscConfig+0x128>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d166      	bne.n	8000e64 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e2f7      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d106      	bne.n	8000db0 <HAL_RCC_OscConfig+0x74>
 8000da2:	4b7f      	ldr	r3, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a7e      	ldr	r2, [pc, #504]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e02d      	b.n	8000e0c <HAL_RCC_OscConfig+0xd0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x96>
 8000db8:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b76      	ldr	r3, [pc, #472]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a75      	ldr	r2, [pc, #468]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e01c      	b.n	8000e0c <HAL_RCC_OscConfig+0xd0>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0xb8>
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0xd0>
 8000df4:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a66      	ldr	r2, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d013      	beq.n	8000e3c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcdc 	bl	80007d0 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fcd8 	bl	80007d0 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e2ad      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0xe0>
 8000e3a:	e014      	b.n	8000e66 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fcc8 	bl	80007d0 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fcc4 	bl	80007d0 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e299      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e56:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x108>
 8000e62:	e000      	b.n	8000e66 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d05a      	beq.n	8000f28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d119      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x176>
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d116      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e84:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x160>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d001      	beq.n	8000e9c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e276      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	493d      	ldr	r1, [pc, #244]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb0:	e03a      	b.n	8000f28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d020      	beq.n	8000efc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_RCC_OscConfig+0x268>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc86 	bl	80007d0 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc82 	bl	80007d0 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e257      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	492a      	ldr	r1, [pc, #168]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
 8000efa:	e015      	b.n	8000f28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HAL_RCC_OscConfig+0x268>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fc65 	bl	80007d0 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fc61 	bl	80007d0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e236      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80b8 	beq.w	80010a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d170      	bne.n	800101e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_OscConfig+0x218>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e21a      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d921      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fba3 	bl	80016b4 <RCC_SetFlashLatencyFromMSIRange>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e208      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	061b      	lsls	r3, r3, #24
 8000f98:	4901      	ldr	r1, [pc, #4]	; (8000fa0 <HAL_RCC_OscConfig+0x264>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	604b      	str	r3, [r1, #4]
 8000f9e:	e020      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2a6>
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa8:	4ba4      	ldr	r3, [pc, #656]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	49a1      	ldr	r1, [pc, #644]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fba:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	061b      	lsls	r3, r3, #24
 8000fc8:	499c      	ldr	r1, [pc, #624]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fb6e 	bl	80016b4 <RCC_SetFlashLatencyFromMSIRange>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e1d3      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	0b5b      	lsrs	r3, r3, #13
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ff2:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8000ff4:	6892      	ldr	r2, [r2, #8]
 8000ff6:	0912      	lsrs	r2, r2, #4
 8000ff8:	f002 020f 	and.w	r2, r2, #15
 8000ffc:	4990      	ldr	r1, [pc, #576]	; (8001240 <HAL_RCC_OscConfig+0x504>)
 8000ffe:	5c8a      	ldrb	r2, [r1, r2]
 8001000:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001002:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_RCC_OscConfig+0x508>)
 8001004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001006:	4b90      	ldr	r3, [pc, #576]	; (8001248 <HAL_RCC_OscConfig+0x50c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb94 	bl	8000738 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d045      	beq.n	80010a6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	e1b5      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d029      	beq.n	800107a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x510>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fbd0 	bl	80007d0 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001034:	f7ff fbcc 	bl	80007d0 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1a1      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001046:	4b7d      	ldr	r3, [pc, #500]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001052:	4b7a      	ldr	r3, [pc, #488]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4977      	ldr	r1, [pc, #476]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001064:	4b75      	ldr	r3, [pc, #468]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	4972      	ldr	r1, [pc, #456]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e015      	b.n	80010a6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800107a:	4b74      	ldr	r3, [pc, #464]	; (800124c <HAL_RCC_OscConfig+0x510>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fba6 	bl	80007d0 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001088:	f7ff fba2 	bl	80007d0 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e177      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <HAL_RCC_OscConfig+0x500>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d030      	beq.n	8001114 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d016      	beq.n	80010e8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ba:	4b65      	ldr	r3, [pc, #404]	; (8001250 <HAL_RCC_OscConfig+0x514>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fb86 	bl	80007d0 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fb82 	bl	80007d0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e157      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010da:	4b58      	ldr	r3, [pc, #352]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x38c>
 80010e6:	e015      	b.n	8001114 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_OscConfig+0x514>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb6f 	bl	80007d0 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fb6b 	bl	80007d0 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e140      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_RCC_OscConfig+0x500>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80b5 	beq.w	800128c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	4a41      	ldr	r2, [pc, #260]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6253      	str	r3, [r2, #36]	; 0x24
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_OscConfig+0x518>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <HAL_RCC_OscConfig+0x518>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <HAL_RCC_OscConfig+0x518>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fb33 	bl	80007d0 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fb2f 	bl	80007d0 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e104      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_RCC_OscConfig+0x518>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x466>
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	4a28      	ldr	r2, [pc, #160]	; (800123c <HAL_RCC_OscConfig+0x500>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6353      	str	r3, [r2, #52]	; 0x34
 80011a0:	e02d      	b.n	80011fe <HAL_RCC_OscConfig+0x4c2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x488>
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ae:	4a23      	ldr	r2, [pc, #140]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b4:	6353      	str	r3, [r2, #52]	; 0x34
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011c0:	6353      	str	r3, [r2, #52]	; 0x34
 80011c2:	e01c      	b.n	80011fe <HAL_RCC_OscConfig+0x4c2>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4aa>
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6353      	str	r3, [r2, #52]	; 0x34
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6353      	str	r3, [r2, #52]	; 0x34
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x4c2>
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6353      	str	r3, [r2, #52]	; 0x34
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_RCC_OscConfig+0x500>)
 80011f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011fc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fae3 	bl	80007d0 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fadf 	bl	80007d0 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0b2      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_OscConfig+0x500>)
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ee      	beq.n	800120e <HAL_RCC_OscConfig+0x4d2>
 8001230:	e023      	b.n	800127a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff facd 	bl	80007d0 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001238:	e019      	b.n	800126e <HAL_RCC_OscConfig+0x532>
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	080064b4 	.word	0x080064b4
 8001244:	20000000 	.word	0x20000000
 8001248:	20000004 	.word	0x20000004
 800124c:	42470020 	.word	0x42470020
 8001250:	42470680 	.word	0x42470680
 8001254:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff faba 	bl	80007d0 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e08d      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ee      	bne.n	8001258 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	4a43      	ldr	r2, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 8001286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d079      	beq.n	8001388 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d056      	beq.n	8001348 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d13b      	bne.n	800131a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x65c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa92 	bl	80007d0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fa8e 	bl	80007d0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e063      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	4319      	orrs	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	430b      	orrs	r3, r1
 80012e6:	492b      	ldr	r1, [pc, #172]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x65c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fa6d 	bl	80007d0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fa69 	bl	80007d0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e03e      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x5be>
 8001318:	e036      	b.n	8001388 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_RCC_OscConfig+0x65c>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fa56 	bl	80007d0 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fa52 	bl	80007d0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e027      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x5ec>
 8001346:	e01f      	b.n	8001388 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e01a      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_OscConfig+0x658>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	429a      	cmp	r2, r3
 8001366:	d10d      	bne.n	8001384 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	42470060 	.word	0x42470060

0800139c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e11a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d919      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_RCC_ClockConfig+0x34>
 80013c4:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a89      	ldr	r2, [pc, #548]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 0201 	bic.w	r2, r3, #1
 80013d8:	4985      	ldr	r1, [pc, #532]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e0:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0f9      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fe:	4b7d      	ldr	r3, [pc, #500]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	497a      	ldr	r1, [pc, #488]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 808e 	beq.w	800153a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001426:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d121      	bne.n	8001476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0d7      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0cb      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0bf      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0b7      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 0203 	bic.w	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	495c      	ldr	r1, [pc, #368]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff f9a2 	bl	80007d0 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d112      	bne.n	80014bc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff f99a 	bl	80007d0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e09b      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ae:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d1ee      	bne.n	8001498 <HAL_RCC_ClockConfig+0xfc>
 80014ba:	e03e      	b.n	800153a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff f983 	bl	80007d0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e084      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x12a>
 80014e8:	e027      	b.n	800153a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d11d      	bne.n	800152e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff f96c 	bl	80007d0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e06d      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d1ee      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x158>
 8001516:	e010      	b.n	800153a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff f95a 	bl	80007d0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e05b      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d219      	bcs.n	800157c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_ClockConfig+0x1be>
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0201 	bic.w	r2, r3, #1
 8001562:	4923      	ldr	r1, [pc, #140]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_RCC_ClockConfig+0x254>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e034      	b.n	80015e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4917      	ldr	r1, [pc, #92]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f823 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015be:	4601      	mov	r1, r0
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_RCC_ClockConfig+0x258>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x25c>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	fa21 f303 	lsr.w	r3, r1, r3
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x260>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_RCC_ClockConfig+0x264>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f8ac 	bl	8000738 <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80015e4:	7afb      	ldrb	r3, [r7, #11]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	080064b4 	.word	0x080064b4
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d006      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x24>
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d007      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x2a>
 800161e:	2b04      	cmp	r3, #4
 8001620:	d12c      	bne.n	800167c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001624:	613b      	str	r3, [r7, #16]
      break;
 8001626:	e037      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_GetSysClockFreq+0xa8>)
 800162a:	613b      	str	r3, [r7, #16]
      break;
 800162c:	e034      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	0d9b      	lsrs	r3, r3, #22
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	3301      	adds	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e007      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800166a:	fb02 f203 	mul.w	r2, r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	613b      	str	r3, [r7, #16]
      break;
 800167a:	e00d      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	0b5b      	lsrs	r3, r3, #13
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	613b      	str	r3, [r7, #16]
      break;
 8001696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001698:	693b      	ldr	r3, [r7, #16]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40023800 	.word	0x40023800
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	016e3600 	.word	0x016e3600
 80016b0:	080064a8 	.word	0x080064a8

080016b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12c      	bne.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e016      	b.n	8001712 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6253      	str	r3, [r2, #36]	; 0x24
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001704:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001710:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001718:	d105      	bne.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001720:	d101      	bne.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001722:	2301      	movs	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0201 	bic.w	r2, r3, #1
 8001740:	490b      	ldr	r1, [pc, #44]	; (8001770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80c6 	beq.w	8001922 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b64      	ldr	r3, [pc, #400]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6253      	str	r3, [r2, #36]	; 0x24
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7fe fff9 	bl	80007d0 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7fe fff5 	bl	80007d0 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e097      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001808:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	429a      	cmp	r2, r3
 8001824:	d00f      	beq.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001832:	d108      	bne.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001834:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001840:	d101      	bne.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06e      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001846:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d041      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d005      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10c      	bne.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	429a      	cmp	r2, r3
 800187c:	d02d      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d027      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001892:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d014      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7fe ff8e 	bl	80007d0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b6:	e00a      	b.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7fe ff8a 	bl	80007d0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e02a      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ee      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018e6:	d10a      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800190c:	4313      	orrs	r3, r2
 800190e:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	424706dc 	.word	0x424706dc

08001938 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06d      	b.n	8001a26 <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7f5b      	ldrb	r3, [r3, #29]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fd8a 	bl	8000474 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	22ca      	movs	r2, #202	; 0xca
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2253      	movs	r2, #83	; 0x53
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f9d8 	bl	8001d2c <RTC_EnterInitMode>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2204      	movs	r2, #4
 800198e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e048      	b.n	8001a26 <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80019a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68d2      	ldr	r2, [r2, #12]
 80019ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6919      	ldr	r1, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a2e:	b590      	push	{r4, r7, lr}
 8001a30:	b087      	sub	sp, #28
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	7f1b      	ldrb	r3, [r3, #28]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_RTC_SetTime+0x18>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e0a3      	b.n	8001b8e <HAL_RTC_SetTime+0x160>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d126      	bne.n	8001aa6 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f985 	bl	8001d80 <RTC_ByteToBcd2>
 8001a76:	4603      	mov	r3, r0
 8001a78:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f97e 	bl	8001d80 <RTC_ByteToBcd2>
 8001a84:	4603      	mov	r3, r0
 8001a86:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001a88:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	789b      	ldrb	r3, [r3, #2]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f976 	bl	8001d80 <RTC_ByteToBcd2>
 8001a94:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001a96:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	78db      	ldrb	r3, [r3, #3]
 8001a9e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e018      	b.n	8001ad8 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ac6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001acc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	78db      	ldrb	r3, [r3, #3]
 8001ad2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	22ca      	movs	r2, #202	; 0xca
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2253      	movs	r2, #83	; 0x53
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f91f 	bl	8001d2c <RTC_EnterInitMode>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	22ff      	movs	r2, #255	; 0xff
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2204      	movs	r2, #4
 8001b00:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e040      	b.n	8001b8e <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001b16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001b1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6899      	ldr	r1, [r3, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b52:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f8bc 	bl	8001cd2 <HAL_RTC_WaitForSynchro>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	22ff      	movs	r2, #255	; 0xff
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e00a      	b.n	8001b8e <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	22ff      	movs	r2, #255	; 0xff
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}

08001b96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b96:	b590      	push	{r4, r7, lr}
 8001b98:	b087      	sub	sp, #28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	7f1b      	ldrb	r3, [r3, #28]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_RTC_SetDate+0x18>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e08d      	b.n	8001cca <HAL_RTC_SetDate+0x134>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10e      	bne.n	8001bde <HAL_RTC_SetDate+0x48>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	f023 0310 	bic.w	r3, r3, #16
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	330a      	adds	r3, #10
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11c      	bne.n	8001c1e <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f8c9 	bl	8001d80 <RTC_ByteToBcd2>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f8c2 	bl	8001d80 <RTC_ByteToBcd2>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c00:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f8ba 	bl	8001d80 <RTC_ByteToBcd2>
 8001c0c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c0e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00e      	b.n	8001c3c <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	785b      	ldrb	r3, [r3, #1]
 8001c28:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c2a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c30:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	22ca      	movs	r2, #202	; 0xca
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2253      	movs	r2, #83	; 0x53
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f86d 	bl	8001d2c <RTC_EnterInitMode>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2204      	movs	r2, #4
 8001c64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e02c      	b.n	8001cca <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c7e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f81e 	bl	8001cd2 <HAL_RTC_WaitForSynchro>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	22ff      	movs	r2, #255	; 0xff
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e00a      	b.n	8001cca <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	22ff      	movs	r2, #255	; 0xff
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}

08001cd2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11c      	bne.n	8001d22 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001cf8:	f7fe fd6a 	bl	80007d0 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001cfe:	e009      	b.n	8001d14 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d00:	f7fe fd66 	bl	80007d0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0e:	d901      	bls.n	8001d14 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e007      	b.n	8001d24 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ee      	beq.n	8001d00 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d119      	bne.n	8001d76 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d4c:	f7fe fd40 	bl	80007d0 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d52:	e009      	b.n	8001d68 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d54:	f7fe fd3c 	bl	80007d0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d62:	d901      	bls.n	8001d68 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e007      	b.n	8001d78 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8001d92:	e005      	b.n	8001da0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	3b0a      	subs	r3, #10
 8001d9e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d8f6      	bhi.n	8001d94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e022      	b.n	8001e16 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fb7c 	bl	80004e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f815 	bl	8001e20 <HAL_SD_InitCard>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e00a      	b.n	8001e16 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001e3c:	2376      	movs	r3, #118	; 0x76
 8001e3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681d      	ldr	r5, [r3, #0]
 8001e44:	466c      	mov	r4, sp
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f001 f937 	bl	80030cc <SDIO_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e03a      	b.n	8001ee6 <HAL_SD_InitCard+0xc6>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_SD_InitCard+0xd0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hsd->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 f96c 	bl	8003158 <SDIO_PowerState_ON>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_SD_InitCard+0x72>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e029      	b.n	8001ee6 <HAL_SD_InitCard+0xc6>
  }

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_SD_InitCard+0xd0>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ff01 	bl	8002ca0 <SD_PowerON>
 8001e9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_SD_InitCard+0x9e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e013      	b.n	8001ee6 <HAL_SD_InitCard+0xc6>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fe20 	bl	8002b04 <SD_InitCard>
 8001ec4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_SD_InitCard+0xc6>
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdb0      	pop	{r4, r5, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	422580a0 	.word	0x422580a0

08001ef4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b092      	sub	sp, #72	; 0x48
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7fe fc65 	bl	80007d0 <HAL_GetTick>
 8001f06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1d9      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	f040 81cc 	bne.w	80022cc <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d907      	bls.n	8001f58 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e1c0      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f978 	bl	8003274 <SDMMC_CmdBlockLength>
 8001f84:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a9b      	ldr	r2, [pc, #620]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e196      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	025b      	lsls	r3, r3, #9
 8001fb6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001fb8:	2390      	movs	r3, #144	; 0x90
 8001fba:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f107 0214 	add.w	r2, r7, #20
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 f923 	bl	800321e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d90a      	bls.n	8001ff4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 f986 	bl	80032fc <SDMMC_CmdReadMultiBlock>
 8001ff0:	6478      	str	r0, [r7, #68]	; 0x44
 8001ff2:	e009      	b.n	8002008 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002000:	4618      	mov	r0, r3
 8002002:	f001 f959 	bl	80032b8 <SDMMC_CmdReadSingleBlock>
 8002006:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7b      	ldr	r2, [pc, #492]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e152      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002038:	e061      	b.n	80020fe <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03c      	beq.n	80020c2 <HAL_SD_ReadBlocks+0x1ce>
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d039      	beq.n	80020c2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800204e:	2300      	movs	r3, #0
 8002050:	643b      	str	r3, [r7, #64]	; 0x40
 8002052:	e033      	b.n	80020bc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f861 	bl	8003120 <SDIO_ReadFIFO>
 800205e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	b2da      	uxtb	r2, r3
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	3301      	adds	r3, #1
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800206e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002070:	3b01      	subs	r3, #1
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	b2da      	uxtb	r2, r3
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	3301      	adds	r3, #1
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002086:	3b01      	subs	r3, #1
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	b2da      	uxtb	r2, r3
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	3301      	adds	r3, #1
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209c:	3b01      	subs	r3, #1
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	0e1b      	lsrs	r3, r3, #24
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	3301      	adds	r3, #1
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80020b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b2:	3b01      	subs	r3, #1
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	3301      	adds	r3, #1
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	2b07      	cmp	r3, #7
 80020c0:	d9c8      	bls.n	8002054 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80020c2:	f7fe fb85 	bl	80007d0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d902      	bls.n	80020d8 <HAL_SD_ReadBlocks+0x1e4>
 80020d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d112      	bne.n	80020fe <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0ed      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002104:	f240 332a 	movw	r3, #810	; 0x32a
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d095      	beq.n	800203a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d022      	beq.n	8002162 <HAL_SD_ReadBlocks+0x26e>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d91f      	bls.n	8002162 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	2b03      	cmp	r3, #3
 8002128:	d01b      	beq.n	8002162 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f001 f94a 	bl	80033c8 <SDMMC_CmdStopTransfer>
 8002134:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0bb      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	f043 0208 	orr.w	r2, r3, #8
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0a1      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a15      	ldr	r2, [pc, #84]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e087      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d064      	beq.n	80022a2 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_SD_ReadBlocks+0x30c>)
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06d      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
 80021fe:	bf00      	nop
 8002200:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f000 ff89 	bl	8003120 <SDIO_ReadFIFO>
 800220e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	b2da      	uxtb	r2, r3
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	3301      	adds	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	3b01      	subs	r3, #1
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b2da      	uxtb	r2, r3
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	3301      	adds	r3, #1
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002236:	3b01      	subs	r3, #1
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	b2da      	uxtb	r2, r3
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	3301      	adds	r3, #1
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800224a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224c:	3b01      	subs	r3, #1
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	0e1b      	lsrs	r3, r3, #24
 8002254:	b2da      	uxtb	r2, r3
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	3301      	adds	r3, #1
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
 8002264:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002266:	f7fe fab3 	bl	80007d0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002272:	429a      	cmp	r2, r3
 8002274:	d902      	bls.n	800227c <HAL_SD_ReadBlocks+0x388>
 8002276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002278:	2b00      	cmp	r3, #0
 800227a:	d112      	bne.n	80022a2 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_SD_ReadBlocks+0x3f0>)
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01b      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_SD_ReadBlocks+0x3c2>
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1a6      	bne.n	8002204 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80022be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e006      	b.n	80022da <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3748      	adds	r7, #72	; 0x48
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	004005ff 	.word	0x004005ff

080022e8 <HAL_SD_WriteBlocks>:
  *         there is not possibility to activate the flow control.
  *         Use DMA mode when using 4-bits bus wide mode or decrease the frequency.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b092      	sub	sp, #72	; 0x48
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80022f6:	f7fe fa6b 	bl	80007d0 <HAL_GetTick>
 80022fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e184      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 8177 	bne.w	8002616 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800232e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	441a      	add	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	429a      	cmp	r2, r3
 800233a:	d907      	bls.n	800234c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e16b      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2203      	movs	r2, #3
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	2b01      	cmp	r3, #1
 8002362:	d002      	beq.n	800236a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002372:	4618      	mov	r0, r3
 8002374:	f000 ff7e 	bl	8003274 <SDMMC_CmdBlockLength>
 8002378:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a9d      	ldr	r2, [pc, #628]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	431a      	orrs	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e141      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80023ac:	2390      	movs	r3, #144	; 0x90
 80023ae:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f107 0218 	add.w	r2, r7, #24
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 ff29 	bl	800321e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d90a      	bls.n	80023e8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 ffd0 	bl	8003384 <SDMMC_CmdWriteMultiBlock>
 80023e4:	6478      	str	r0, [r7, #68]	; 0x44
 80023e6:	e009      	b.n	80023fc <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2210      	movs	r2, #16
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 ffa3 	bl	8003340 <SDMMC_CmdWriteSingleBlock>
 80023fa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7d      	ldr	r2, [pc, #500]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0fd      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800242c:	e065      	b.n	80024fa <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d040      	beq.n	80024be <HAL_SD_WriteBlocks+0x1d6>
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03d      	beq.n	80024be <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
 8002446:	e037      	b.n	80024b8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	3301      	adds	r3, #1
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	3b01      	subs	r3, #1
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	3301      	adds	r3, #1
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	3b01      	subs	r3, #1
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	041a      	lsls	r2, r3, #16
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	3301      	adds	r3, #1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	3b01      	subs	r3, #1
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	061a      	lsls	r2, r3, #24
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	3301      	adds	r3, #1
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	3b01      	subs	r3, #1
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f107 0214 	add.w	r2, r7, #20
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fe43 	bl	8003138 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	3301      	adds	r3, #1
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
 80024b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	d9c4      	bls.n	8002448 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80024be:	f7fe f987 	bl	80007d0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d902      	bls.n	80024d4 <HAL_SD_WriteBlocks+0x1ec>
 80024ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a48      	ldr	r2, [pc, #288]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	431a      	orrs	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e094      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002500:	f240 331a 	movw	r3, #794	; 0x31a
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d091      	beq.n	800242e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d022      	beq.n	800255e <HAL_SD_WriteBlocks+0x276>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d91f      	bls.n	800255e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	2b03      	cmp	r3, #3
 8002524:	d01b      	beq.n	800255e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 ff4c 	bl	80033c8 <SDMMC_CmdStopTransfer>
 8002530:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002534:	2b00      	cmp	r3, #0
 8002536:	d012      	beq.n	800255e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	431a      	orrs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e062      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	f043 0208 	orr.w	r2, r3, #8
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e048      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02e      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_SD_WriteBlocks+0x314>)
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e014      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
 80025fa:	bf00      	nop
 80025fc:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f240 523a 	movw	r2, #1338	; 0x53a
 8002608:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e006      	b.n	8002624 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	3748      	adds	r7, #72	; 0x48
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800263a:	0f9b      	lsrs	r3, r3, #30
 800263c:	b2da      	uxtb	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	b2da      	uxtb	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002658:	0e1b      	lsrs	r3, r3, #24
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	b2da      	uxtb	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	b2da      	uxtb	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	b2da      	uxtb	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268c:	0d1b      	lsrs	r3, r3, #20
 800268e:	b29a      	uxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026aa:	0bdb      	lsrs	r3, r3, #15
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026bc:	0b9b      	lsrs	r3, r3, #14
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e0:	0b1b      	lsrs	r3, r3, #12
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d163      	bne.n	80027c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	009a      	lsls	r2, r3, #2
 8002702:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800270c:	0f92      	lsrs	r2, r2, #30
 800270e:	431a      	orrs	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002718:	0edb      	lsrs	r3, r3, #27
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	b2da      	uxtb	r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	b2da      	uxtb	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273c:	0d5b      	lsrs	r3, r3, #21
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	b2da      	uxtb	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	b2da      	uxtb	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002760:	0bdb      	lsrs	r3, r3, #15
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b2da      	uxtb	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	3302      	adds	r3, #2
 8002784:	2201      	movs	r2, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800278e:	fb02 f203 	mul.w	r2, r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	7a1b      	ldrb	r3, [r3, #8]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	2201      	movs	r2, #1
 80027a2:	409a      	lsls	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027b0:	0a52      	lsrs	r2, r2, #9
 80027b2:	fb02 f203 	mul.w	r2, r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c0:	661a      	str	r2, [r3, #96]	; 0x60
 80027c2:	e031      	b.n	8002828 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d11d      	bne.n	8002808 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	3301      	adds	r3, #1
 80027e8:	029a      	lsls	r2, r3, #10
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	661a      	str	r2, [r3, #96]	; 0x60
 8002806:	e00f      	b.n	8002828 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_SD_GetCardCSD+0x344>)
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e09d      	b.n	8002964 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282c:	0b9b      	lsrs	r3, r3, #14
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283e:	09db      	lsrs	r3, r3, #7
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002846:	b2da      	uxtb	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002856:	b2da      	uxtb	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	0fdb      	lsrs	r3, r3, #31
 8002862:	b2da      	uxtb	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	0f5b      	lsrs	r3, r3, #29
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	b2da      	uxtb	r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	0e9b      	lsrs	r3, r3, #26
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	b2da      	uxtb	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	0d9b      	lsrs	r3, r3, #22
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	0d5b      	lsrs	r3, r3, #21
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	0bdb      	lsrs	r3, r3, #15
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	0b9b      	lsrs	r3, r3, #14
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	0b5b      	lsrs	r3, r3, #13
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	0b1b      	lsrs	r3, r3, #12
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	b2da      	uxtb	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	b2da      	uxtb	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002952:	b2da      	uxtb	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	004005ff 	.word	0x004005ff

08002974 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b08e      	sub	sp, #56	; 0x38
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d02e      	beq.n	8002a44 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d106      	bne.n	80029fc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
 80029fa:	e029      	b.n	8002a50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a02:	d10a      	bne.n	8002a1a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa01 	bl	8002e0c <SD_WideBus_Enable>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
 8002a18:	e01a      	b.n	8002a50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa3e 	bl	8002ea2 <SD_WideBus_Disable>
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
 8002a34:	e00c      	b.n	8002a50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	639a      	str	r2, [r3, #56]	; 0x38
 8002a42:	e005      	b.n	8002a50 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e024      	b.n	8002ab6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681d      	ldr	r5, [r3, #0]
 8002a92:	466c      	mov	r4, sp
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 fb10 	bl	80030cc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3728      	adds	r7, #40	; 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bdb0      	pop	{r4, r5, r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	004005ff 	.word	0x004005ff

08002ac4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f970 	bl	8002dbc <SD_SendStatus>
 8002adc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002afa:	693b      	ldr	r3, [r7, #16]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b04:	b5b0      	push	{r4, r5, r7, lr}
 8002b06:	b094      	sub	sp, #80	; 0x50
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb2e 	bl	8003176 <SDIO_GetPowerState>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b24:	e0b7      	b.n	8002c96 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d02f      	beq.n	8002b8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd52 	bl	80035dc <SDMMC_CmdSendCID>
 8002b38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <SD_InitCard+0x40>
    {
      return errorstate;
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	e0a8      	b.n	8002c96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fb55 	bl	80031fa <SDIO_GetResponse>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fb4c 	bl	80031fa <SDIO_GetResponse>
 8002b62:	4602      	mov	r2, r0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2108      	movs	r1, #8
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fb43 	bl	80031fa <SDIO_GetResponse>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	210c      	movs	r1, #12
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fb3a 	bl	80031fa <SDIO_GetResponse>
 8002b86:	4602      	mov	r2, r0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d00d      	beq.n	8002bb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f107 020e 	add.w	r2, r7, #14
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fd58 	bl	8003656 <SDMMC_CmdSetRelAdd>
 8002ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb0:	e071      	b.n	8002c96 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d036      	beq.n	8002c28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fd22 	bl	8003618 <SDMMC_CmdSendCSD>
 8002bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	e05a      	b.n	8002c96 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fb07 	bl	80031fa <SDIO_GetResponse>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fafe 	bl	80031fa <SDIO_GetResponse>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2108      	movs	r1, #8
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 faf5 	bl	80031fa <SDIO_GetResponse>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	210c      	movs	r1, #12
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 faec 	bl	80031fa <SDIO_GetResponse>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fae3 	bl	80031fa <SDIO_GetResponse>
 8002c34:	4603      	mov	r3, r0
 8002c36:	0d1a      	lsrs	r2, r3, #20
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fcf2 	bl	800262c <HAL_SD_GetCardCSD>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c52:	e020      	b.n	8002c96 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4623      	mov	r3, r4
 8002c66:	4608      	mov	r0, r1
 8002c68:	f000 fbd0 	bl	800340c <SDMMC_CmdSelDesel>
 8002c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SD_InitCard+0x174>
  {
    return errorstate;
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	e00e      	b.n	8002c96 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681d      	ldr	r5, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	466c      	mov	r4, sp
 8002c80:	f103 0210 	add.w	r2, r3, #16
 8002c84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f000 fa1c 	bl	80030cc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3740      	adds	r7, #64	; 0x40
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ca0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fbca 	bl	8003452 <SDMMC_CmdGoIdleState>
 8002cbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SD_PowerON+0x2a>
  {
    return errorstate;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e072      	b.n	8002db0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fbdd 	bl	800348e <SDMMC_CmdOperCond>
 8002cd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fbb3 	bl	8003452 <SDMMC_CmdGoIdleState>
 8002cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e05b      	b.n	8002db0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d137      	bne.n	8002d76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fbdd 	bl	80034cc <SDMMC_CmdAppCommand>
 8002d12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02d      	beq.n	8002d76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d1e:	e047      	b.n	8002db0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fbd0 	bl	80034cc <SDMMC_CmdAppCommand>
 8002d2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <SD_PowerON+0x98>
    {
      return errorstate;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	e03b      	b.n	8002db0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	491e      	ldr	r1, [pc, #120]	; (8002db8 <SD_PowerON+0x118>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fbe6 	bl	8003510 <SDMMC_CmdAppOperCommand>
 8002d44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d50:	e02e      	b.n	8002db0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fa4e 	bl	80031fa <SDIO_GetResponse>
 8002d5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	0fdb      	lsrs	r3, r3, #31
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <SD_PowerON+0xcc>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <SD_PowerON+0xce>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]

    count++;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d802      	bhi.n	8002d86 <SD_PowerON+0xe6>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0cc      	beq.n	8002d20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d902      	bls.n	8002d96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d94:	e00c      	b.n	8002db0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
 8002da6:	e002      	b.n	8002dae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	c1100000 	.word	0xc1100000

08002dbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dd0:	e018      	b.n	8002e04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f000 fc5a 	bl	8003698 <SDMMC_CmdSendStatus>
 8002de4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	e009      	b.n	8002e04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9ff 	bl	80031fa <SDIO_GetResponse>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f9e9 	bl	80031fa <SDIO_GetResponse>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e32:	d102      	bne.n	8002e3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	e02f      	b.n	8002e9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f879 	bl	8002f38 <SD_FindSCR>
 8002e46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e023      	b.n	8002e9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fb2f 	bl	80034cc <SDMMC_CmdAppCommand>
 8002e6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	e00f      	b.n	8002e9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fb68 	bl	8003556 <SDMMC_CmdBusWidth>
 8002e86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	e003      	b.n	8002e9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e001      	b.n	8002e9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f99e 	bl	80031fa <SDIO_GetResponse>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ec8:	d102      	bne.n	8002ed0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ece:	e02f      	b.n	8002f30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f82e 	bl	8002f38 <SD_FindSCR>
 8002edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e023      	b.n	8002f30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 fae4 	bl	80034cc <SDMMC_CmdAppCommand>
 8002f04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	e00f      	b.n	8002f30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fb1d 	bl	8003556 <SDMMC_CmdBusWidth>
 8002f1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e003      	b.n	8002f30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e001      	b.n	8002f30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b08f      	sub	sp, #60	; 0x3c
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7fd fc45 	bl	80007d0 <HAL_GetTick>
 8002f46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2108      	movs	r1, #8
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f988 	bl	8003274 <SDMMC_CmdBlockLength>
 8002f64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	e0a9      	b.n	80030c4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 faa5 	bl	80034cc <SDMMC_CmdAppCommand>
 8002f82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <SD_FindSCR+0x56>
  {
    return errorstate;
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	e09a      	b.n	80030c4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002f94:	2308      	movs	r3, #8
 8002f96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002f98:	2330      	movs	r3, #48	; 0x30
 8002f9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f107 0210 	add.w	r2, r7, #16
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f933 	bl	800321e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 faec 	bl	800359a <SDMMC_CmdSendSCR>
 8002fc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d022      	beq.n	8003010 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	e07a      	b.n	80030c4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	18d4      	adds	r4, r2, r3
 8002fea:	4608      	mov	r0, r1
 8002fec:	f000 f898 	bl	8003120 <SDIO_ReadFIFO>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	6023      	str	r3, [r4, #0]
      index++;
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002ffa:	f7fd fbe9 	bl	80007d0 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d102      	bne.n	8003010 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800300a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800300e:	e059      	b.n	80030c4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003016:	f240 432a 	movw	r3, #1066	; 0x42a
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0d6      	beq.n	8002fce <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2208      	movs	r2, #8
 8003034:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003036:	2308      	movs	r3, #8
 8003038:	e044      	b.n	80030c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003050:	2302      	movs	r3, #2
 8003052:	e037      	b.n	80030c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800306a:	2320      	movs	r3, #32
 800306c:	e02a      	b.n	80030c4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f240 523a 	movw	r2, #1338	; 0x53a
 8003076:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	061a      	lsls	r2, r3, #24
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003084:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800308e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	0e1b      	lsrs	r3, r3, #24
 8003094:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	601a      	str	r2, [r3, #0]
    scr++;
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	3304      	adds	r3, #4
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	061a      	lsls	r2, r3, #24
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	373c      	adds	r7, #60	; 0x3c
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80030cc:	b084      	sub	sp, #16
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	f107 001c 	add.w	r0, r7, #28
 80030da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80030e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80030e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80030e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80030ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80030ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80030f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80030f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	b004      	add	sp, #16
 800311e:	4770      	bx	lr

08003120 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003166:	2002      	movs	r0, #2
 8003168:	f7fd fb3c 	bl	80007e4 <HAL_Delay>
  
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0303 	and.w	r3, r3, #3
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80031b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80031ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80031ca:	f023 030f 	bic.w	r3, r3, #15
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	b2db      	uxtb	r3, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3314      	adds	r3, #20
 8003208:	461a      	mov	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
}  
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003244:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800324a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003250:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003268:	2300      	movs	r3, #0

}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003282:	2310      	movs	r3, #16
 8003284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800328e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003294:	f107 0308 	add.w	r3, r7, #8
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff78 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	2110      	movs	r1, #16
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa40 	bl	800372c <SDMMC_GetCmdResp1>
 80032ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032ae:	69fb      	ldr	r3, [r7, #28]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80032c6:	2311      	movs	r3, #17
 80032c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff56 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	2111      	movs	r1, #17
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa1e 	bl	800372c <SDMMC_GetCmdResp1>
 80032f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032f2:	69fb      	ldr	r3, [r7, #28]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800330a:	2312      	movs	r3, #18
 800330c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff34 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	2112      	movs	r1, #18
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9fc 	bl	800372c <SDMMC_GetCmdResp1>
 8003334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003336:	69fb      	ldr	r3, [r7, #28]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800334e:	2318      	movs	r3, #24
 8003350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800335a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff12 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	2118      	movs	r1, #24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9da 	bl	800372c <SDMMC_GetCmdResp1>
 8003378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800337a:	69fb      	ldr	r3, [r7, #28]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003392:	2319      	movs	r3, #25
 8003394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800339e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fef0 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	2119      	movs	r1, #25
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9b8 	bl	800372c <SDMMC_GetCmdResp1>
 80033bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033be:	69fb      	ldr	r3, [r7, #28]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80033d4:	230c      	movs	r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fecf 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <SDMMC_CmdStopTransfer+0x40>)
 80033f4:	210c      	movs	r1, #12
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f998 	bl	800372c <SDMMC_GetCmdResp1>
 80033fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033fe:	69fb      	ldr	r3, [r7, #28]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	05f5e100 	.word	0x05f5e100

0800340c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800341c:	2307      	movs	r3, #7
 800341e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	4619      	mov	r1, r3
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff feab 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	2107      	movs	r1, #7
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f973 	bl	800372c <SDMMC_GetCmdResp1>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800344a:	4618      	mov	r0, r3
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800346a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fe8a 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f92d 	bl	80036dc <SDMMC_GetCmdError>
 8003482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003484:	69fb      	ldr	r3, [r7, #28]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b088      	sub	sp, #32
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003496:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800349a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800349c:	2308      	movs	r3, #8
 800349e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fe6b 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fb16 	bl	8003aec <SDMMC_GetCmdResp7>
 80034c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034c2:	69fb      	ldr	r3, [r7, #28]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80034da:	2337      	movs	r3, #55	; 0x37
 80034dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe4c 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	2137      	movs	r1, #55	; 0x37
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f914 	bl	800372c <SDMMC_GetCmdResp1>
 8003504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003506:	69fb      	ldr	r3, [r7, #28]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003526:	2329      	movs	r3, #41	; 0x29
 8003528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800352a:	2340      	movs	r3, #64	; 0x40
 800352c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003538:	f107 0308 	add.w	r3, r7, #8
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fe26 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa23 	bl	8003990 <SDMMC_GetCmdResp3>
 800354a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800354c:	69fb      	ldr	r3, [r7, #28]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003564:	2306      	movs	r3, #6
 8003566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fe07 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	2106      	movs	r1, #6
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8cf 	bl	800372c <SDMMC_GetCmdResp1>
 800358e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003590:	69fb      	ldr	r3, [r7, #28]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80035a6:	2333      	movs	r3, #51	; 0x33
 80035a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fde6 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	2133      	movs	r1, #51	; 0x33
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8ae 	bl	800372c <SDMMC_GetCmdResp1>
 80035d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035d2:	69fb      	ldr	r3, [r7, #28]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80035e8:	2302      	movs	r3, #2
 80035ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80035ec:	23c0      	movs	r3, #192	; 0xc0
 80035ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fdc5 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f97c 	bl	8003904 <SDMMC_GetCmdResp2>
 800360c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800360e:	69fb      	ldr	r3, [r7, #28]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003626:	2309      	movs	r3, #9
 8003628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800362a:	23c0      	movs	r3, #192	; 0xc0
 800362c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003636:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fda6 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f95d 	bl	8003904 <SDMMC_GetCmdResp2>
 800364a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800364c:	69fb      	ldr	r3, [r7, #28]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b088      	sub	sp, #32
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003664:	2303      	movs	r3, #3
 8003666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003668:	2340      	movs	r3, #64	; 0x40
 800366a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fd87 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	2103      	movs	r1, #3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9bc 	bl	8003a04 <SDMMC_GetCmdResp6>
 800368c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800368e:	69fb      	ldr	r3, [r7, #28]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80036a6:	230d      	movs	r3, #13
 80036a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fd66 	bl	8003190 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	210d      	movs	r1, #13
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f82e 	bl	800372c <SDMMC_GetCmdResp1>
 80036d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036d2:	69fb      	ldr	r3, [r7, #28]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80036dc:	b490      	push	{r4, r7}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <SDMMC_GetCmdError+0x48>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <SDMMC_GetCmdError+0x4c>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	0a5b      	lsrs	r3, r3, #9
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80036f8:	4623      	mov	r3, r4
 80036fa:	1e5c      	subs	r4, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003704:	e009      	b.n	800371a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f2      	beq.n	80036f8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	22c5      	movs	r2, #197	; 0xc5
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bc90      	pop	{r4, r7}
 8003722:	4770      	bx	lr
 8003724:	20000000 	.word	0x20000000
 8003728:	10624dd3 	.word	0x10624dd3

0800372c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	460b      	mov	r3, r1
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <SDMMC_GetCmdResp1+0x1cc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6f      	ldr	r2, [pc, #444]	; (80038fc <SDMMC_GetCmdResp1+0x1d0>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800374c:	4623      	mov	r3, r4
 800374e:	1e5c      	subs	r4, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003758:	e0c9      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <SDMMC_GetCmdResp1+0x20>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1eb      	bne.n	800374c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2204      	movs	r2, #4
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003786:	2304      	movs	r3, #4
 8003788:	e0b1      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800379c:	2301      	movs	r3, #1
 800379e:	e0a6      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	22c5      	movs	r2, #197	; 0xc5
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fd1b 	bl	80031e2 <SDIO_GetCommandResponse>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d001      	beq.n	80037ba <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e099      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80037ba:	2100      	movs	r1, #0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fd1c 	bl	80031fa <SDIO_GetResponse>
 80037c2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <SDMMC_GetCmdResp1+0x1d4>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e08d      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da02      	bge.n	80037de <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80037d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037dc:	e087      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80037e8:	2340      	movs	r3, #64	; 0x40
 80037ea:	e080      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	e079      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003808:	e071      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003818:	e069      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003828:	e061      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003838:	e059      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003848:	e051      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003858:	e049      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003868:	e041      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8003874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003878:	e039      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003888:	e031      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003894:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003898:	e029      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80038a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038a8:	e021      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80038b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038b8:	e019      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80038c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038c8:	e011      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80038d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038d8:	e009      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80038e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038e8:	e001      	b.n	80038ee <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80038ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd90      	pop	{r4, r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000
 80038fc:	10624dd3 	.word	0x10624dd3
 8003900:	fdffe008 	.word	0xfdffe008

08003904 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003904:	b490      	push	{r4, r7}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <SDMMC_GetCmdResp2+0x84>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <SDMMC_GetCmdResp2+0x88>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003920:	4623      	mov	r3, r4
 8003922:	1e5c      	subs	r4, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800392c:	e026      	b.n	800397c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <SDMMC_GetCmdResp2+0x1c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1eb      	bne.n	8003920 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800395a:	2304      	movs	r3, #4
 800395c:	e00e      	b.n	800397c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003970:	2301      	movs	r3, #1
 8003972:	e003      	b.n	800397c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	22c5      	movs	r2, #197	; 0xc5
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bc90      	pop	{r4, r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000
 800398c:	10624dd3 	.word	0x10624dd3

08003990 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003990:	b490      	push	{r4, r7}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <SDMMC_GetCmdResp3+0x6c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <SDMMC_GetCmdResp3+0x70>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80039ac:	4623      	mov	r3, r4
 80039ae:	1e5c      	subs	r4, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039b8:	e01b      	b.n	80039f2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <SDMMC_GetCmdResp3+0x1c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1eb      	bne.n	80039ac <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80039e6:	2304      	movs	r3, #4
 80039e8:	e003      	b.n	80039f2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	22c5      	movs	r2, #197	; 0xc5
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc90      	pop	{r4, r7}
 80039fa:	4770      	bx	lr
 80039fc:	20000000 	.word	0x20000000
 8003a00:	10624dd3 	.word	0x10624dd3

08003a04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <SDMMC_GetCmdResp6+0xe0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <SDMMC_GetCmdResp6+0xe4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	0a5b      	lsrs	r3, r3, #9
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003a26:	4623      	mov	r3, r4
 8003a28:	1e5c      	subs	r4, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a32:	e052      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <SDMMC_GetCmdResp6+0x22>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1eb      	bne.n	8003a26 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a60:	2304      	movs	r3, #4
 8003a62:	e03a      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e02f      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff fbb1 	bl	80031e2 <SDIO_GetCommandResponse>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d001      	beq.n	8003a8e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e025      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	22c5      	movs	r2, #197	; 0xc5
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003a94:	2100      	movs	r1, #0
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7ff fbaf 	bl	80031fa <SDIO_GetResponse>
 8003a9c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e011      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac4:	e009      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad4:	e001      	b.n	8003ada <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003aec:	b490      	push	{r4, r7}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <SDMMC_GetCmdResp7+0x90>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <SDMMC_GetCmdResp7+0x94>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a5b      	lsrs	r3, r3, #9
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b08:	4623      	mov	r3, r4
 8003b0a:	1e5c      	subs	r4, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b14:	e02c      	b.n	8003b70 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <SDMMC_GetCmdResp7+0x1c>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1eb      	bne.n	8003b08 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b42:	2304      	movs	r3, #4
 8003b44:	e014      	b.n	8003b70 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e009      	b.n	8003b70 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b6e:	2300      	movs	r3, #0
  
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc90      	pop	{r4, r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <MX_FATFS_Init+0x18>)
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_FATFS_Init+0x1c>)
 8003b8c:	f002 fc04 	bl	8006398 <FATFS_LinkDriver>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <MX_FATFS_Init+0x20>)
 8003b96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000068 	.word	0x20000068
 8003ba0:	080064c4 	.word	0x080064c4
 8003ba4:	2000097c 	.word	0x2000097c

08003ba8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003bac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003bc2:	f000 f881 	bl	8003cc8 <BSP_SD_IsDetected>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d001      	beq.n	8003bd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e011      	b.n	8003bf4 <BSP_SD_Init+0x3c>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <BSP_SD_Init+0x44>)
 8003bd2:	f7fe f8f4 	bl	8001dbe <HAL_SD_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <BSP_SD_Init+0x3a>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 8003be0:	2100      	movs	r1, #0
 8003be2:	4806      	ldr	r0, [pc, #24]	; (8003bfc <BSP_SD_Init+0x44>)
 8003be4:	f7fe fef2 	bl	80029cc <HAL_SD_ConfigWideBusOperation>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <BSP_SD_Init+0x3a>
    {
      sd_state = MSD_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200008f4 	.word	0x200008f4

08003c00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	4806      	ldr	r0, [pc, #24]	; (8003c34 <BSP_SD_ReadBlocks+0x34>)
 8003c1a:	f7fe f96b 	bl	8001ef4 <HAL_SD_ReadBlocks>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8003c28:	2300      	movs	r3, #0
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200008f4 	.word	0x200008f4

08003c38 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	4806      	ldr	r0, [pc, #24]	; (8003c6c <BSP_SD_WriteBlocks+0x34>)
 8003c52:	f7fe fb49 	bl	80022e8 <HAL_SD_WriteBlocks>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8003c60:	2300      	movs	r3, #0
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200008f4 	.word	0x200008f4

08003c70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypeDef card_state;
  card_state = HAL_SD_GetCardState(&hsd);
 8003c76:	480c      	ldr	r0, [pc, #48]	; (8003ca8 <BSP_SD_GetCardState+0x38>)
 8003c78:	f7fe ff24 	bl	8002ac4 <HAL_SD_GetCardState>
 8003c7c:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d101      	bne.n	8003c88 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8003c84:	2300      	movs	r3, #0
 8003c86:	e00b      	b.n	8003ca0 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) || 
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d005      	beq.n	8003c9a <BSP_SD_GetCardState+0x2a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d002      	beq.n	8003c9a <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) || 
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d101      	bne.n	8003c9e <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <BSP_SD_GetCardState+0x30>
  }
  else
  { 
    return(SD_TRANSFER_ERROR);
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200008f4 	.word	0x200008f4

08003cac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <BSP_SD_GetCardInfo+0x18>)
 8003cb8:	f7fe fe5c 	bl	8002974 <HAL_SD_GetCardInfo>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200008f4 	.word	0x200008f4

08003cc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	b2db      	uxtb	r3, r3
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <SD_CheckStatus+0x38>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003cf0:	f7ff ffbe 	bl	8003c70 <BSP_SD_GetCardState>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <SD_CheckStatus+0x38>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <SD_CheckStatus+0x38>)
 8003d08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003d0a:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <SD_CheckStatus+0x38>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <SD_initialize+0x38>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003d2c:	f7ff ff44 	bl	8003bb8 <BSP_SD_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ffd1 	bl	8003ce0 <SD_CheckStatus>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SD_initialize+0x38>)
 8003d44:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <SD_initialize+0x38>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	2000000c 	.word	0x2000000c

08003d58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ffbb 	bl	8003ce0 <SD_CheckStatus>
 8003d6a:	4603      	mov	r3, r0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f7ff ff35 	bl	8003c00 <BSP_SD_ReadBlocks>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003d9c:	bf00      	nop
 8003d9e:	f7ff ff67 	bl	8003c70 <BSP_SD_GetCardState>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1fa      	bne.n	8003d9e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68b8      	ldr	r0, [r7, #8]
 8003dd4:	f7ff ff30 	bl	8003c38 <BSP_SD_WriteBlocks>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003dde:	bf00      	nop
 8003de0:	f7ff ff46 	bl	8003c70 <BSP_SD_GetCardState>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1fa      	bne.n	8003de0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	603a      	str	r2, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	460b      	mov	r3, r1
 8003e06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003e0e:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <SD_ioctl+0xac>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <SD_ioctl+0x28>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e03c      	b.n	8003e9a <SD_ioctl+0xa2>

  switch (cmd)
 8003e20:	79bb      	ldrb	r3, [r7, #6]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d834      	bhi.n	8003e90 <SD_ioctl+0x98>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <SD_ioctl+0x34>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e77 	.word	0x08003e77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003e42:	e028      	b.n	8003e96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff2f 	bl	8003cac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003e5a:	e01c      	b.n	8003e96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff23 	bl	8003cac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003e74:	e00f      	b.n	8003e96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff16 	bl	8003cac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	0a5a      	lsrs	r2, r3, #9
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003e8e:	e002      	b.n	8003e96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003e90:	2304      	movs	r3, #4
 8003e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	; 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <disk_status+0x30>)
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	79fa      	ldrb	r2, [r7, #7]
 8003ec0:	4905      	ldr	r1, [pc, #20]	; (8003ed8 <disk_status+0x30>)
 8003ec2:	440a      	add	r2, r1
 8003ec4:	7a12      	ldrb	r2, [r2, #8]
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4798      	blx	r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000054 	.word	0x20000054

08003edc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <disk_initialize+0x48>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d111      	bne.n	8003f18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <disk_initialize+0x48>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <disk_initialize+0x48>)
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	4906      	ldr	r1, [pc, #24]	; (8003f24 <disk_initialize+0x48>)
 8003f0c:	440a      	add	r2, r1
 8003f0e:	7a12      	ldrb	r2, [r2, #8]
 8003f10:	4610      	mov	r0, r2
 8003f12:	4798      	blx	r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000054 	.word	0x20000054

08003f28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <disk_read+0x3c>)
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	689c      	ldr	r4, [r3, #8]
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <disk_read+0x3c>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	7a18      	ldrb	r0, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	47a0      	blx	r4
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000054 	.word	0x20000054

08003f68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <disk_write+0x3c>)
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68dc      	ldr	r4, [r3, #12]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <disk_write+0x3c>)
 8003f88:	4413      	add	r3, r2
 8003f8a:	7a18      	ldrb	r0, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	47a0      	blx	r4
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000054 	.word	0x20000054

08003fa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	603a      	str	r2, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <disk_ioctl+0x38>)
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	79fa      	ldrb	r2, [r7, #7]
 8003fc6:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <disk_ioctl+0x38>)
 8003fc8:	440a      	add	r2, r1
 8003fca:	7a10      	ldrb	r0, [r2, #8]
 8003fcc:	79b9      	ldrb	r1, [r7, #6]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4798      	blx	r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000054 	.word	0x20000054

08003fe4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	4313      	orrs	r3, r2
 8004002:	b21b      	sxth	r3, r3
 8004004:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004006:	89fb      	ldrh	r3, [r7, #14]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3303      	adds	r3, #3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	3202      	adds	r2, #2
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	3201      	adds	r2, #1
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
	return rv;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	887b      	ldrh	r3, [r7, #2]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	1c53      	adds	r3, r2, #1
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1c59      	adds	r1, r3, #1
 8004104:	6179      	str	r1, [r7, #20]
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3b01      	subs	r3, #1
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f1      	bne.n	80040fa <mem_cpy+0x1a>
	}
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	617a      	str	r2, [r7, #20]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f3      	bne.n	8004130 <mem_set+0x10>
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004152:	b480      	push	{r7}
 8004154:	b089      	sub	sp, #36	; 0x24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	61ba      	str	r2, [r7, #24]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	1acb      	subs	r3, r1, r3
 800417e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <mem_cmp+0x40>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0eb      	beq.n	800416a <mem_cmp+0x18>

	return r;
 8004192:	697b      	ldr	r3, [r7, #20]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3724      	adds	r7, #36	; 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80041a8:	e002      	b.n	80041b0 <chk_chr+0x12>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3301      	adds	r3, #1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <chk_chr+0x26>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d1f2      	bne.n	80041aa <chk_chr+0xc>
	return *str;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	781b      	ldrb	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
	...

080041d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e029      	b.n	800423c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80041e8:	4a26      	ldr	r2, [pc, #152]	; (8004284 <chk_lock+0xb0>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	4413      	add	r3, r2
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01d      	beq.n	8004232 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80041f6:	4a23      	ldr	r2, [pc, #140]	; (8004284 <chk_lock+0xb0>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4413      	add	r3, r2
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d116      	bne.n	8004236 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004208:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <chk_lock+0xb0>)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004218:	429a      	cmp	r2, r3
 800421a:	d10c      	bne.n	8004236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <chk_lock+0xb0>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	3308      	adds	r3, #8
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800422c:	429a      	cmp	r2, r3
 800422e:	d102      	bne.n	8004236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004230:	e007      	b.n	8004242 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d9d2      	bls.n	80041e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d109      	bne.n	800425c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <chk_lock+0x80>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d101      	bne.n	8004258 <chk_lock+0x84>
 8004254:	2300      	movs	r3, #0
 8004256:	e010      	b.n	800427a <chk_lock+0xa6>
 8004258:	2312      	movs	r3, #18
 800425a:	e00e      	b.n	800427a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d108      	bne.n	8004274 <chk_lock+0xa0>
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <chk_lock+0xb0>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	330c      	adds	r3, #12
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004272:	d101      	bne.n	8004278 <chk_lock+0xa4>
 8004274:	2310      	movs	r3, #16
 8004276:	e000      	b.n	800427a <chk_lock+0xa6>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000034 	.word	0x20000034

08004288 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e002      	b.n	800429a <enq_lock+0x12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3301      	adds	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d806      	bhi.n	80042ae <enq_lock+0x26>
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <enq_lock+0x3c>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4413      	add	r3, r2
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f2      	bne.n	8004294 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	20000034 	.word	0x20000034

080042c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e01f      	b.n	8004318 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80042d8:	4a41      	ldr	r2, [pc, #260]	; (80043e0 <inc_lock+0x118>)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4413      	add	r3, r2
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d113      	bne.n	8004312 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80042ea:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <inc_lock+0x118>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	3304      	adds	r3, #4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d109      	bne.n	8004312 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80042fe:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <inc_lock+0x118>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	4413      	add	r3, r2
 8004306:	3308      	adds	r3, #8
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800430e:	429a      	cmp	r2, r3
 8004310:	d006      	beq.n	8004320 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d9dc      	bls.n	80042d8 <inc_lock+0x10>
 800431e:	e000      	b.n	8004322 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004320:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d132      	bne.n	800438e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e002      	b.n	8004334 <inc_lock+0x6c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d806      	bhi.n	8004348 <inc_lock+0x80>
 800433a:	4a29      	ldr	r2, [pc, #164]	; (80043e0 <inc_lock+0x118>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	4413      	add	r3, r2
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f2      	bne.n	800432e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d101      	bne.n	8004352 <inc_lock+0x8a>
 800434e:	2300      	movs	r3, #0
 8004350:	e040      	b.n	80043d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4922      	ldr	r1, [pc, #136]	; (80043e0 <inc_lock+0x118>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	440b      	add	r3, r1
 800435e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	491e      	ldr	r1, [pc, #120]	; (80043e0 <inc_lock+0x118>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	440b      	add	r3, r1
 800436c:	3304      	adds	r3, #4
 800436e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	491a      	ldr	r1, [pc, #104]	; (80043e0 <inc_lock+0x118>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	440b      	add	r3, r1
 800437c:	3308      	adds	r3, #8
 800437e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <inc_lock+0x118>)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	330c      	adds	r3, #12
 800438a:	2200      	movs	r2, #0
 800438c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <inc_lock+0xe0>
 8004394:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <inc_lock+0x118>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	4413      	add	r3, r2
 800439c:	330c      	adds	r3, #12
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <inc_lock+0xe0>
 80043a4:	2300      	movs	r3, #0
 80043a6:	e015      	b.n	80043d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <inc_lock+0xf8>
 80043ae:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <inc_lock+0x118>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4413      	add	r3, r2
 80043b6:	330c      	adds	r3, #12
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	e001      	b.n	80043c4 <inc_lock+0xfc>
 80043c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c4:	4906      	ldr	r1, [pc, #24]	; (80043e0 <inc_lock+0x118>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	440b      	add	r3, r1
 80043cc:	330c      	adds	r3, #12
 80043ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000034 	.word	0x20000034

080043e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d825      	bhi.n	8004444 <dec_lock+0x60>
		n = Files[i].ctr;
 80043f8:	4a16      	ldr	r2, [pc, #88]	; (8004454 <dec_lock+0x70>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	330c      	adds	r3, #12
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d101      	bne.n	8004412 <dec_lock+0x2e>
 800440e:	2300      	movs	r3, #0
 8004410:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <dec_lock+0x3a>
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	3b01      	subs	r3, #1
 800441c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800441e:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <dec_lock+0x70>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	330c      	adds	r3, #12
 8004428:	89fa      	ldrh	r2, [r7, #14]
 800442a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <dec_lock+0x5a>
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <dec_lock+0x70>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	737b      	strb	r3, [r7, #13]
 8004442:	e001      	b.n	8004448 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004444:	2302      	movs	r3, #2
 8004446:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004448:	7b7b      	ldrb	r3, [r7, #13]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	20000034 	.word	0x20000034

08004458 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e010      	b.n	8004488 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <clear_lock+0x40>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	4413      	add	r3, r2
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d105      	bne.n	8004482 <clear_lock+0x2a>
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <clear_lock+0x40>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d9eb      	bls.n	8004466 <clear_lock+0xe>
	}
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	20000034 	.word	0x20000034

0800449c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	78db      	ldrb	r3, [r3, #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d034      	beq.n	800451a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7858      	ldrb	r0, [r3, #1]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044c0:	2301      	movs	r3, #1
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	f7ff fd50 	bl	8003f68 <disk_write>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e022      	b.n	800451a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	1ad2      	subs	r2, r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d217      	bcs.n	800451a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	789b      	ldrb	r3, [r3, #2]
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e010      	b.n	8004514 <sync_window+0x78>
					wsect += fs->fsize;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7858      	ldrb	r0, [r3, #1]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004506:	2301      	movs	r3, #1
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	f7ff fd2d 	bl	8003f68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3b01      	subs	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d8eb      	bhi.n	80044f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d01b      	beq.n	8004574 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ffad 	bl	800449c <sync_window>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d113      	bne.n	8004574 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7858      	ldrb	r0, [r3, #1]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004556:	2301      	movs	r3, #1
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	f7ff fce5 	bl	8003f28 <disk_read>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff87 	bl	800449c <sync_window>
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d159      	bne.n	800464c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d149      	bne.n	8004634 <sync_fs+0xb4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	791b      	ldrb	r3, [r3, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d145      	bne.n	8004634 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	899b      	ldrh	r3, [r3, #12]
 80045b2:	461a      	mov	r2, r3
 80045b4:	2100      	movs	r1, #0
 80045b6:	f7ff fdb3 	bl	8004120 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3334      	adds	r3, #52	; 0x34
 80045be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd45 	bl	8004056 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3334      	adds	r3, #52	; 0x34
 80045d0:	4921      	ldr	r1, [pc, #132]	; (8004658 <sync_fs+0xd8>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fd59 	bl	800408a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3334      	adds	r3, #52	; 0x34
 80045dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80045e0:	491e      	ldr	r1, [pc, #120]	; (800465c <sync_fs+0xdc>)
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fd51 	bl	800408a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3334      	adds	r3, #52	; 0x34
 80045ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7ff fd47 	bl	800408a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3334      	adds	r3, #52	; 0x34
 8004600:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7ff fd3d 	bl	800408a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7858      	ldrb	r0, [r3, #1]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004628:	2301      	movs	r3, #1
 800462a:	f7ff fc9d 	bl	8003f68 <disk_write>
			fs->fsi_flag = 0;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2200      	movs	r2, #0
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fcb3 	bl	8003fa8 <disk_ioctl>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <sync_fs+0xcc>
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	41615252 	.word	0x41615252
 800465c:	61417272 	.word	0x61417272

08004660 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3b02      	subs	r3, #2
 800466e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	3b02      	subs	r3, #2
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d301      	bcc.n	8004680 <clust2sect+0x20>
 800467c:	2300      	movs	r3, #0
 800467e:	e008      	b.n	8004692 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	895b      	ldrh	r3, [r3, #10]
 8004684:	461a      	mov	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	fb03 f202 	mul.w	r2, r3, r2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4413      	add	r3, r2
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d904      	bls.n	80046bc <get_fat+0x20>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e0b7      	b.n	8004832 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d05a      	beq.n	8004786 <get_fat+0xea>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d07d      	beq.n	80047d0 <get_fat+0x134>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 80a2 	bne.w	800481e <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	899b      	ldrh	r3, [r3, #12]
 80046f0:	4619      	mov	r1, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f8:	4413      	add	r3, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6938      	ldr	r0, [r7, #16]
 80046fe:	f7ff ff11 	bl	8004524 <move_window>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 808d 	bne.w	8004824 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	60fa      	str	r2, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	8992      	ldrh	r2, [r2, #12]
 8004714:	fbb3 f1f2 	udiv	r1, r3, r2
 8004718:	fb02 f201 	mul.w	r2, r2, r1
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004726:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	899b      	ldrh	r3, [r3, #12]
 8004730:	4619      	mov	r1, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	fbb3 f3f1 	udiv	r3, r3, r1
 8004738:	4413      	add	r3, r2
 800473a:	4619      	mov	r1, r3
 800473c:	6938      	ldr	r0, [r7, #16]
 800473e:	f7ff fef1 	bl	8004524 <move_window>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d16f      	bne.n	8004828 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	899b      	ldrh	r3, [r3, #12]
 800474c:	461a      	mov	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	fbb3 f1f2 	udiv	r1, r3, r2
 8004754:	fb02 f201 	mul.w	r2, r2, r1
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <get_fat+0xe0>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	e002      	b.n	8004782 <get_fat+0xe6>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004782:	617b      	str	r3, [r7, #20]
			break;
 8004784:	e055      	b.n	8004832 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	899b      	ldrh	r3, [r3, #12]
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	b29b      	uxth	r3, r3
 8004792:	4619      	mov	r1, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	fbb3 f3f1 	udiv	r3, r3, r1
 800479a:	4413      	add	r3, r2
 800479c:	4619      	mov	r1, r3
 800479e:	6938      	ldr	r0, [r7, #16]
 80047a0:	f7ff fec0 	bl	8004524 <move_window>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d140      	bne.n	800482c <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	8992      	ldrh	r2, [r2, #12]
 80047b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80047bc:	fb02 f200 	mul.w	r2, r2, r0
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	440b      	add	r3, r1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fc0d 	bl	8003fe4 <ld_word>
 80047ca:	4603      	mov	r3, r0
 80047cc:	617b      	str	r3, [r7, #20]
			break;
 80047ce:	e030      	b.n	8004832 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	899b      	ldrh	r3, [r3, #12]
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4619      	mov	r1, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e4:	4413      	add	r3, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	6938      	ldr	r0, [r7, #16]
 80047ea:	f7ff fe9b 	bl	8004524 <move_window>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11d      	bne.n	8004830 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	8992      	ldrh	r2, [r2, #12]
 8004802:	fbb3 f0f2 	udiv	r0, r3, r2
 8004806:	fb02 f200 	mul.w	r2, r2, r0
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	440b      	add	r3, r1
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fbff 	bl	8004012 <ld_dword>
 8004814:	4603      	mov	r3, r0
 8004816:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800481a:	617b      	str	r3, [r7, #20]
			break;
 800481c:	e009      	b.n	8004832 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800481e:	2301      	movs	r3, #1
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e006      	b.n	8004832 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004824:	bf00      	nop
 8004826:	e004      	b.n	8004832 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004828:	bf00      	nop
 800482a:	e002      	b.n	8004832 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800482c:	bf00      	nop
 800482e:	e000      	b.n	8004832 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004830:	bf00      	nop
		}
	}

	return val;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004848:	2302      	movs	r3, #2
 800484a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b01      	cmp	r3, #1
 8004850:	f240 8106 	bls.w	8004a60 <put_fat+0x224>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	f080 8100 	bcs.w	8004a60 <put_fat+0x224>
		switch (fs->fs_type) {
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	f000 8088 	beq.w	800497a <put_fat+0x13e>
 800486a:	2b03      	cmp	r3, #3
 800486c:	f000 80b0 	beq.w	80049d0 <put_fat+0x194>
 8004870:	2b01      	cmp	r3, #1
 8004872:	f040 80f5 	bne.w	8004a60 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	899b      	ldrh	r3, [r3, #12]
 800488c:	4619      	mov	r1, r3
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	fbb3 f3f1 	udiv	r3, r3, r1
 8004894:	4413      	add	r3, r2
 8004896:	4619      	mov	r1, r3
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fe43 	bl	8004524 <move_window>
 800489e:	4603      	mov	r3, r0
 80048a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 80d4 	bne.w	8004a52 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	61ba      	str	r2, [r7, #24]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	8992      	ldrh	r2, [r2, #12]
 80048ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80048be:	fb02 f200 	mul.w	r2, r2, r0
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <put_fat+0xb2>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	b25a      	sxtb	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e001      	b.n	80048f2 <put_fat+0xb6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	899b      	ldrh	r3, [r3, #12]
 8004904:	4619      	mov	r1, r3
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	fbb3 f3f1 	udiv	r3, r3, r1
 800490c:	4413      	add	r3, r2
 800490e:	4619      	mov	r1, r3
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fe07 	bl	8004524 <move_window>
 8004916:	4603      	mov	r3, r0
 8004918:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 809a 	bne.w	8004a56 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	899b      	ldrh	r3, [r3, #12]
 800492c:	461a      	mov	r2, r3
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fbb3 f0f2 	udiv	r0, r3, r2
 8004934:	fb02 f200 	mul.w	r2, r2, r0
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	440b      	add	r3, r1
 800493c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <put_fat+0x114>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e00e      	b.n	800496e <put_fat+0x132>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b25b      	sxtb	r3, r3
 8004956:	f023 030f 	bic.w	r3, r3, #15
 800495a:	b25a      	sxtb	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	b25b      	sxtb	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b25b      	sxtb	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	70da      	strb	r2, [r3, #3]
			break;
 8004978:	e072      	b.n	8004a60 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	899b      	ldrh	r3, [r3, #12]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	4619      	mov	r1, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	fbb3 f3f1 	udiv	r3, r3, r1
 800498e:	4413      	add	r3, r2
 8004990:	4619      	mov	r1, r3
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff fdc6 	bl	8004524 <move_window>
 8004998:	4603      	mov	r3, r0
 800499a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800499c:	7ffb      	ldrb	r3, [r7, #31]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d15b      	bne.n	8004a5a <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	8992      	ldrh	r2, [r2, #12]
 80049b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80049b4:	fb02 f200 	mul.w	r2, r2, r0
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	440b      	add	r3, r1
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	b292      	uxth	r2, r2
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fb47 	bl	8004056 <st_word>
			fs->wflag = 1;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	70da      	strb	r2, [r3, #3]
			break;
 80049ce:	e047      	b.n	8004a60 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	899b      	ldrh	r3, [r3, #12]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049e4:	4413      	add	r3, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff fd9b 	bl	8004524 <move_window>
 80049ee:	4603      	mov	r3, r0
 80049f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d132      	bne.n	8004a5e <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	8992      	ldrh	r2, [r2, #12]
 8004a0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a10:	fb02 f200 	mul.w	r2, r2, r0
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	440b      	add	r3, r1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fafa 	bl	8004012 <ld_dword>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a24:	4323      	orrs	r3, r4
 8004a26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	8992      	ldrh	r2, [r2, #12]
 8004a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a3a:	fb02 f200 	mul.w	r2, r2, r0
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fb20 	bl	800408a <st_dword>
			fs->wflag = 1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	70da      	strb	r2, [r3, #3]
			break;
 8004a50:	e006      	b.n	8004a60 <put_fat+0x224>
			if (res != FR_OK) break;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <put_fat+0x224>
			if (res != FR_OK) break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <put_fat+0x224>
			if (res != FR_OK) break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <put_fat+0x224>
			if (res != FR_OK) break;
 8004a5e:	bf00      	nop
		}
	}
	return res;
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd90      	pop	{r4, r7, pc}

08004a6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b088      	sub	sp, #32
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d904      	bls.n	8004a90 <remove_chain+0x26>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d301      	bcc.n	8004a94 <remove_chain+0x2a>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e04b      	b.n	8004b2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	69b8      	ldr	r0, [r7, #24]
 8004aa2:	f7ff fecb 	bl	800483c <put_fat>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <remove_chain+0x4a>
 8004ab0:	7ffb      	ldrb	r3, [r7, #31]
 8004ab2:	e03b      	b.n	8004b2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fdf0 	bl	800469c <get_fat>
 8004abc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d031      	beq.n	8004b28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <remove_chain+0x64>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e02e      	b.n	8004b2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d101      	bne.n	8004ada <remove_chain+0x70>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e028      	b.n	8004b2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004ada:	2200      	movs	r2, #0
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	69b8      	ldr	r0, [r7, #24]
 8004ae0:	f7ff feac 	bl	800483c <put_fat>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <remove_chain+0x88>
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	e01c      	b.n	8004b2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	3b02      	subs	r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d20b      	bcs.n	8004b18 <remove_chain+0xae>
			fs->free_clst++;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	791b      	ldrb	r3, [r3, #4]
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3c6      	bcc.n	8004ab4 <remove_chain+0x4a>
 8004b26:	e000      	b.n	8004b2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004b28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <create_chain+0x2c>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d31b      	bcc.n	8004b98 <create_chain+0x64>
 8004b60:	2301      	movs	r3, #1
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e018      	b.n	8004b98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fd97 	bl	800469c <get_fat>
 8004b6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d801      	bhi.n	8004b7a <create_chain+0x46>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e070      	b.n	8004c5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d101      	bne.n	8004b86 <create_chain+0x52>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e06a      	b.n	8004c5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d201      	bcs.n	8004b94 <create_chain+0x60>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	e063      	b.n	8004c5c <create_chain+0x128>
		scl = clst;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d307      	bcc.n	8004bbc <create_chain+0x88>
				ncl = 2;
 8004bac:	2302      	movs	r3, #2
 8004bae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d901      	bls.n	8004bbc <create_chain+0x88>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e04f      	b.n	8004c5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fd6c 	bl	800469c <get_fat>
 8004bc4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00e      	beq.n	8004bea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d003      	beq.n	8004bda <create_chain+0xa6>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d101      	bne.n	8004bde <create_chain+0xaa>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	e03e      	b.n	8004c5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d1da      	bne.n	8004b9c <create_chain+0x68>
 8004be6:	2300      	movs	r3, #0
 8004be8:	e038      	b.n	8004c5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004bea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	69f9      	ldr	r1, [r7, #28]
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f7ff fe22 	bl	800483c <put_fat>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <create_chain+0xe2>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	6938      	ldr	r0, [r7, #16]
 8004c0e:	f7ff fe15 	bl	800483c <put_fat>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d116      	bne.n	8004c4a <create_chain+0x116>
		fs->last_clst = ncl;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	3b02      	subs	r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d804      	bhi.n	8004c3a <create_chain+0x106>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	1e5a      	subs	r2, r3, #1
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	711a      	strb	r2, [r3, #4]
 8004c48:	e007      	b.n	8004c5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d102      	bne.n	8004c56 <create_chain+0x122>
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	e000      	b.n	8004c58 <create_chain+0x124>
 8004c56:	2301      	movs	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c5a:	69fb      	ldr	r3, [r7, #28]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	3304      	adds	r3, #4
 8004c7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	899b      	ldrh	r3, [r3, #12]
 8004c80:	461a      	mov	r2, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	8952      	ldrh	r2, [r2, #10]
 8004c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	613a      	str	r2, [r7, #16]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <clmt_clust+0x42>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e010      	b.n	8004cc8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d307      	bcc.n	8004cbe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cbc:	e7e9      	b.n	8004c92 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004cbe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce8:	d204      	bcs.n	8004cf4 <dir_sdi+0x22>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e071      	b.n	8004ddc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <dir_sdi+0x46>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d902      	bls.n	8004d18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	8912      	ldrh	r2, [r2, #8]
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d301      	bcc.n	8004d2e <dir_sdi+0x5c>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e056      	b.n	8004ddc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	61da      	str	r2, [r3, #28]
 8004d36:	e02d      	b.n	8004d94 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	895b      	ldrh	r3, [r3, #10]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	899b      	ldrh	r3, [r3, #12]
 8004d42:	fb03 f302 	mul.w	r3, r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d48:	e019      	b.n	8004d7e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fca4 	bl	800469c <get_fat>
 8004d54:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d101      	bne.n	8004d62 <dir_sdi+0x90>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e03c      	b.n	8004ddc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d904      	bls.n	8004d72 <dir_sdi+0xa0>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d301      	bcc.n	8004d76 <dir_sdi+0xa4>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e032      	b.n	8004ddc <dir_sdi+0x10a>
			ofs -= csz;
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d2e1      	bcs.n	8004d4a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	6938      	ldr	r0, [r7, #16]
 8004d8a:	f7ff fc69 	bl	8004660 <clust2sect>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <dir_sdi+0xd4>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e01a      	b.n	8004ddc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	899b      	ldrh	r3, [r3, #12]
 8004dae:	4619      	mov	r1, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004db6:	441a      	add	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	899b      	ldrh	r3, [r3, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dce:	fb02 f200 	mul.w	r2, r2, r0
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	18ca      	adds	r2, r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	3320      	adds	r3, #32
 8004dfa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <dir_next+0x28>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0a:	d301      	bcc.n	8004e10 <dir_next+0x2c>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e0bb      	b.n	8004f88 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	899b      	ldrh	r3, [r3, #12]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e1c:	fb02 f201 	mul.w	r2, r2, r1
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 809d 	bne.w	8004f62 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	8912      	ldrh	r2, [r2, #8]
 8004e42:	4293      	cmp	r3, r2
 8004e44:	f0c0 808d 	bcc.w	8004f62 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61da      	str	r2, [r3, #28]
 8004e4e:	2304      	movs	r3, #4
 8004e50:	e09a      	b.n	8004f88 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	899b      	ldrh	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	8952      	ldrh	r2, [r2, #10]
 8004e62:	3a01      	subs	r2, #1
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d17b      	bne.n	8004f62 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff fc12 	bl	800469c <get_fat>
 8004e78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d801      	bhi.n	8004e84 <dir_next+0xa0>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e081      	b.n	8004f88 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d101      	bne.n	8004e90 <dir_next+0xac>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e07b      	b.n	8004f88 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d359      	bcc.n	8004f4e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	61da      	str	r2, [r3, #28]
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	e06e      	b.n	8004f88 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7ff fe3e 	bl	8004b34 <create_chain>
 8004eb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <dir_next+0xe0>
 8004ec0:	2307      	movs	r3, #7
 8004ec2:	e061      	b.n	8004f88 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <dir_next+0xea>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e05c      	b.n	8004f88 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d101      	bne.n	8004eda <dir_next+0xf6>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e056      	b.n	8004f88 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fade 	bl	800449c <sync_window>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <dir_next+0x106>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04e      	b.n	8004f88 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	899b      	ldrh	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	f7ff f912 	bl	8004120 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff fbac 	bl	8004660 <clust2sect>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0e:	e012      	b.n	8004f36 <dir_next+0x152>
						fs->wflag = 1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fac0 	bl	800449c <sync_window>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <dir_next+0x142>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e030      	b.n	8004f88 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	895b      	ldrh	r3, [r3, #10]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d3e6      	bcc.n	8004f10 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fb82 	bl	8004660 <clust2sect>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	899b      	ldrh	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f7a:	fb02 f200 	mul.w	r2, r2, r0
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	18ca      	adds	r2, r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fe95 	bl	8004cd2 <dir_sdi>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12b      	bne.n	800500a <dir_alloc+0x7a>
		n = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fab1 	bl	8004524 <move_window>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11d      	bne.n	8005008 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2be5      	cmp	r3, #229	; 0xe5
 8004fd4:	d004      	beq.n	8004fe0 <dir_alloc+0x50>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d102      	bne.n	8004ff4 <dir_alloc+0x64>
 8004fee:	e00c      	b.n	800500a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fef4 	bl	8004de4 <dir_next>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0d7      	beq.n	8004fb6 <dir_alloc+0x26>
 8005006:	e000      	b.n	800500a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005008:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d101      	bne.n	8005014 <dir_alloc+0x84>
 8005010:	2307      	movs	r3, #7
 8005012:	75fb      	strb	r3, [r7, #23]
	return res;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	331a      	adds	r3, #26
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe ffd9 	bl	8003fe4 <ld_word>
 8005032:	4603      	mov	r3, r0
 8005034:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d109      	bne.n	8005052 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe ffce 	bl	8003fe4 <ld_word>
 8005048:	4603      	mov	r3, r0
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	331a      	adds	r3, #26
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	b292      	uxth	r2, r2
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe ffef 	bl	8004056 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d109      	bne.n	8005094 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f103 0214 	add.w	r2, r3, #20
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	b29b      	uxth	r3, r3
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe ffe1 	bl	8004056 <st_word>
	}
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80050aa:	2100      	movs	r1, #0
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fe10 	bl	8004cd2 <dir_sdi>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <dir_find+0x24>
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	e03e      	b.n	800513e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	4619      	mov	r1, r3
 80050c6:	6938      	ldr	r0, [r7, #16]
 80050c8:	f7ff fa2c 	bl	8004524 <move_window>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d12f      	bne.n	8005136 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <dir_find+0x4e>
 80050e4:	2304      	movs	r3, #4
 80050e6:	75fb      	strb	r3, [r7, #23]
 80050e8:	e028      	b.n	800513c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	330b      	adds	r3, #11
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	330b      	adds	r3, #11
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <dir_find+0x86>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a18      	ldr	r0, [r3, #32]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3324      	adds	r3, #36	; 0x24
 8005114:	220b      	movs	r2, #11
 8005116:	4619      	mov	r1, r3
 8005118:	f7ff f81b 	bl	8004152 <mem_cmp>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fe5d 	bl	8004de4 <dir_next>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0c5      	beq.n	80050c0 <dir_find+0x24>
 8005134:	e002      	b.n	800513c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800513a:	bf00      	nop

	return res;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005154:	2101      	movs	r1, #1
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff1a 	bl	8004f90 <dir_alloc>
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11c      	bne.n	80051a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	4619      	mov	r1, r3
 800516c:	68b8      	ldr	r0, [r7, #8]
 800516e:	f7ff f9d9 	bl	8004524 <move_window>
 8005172:	4603      	mov	r3, r0
 8005174:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d111      	bne.n	80051a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	2220      	movs	r2, #32
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe ffcb 	bl	8004120 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a18      	ldr	r0, [r3, #32]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3324      	adds	r3, #36	; 0x24
 8005192:	220b      	movs	r2, #11
 8005194:	4619      	mov	r1, r3
 8005196:	f7fe ffa3 	bl	80040e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2201      	movs	r2, #1
 800519e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3324      	adds	r3, #36	; 0x24
 80051c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80051c2:	220b      	movs	r2, #11
 80051c4:	2120      	movs	r1, #32
 80051c6:	68b8      	ldr	r0, [r7, #8]
 80051c8:	f7fe ffaa 	bl	8004120 <mem_set>
	si = i = 0; ni = 8;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	2308      	movs	r3, #8
 80051d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	617a      	str	r2, [r7, #20]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d94e      	bls.n	800528a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80051ec:	7ffb      	ldrb	r3, [r7, #31]
 80051ee:	2b2f      	cmp	r3, #47	; 0x2f
 80051f0:	d006      	beq.n	8005200 <create_name+0x54>
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b5c      	cmp	r3, #92	; 0x5c
 80051f6:	d110      	bne.n	800521a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80051f8:	e002      	b.n	8005200 <create_name+0x54>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	3301      	adds	r3, #1
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b2f      	cmp	r3, #47	; 0x2f
 800520a:	d0f6      	beq.n	80051fa <create_name+0x4e>
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b5c      	cmp	r3, #92	; 0x5c
 8005216:	d0f0      	beq.n	80051fa <create_name+0x4e>
			break;
 8005218:	e038      	b.n	800528c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	2b2e      	cmp	r3, #46	; 0x2e
 800521e:	d003      	beq.n	8005228 <create_name+0x7c>
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	d30c      	bcc.n	8005242 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b0b      	cmp	r3, #11
 800522c:	d002      	beq.n	8005234 <create_name+0x88>
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b2e      	cmp	r3, #46	; 0x2e
 8005232:	d001      	beq.n	8005238 <create_name+0x8c>
 8005234:	2306      	movs	r3, #6
 8005236:	e044      	b.n	80052c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005238:	2308      	movs	r3, #8
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	230b      	movs	r3, #11
 800523e:	61bb      	str	r3, [r7, #24]
			continue;
 8005240:	e022      	b.n	8005288 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005246:	2b00      	cmp	r3, #0
 8005248:	da04      	bge.n	8005254 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800524a:	7ffb      	ldrb	r3, [r7, #31]
 800524c:	3b80      	subs	r3, #128	; 0x80
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <create_name+0x120>)
 8005250:	5cd3      	ldrb	r3, [r2, r3]
 8005252:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	4619      	mov	r1, r3
 8005258:	481d      	ldr	r0, [pc, #116]	; (80052d0 <create_name+0x124>)
 800525a:	f7fe ffa0 	bl	800419e <chk_chr>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <create_name+0xbc>
 8005264:	2306      	movs	r3, #6
 8005266:	e02c      	b.n	80052c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b60      	cmp	r3, #96	; 0x60
 800526c:	d905      	bls.n	800527a <create_name+0xce>
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b7a      	cmp	r3, #122	; 0x7a
 8005272:	d802      	bhi.n	800527a <create_name+0xce>
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	3b20      	subs	r3, #32
 8005278:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	613a      	str	r2, [r7, #16]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4413      	add	r3, r2
 8005284:	7ffa      	ldrb	r2, [r7, #31]
 8005286:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005288:	e7a6      	b.n	80051d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800528a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	441a      	add	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <create_name+0xf4>
 800529c:	2306      	movs	r3, #6
 800529e:	e010      	b.n	80052c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2be5      	cmp	r3, #229	; 0xe5
 80052a6:	d102      	bne.n	80052ae <create_name+0x102>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2205      	movs	r2, #5
 80052ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d801      	bhi.n	80052b8 <create_name+0x10c>
 80052b4:	2204      	movs	r2, #4
 80052b6:	e000      	b.n	80052ba <create_name+0x10e>
 80052b8:	2200      	movs	r2, #0
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	330b      	adds	r3, #11
 80052be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80052c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	080064d8 	.word	0x080064d8
 80052d0:	08006464 	.word	0x08006464

080052d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80052e8:	e002      	b.n	80052f0 <follow_path+0x1c>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b2f      	cmp	r3, #47	; 0x2f
 80052f6:	d0f8      	beq.n	80052ea <follow_path+0x16>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b5c      	cmp	r3, #92	; 0x5c
 80052fe:	d0f4      	beq.n	80052ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b1f      	cmp	r3, #31
 800530c:	d80a      	bhi.n	8005324 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005316:	2100      	movs	r1, #0
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fcda 	bl	8004cd2 <dir_sdi>
 800531e:	4603      	mov	r3, r0
 8005320:	75fb      	strb	r3, [r7, #23]
 8005322:	e048      	b.n	80053b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005324:	463b      	mov	r3, r7
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff3f 	bl	80051ac <create_name>
 800532e:	4603      	mov	r3, r0
 8005330:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d139      	bne.n	80053ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff feaf 	bl	800509c <dir_find>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005348:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d12c      	bne.n	80053b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d127      	bne.n	80053b0 <follow_path+0xdc>
 8005360:	2305      	movs	r3, #5
 8005362:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005364:	e024      	b.n	80053b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d121      	bne.n	80053b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	799b      	ldrb	r3, [r3, #6]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800537c:	2305      	movs	r3, #5
 800537e:	75fb      	strb	r3, [r7, #23]
 8005380:	e019      	b.n	80053b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	8992      	ldrh	r2, [r2, #12]
 8005390:	fbb3 f0f2 	udiv	r0, r3, r2
 8005394:	fb02 f200 	mul.w	r2, r2, r0
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	440b      	add	r3, r1
 800539c:	4619      	mov	r1, r3
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff fe3d 	bl	800501e <ld_clust>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053aa:	e7bb      	b.n	8005324 <follow_path+0x50>
			if (res != FR_OK) break;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <follow_path+0xe2>
				break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053b4:	bf00      	nop
			}
		}
	}

	return res;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d031      	beq.n	800543a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e002      	b.n	80053e4 <get_ldnumber+0x24>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d903      	bls.n	80053f4 <get_ldnumber+0x34>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b3a      	cmp	r3, #58	; 0x3a
 80053f2:	d1f4      	bne.n	80053de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b3a      	cmp	r3, #58	; 0x3a
 80053fa:	d11c      	bne.n	8005436 <get_ldnumber+0x76>
			tp = *path;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	3b30      	subs	r3, #48	; 0x30
 800540c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b09      	cmp	r3, #9
 8005412:	d80e      	bhi.n	8005432 <get_ldnumber+0x72>
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	429a      	cmp	r2, r3
 800541a:	d10a      	bne.n	8005432 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <get_ldnumber+0x72>
					vol = (int)i;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	3301      	adds	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e002      	b.n	800543c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800543a:	693b      	ldr	r3, [r7, #16]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
	...

08005448 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	70da      	strb	r2, [r3, #3]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff f85e 	bl	8004524 <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <check_fs+0x2a>
 800546e:	2304      	movs	r3, #4
 8005470:	e038      	b.n	80054e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3334      	adds	r3, #52	; 0x34
 8005476:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fdb2 	bl	8003fe4 <ld_word>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <check_fs+0x48>
 800548c:	2303      	movs	r3, #3
 800548e:	e029      	b.n	80054e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005496:	2be9      	cmp	r3, #233	; 0xe9
 8005498:	d009      	beq.n	80054ae <check_fs+0x66>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a0:	2beb      	cmp	r3, #235	; 0xeb
 80054a2:	d11e      	bne.n	80054e2 <check_fs+0x9a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054aa:	2b90      	cmp	r3, #144	; 0x90
 80054ac:	d119      	bne.n	80054e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3334      	adds	r3, #52	; 0x34
 80054b2:	3336      	adds	r3, #54	; 0x36
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe fdac 	bl	8004012 <ld_dword>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <check_fs+0xa4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <check_fs+0x82>
 80054c6:	2300      	movs	r3, #0
 80054c8:	e00c      	b.n	80054e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3334      	adds	r3, #52	; 0x34
 80054ce:	3352      	adds	r3, #82	; 0x52
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fd9e 	bl	8004012 <ld_dword>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <check_fs+0xa8>)
 80054da:	429a      	cmp	r2, r3
 80054dc:	d101      	bne.n	80054e2 <check_fs+0x9a>
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80054e2:	2302      	movs	r3, #2
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00544146 	.word	0x00544146
 80054f0:	33544146 	.word	0x33544146

080054f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b096      	sub	sp, #88	; 0x58
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff ff59 	bl	80053c0 <get_ldnumber>
 800550e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	da01      	bge.n	800551a <find_volume+0x26>
 8005516:	230b      	movs	r3, #11
 8005518:	e265      	b.n	80059e6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800551a:	4ab0      	ldr	r2, [pc, #704]	; (80057dc <find_volume+0x2e8>)
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <find_volume+0x3a>
 800552a:	230c      	movs	r3, #12
 800552c:	e25b      	b.n	80059e6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005532:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01a      	beq.n	800557a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fcad 	bl	8003ea8 <disk_status>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10c      	bne.n	800557a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <find_volume+0x82>
 8005566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005572:	230a      	movs	r3, #10
 8005574:	e237      	b.n	80059e6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005576:	2300      	movs	r3, #0
 8005578:	e235      	b.n	80059e6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	b2da      	uxtb	r2, r3
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fca5 	bl	8003edc <disk_initialize>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055a4:	2303      	movs	r3, #3
 80055a6:	e21e      	b.n	80059e6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <find_volume+0xca>
 80055ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80055ba:	230a      	movs	r3, #10
 80055bc:	e213      	b.n	80059e6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	7858      	ldrb	r0, [r3, #1]
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	330c      	adds	r3, #12
 80055c6:	461a      	mov	r2, r3
 80055c8:	2102      	movs	r1, #2
 80055ca:	f7fe fced 	bl	8003fa8 <disk_ioctl>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <find_volume+0xe4>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e206      	b.n	80059e6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	899b      	ldrh	r3, [r3, #12]
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d80d      	bhi.n	80055fe <find_volume+0x10a>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	899b      	ldrh	r3, [r3, #12]
 80055e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ea:	d308      	bcc.n	80055fe <find_volume+0x10a>
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	899b      	ldrh	r3, [r3, #12]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	899b      	ldrh	r3, [r3, #12]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <find_volume+0x10e>
 80055fe:	2301      	movs	r3, #1
 8005600:	e1f1      	b.n	80059e6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005606:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800560a:	f7ff ff1d 	bl	8005448 <check_fs>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005618:	2b02      	cmp	r3, #2
 800561a:	d14b      	bne.n	80056b4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800561c:	2300      	movs	r3, #0
 800561e:	643b      	str	r3, [r7, #64]	; 0x40
 8005620:	e01f      	b.n	8005662 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005630:	4413      	add	r3, r2
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	3304      	adds	r3, #4
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <find_volume+0x158>
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	3308      	adds	r3, #8
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fce5 	bl	8004012 <ld_dword>
 8005648:	4602      	mov	r2, r0
 800564a:	e000      	b.n	800564e <find_volume+0x15a>
 800564c:	2200      	movs	r2, #0
 800564e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005656:	440b      	add	r3, r1
 8005658:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	3301      	adds	r3, #1
 8005660:	643b      	str	r3, [r7, #64]	; 0x40
 8005662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005664:	2b03      	cmp	r3, #3
 8005666:	d9dc      	bls.n	8005622 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005668:	2300      	movs	r3, #0
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <find_volume+0x184>
 8005672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005674:	3b01      	subs	r3, #1
 8005676:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005680:	4413      	add	r3, r2
 8005682:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005686:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <find_volume+0x1a6>
 800568e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005692:	f7ff fed9 	bl	8005448 <check_fs>
 8005696:	4603      	mov	r3, r0
 8005698:	e000      	b.n	800569c <find_volume+0x1a8>
 800569a:	2303      	movs	r3, #3
 800569c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80056a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d905      	bls.n	80056b4 <find_volume+0x1c0>
 80056a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056aa:	3301      	adds	r3, #1
 80056ac:	643b      	str	r3, [r7, #64]	; 0x40
 80056ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d9e1      	bls.n	8005678 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d101      	bne.n	80056c0 <find_volume+0x1cc>
 80056bc:	2301      	movs	r3, #1
 80056be:	e192      	b.n	80059e6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80056c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d901      	bls.n	80056cc <find_volume+0x1d8>
 80056c8:	230d      	movs	r3, #13
 80056ca:	e18c      	b.n	80059e6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	3334      	adds	r3, #52	; 0x34
 80056d0:	330b      	adds	r3, #11
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fc86 	bl	8003fe4 <ld_word>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	899b      	ldrh	r3, [r3, #12]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <find_volume+0x1f4>
 80056e4:	230d      	movs	r3, #13
 80056e6:	e17e      	b.n	80059e6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	3334      	adds	r3, #52	; 0x34
 80056ec:	3316      	adds	r3, #22
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fc78 	bl	8003fe4 <ld_word>
 80056f4:	4603      	mov	r3, r0
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <find_volume+0x218>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	3334      	adds	r3, #52	; 0x34
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fc84 	bl	8004012 <ld_dword>
 800570a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005710:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	789b      	ldrb	r3, [r3, #2]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d005      	beq.n	8005730 <find_volume+0x23c>
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	789b      	ldrb	r3, [r3, #2]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d001      	beq.n	8005730 <find_volume+0x23c>
 800572c:	230d      	movs	r3, #13
 800572e:	e15a      	b.n	80059e6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	789b      	ldrb	r3, [r3, #2]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b29a      	uxth	r2, r3
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	895b      	ldrh	r3, [r3, #10]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <find_volume+0x270>
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	895b      	ldrh	r3, [r3, #10]
 8005756:	461a      	mov	r2, r3
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	895b      	ldrh	r3, [r3, #10]
 800575c:	3b01      	subs	r3, #1
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <find_volume+0x274>
 8005764:	230d      	movs	r3, #13
 8005766:	e13e      	b.n	80059e6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	3334      	adds	r3, #52	; 0x34
 800576c:	3311      	adds	r3, #17
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fc38 	bl	8003fe4 <ld_word>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	891b      	ldrh	r3, [r3, #8]
 8005780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005782:	8992      	ldrh	r2, [r2, #12]
 8005784:	0952      	lsrs	r2, r2, #5
 8005786:	b292      	uxth	r2, r2
 8005788:	fbb3 f1f2 	udiv	r1, r3, r2
 800578c:	fb02 f201 	mul.w	r2, r2, r1
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <find_volume+0x2a8>
 8005798:	230d      	movs	r3, #13
 800579a:	e124      	b.n	80059e6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	3334      	adds	r3, #52	; 0x34
 80057a0:	3313      	adds	r3, #19
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fc1e 	bl	8003fe4 <ld_word>
 80057a8:	4603      	mov	r3, r0
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <find_volume+0x2cc>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	3334      	adds	r3, #52	; 0x34
 80057b6:	3320      	adds	r3, #32
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fc2a 	bl	8004012 <ld_dword>
 80057be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	3334      	adds	r3, #52	; 0x34
 80057c4:	330e      	adds	r3, #14
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fc0c 	bl	8003fe4 <ld_word>
 80057cc:	4603      	mov	r3, r0
 80057ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <find_volume+0x2ec>
 80057d6:	230d      	movs	r3, #13
 80057d8:	e105      	b.n	80059e6 <find_volume+0x4f2>
 80057da:	bf00      	nop
 80057dc:	2000002c 	.word	0x2000002c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	4413      	add	r3, r2
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	8911      	ldrh	r1, [r2, #8]
 80057ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ec:	8992      	ldrh	r2, [r2, #12]
 80057ee:	0952      	lsrs	r2, r2, #5
 80057f0:	b292      	uxth	r2, r2
 80057f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80057f6:	b292      	uxth	r2, r2
 80057f8:	4413      	add	r3, r2
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80057fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	429a      	cmp	r2, r3
 8005802:	d201      	bcs.n	8005808 <find_volume+0x314>
 8005804:	230d      	movs	r3, #13
 8005806:	e0ee      	b.n	80059e6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	8952      	ldrh	r2, [r2, #10]
 8005812:	fbb3 f3f2 	udiv	r3, r3, r2
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <find_volume+0x32e>
 800581e:	230d      	movs	r3, #13
 8005820:	e0e1      	b.n	80059e6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005822:	2303      	movs	r3, #3
 8005824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800582e:	4293      	cmp	r3, r2
 8005830:	d802      	bhi.n	8005838 <find_volume+0x344>
 8005832:	2302      	movs	r3, #2
 8005834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800583e:	4293      	cmp	r3, r2
 8005840:	d802      	bhi.n	8005848 <find_volume+0x354>
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005854:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005856:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585a:	441a      	add	r2, r3
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005860:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	441a      	add	r2, r3
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800586a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800586e:	2b03      	cmp	r3, #3
 8005870:	d11e      	bne.n	80058b0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	3334      	adds	r3, #52	; 0x34
 8005876:	332a      	adds	r3, #42	; 0x2a
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fbb3 	bl	8003fe4 <ld_word>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <find_volume+0x394>
 8005884:	230d      	movs	r3, #13
 8005886:	e0ae      	b.n	80059e6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	891b      	ldrh	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <find_volume+0x3a0>
 8005890:	230d      	movs	r3, #13
 8005892:	e0a8      	b.n	80059e6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	3334      	adds	r3, #52	; 0x34
 8005898:	332c      	adds	r3, #44	; 0x2c
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fbb9 	bl	8004012 <ld_dword>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	647b      	str	r3, [r7, #68]	; 0x44
 80058ae:	e01f      	b.n	80058f0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <find_volume+0x3c8>
 80058b8:	230d      	movs	r3, #13
 80058ba:	e094      	b.n	80059e6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c2:	441a      	add	r2, r3
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80058c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d103      	bne.n	80058d8 <find_volume+0x3e4>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	e00a      	b.n	80058ee <find_volume+0x3fa>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	085a      	lsrs	r2, r3, #1
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	899b      	ldrh	r3, [r3, #12]
 80058f8:	4619      	mov	r1, r3
 80058fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fc:	440b      	add	r3, r1
 80058fe:	3b01      	subs	r3, #1
 8005900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005902:	8989      	ldrh	r1, [r1, #12]
 8005904:	fbb3 f3f1 	udiv	r3, r3, r1
 8005908:	429a      	cmp	r2, r3
 800590a:	d201      	bcs.n	8005910 <find_volume+0x41c>
 800590c:	230d      	movs	r3, #13
 800590e:	e06a      	b.n	80059e6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	615a      	str	r2, [r3, #20]
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800592a:	2b03      	cmp	r3, #3
 800592c:	d149      	bne.n	80059c2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	3334      	adds	r3, #52	; 0x34
 8005932:	3330      	adds	r3, #48	; 0x30
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fb55 	bl	8003fe4 <ld_word>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d140      	bne.n	80059c2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005942:	3301      	adds	r3, #1
 8005944:	4619      	mov	r1, r3
 8005946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005948:	f7fe fdec 	bl	8004524 <move_window>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d137      	bne.n	80059c2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2200      	movs	r2, #0
 8005956:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	3334      	adds	r3, #52	; 0x34
 800595c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fb3f 	bl	8003fe4 <ld_word>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800596e:	429a      	cmp	r2, r3
 8005970:	d127      	bne.n	80059c2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	3334      	adds	r3, #52	; 0x34
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fb4b 	bl	8004012 <ld_dword>
 800597c:	4602      	mov	r2, r0
 800597e:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <find_volume+0x4fc>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d11e      	bne.n	80059c2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	3334      	adds	r3, #52	; 0x34
 8005988:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fb40 	bl	8004012 <ld_dword>
 8005992:	4602      	mov	r2, r0
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <find_volume+0x500>)
 8005996:	429a      	cmp	r2, r3
 8005998:	d113      	bne.n	80059c2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	3334      	adds	r3, #52	; 0x34
 800599e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fb35 	bl	8004012 <ld_dword>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	3334      	adds	r3, #52	; 0x34
 80059b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fb2b 	bl	8004012 <ld_dword>
 80059bc:	4602      	mov	r2, r0
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80059c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <find_volume+0x504>)
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <find_volume+0x504>)
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <find_volume+0x504>)
 80059d8:	881a      	ldrh	r2, [r3, #0]
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80059de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059e0:	f7fe fd3a 	bl	8004458 <clear_lock>
#endif
	return FR_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3758      	adds	r7, #88	; 0x58
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	41615252 	.word	0x41615252
 80059f4:	61417272 	.word	0x61417272
 80059f8:	20000030 	.word	0x20000030

080059fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005a06:	2309      	movs	r3, #9
 8005a08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01c      	beq.n	8005a4a <validate+0x4e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <validate+0x4e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <validate+0x4e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	889a      	ldrh	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d10c      	bne.n	8005a4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fa36 	bl	8003ea8 <disk_status>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <validate+0x4e>
			res = FR_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <validate+0x5a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	e000      	b.n	8005a58 <validate+0x5c>
 8005a56:	2300      	movs	r3, #0
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	6013      	str	r3, [r2, #0]
	return res;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005a7a:	f107 0310 	add.w	r3, r7, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fc9e 	bl	80053c0 <get_ldnumber>
 8005a84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da01      	bge.n	8005a90 <f_mount+0x28>
 8005a8c:	230b      	movs	r3, #11
 8005a8e:	e02b      	b.n	8005ae8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a90:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <f_mount+0x88>)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005aa0:	69b8      	ldr	r0, [r7, #24]
 8005aa2:	f7fe fcd9 	bl	8004458 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	490d      	ldr	r1, [pc, #52]	; (8005af0 <f_mount+0x88>)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <f_mount+0x66>
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <f_mount+0x6a>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e00a      	b.n	8005ae8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ad2:	f107 010c 	add.w	r1, r7, #12
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	2200      	movs	r2, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fd09 	bl	80054f4 <find_volume>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000002c 	.word	0x2000002c

08005af4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b098      	sub	sp, #96	; 0x60
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <f_open+0x18>
 8005b08:	2309      	movs	r3, #9
 8005b0a:	e1bb      	b.n	8005e84 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b14:	79fa      	ldrb	r2, [r7, #7]
 8005b16:	f107 0110 	add.w	r1, r7, #16
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fce8 	bl	80054f4 <find_volume>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005b2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 819f 	bne.w	8005e72 <f_open+0x37e>
		dj.obj.fs = fs;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	f107 0314 	add.w	r3, r7, #20
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fbc7 	bl	80052d4 <follow_path>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11a      	bne.n	8005b8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005b54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da03      	bge.n	8005b66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005b5e:	2306      	movs	r3, #6
 8005b60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b64:	e011      	b.n	8005b8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fb28 	bl	80041d4 <chk_lock>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	f003 031c 	and.w	r3, r3, #28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d07f      	beq.n	8005c94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d017      	beq.n	8005bcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d10e      	bne.n	8005bc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ba4:	f7fe fb70 	bl	8004288 <enq_lock>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <f_open+0xc8>
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fac7 	bl	8005146 <dir_register>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	e000      	b.n	8005bbe <f_open+0xca>
 8005bbc:	2312      	movs	r3, #18
 8005bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	f043 0308 	orr.w	r3, r3, #8
 8005bc8:	71fb      	strb	r3, [r7, #7]
 8005bca:	e010      	b.n	8005bee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bcc:	7ebb      	ldrb	r3, [r7, #26]
 8005bce:	f003 0311 	and.w	r3, r3, #17
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <f_open+0xea>
					res = FR_DENIED;
 8005bd6:	2307      	movs	r3, #7
 8005bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005bdc:	e007      	b.n	8005bee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <f_open+0xfa>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d168      	bne.n	8005cc8 <f_open+0x1d4>
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d063      	beq.n	8005cc8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005c00:	f7fd ffd2 	bl	8003ba8 <get_fattime>
 8005c04:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	330e      	adds	r3, #14
 8005c0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe fa3c 	bl	800408a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	3316      	adds	r3, #22
 8005c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fa36 	bl	800408a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	330b      	adds	r3, #11
 8005c22:	2220      	movs	r2, #32
 8005c24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff f9f6 	bl	800501e <ld_clust>
 8005c32:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fa0e 	bl	800505c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	331c      	adds	r3, #28
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fa1f 	bl	800408a <st_dword>
					fs->wflag = 1;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d037      	beq.n	8005cc8 <f_open+0x1d4>
						dw = fs->winsect;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	2200      	movs	r2, #0
 8005c64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe feff 	bl	8004a6a <remove_chain>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d126      	bne.n	8005cc8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fc50 	bl	8004524 <move_window>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c8e:	3a01      	subs	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	e019      	b.n	8005cc8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d115      	bne.n	8005cc8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005c9c:	7ebb      	ldrb	r3, [r7, #26]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <f_open+0x1ba>
					res = FR_NO_FILE;
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cac:	e00c      	b.n	8005cc8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <f_open+0x1d4>
 8005cb8:	7ebb      	ldrb	r3, [r7, #26]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <f_open+0x1d4>
						res = FR_DENIED;
 8005cc2:	2307      	movs	r3, #7
 8005cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d128      	bne.n	8005d22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	f107 0314 	add.w	r3, r7, #20
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fadd 	bl	80042c8 <inc_lock>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <f_open+0x22e>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 80a3 	bne.w	8005e72 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff f973 	bl	800501e <ld_clust>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	331c      	adds	r3, #28
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe f965 	bl	8004012 <ld_dword>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	88da      	ldrh	r2, [r3, #6]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3330      	adds	r3, #48	; 0x30
 8005d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe f9cb 	bl	8004120 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d06e      	beq.n	8005e72 <f_open+0x37e>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d06a      	beq.n	8005e72 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	895b      	ldrh	r3, [r3, #10]
 8005da8:	461a      	mov	r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	899b      	ldrh	r3, [r3, #12]
 8005dae:	fb03 f302 	mul.w	r3, r3, r2
 8005db2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc0:	e016      	b.n	8005df0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fc68 	bl	800469c <get_fat>
 8005dcc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d802      	bhi.n	8005dda <f_open+0x2e6>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d102      	bne.n	8005de8 <f_open+0x2f4>
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	657b      	str	r3, [r7, #84]	; 0x54
 8005df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <f_open+0x30c>
 8005df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d8e0      	bhi.n	8005dc2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005e06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d131      	bne.n	8005e72 <f_open+0x37e>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	899b      	ldrh	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e1a:	fb02 f201 	mul.w	r2, r2, r1
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d026      	beq.n	8005e72 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fc19 	bl	8004660 <clust2sect>
 8005e2e:	6478      	str	r0, [r7, #68]	; 0x44
 8005e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <f_open+0x34a>
						res = FR_INT_ERR;
 8005e36:	2302      	movs	r3, #2
 8005e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e3c:	e019      	b.n	8005e72 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	899b      	ldrh	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	2301      	movs	r3, #1
 8005e62:	f7fe f861 	bl	8003f28 <disk_read>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <f_open+0x37e>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <f_open+0x38c>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005e80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3760      	adds	r7, #96	; 0x60
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f107 0210 	add.w	r2, r7, #16
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fda5 	bl	80059fc <validate>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <f_write+0x44>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7d5b      	ldrb	r3, [r3, #21]
 8005ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <f_write+0x4a>
 8005ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ed4:	e16a      	b.n	80061ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	7d1b      	ldrb	r3, [r3, #20]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <f_write+0x5a>
 8005ee2:	2307      	movs	r3, #7
 8005ee4:	e162      	b.n	80061ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 814c 	bcs.w	8006190 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005f00:	e146      	b.n	8006190 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	8992      	ldrh	r2, [r2, #12]
 8005f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f0e:	fb02 f201 	mul.w	r2, r2, r1
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 80f1 	bne.w	80060fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	8992      	ldrh	r2, [r2, #12]
 8005f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	8952      	ldrh	r2, [r2, #10]
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d143      	bne.n	8005fbe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11a      	bne.n	8005f80 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fdf0 	bl	8004b34 <create_chain>
 8005f54:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f56:	e013      	b.n	8005f80 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4619      	mov	r1, r3
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7fe fe7c 	bl	8004c64 <clmt_clust>
 8005f6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f6e:	e007      	b.n	8005f80 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe fddb 	bl	8004b34 <create_chain>
 8005f7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8109 	beq.w	800619a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d104      	bne.n	8005f98 <f_write+0x10c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2202      	movs	r2, #2
 8005f92:	755a      	strb	r2, [r3, #21]
 8005f94:	2302      	movs	r3, #2
 8005f96:	e109      	b.n	80061ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d104      	bne.n	8005faa <f_write+0x11e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	755a      	strb	r2, [r3, #21]
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e100      	b.n	80061ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <f_write+0x132>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	7d1b      	ldrb	r3, [r3, #20]
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da18      	bge.n	8005ffa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	7858      	ldrb	r0, [r3, #1]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f7fd ffc6 	bl	8003f68 <disk_write>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <f_write+0x160>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	755a      	strb	r2, [r3, #21]
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0df      	b.n	80061ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	7d1b      	ldrb	r3, [r3, #20]
 8005ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fe fb2c 	bl	8004660 <clust2sect>
 8006008:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <f_write+0x18e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2202      	movs	r2, #2
 8006014:	755a      	strb	r2, [r3, #21]
 8006016:	2302      	movs	r3, #2
 8006018:	e0c8      	b.n	80061ac <f_write+0x320>
			sect += csect;
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	4413      	add	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	899b      	ldrh	r3, [r3, #12]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	fbb3 f3f2 	udiv	r3, r3, r2
 800602e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d043      	beq.n	80060be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	4413      	add	r3, r2
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	8952      	ldrh	r2, [r2, #10]
 8006040:	4293      	cmp	r3, r2
 8006042:	d905      	bls.n	8006050 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	895b      	ldrh	r3, [r3, #10]
 8006048:	461a      	mov	r2, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	7858      	ldrb	r0, [r3, #1]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	f7fd ff85 	bl	8003f68 <disk_write>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <f_write+0x1e2>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	755a      	strb	r2, [r3, #21]
 800606a:	2301      	movs	r3, #1
 800606c:	e09e      	b.n	80061ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	429a      	cmp	r2, r3
 800607a:	d918      	bls.n	80060ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	8992      	ldrh	r2, [r2, #12]
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	18d1      	adds	r1, r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	899b      	ldrh	r3, [r3, #12]
 800609a:	461a      	mov	r2, r3
 800609c:	f7fe f820 	bl	80040e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7d1b      	ldrb	r3, [r3, #20]
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	899b      	ldrh	r3, [r3, #12]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80060bc:	e04b      	b.n	8006156 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d016      	beq.n	80060f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d210      	bcs.n	80060f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	7858      	ldrb	r0, [r3, #1]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060de:	2301      	movs	r3, #1
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	f7fd ff21 	bl	8003f28 <disk_read>
 80060e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	755a      	strb	r2, [r3, #21]
 80060f2:	2301      	movs	r3, #1
 80060f4:	e05a      	b.n	80061ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	899b      	ldrh	r3, [r3, #12]
 8006100:	4618      	mov	r0, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	8992      	ldrh	r2, [r2, #12]
 800610a:	fbb3 f1f2 	udiv	r1, r3, r2
 800610e:	fb02 f201 	mul.w	r2, r2, r1
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	1ac3      	subs	r3, r0, r3
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d901      	bls.n	8006124 <f_write+0x298>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	8992      	ldrh	r2, [r2, #12]
 8006132:	fbb3 f0f2 	udiv	r0, r3, r2
 8006136:	fb02 f200 	mul.w	r2, r2, r0
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	440b      	add	r3, r1
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd ffcc 	bl	80040e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	7d1b      	ldrb	r3, [r3, #20]
 800614c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	4413      	add	r3, r2
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	429a      	cmp	r2, r3
 8006174:	bf38      	it	cc
 8006176:	461a      	movcc	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	441a      	add	r2, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f47f aeb5 	bne.w	8005f02 <f_write+0x76>
 8006198:	e000      	b.n	800619c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800619a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	7d1b      	ldrb	r3, [r3, #20]
 80061a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3730      	adds	r7, #48	; 0x30
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f107 0208 	add.w	r2, r7, #8
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fc19 	bl	80059fc <validate>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d168      	bne.n	80062a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7d1b      	ldrb	r3, [r3, #20]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d062      	beq.n	80062a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7d1b      	ldrb	r3, [r3, #20]
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da15      	bge.n	8006216 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	7858      	ldrb	r0, [r3, #1]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	2301      	movs	r3, #1
 80061fa:	f7fd feb5 	bl	8003f68 <disk_write>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <f_sync+0x54>
 8006204:	2301      	movs	r3, #1
 8006206:	e04f      	b.n	80062a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	7d1b      	ldrb	r3, [r3, #20]
 800620c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006210:	b2da      	uxtb	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006216:	f7fd fcc7 	bl	8003ba8 <get_fattime>
 800621a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f7fe f97d 	bl	8004524 <move_window>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d138      	bne.n	80062a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	330b      	adds	r3, #11
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	330b      	adds	r3, #11
 8006244:	f042 0220 	orr.w	r2, r2, #32
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	461a      	mov	r2, r3
 8006256:	68f9      	ldr	r1, [r7, #12]
 8006258:	f7fe ff00 	bl	800505c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f103 021c 	add.w	r2, r3, #28
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fd ff0e 	bl	800408a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3316      	adds	r3, #22
 8006272:	6939      	ldr	r1, [r7, #16]
 8006274:	4618      	mov	r0, r3
 8006276:	f7fd ff08 	bl	800408a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3312      	adds	r3, #18
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f7fd fee8 	bl	8004056 <st_word>
					fs->wflag = 1;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2201      	movs	r2, #1
 800628a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe f976 	bl	8004580 <sync_fs>
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7d1b      	ldrb	r3, [r3, #20]
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff7b 	bl	80061b4 <f_sync>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d118      	bne.n	80062fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f107 0208 	add.w	r2, r7, #8
 80062ce:	4611      	mov	r1, r2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fb93 	bl	80059fc <validate>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10c      	bne.n	80062fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe f87d 	bl	80043e4 <dec_lock>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 800631c:	7a5b      	ldrb	r3, [r3, #9]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d131      	bne.n	8006388 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 8006326:	7a5b      	ldrb	r3, [r3, #9]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006332:	4b18      	ldr	r3, [pc, #96]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 8006334:	7a5b      	ldrb	r3, [r3, #9]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	4a16      	ldr	r2, [pc, #88]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 8006344:	7a5b      	ldrb	r3, [r3, #9]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 800634c:	4413      	add	r3, r2
 800634e:	79fa      	ldrb	r2, [r7, #7]
 8006350:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 8006354:	7a5b      	ldrb	r3, [r3, #9]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	b2d1      	uxtb	r1, r2
 800635c:	4a0d      	ldr	r2, [pc, #52]	; (8006394 <FATFS_LinkDriverEx+0x90>)
 800635e:	7251      	strb	r1, [r2, #9]
 8006360:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006362:	7dbb      	ldrb	r3, [r7, #22]
 8006364:	3330      	adds	r3, #48	; 0x30
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	3301      	adds	r3, #1
 8006370:	223a      	movs	r2, #58	; 0x3a
 8006372:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	3302      	adds	r3, #2
 8006378:	222f      	movs	r2, #47	; 0x2f
 800637a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3303      	adds	r3, #3
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	20000054 	.word	0x20000054

08006398 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80063a2:	2200      	movs	r2, #0
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff ffac 	bl	8006304 <FATFS_LinkDriverEx>
 80063ac:	4603      	mov	r3, r0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <__libc_init_array>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	2500      	movs	r5, #0
 80063bc:	4e0c      	ldr	r6, [pc, #48]	; (80063f0 <__libc_init_array+0x38>)
 80063be:	4c0d      	ldr	r4, [pc, #52]	; (80063f4 <__libc_init_array+0x3c>)
 80063c0:	1ba4      	subs	r4, r4, r6
 80063c2:	10a4      	asrs	r4, r4, #2
 80063c4:	42a5      	cmp	r5, r4
 80063c6:	d109      	bne.n	80063dc <__libc_init_array+0x24>
 80063c8:	f000 f822 	bl	8006410 <_init>
 80063cc:	2500      	movs	r5, #0
 80063ce:	4e0a      	ldr	r6, [pc, #40]	; (80063f8 <__libc_init_array+0x40>)
 80063d0:	4c0a      	ldr	r4, [pc, #40]	; (80063fc <__libc_init_array+0x44>)
 80063d2:	1ba4      	subs	r4, r4, r6
 80063d4:	10a4      	asrs	r4, r4, #2
 80063d6:	42a5      	cmp	r5, r4
 80063d8:	d105      	bne.n	80063e6 <__libc_init_array+0x2e>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063e0:	4798      	blx	r3
 80063e2:	3501      	adds	r5, #1
 80063e4:	e7ee      	b.n	80063c4 <__libc_init_array+0xc>
 80063e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ea:	4798      	blx	r3
 80063ec:	3501      	adds	r5, #1
 80063ee:	e7f2      	b.n	80063d6 <__libc_init_array+0x1e>
 80063f0:	08006558 	.word	0x08006558
 80063f4:	08006558 	.word	0x08006558
 80063f8:	08006558 	.word	0x08006558
 80063fc:	0800655c 	.word	0x0800655c

08006400 <memset>:
 8006400:	4603      	mov	r3, r0
 8006402:	4402      	add	r2, r0
 8006404:	4293      	cmp	r3, r2
 8006406:	d100      	bne.n	800640a <memset+0xa>
 8006408:	4770      	bx	lr
 800640a:	f803 1b01 	strb.w	r1, [r3], #1
 800640e:	e7f9      	b.n	8006404 <memset+0x4>

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
